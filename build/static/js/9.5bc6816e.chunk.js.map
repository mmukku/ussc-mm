{"version":3,"sources":["../static/js/9.5bc6816e.chunk.js","pages/appendixbpart.js","../node_modules/lodash/lodash.js","../node_modules/webpack/buildin/module.js","data/appendix-b.json"],"names":["webpackJsonp","265","module","__webpack_exports__","__webpack_require__","Object","defineProperty","value","__WEBPACK_IMPORTED_MODULE_0_react__","__WEBPACK_IMPORTED_MODULE_0_react___default","n","__WEBPACK_IMPORTED_MODULE_1__data_appendix_b__","__WEBPACK_IMPORTED_MODULE_1__data_appendix_b___default","__WEBPACK_IMPORTED_MODULE_2_lodash__","__WEBPACK_IMPORTED_MODULE_2_lodash___default","props","content","a","find","b","id","match","params","part","createElement","href","dangerouslySetInnerHTML","__html","267","exports","global","__WEBPACK_AMD_DEFINE_RESULT__","addMapEntry","map","pair","set","addSetEntry","add","apply","func","thisArg","args","length","call","arrayAggregator","array","setter","iteratee","accumulator","index","arrayEach","arrayEachRight","arrayEvery","predicate","arrayFilter","resIndex","result","arrayIncludes","baseIndexOf","arrayIncludesWith","comparator","arrayMap","Array","arrayPush","values","offset","arrayReduce","initAccum","arrayReduceRight","arraySome","asciiToArray","string","split","asciiWords","reAsciiWord","baseFindKey","collection","eachFunc","key","baseFindIndex","fromIndex","fromRight","strictIndexOf","baseIsNaN","baseIndexOfWith","baseMean","baseSum","NAN","baseProperty","object","undefined","basePropertyOf","baseReduce","baseSortBy","comparer","sort","current","baseTimes","baseToPairs","baseUnary","baseValues","cacheHas","cache","has","charsStartIndex","strSymbols","chrSymbols","charsEndIndex","countHolders","placeholder","escapeStringChar","chr","stringEscapes","getValue","hasUnicode","reHasUnicode","test","hasUnicodeWord","reHasUnicodeWord","iteratorToArray","iterator","data","next","done","push","mapToArray","size","forEach","overArg","transform","arg","replaceHolders","PLACEHOLDER","setToArray","setToPairs","strictLastIndexOf","stringSize","unicodeSize","asciiSize","stringToArray","unicodeToArray","reUnicode","lastIndex","unicodeWords","reUnicodeWord","LARGE_ARRAY_SIZE","CORE_ERROR_TEXT","FUNC_ERROR_TEXT","HASH_UNDEFINED","MAX_MEMOIZE_SIZE","CLONE_DEEP_FLAG","CLONE_FLAT_FLAG","CLONE_SYMBOLS_FLAG","COMPARE_PARTIAL_FLAG","COMPARE_UNORDERED_FLAG","WRAP_BIND_FLAG","WRAP_BIND_KEY_FLAG","WRAP_CURRY_BOUND_FLAG","WRAP_CURRY_FLAG","WRAP_CURRY_RIGHT_FLAG","WRAP_PARTIAL_FLAG","WRAP_PARTIAL_RIGHT_FLAG","WRAP_ARY_FLAG","WRAP_REARG_FLAG","WRAP_FLIP_FLAG","DEFAULT_TRUNC_LENGTH","DEFAULT_TRUNC_OMISSION","HOT_COUNT","HOT_SPAN","LAZY_FILTER_FLAG","LAZY_MAP_FLAG","INFINITY","MAX_SAFE_INTEGER","MAX_INTEGER","MAX_ARRAY_LENGTH","MAX_ARRAY_INDEX","HALF_MAX_ARRAY_LENGTH","wrapFlags","argsTag","arrayTag","asyncTag","boolTag","dateTag","domExcTag","errorTag","funcTag","genTag","mapTag","numberTag","nullTag","objectTag","proxyTag","regexpTag","setTag","stringTag","symbolTag","undefinedTag","weakMapTag","weakSetTag","arrayBufferTag","dataViewTag","float32Tag","float64Tag","int8Tag","int16Tag","int32Tag","uint8Tag","uint8ClampedTag","uint16Tag","uint32Tag","reEmptyStringLeading","reEmptyStringMiddle","reEmptyStringTrailing","reEscapedHtml","reUnescapedHtml","reHasEscapedHtml","RegExp","source","reHasUnescapedHtml","reEscape","reEvaluate","reInterpolate","reIsDeepProp","reIsPlainProp","reLeadingDot","rePropName","reRegExpChar","reHasRegExpChar","reTrim","reTrimStart","reTrimEnd","reWrapComment","reWrapDetails","reSplitDetails","reEscapeChar","reEsTemplate","reFlags","reIsBadHex","reIsBinary","reIsHostCtor","reIsOctal","reIsUint","reLatin","reNoMatch","reUnescapedString","rsComboRange","rsComboMarksRange","rsBreakRange","rsMathOpRange","rsBreak","rsCombo","rsLower","rsMisc","rsFitz","rsRegional","rsSurrPair","rsUpper","rsMiscLower","reOptMod","rsModifier","rsOptJoin","join","rsSeq","rsEmoji","rsSymbol","reApos","reComboMark","rsMiscUpper","contextProps","templateCounter","typedArrayTags","cloneableTags","deburredLetters","À","Á","Â","Ã","Ä","Å","à","á","â","ã","ä","å","Ç","ç","Ð","ð","È","É","Ê","Ë","è","é","ê","ë","Ì","Í","Î","Ï","ì","í","î","ï","Ñ","ñ","Ò","Ó","Ô","Õ","Ö","Ø","ò","ó","ô","õ","ö","ø","Ù","Ú","Û","Ü","ù","ú","û","ü","Ý","ý","ÿ","Æ","æ","Þ","þ","ß","Ā","Ă","Ą","ā","ă","ą","Ć","Ĉ","Ċ","Č","ć","ĉ","ċ","č","Ď","Đ","ď","đ","Ē","Ĕ","Ė","Ę","Ě","ē","ĕ","ė","ę","ě","Ĝ","Ğ","Ġ","Ģ","ĝ","ğ","ġ","ģ","Ĥ","Ħ","ĥ","ħ","Ĩ","Ī","Ĭ","Į","İ","ĩ","ī","ĭ","į","ı","Ĵ","ĵ","Ķ","ķ","ĸ","Ĺ","Ļ","Ľ","Ŀ","Ł","ĺ","ļ","ľ","ŀ","ł","Ń","Ņ","Ň","Ŋ","ń","ņ","ň","ŋ","Ō","Ŏ","Ő","ō","ŏ","ő","Ŕ","Ŗ","Ř","ŕ","ŗ","ř","Ś","Ŝ","Ş","Š","ś","ŝ","ş","š","Ţ","Ť","Ŧ","ţ","ť","ŧ","Ũ","Ū","Ŭ","Ů","Ű","Ų","ũ","ū","ŭ","ů","ű","ų","Ŵ","ŵ","Ŷ","ŷ","Ÿ","Ź","Ż","Ž","ź","ż","ž","Ĳ","ĳ","Œ","œ","ŉ","ſ","htmlEscapes","&","<",">","\"","'","htmlUnescapes","&amp;","&lt;","&gt;","&quot;","&#39;","\\","\n","\r"," "," ","freeParseFloat","parseFloat","freeParseInt","parseInt","freeGlobal","freeSelf","self","root","Function","freeExports","nodeType","freeModule","moduleExports","freeProcess","process","nodeUtil","binding","e","nodeIsArrayBuffer","isArrayBuffer","nodeIsDate","isDate","nodeIsMap","isMap","nodeIsRegExp","isRegExp","nodeIsSet","isSet","nodeIsTypedArray","isTypedArray","deburrLetter","escapeHtmlChar","unescapeHtmlChar","_","runInContext","context","lodash","isObjectLike","isArray","LazyWrapper","LodashWrapper","hasOwnProperty","wrapperClone","baseLodash","chainAll","this","__wrapped__","__actions__","__chain__","__index__","__values__","__dir__","__filtered__","__iteratees__","__takeCount__","__views__","lazyClone","copyArray","lazyReverse","clone","lazyValue","dir","isArr","isRight","arrLength","view","getView","start","end","iteratees","iterLength","takeCount","nativeMin","baseWrapperValue","outer","iterIndex","type","computed","Hash","entries","clear","entry","hashClear","__data__","nativeCreate","hashDelete","hashGet","hashHas","hashSet","ListCache","listCacheClear","listCacheDelete","assocIndexOf","pop","splice","listCacheGet","listCacheHas","listCacheSet","MapCache","mapCacheClear","hash","Map","mapCacheDelete","getMapData","mapCacheGet","get","mapCacheHas","mapCacheSet","SetCache","setCacheAdd","setCacheHas","Stack","stackClear","stackDelete","stackGet","stackHas","stackSet","pairs","arrayLikeKeys","inherited","isArg","isArguments","isBuff","isBuffer","isType","skipIndexes","String","isIndex","arraySample","baseRandom","arraySampleSize","shuffleSelf","baseClamp","arrayShuffle","assignMergeValue","eq","baseAssignValue","assignValue","objValue","baseAggregator","baseEach","baseAssign","copyObject","keys","baseAssignIn","keysIn","configurable","enumerable","writable","baseAt","paths","skip","number","lower","upper","baseClone","bitmask","customizer","stack","isDeep","isFlat","isFull","isObject","initCloneArray","tag","getTag","isFunc","cloneBuffer","initCloneObject","copySymbolsIn","copySymbols","initCloneByTag","stacked","keysFunc","getAllKeysIn","getAllKeys","subValue","baseConforms","baseConformsTo","baseDelay","wait","TypeError","setTimeout","baseDifference","includes","isCommon","valuesLength","valuesIndex","baseEvery","baseExtremum","isSymbol","baseFill","toInteger","toLength","baseFilter","baseFlatten","depth","isStrict","isFlattenable","baseForOwn","baseFor","baseForOwnRight","baseForRight","baseFunctions","isFunction","baseGet","path","castPath","toKey","baseGetAllKeys","symbolsFunc","baseGetTag","symToStringTag","getRawTag","objectToString","baseGt","other","baseHas","baseHasIn","baseInRange","nativeMax","baseIntersection","arrays","othLength","othIndex","caches","maxLength","Infinity","seen","baseInverter","baseInvoke","parent","last","baseIsArguments","baseIsArrayBuffer","baseIsDate","baseIsEqual","baseIsEqualDeep","equalFunc","objIsArr","othIsArr","objTag","othTag","objIsObj","othIsObj","isSameTag","equalArrays","equalByTag","objIsWrapped","othIsWrapped","objUnwrapped","othUnwrapped","equalObjects","baseIsMap","baseIsMatch","matchData","noCustomizer","srcValue","baseIsNative","isMasked","reIsNative","toSource","baseIsRegExp","baseIsSet","baseIsTypedArray","isLength","baseIteratee","identity","baseMatchesProperty","baseMatches","property","baseKeys","isPrototype","nativeKeys","baseKeysIn","nativeKeysIn","isProto","baseLt","baseMap","isArrayLike","getMatchData","matchesStrictComparable","isKey","isStrictComparable","hasIn","baseMerge","srcIndex","baseMergeDeep","newValue","mergeFunc","isTyped","isArrayLikeObject","cloneTypedArray","isPlainObject","toPlainObject","baseNth","baseOrderBy","orders","getIteratee","criteria","compareMultiple","basePick","basePickBy","baseSet","basePropertyDeep","basePullAll","indexOf","basePullAt","indexes","previous","baseUnset","nativeFloor","nativeRandom","baseRange","step","nativeCeil","baseRepeat","baseRest","setToString","overRest","baseSample","baseSampleSize","nested","baseShuffle","baseSlice","baseSome","baseSortedIndex","retHighest","low","high","mid","baseSortedIndexBy","valIsNaN","valIsNull","valIsSymbol","valIsUndefined","othIsDefined","othIsNull","othIsReflexive","othIsSymbol","setLow","baseSortedUniq","baseToNumber","baseToString","symbolToString","baseUniq","createSet","seenIndex","baseUpdate","updater","baseWhile","isDrop","actions","action","baseXor","baseZipObject","assignFunc","valsLength","castArrayLikeObject","castFunction","stringToPath","toString","castSlice","buffer","slice","allocUnsafe","constructor","copy","cloneArrayBuffer","arrayBuffer","byteLength","Uint8Array","cloneDataView","dataView","byteOffset","cloneMap","cloneFunc","cloneRegExp","regexp","exec","cloneSet","cloneSymbol","symbol","symbolValueOf","typedArray","compareAscending","valIsDefined","valIsReflexive","objCriteria","othCriteria","ordersLength","composeArgs","partials","holders","isCurried","argsIndex","argsLength","holdersLength","leftIndex","leftLength","rangeLength","isUncurried","composeArgsRight","holdersIndex","rightIndex","rightLength","isNew","getSymbols","getSymbolsIn","createAggregator","initializer","createAssigner","assigner","sources","guard","isIterateeCall","createBaseEach","iterable","createBaseFor","createBind","wrapper","Ctor","isBind","arguments","createCtor","createCaseFirst","methodName","charAt","trailing","createCompounder","callback","words","deburr","replace","thisBinding","baseCreate","prototype","createCurry","arity","getHolder","createRecurry","createHybrid","createFind","findIndexFunc","createFlow","flatRest","funcs","prereq","thru","reverse","getFuncName","funcName","getData","isLaziable","plant","partialsRight","holdersRight","argPos","ary","holdersCount","newHolders","fn","isBindKey","reorder","isFlip","isAry","createInverter","toIteratee","createMathOperation","operator","defaultValue","createOver","arrayFunc","createPadding","chars","charsLength","createPartial","createRange","toFinite","createRelationalOperation","toNumber","wrapFunc","isCurry","newHoldersRight","newPartials","newPartialsRight","newData","setData","setWrapToString","createRound","Math","precision","createToPairs","createWrap","mergeData","baseSetData","customDefaultsAssignIn","objectProto","customDefaultsMerge","customOmitClone","isPartial","arrValue","othValue","compared","name","message","convert","objProps","objLength","skipCtor","objCtor","othCtor","flatten","realNames","otherFunc","isKeyable","getNative","isOwn","unmasked","nativeObjectToString","transforms","getWrapDetails","hasPath","hasFunc","input","getPrototype","insertWrapDetails","details","spreadableSymbol","maskSrcKey","srcBitmask","newBitmask","isCombo","otherArgs","oldArray","reference","updateWrapDetails","shortOut","count","lastCalled","stamp","nativeNow","remaining","rand","funcToString","chunk","compact","concat","drop","dropRight","dropRightWhile","dropWhile","fill","findIndex","findLastIndex","flattenDeep","flattenDepth","fromPairs","head","initial","separator","nativeJoin","lastIndexOf","nth","pullAll","pullAllBy","pullAllWith","remove","nativeReverse","sortedIndex","sortedIndexBy","sortedIndexOf","sortedLastIndex","sortedLastIndexBy","sortedLastIndexOf","sortedUniq","sortedUniqBy","tail","take","takeRight","takeRightWhile","takeWhile","uniq","uniqBy","uniqWith","unzip","group","unzipWith","zipObject","zipObjectDeep","chain","tap","interceptor","wrapperChain","wrapperCommit","wrapperNext","toArray","wrapperToIterator","wrapperPlant","wrapperReverse","wrapped","wrapperValue","every","filter","flatMap","flatMapDeep","flatMapDepth","forEachRight","baseEachRight","isString","orderBy","reduce","reduceRight","reject","negate","sample","sampleSize","shuffle","some","after","before","curry","curryRight","debounce","options","invokeFunc","time","lastArgs","lastThis","lastInvokeTime","leadingEdge","timerId","timerExpired","leading","remainingWait","timeSinceLastCall","lastCallTime","timeSinceLastInvoke","maxing","maxWait","shouldInvoke","now","trailingEdge","cancel","clearTimeout","flush","debounced","isInvoking","flip","memoize","resolver","memoized","Cache","once","rest","spread","throttle","unary","wrap","partial","castArray","cloneWith","cloneDeep","cloneDeepWith","conformsTo","isBoolean","isElement","isEmpty","isEqual","isEqualWith","isError","isFinite","nativeIsFinite","isInteger","isMatch","isMatchWith","isNaN","isNumber","isNative","isMaskable","Error","isNull","isNil","proto","objectCtorString","isSafeInteger","isUndefined","isWeakMap","isWeakSet","symIterator","remainder","valueOf","isBinary","toSafeInteger","create","properties","findKey","findLastKey","forIn","forInRight","forOwn","forOwnRight","functions","functionsIn","mapKeys","mapValues","omitBy","pickBy","prop","setWith","isArrLike","unset","update","updateWith","valuesIn","clamp","inRange","random","floating","temp","capitalize","upperFirst","toLowerCase","endsWith","target","position","escape","escapeRegExp","pad","strLength","padEnd","padStart","radix","nativeParseInt","repeat","limit","startsWith","template","settings","templateSettings","assignInWith","isEscaping","isEvaluating","imports","importsKeys","importsValues","interpolate","reDelimiters","evaluate","sourceURL","escapeValue","interpolateValue","esTemplateValue","evaluateValue","variable","attempt","toLower","toUpper","toUpperCase","trim","trimEnd","trimStart","truncate","omission","search","substring","newEnd","unescape","pattern","cond","conforms","constant","defaultTo","matches","matchesProperty","mixin","methodNames","noConflict","oldDash","noop","nthArg","propertyOf","stubArray","stubFalse","stubObject","stubString","stubTrue","times","toPath","uniqueId","prefix","idCounter","max","maxBy","mean","meanBy","min","minBy","sum","sumBy","defaults","pick","Date","arrayProto","funcProto","coreJsData","uid","IE_PROTO","Buffer","Symbol","getPrototypeOf","objectCreate","propertyIsEnumerable","isConcatSpreadable","toStringTag","ctxClearTimeout","ctxNow","ctxSetTimeout","ceil","floor","nativeGetSymbols","getOwnPropertySymbols","nativeIsBuffer","DataView","Promise","Set","WeakMap","metaMap","dataViewCtorString","mapCtorString","promiseCtorString","setCtorString","weakMapCtorString","symbolProto","baseSetToString","castRest","ArrayBuffer","resolve","ctorString","quote","difference","differenceBy","differenceWith","intersection","mapped","intersectionBy","intersectionWith","pull","pullAt","union","unionBy","unionWith","without","xor","xorBy","xorWith","zip","zipWith","wrapperAt","countBy","findLast","groupBy","invokeMap","keyBy","partition","sortBy","bind","bindKey","defer","delay","overArgs","funcsLength","partialRight","rearg","gt","gte","lt","lte","assign","assignIn","assignWith","at","defaultsDeep","mergeWith","invert","invertBy","invoke","merge","omit","toPairs","toPairsIn","camelCase","word","kebabCase","lowerCase","lowerFirst","snakeCase","startCase","upperCase","bindAll","flow","flowRight","method","methodOf","over","overEvery","overSome","range","rangeRight","augend","addend","divide","dividend","divisor","multiply","multiplier","multiplicand","round","subtract","minuend","subtrahend","entriesIn","extend","extendWith","each","eachRight","first","VERSION","isFilter","takeName","dropName","checkIteratee","isTaker","lodashFunc","retUnwrapped","isLazy","useLazy","isHybrid","isUnwrapped","onlyLazy","chainName","commit","toJSON","268","webpackPolyfill","deprecate","children","l","i","337"],"mappings":"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,IACAC,OAAA,IAAAC,OAAA,IAAAC,OAAA,IACAC,OAAA,KAAAC,OAAA,KACAC,OAAA,KAAAC,OAAA,KACAC,OAAA,KAEAC,SAAA,IAAAC,SAAA,IAAAC,SAAA,IACAC,SAAA,IAAAC,SAAA,IAAAC,SAAA,IACAC,SAAA,IAAAC,SAAA,IAAAC,SAAA,IAAAC,SAAA,IACAC,SAAA,IAAAC,SAAA,IAAAC,SAAA,IAAAC,SAAA,IACAC,SAAA,IAAAC,SAAA,IAAAC,SAAA,IAAAC,SAAA,IACAC,SAAA,IAAAC,SAAA,IAAAC,SAAA,IAAAC,SAAA,IAAAC,SAAA,IACAC,SAAA,IAAAC,SAAA,IAAAC,SAAA,IAAAC,SAAA,IAAAC,SAAA,IACAC,SAAA,IAAAC,SAAA,IAAAC,SAAA,IAAAC,SAAA,IACAC,SAAA,IAAAC,SAAA,IAAAC,SAAA,IAAAC,SAAA,IACAC,SAAA,IAAAC,SAAA,IAAAC,SAAA,IAAAC,SAAA,IACAC,SAAA,IAAAC,SAAA,IAAAC,SAAA,IAAAC,SAAA,IAAAC,SAAA,IACAC,SAAA,IAAAC,SAAA,IAAAC,SAAA,IAAAC,SAAA,IAAAC,SAAA,IACAC,SAAA,IAAAC,SAAA,IACAC,SAAA,IAAAC,SAAA,IAAAC,SAAA,IACAC,SAAA,IAAAC,SAAA,IAAAC,SAAA,IAAAC,SAAA,IAAAC,SAAA,IACAC,SAAA,IAAAC,SAAA,IAAAC,SAAA,IAAAC,SAAA,IAAAC,SAAA,IACAC,SAAA,IAAAC,SAAA,IAAAC,SAAA,IAAAC,SAAA,IACAC,SAAA,IAAAC,SAAA,IAAAC,SAAA,IAAAC,SAAA,IACAC,SAAA,IAAAC,SAAA,IAAAC,SAAA,IACAC,SAAA,IAAAC,SAAA,IAAAC,SAAA,IACAC,SAAA,IAAAC,SAAA,IAAAC,SAAA,IACAC,SAAA,IAAAC,SAAA,IAAAC,SAAA,IACAC,SAAA,IAAAC,SAAA,IAAAC,SAAA,IAAAC,SAAA,IACAC,SAAA,IAAAC,SAAA,IAAAC,SAAA,IAAAC,SAAA,IACAC,SAAA,IAAAC,SAAA,IAAAC,SAAA,IACAC,SAAA,IAAAC,SAAA,IAAAC,SAAA,IACAC,SAAA,IAAAC,SAAA,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","file":"static/js/9.5bc6816e.chunk.js","sourcesContent":["webpackJsonp([9],{\n\n/***/ 265:\n/***/ (function(module, __webpack_exports__, __webpack_require__) {\n\n\"use strict\";\nObject.defineProperty(__webpack_exports__, \"__esModule\", { value: true });\n/* harmony import */ var __WEBPACK_IMPORTED_MODULE_0_react__ = __webpack_require__(5);\n/* harmony import */ var __WEBPACK_IMPORTED_MODULE_0_react___default = __webpack_require__.n(__WEBPACK_IMPORTED_MODULE_0_react__);\n/* harmony import */ var __WEBPACK_IMPORTED_MODULE_1__data_appendix_b__ = __webpack_require__(337);\n/* harmony import */ var __WEBPACK_IMPORTED_MODULE_1__data_appendix_b___default = __webpack_require__.n(__WEBPACK_IMPORTED_MODULE_1__data_appendix_b__);\n/* harmony import */ var __WEBPACK_IMPORTED_MODULE_2_lodash__ = __webpack_require__(267);\n/* harmony import */ var __WEBPACK_IMPORTED_MODULE_2_lodash___default = __webpack_require__.n(__WEBPACK_IMPORTED_MODULE_2_lodash__);\n/* harmony default export */ __webpack_exports__[\"default\"] = (function(props){var content=__WEBPACK_IMPORTED_MODULE_2_lodash___default.a.find(__WEBPACK_IMPORTED_MODULE_1__data_appendix_b___default.a,function(b){return b.id===props.match.params.part;}).content;return __WEBPACK_IMPORTED_MODULE_0_react___default.a.createElement('div',null,__WEBPACK_IMPORTED_MODULE_0_react___default.a.createElement('a',{href:'/ab'},'AppendixB'),__WEBPACK_IMPORTED_MODULE_0_react___default.a.createElement('p',{dangerouslySetInnerHTML:{__html:content}}));});\n\n/***/ }),\n\n/***/ 267:\n/***/ (function(module, exports, __webpack_require__) {\n\n/* WEBPACK VAR INJECTION */(function(global, module) {var __WEBPACK_AMD_DEFINE_RESULT__;/**\n * @license\n * Lodash <https://lodash.com/>\n * Copyright JS Foundation and other contributors <https://js.foundation/>\n * Released under MIT license <https://lodash.com/license>\n * Based on Underscore.js 1.8.3 <http://underscorejs.org/LICENSE>\n * Copyright Jeremy Ashkenas, DocumentCloud and Investigative Reporters & Editors\n */\n;(function() {\n\n  /** Used as a safe reference for `undefined` in pre-ES5 environments. */\n  var undefined;\n\n  /** Used as the semantic version number. */\n  var VERSION = '4.17.4';\n\n  /** Used as the size to enable large array optimizations. */\n  var LARGE_ARRAY_SIZE = 200;\n\n  /** Error message constants. */\n  var CORE_ERROR_TEXT = 'Unsupported core-js use. Try https://npms.io/search?q=ponyfill.',\n      FUNC_ERROR_TEXT = 'Expected a function';\n\n  /** Used to stand-in for `undefined` hash values. */\n  var HASH_UNDEFINED = '__lodash_hash_undefined__';\n\n  /** Used as the maximum memoize cache size. */\n  var MAX_MEMOIZE_SIZE = 500;\n\n  /** Used as the internal argument placeholder. */\n  var PLACEHOLDER = '__lodash_placeholder__';\n\n  /** Used to compose bitmasks for cloning. */\n  var CLONE_DEEP_FLAG = 1,\n      CLONE_FLAT_FLAG = 2,\n      CLONE_SYMBOLS_FLAG = 4;\n\n  /** Used to compose bitmasks for value comparisons. */\n  var COMPARE_PARTIAL_FLAG = 1,\n      COMPARE_UNORDERED_FLAG = 2;\n\n  /** Used to compose bitmasks for function metadata. */\n  var WRAP_BIND_FLAG = 1,\n      WRAP_BIND_KEY_FLAG = 2,\n      WRAP_CURRY_BOUND_FLAG = 4,\n      WRAP_CURRY_FLAG = 8,\n      WRAP_CURRY_RIGHT_FLAG = 16,\n      WRAP_PARTIAL_FLAG = 32,\n      WRAP_PARTIAL_RIGHT_FLAG = 64,\n      WRAP_ARY_FLAG = 128,\n      WRAP_REARG_FLAG = 256,\n      WRAP_FLIP_FLAG = 512;\n\n  /** Used as default options for `_.truncate`. */\n  var DEFAULT_TRUNC_LENGTH = 30,\n      DEFAULT_TRUNC_OMISSION = '...';\n\n  /** Used to detect hot functions by number of calls within a span of milliseconds. */\n  var HOT_COUNT = 800,\n      HOT_SPAN = 16;\n\n  /** Used to indicate the type of lazy iteratees. */\n  var LAZY_FILTER_FLAG = 1,\n      LAZY_MAP_FLAG = 2,\n      LAZY_WHILE_FLAG = 3;\n\n  /** Used as references for various `Number` constants. */\n  var INFINITY = 1 / 0,\n      MAX_SAFE_INTEGER = 9007199254740991,\n      MAX_INTEGER = 1.7976931348623157e+308,\n      NAN = 0 / 0;\n\n  /** Used as references for the maximum length and index of an array. */\n  var MAX_ARRAY_LENGTH = 4294967295,\n      MAX_ARRAY_INDEX = MAX_ARRAY_LENGTH - 1,\n      HALF_MAX_ARRAY_LENGTH = MAX_ARRAY_LENGTH >>> 1;\n\n  /** Used to associate wrap methods with their bit flags. */\n  var wrapFlags = [\n    ['ary', WRAP_ARY_FLAG],\n    ['bind', WRAP_BIND_FLAG],\n    ['bindKey', WRAP_BIND_KEY_FLAG],\n    ['curry', WRAP_CURRY_FLAG],\n    ['curryRight', WRAP_CURRY_RIGHT_FLAG],\n    ['flip', WRAP_FLIP_FLAG],\n    ['partial', WRAP_PARTIAL_FLAG],\n    ['partialRight', WRAP_PARTIAL_RIGHT_FLAG],\n    ['rearg', WRAP_REARG_FLAG]\n  ];\n\n  /** `Object#toString` result references. */\n  var argsTag = '[object Arguments]',\n      arrayTag = '[object Array]',\n      asyncTag = '[object AsyncFunction]',\n      boolTag = '[object Boolean]',\n      dateTag = '[object Date]',\n      domExcTag = '[object DOMException]',\n      errorTag = '[object Error]',\n      funcTag = '[object Function]',\n      genTag = '[object GeneratorFunction]',\n      mapTag = '[object Map]',\n      numberTag = '[object Number]',\n      nullTag = '[object Null]',\n      objectTag = '[object Object]',\n      promiseTag = '[object Promise]',\n      proxyTag = '[object Proxy]',\n      regexpTag = '[object RegExp]',\n      setTag = '[object Set]',\n      stringTag = '[object String]',\n      symbolTag = '[object Symbol]',\n      undefinedTag = '[object Undefined]',\n      weakMapTag = '[object WeakMap]',\n      weakSetTag = '[object WeakSet]';\n\n  var arrayBufferTag = '[object ArrayBuffer]',\n      dataViewTag = '[object DataView]',\n      float32Tag = '[object Float32Array]',\n      float64Tag = '[object Float64Array]',\n      int8Tag = '[object Int8Array]',\n      int16Tag = '[object Int16Array]',\n      int32Tag = '[object Int32Array]',\n      uint8Tag = '[object Uint8Array]',\n      uint8ClampedTag = '[object Uint8ClampedArray]',\n      uint16Tag = '[object Uint16Array]',\n      uint32Tag = '[object Uint32Array]';\n\n  /** Used to match empty string literals in compiled template source. */\n  var reEmptyStringLeading = /\\b__p \\+= '';/g,\n      reEmptyStringMiddle = /\\b(__p \\+=) '' \\+/g,\n      reEmptyStringTrailing = /(__e\\(.*?\\)|\\b__t\\)) \\+\\n'';/g;\n\n  /** Used to match HTML entities and HTML characters. */\n  var reEscapedHtml = /&(?:amp|lt|gt|quot|#39);/g,\n      reUnescapedHtml = /[&<>\"']/g,\n      reHasEscapedHtml = RegExp(reEscapedHtml.source),\n      reHasUnescapedHtml = RegExp(reUnescapedHtml.source);\n\n  /** Used to match template delimiters. */\n  var reEscape = /<%-([\\s\\S]+?)%>/g,\n      reEvaluate = /<%([\\s\\S]+?)%>/g,\n      reInterpolate = /<%=([\\s\\S]+?)%>/g;\n\n  /** Used to match property names within property paths. */\n  var reIsDeepProp = /\\.|\\[(?:[^[\\]]*|([\"'])(?:(?!\\1)[^\\\\]|\\\\.)*?\\1)\\]/,\n      reIsPlainProp = /^\\w*$/,\n      reLeadingDot = /^\\./,\n      rePropName = /[^.[\\]]+|\\[(?:(-?\\d+(?:\\.\\d+)?)|([\"'])((?:(?!\\2)[^\\\\]|\\\\.)*?)\\2)\\]|(?=(?:\\.|\\[\\])(?:\\.|\\[\\]|$))/g;\n\n  /**\n   * Used to match `RegExp`\n   * [syntax characters](http://ecma-international.org/ecma-262/7.0/#sec-patterns).\n   */\n  var reRegExpChar = /[\\\\^$.*+?()[\\]{}|]/g,\n      reHasRegExpChar = RegExp(reRegExpChar.source);\n\n  /** Used to match leading and trailing whitespace. */\n  var reTrim = /^\\s+|\\s+$/g,\n      reTrimStart = /^\\s+/,\n      reTrimEnd = /\\s+$/;\n\n  /** Used to match wrap detail comments. */\n  var reWrapComment = /\\{(?:\\n\\/\\* \\[wrapped with .+\\] \\*\\/)?\\n?/,\n      reWrapDetails = /\\{\\n\\/\\* \\[wrapped with (.+)\\] \\*/,\n      reSplitDetails = /,? & /;\n\n  /** Used to match words composed of alphanumeric characters. */\n  var reAsciiWord = /[^\\x00-\\x2f\\x3a-\\x40\\x5b-\\x60\\x7b-\\x7f]+/g;\n\n  /** Used to match backslashes in property paths. */\n  var reEscapeChar = /\\\\(\\\\)?/g;\n\n  /**\n   * Used to match\n   * [ES template delimiters](http://ecma-international.org/ecma-262/7.0/#sec-template-literal-lexical-components).\n   */\n  var reEsTemplate = /\\$\\{([^\\\\}]*(?:\\\\.[^\\\\}]*)*)\\}/g;\n\n  /** Used to match `RegExp` flags from their coerced string values. */\n  var reFlags = /\\w*$/;\n\n  /** Used to detect bad signed hexadecimal string values. */\n  var reIsBadHex = /^[-+]0x[0-9a-f]+$/i;\n\n  /** Used to detect binary string values. */\n  var reIsBinary = /^0b[01]+$/i;\n\n  /** Used to detect host constructors (Safari). */\n  var reIsHostCtor = /^\\[object .+?Constructor\\]$/;\n\n  /** Used to detect octal string values. */\n  var reIsOctal = /^0o[0-7]+$/i;\n\n  /** Used to detect unsigned integer values. */\n  var reIsUint = /^(?:0|[1-9]\\d*)$/;\n\n  /** Used to match Latin Unicode letters (excluding mathematical operators). */\n  var reLatin = /[\\xc0-\\xd6\\xd8-\\xf6\\xf8-\\xff\\u0100-\\u017f]/g;\n\n  /** Used to ensure capturing order of template delimiters. */\n  var reNoMatch = /($^)/;\n\n  /** Used to match unescaped characters in compiled string literals. */\n  var reUnescapedString = /['\\n\\r\\u2028\\u2029\\\\]/g;\n\n  /** Used to compose unicode character classes. */\n  var rsAstralRange = '\\\\ud800-\\\\udfff',\n      rsComboMarksRange = '\\\\u0300-\\\\u036f',\n      reComboHalfMarksRange = '\\\\ufe20-\\\\ufe2f',\n      rsComboSymbolsRange = '\\\\u20d0-\\\\u20ff',\n      rsComboRange = rsComboMarksRange + reComboHalfMarksRange + rsComboSymbolsRange,\n      rsDingbatRange = '\\\\u2700-\\\\u27bf',\n      rsLowerRange = 'a-z\\\\xdf-\\\\xf6\\\\xf8-\\\\xff',\n      rsMathOpRange = '\\\\xac\\\\xb1\\\\xd7\\\\xf7',\n      rsNonCharRange = '\\\\x00-\\\\x2f\\\\x3a-\\\\x40\\\\x5b-\\\\x60\\\\x7b-\\\\xbf',\n      rsPunctuationRange = '\\\\u2000-\\\\u206f',\n      rsSpaceRange = ' \\\\t\\\\x0b\\\\f\\\\xa0\\\\ufeff\\\\n\\\\r\\\\u2028\\\\u2029\\\\u1680\\\\u180e\\\\u2000\\\\u2001\\\\u2002\\\\u2003\\\\u2004\\\\u2005\\\\u2006\\\\u2007\\\\u2008\\\\u2009\\\\u200a\\\\u202f\\\\u205f\\\\u3000',\n      rsUpperRange = 'A-Z\\\\xc0-\\\\xd6\\\\xd8-\\\\xde',\n      rsVarRange = '\\\\ufe0e\\\\ufe0f',\n      rsBreakRange = rsMathOpRange + rsNonCharRange + rsPunctuationRange + rsSpaceRange;\n\n  /** Used to compose unicode capture groups. */\n  var rsApos = \"['\\u2019]\",\n      rsAstral = '[' + rsAstralRange + ']',\n      rsBreak = '[' + rsBreakRange + ']',\n      rsCombo = '[' + rsComboRange + ']',\n      rsDigits = '\\\\d+',\n      rsDingbat = '[' + rsDingbatRange + ']',\n      rsLower = '[' + rsLowerRange + ']',\n      rsMisc = '[^' + rsAstralRange + rsBreakRange + rsDigits + rsDingbatRange + rsLowerRange + rsUpperRange + ']',\n      rsFitz = '\\\\ud83c[\\\\udffb-\\\\udfff]',\n      rsModifier = '(?:' + rsCombo + '|' + rsFitz + ')',\n      rsNonAstral = '[^' + rsAstralRange + ']',\n      rsRegional = '(?:\\\\ud83c[\\\\udde6-\\\\uddff]){2}',\n      rsSurrPair = '[\\\\ud800-\\\\udbff][\\\\udc00-\\\\udfff]',\n      rsUpper = '[' + rsUpperRange + ']',\n      rsZWJ = '\\\\u200d';\n\n  /** Used to compose unicode regexes. */\n  var rsMiscLower = '(?:' + rsLower + '|' + rsMisc + ')',\n      rsMiscUpper = '(?:' + rsUpper + '|' + rsMisc + ')',\n      rsOptContrLower = '(?:' + rsApos + '(?:d|ll|m|re|s|t|ve))?',\n      rsOptContrUpper = '(?:' + rsApos + '(?:D|LL|M|RE|S|T|VE))?',\n      reOptMod = rsModifier + '?',\n      rsOptVar = '[' + rsVarRange + ']?',\n      rsOptJoin = '(?:' + rsZWJ + '(?:' + [rsNonAstral, rsRegional, rsSurrPair].join('|') + ')' + rsOptVar + reOptMod + ')*',\n      rsOrdLower = '\\\\d*(?:(?:1st|2nd|3rd|(?![123])\\\\dth)\\\\b)',\n      rsOrdUpper = '\\\\d*(?:(?:1ST|2ND|3RD|(?![123])\\\\dTH)\\\\b)',\n      rsSeq = rsOptVar + reOptMod + rsOptJoin,\n      rsEmoji = '(?:' + [rsDingbat, rsRegional, rsSurrPair].join('|') + ')' + rsSeq,\n      rsSymbol = '(?:' + [rsNonAstral + rsCombo + '?', rsCombo, rsRegional, rsSurrPair, rsAstral].join('|') + ')';\n\n  /** Used to match apostrophes. */\n  var reApos = RegExp(rsApos, 'g');\n\n  /**\n   * Used to match [combining diacritical marks](https://en.wikipedia.org/wiki/Combining_Diacritical_Marks) and\n   * [combining diacritical marks for symbols](https://en.wikipedia.org/wiki/Combining_Diacritical_Marks_for_Symbols).\n   */\n  var reComboMark = RegExp(rsCombo, 'g');\n\n  /** Used to match [string symbols](https://mathiasbynens.be/notes/javascript-unicode). */\n  var reUnicode = RegExp(rsFitz + '(?=' + rsFitz + ')|' + rsSymbol + rsSeq, 'g');\n\n  /** Used to match complex or compound words. */\n  var reUnicodeWord = RegExp([\n    rsUpper + '?' + rsLower + '+' + rsOptContrLower + '(?=' + [rsBreak, rsUpper, '$'].join('|') + ')',\n    rsMiscUpper + '+' + rsOptContrUpper + '(?=' + [rsBreak, rsUpper + rsMiscLower, '$'].join('|') + ')',\n    rsUpper + '?' + rsMiscLower + '+' + rsOptContrLower,\n    rsUpper + '+' + rsOptContrUpper,\n    rsOrdUpper,\n    rsOrdLower,\n    rsDigits,\n    rsEmoji\n  ].join('|'), 'g');\n\n  /** Used to detect strings with [zero-width joiners or code points from the astral planes](http://eev.ee/blog/2015/09/12/dark-corners-of-unicode/). */\n  var reHasUnicode = RegExp('[' + rsZWJ + rsAstralRange  + rsComboRange + rsVarRange + ']');\n\n  /** Used to detect strings that need a more robust regexp to match words. */\n  var reHasUnicodeWord = /[a-z][A-Z]|[A-Z]{2,}[a-z]|[0-9][a-zA-Z]|[a-zA-Z][0-9]|[^a-zA-Z0-9 ]/;\n\n  /** Used to assign default `context` object properties. */\n  var contextProps = [\n    'Array', 'Buffer', 'DataView', 'Date', 'Error', 'Float32Array', 'Float64Array',\n    'Function', 'Int8Array', 'Int16Array', 'Int32Array', 'Map', 'Math', 'Object',\n    'Promise', 'RegExp', 'Set', 'String', 'Symbol', 'TypeError', 'Uint8Array',\n    'Uint8ClampedArray', 'Uint16Array', 'Uint32Array', 'WeakMap',\n    '_', 'clearTimeout', 'isFinite', 'parseInt', 'setTimeout'\n  ];\n\n  /** Used to make template sourceURLs easier to identify. */\n  var templateCounter = -1;\n\n  /** Used to identify `toStringTag` values of typed arrays. */\n  var typedArrayTags = {};\n  typedArrayTags[float32Tag] = typedArrayTags[float64Tag] =\n  typedArrayTags[int8Tag] = typedArrayTags[int16Tag] =\n  typedArrayTags[int32Tag] = typedArrayTags[uint8Tag] =\n  typedArrayTags[uint8ClampedTag] = typedArrayTags[uint16Tag] =\n  typedArrayTags[uint32Tag] = true;\n  typedArrayTags[argsTag] = typedArrayTags[arrayTag] =\n  typedArrayTags[arrayBufferTag] = typedArrayTags[boolTag] =\n  typedArrayTags[dataViewTag] = typedArrayTags[dateTag] =\n  typedArrayTags[errorTag] = typedArrayTags[funcTag] =\n  typedArrayTags[mapTag] = typedArrayTags[numberTag] =\n  typedArrayTags[objectTag] = typedArrayTags[regexpTag] =\n  typedArrayTags[setTag] = typedArrayTags[stringTag] =\n  typedArrayTags[weakMapTag] = false;\n\n  /** Used to identify `toStringTag` values supported by `_.clone`. */\n  var cloneableTags = {};\n  cloneableTags[argsTag] = cloneableTags[arrayTag] =\n  cloneableTags[arrayBufferTag] = cloneableTags[dataViewTag] =\n  cloneableTags[boolTag] = cloneableTags[dateTag] =\n  cloneableTags[float32Tag] = cloneableTags[float64Tag] =\n  cloneableTags[int8Tag] = cloneableTags[int16Tag] =\n  cloneableTags[int32Tag] = cloneableTags[mapTag] =\n  cloneableTags[numberTag] = cloneableTags[objectTag] =\n  cloneableTags[regexpTag] = cloneableTags[setTag] =\n  cloneableTags[stringTag] = cloneableTags[symbolTag] =\n  cloneableTags[uint8Tag] = cloneableTags[uint8ClampedTag] =\n  cloneableTags[uint16Tag] = cloneableTags[uint32Tag] = true;\n  cloneableTags[errorTag] = cloneableTags[funcTag] =\n  cloneableTags[weakMapTag] = false;\n\n  /** Used to map Latin Unicode letters to basic Latin letters. */\n  var deburredLetters = {\n    // Latin-1 Supplement block.\n    '\\xc0': 'A',  '\\xc1': 'A', '\\xc2': 'A', '\\xc3': 'A', '\\xc4': 'A', '\\xc5': 'A',\n    '\\xe0': 'a',  '\\xe1': 'a', '\\xe2': 'a', '\\xe3': 'a', '\\xe4': 'a', '\\xe5': 'a',\n    '\\xc7': 'C',  '\\xe7': 'c',\n    '\\xd0': 'D',  '\\xf0': 'd',\n    '\\xc8': 'E',  '\\xc9': 'E', '\\xca': 'E', '\\xcb': 'E',\n    '\\xe8': 'e',  '\\xe9': 'e', '\\xea': 'e', '\\xeb': 'e',\n    '\\xcc': 'I',  '\\xcd': 'I', '\\xce': 'I', '\\xcf': 'I',\n    '\\xec': 'i',  '\\xed': 'i', '\\xee': 'i', '\\xef': 'i',\n    '\\xd1': 'N',  '\\xf1': 'n',\n    '\\xd2': 'O',  '\\xd3': 'O', '\\xd4': 'O', '\\xd5': 'O', '\\xd6': 'O', '\\xd8': 'O',\n    '\\xf2': 'o',  '\\xf3': 'o', '\\xf4': 'o', '\\xf5': 'o', '\\xf6': 'o', '\\xf8': 'o',\n    '\\xd9': 'U',  '\\xda': 'U', '\\xdb': 'U', '\\xdc': 'U',\n    '\\xf9': 'u',  '\\xfa': 'u', '\\xfb': 'u', '\\xfc': 'u',\n    '\\xdd': 'Y',  '\\xfd': 'y', '\\xff': 'y',\n    '\\xc6': 'Ae', '\\xe6': 'ae',\n    '\\xde': 'Th', '\\xfe': 'th',\n    '\\xdf': 'ss',\n    // Latin Extended-A block.\n    '\\u0100': 'A',  '\\u0102': 'A', '\\u0104': 'A',\n    '\\u0101': 'a',  '\\u0103': 'a', '\\u0105': 'a',\n    '\\u0106': 'C',  '\\u0108': 'C', '\\u010a': 'C', '\\u010c': 'C',\n    '\\u0107': 'c',  '\\u0109': 'c', '\\u010b': 'c', '\\u010d': 'c',\n    '\\u010e': 'D',  '\\u0110': 'D', '\\u010f': 'd', '\\u0111': 'd',\n    '\\u0112': 'E',  '\\u0114': 'E', '\\u0116': 'E', '\\u0118': 'E', '\\u011a': 'E',\n    '\\u0113': 'e',  '\\u0115': 'e', '\\u0117': 'e', '\\u0119': 'e', '\\u011b': 'e',\n    '\\u011c': 'G',  '\\u011e': 'G', '\\u0120': 'G', '\\u0122': 'G',\n    '\\u011d': 'g',  '\\u011f': 'g', '\\u0121': 'g', '\\u0123': 'g',\n    '\\u0124': 'H',  '\\u0126': 'H', '\\u0125': 'h', '\\u0127': 'h',\n    '\\u0128': 'I',  '\\u012a': 'I', '\\u012c': 'I', '\\u012e': 'I', '\\u0130': 'I',\n    '\\u0129': 'i',  '\\u012b': 'i', '\\u012d': 'i', '\\u012f': 'i', '\\u0131': 'i',\n    '\\u0134': 'J',  '\\u0135': 'j',\n    '\\u0136': 'K',  '\\u0137': 'k', '\\u0138': 'k',\n    '\\u0139': 'L',  '\\u013b': 'L', '\\u013d': 'L', '\\u013f': 'L', '\\u0141': 'L',\n    '\\u013a': 'l',  '\\u013c': 'l', '\\u013e': 'l', '\\u0140': 'l', '\\u0142': 'l',\n    '\\u0143': 'N',  '\\u0145': 'N', '\\u0147': 'N', '\\u014a': 'N',\n    '\\u0144': 'n',  '\\u0146': 'n', '\\u0148': 'n', '\\u014b': 'n',\n    '\\u014c': 'O',  '\\u014e': 'O', '\\u0150': 'O',\n    '\\u014d': 'o',  '\\u014f': 'o', '\\u0151': 'o',\n    '\\u0154': 'R',  '\\u0156': 'R', '\\u0158': 'R',\n    '\\u0155': 'r',  '\\u0157': 'r', '\\u0159': 'r',\n    '\\u015a': 'S',  '\\u015c': 'S', '\\u015e': 'S', '\\u0160': 'S',\n    '\\u015b': 's',  '\\u015d': 's', '\\u015f': 's', '\\u0161': 's',\n    '\\u0162': 'T',  '\\u0164': 'T', '\\u0166': 'T',\n    '\\u0163': 't',  '\\u0165': 't', '\\u0167': 't',\n    '\\u0168': 'U',  '\\u016a': 'U', '\\u016c': 'U', '\\u016e': 'U', '\\u0170': 'U', '\\u0172': 'U',\n    '\\u0169': 'u',  '\\u016b': 'u', '\\u016d': 'u', '\\u016f': 'u', '\\u0171': 'u', '\\u0173': 'u',\n    '\\u0174': 'W',  '\\u0175': 'w',\n    '\\u0176': 'Y',  '\\u0177': 'y', '\\u0178': 'Y',\n    '\\u0179': 'Z',  '\\u017b': 'Z', '\\u017d': 'Z',\n    '\\u017a': 'z',  '\\u017c': 'z', '\\u017e': 'z',\n    '\\u0132': 'IJ', '\\u0133': 'ij',\n    '\\u0152': 'Oe', '\\u0153': 'oe',\n    '\\u0149': \"'n\", '\\u017f': 's'\n  };\n\n  /** Used to map characters to HTML entities. */\n  var htmlEscapes = {\n    '&': '&amp;',\n    '<': '&lt;',\n    '>': '&gt;',\n    '\"': '&quot;',\n    \"'\": '&#39;'\n  };\n\n  /** Used to map HTML entities to characters. */\n  var htmlUnescapes = {\n    '&amp;': '&',\n    '&lt;': '<',\n    '&gt;': '>',\n    '&quot;': '\"',\n    '&#39;': \"'\"\n  };\n\n  /** Used to escape characters for inclusion in compiled string literals. */\n  var stringEscapes = {\n    '\\\\': '\\\\',\n    \"'\": \"'\",\n    '\\n': 'n',\n    '\\r': 'r',\n    '\\u2028': 'u2028',\n    '\\u2029': 'u2029'\n  };\n\n  /** Built-in method references without a dependency on `root`. */\n  var freeParseFloat = parseFloat,\n      freeParseInt = parseInt;\n\n  /** Detect free variable `global` from Node.js. */\n  var freeGlobal = typeof global == 'object' && global && global.Object === Object && global;\n\n  /** Detect free variable `self`. */\n  var freeSelf = typeof self == 'object' && self && self.Object === Object && self;\n\n  /** Used as a reference to the global object. */\n  var root = freeGlobal || freeSelf || Function('return this')();\n\n  /** Detect free variable `exports`. */\n  var freeExports = typeof exports == 'object' && exports && !exports.nodeType && exports;\n\n  /** Detect free variable `module`. */\n  var freeModule = freeExports && typeof module == 'object' && module && !module.nodeType && module;\n\n  /** Detect the popular CommonJS extension `module.exports`. */\n  var moduleExports = freeModule && freeModule.exports === freeExports;\n\n  /** Detect free variable `process` from Node.js. */\n  var freeProcess = moduleExports && freeGlobal.process;\n\n  /** Used to access faster Node.js helpers. */\n  var nodeUtil = (function() {\n    try {\n      return freeProcess && freeProcess.binding && freeProcess.binding('util');\n    } catch (e) {}\n  }());\n\n  /* Node.js helper references. */\n  var nodeIsArrayBuffer = nodeUtil && nodeUtil.isArrayBuffer,\n      nodeIsDate = nodeUtil && nodeUtil.isDate,\n      nodeIsMap = nodeUtil && nodeUtil.isMap,\n      nodeIsRegExp = nodeUtil && nodeUtil.isRegExp,\n      nodeIsSet = nodeUtil && nodeUtil.isSet,\n      nodeIsTypedArray = nodeUtil && nodeUtil.isTypedArray;\n\n  /*--------------------------------------------------------------------------*/\n\n  /**\n   * Adds the key-value `pair` to `map`.\n   *\n   * @private\n   * @param {Object} map The map to modify.\n   * @param {Array} pair The key-value pair to add.\n   * @returns {Object} Returns `map`.\n   */\n  function addMapEntry(map, pair) {\n    // Don't return `map.set` because it's not chainable in IE 11.\n    map.set(pair[0], pair[1]);\n    return map;\n  }\n\n  /**\n   * Adds `value` to `set`.\n   *\n   * @private\n   * @param {Object} set The set to modify.\n   * @param {*} value The value to add.\n   * @returns {Object} Returns `set`.\n   */\n  function addSetEntry(set, value) {\n    // Don't return `set.add` because it's not chainable in IE 11.\n    set.add(value);\n    return set;\n  }\n\n  /**\n   * A faster alternative to `Function#apply`, this function invokes `func`\n   * with the `this` binding of `thisArg` and the arguments of `args`.\n   *\n   * @private\n   * @param {Function} func The function to invoke.\n   * @param {*} thisArg The `this` binding of `func`.\n   * @param {Array} args The arguments to invoke `func` with.\n   * @returns {*} Returns the result of `func`.\n   */\n  function apply(func, thisArg, args) {\n    switch (args.length) {\n      case 0: return func.call(thisArg);\n      case 1: return func.call(thisArg, args[0]);\n      case 2: return func.call(thisArg, args[0], args[1]);\n      case 3: return func.call(thisArg, args[0], args[1], args[2]);\n    }\n    return func.apply(thisArg, args);\n  }\n\n  /**\n   * A specialized version of `baseAggregator` for arrays.\n   *\n   * @private\n   * @param {Array} [array] The array to iterate over.\n   * @param {Function} setter The function to set `accumulator` values.\n   * @param {Function} iteratee The iteratee to transform keys.\n   * @param {Object} accumulator The initial aggregated object.\n   * @returns {Function} Returns `accumulator`.\n   */\n  function arrayAggregator(array, setter, iteratee, accumulator) {\n    var index = -1,\n        length = array == null ? 0 : array.length;\n\n    while (++index < length) {\n      var value = array[index];\n      setter(accumulator, value, iteratee(value), array);\n    }\n    return accumulator;\n  }\n\n  /**\n   * A specialized version of `_.forEach` for arrays without support for\n   * iteratee shorthands.\n   *\n   * @private\n   * @param {Array} [array] The array to iterate over.\n   * @param {Function} iteratee The function invoked per iteration.\n   * @returns {Array} Returns `array`.\n   */\n  function arrayEach(array, iteratee) {\n    var index = -1,\n        length = array == null ? 0 : array.length;\n\n    while (++index < length) {\n      if (iteratee(array[index], index, array) === false) {\n        break;\n      }\n    }\n    return array;\n  }\n\n  /**\n   * A specialized version of `_.forEachRight` for arrays without support for\n   * iteratee shorthands.\n   *\n   * @private\n   * @param {Array} [array] The array to iterate over.\n   * @param {Function} iteratee The function invoked per iteration.\n   * @returns {Array} Returns `array`.\n   */\n  function arrayEachRight(array, iteratee) {\n    var length = array == null ? 0 : array.length;\n\n    while (length--) {\n      if (iteratee(array[length], length, array) === false) {\n        break;\n      }\n    }\n    return array;\n  }\n\n  /**\n   * A specialized version of `_.every` for arrays without support for\n   * iteratee shorthands.\n   *\n   * @private\n   * @param {Array} [array] The array to iterate over.\n   * @param {Function} predicate The function invoked per iteration.\n   * @returns {boolean} Returns `true` if all elements pass the predicate check,\n   *  else `false`.\n   */\n  function arrayEvery(array, predicate) {\n    var index = -1,\n        length = array == null ? 0 : array.length;\n\n    while (++index < length) {\n      if (!predicate(array[index], index, array)) {\n        return false;\n      }\n    }\n    return true;\n  }\n\n  /**\n   * A specialized version of `_.filter` for arrays without support for\n   * iteratee shorthands.\n   *\n   * @private\n   * @param {Array} [array] The array to iterate over.\n   * @param {Function} predicate The function invoked per iteration.\n   * @returns {Array} Returns the new filtered array.\n   */\n  function arrayFilter(array, predicate) {\n    var index = -1,\n        length = array == null ? 0 : array.length,\n        resIndex = 0,\n        result = [];\n\n    while (++index < length) {\n      var value = array[index];\n      if (predicate(value, index, array)) {\n        result[resIndex++] = value;\n      }\n    }\n    return result;\n  }\n\n  /**\n   * A specialized version of `_.includes` for arrays without support for\n   * specifying an index to search from.\n   *\n   * @private\n   * @param {Array} [array] The array to inspect.\n   * @param {*} target The value to search for.\n   * @returns {boolean} Returns `true` if `target` is found, else `false`.\n   */\n  function arrayIncludes(array, value) {\n    var length = array == null ? 0 : array.length;\n    return !!length && baseIndexOf(array, value, 0) > -1;\n  }\n\n  /**\n   * This function is like `arrayIncludes` except that it accepts a comparator.\n   *\n   * @private\n   * @param {Array} [array] The array to inspect.\n   * @param {*} target The value to search for.\n   * @param {Function} comparator The comparator invoked per element.\n   * @returns {boolean} Returns `true` if `target` is found, else `false`.\n   */\n  function arrayIncludesWith(array, value, comparator) {\n    var index = -1,\n        length = array == null ? 0 : array.length;\n\n    while (++index < length) {\n      if (comparator(value, array[index])) {\n        return true;\n      }\n    }\n    return false;\n  }\n\n  /**\n   * A specialized version of `_.map` for arrays without support for iteratee\n   * shorthands.\n   *\n   * @private\n   * @param {Array} [array] The array to iterate over.\n   * @param {Function} iteratee The function invoked per iteration.\n   * @returns {Array} Returns the new mapped array.\n   */\n  function arrayMap(array, iteratee) {\n    var index = -1,\n        length = array == null ? 0 : array.length,\n        result = Array(length);\n\n    while (++index < length) {\n      result[index] = iteratee(array[index], index, array);\n    }\n    return result;\n  }\n\n  /**\n   * Appends the elements of `values` to `array`.\n   *\n   * @private\n   * @param {Array} array The array to modify.\n   * @param {Array} values The values to append.\n   * @returns {Array} Returns `array`.\n   */\n  function arrayPush(array, values) {\n    var index = -1,\n        length = values.length,\n        offset = array.length;\n\n    while (++index < length) {\n      array[offset + index] = values[index];\n    }\n    return array;\n  }\n\n  /**\n   * A specialized version of `_.reduce` for arrays without support for\n   * iteratee shorthands.\n   *\n   * @private\n   * @param {Array} [array] The array to iterate over.\n   * @param {Function} iteratee The function invoked per iteration.\n   * @param {*} [accumulator] The initial value.\n   * @param {boolean} [initAccum] Specify using the first element of `array` as\n   *  the initial value.\n   * @returns {*} Returns the accumulated value.\n   */\n  function arrayReduce(array, iteratee, accumulator, initAccum) {\n    var index = -1,\n        length = array == null ? 0 : array.length;\n\n    if (initAccum && length) {\n      accumulator = array[++index];\n    }\n    while (++index < length) {\n      accumulator = iteratee(accumulator, array[index], index, array);\n    }\n    return accumulator;\n  }\n\n  /**\n   * A specialized version of `_.reduceRight` for arrays without support for\n   * iteratee shorthands.\n   *\n   * @private\n   * @param {Array} [array] The array to iterate over.\n   * @param {Function} iteratee The function invoked per iteration.\n   * @param {*} [accumulator] The initial value.\n   * @param {boolean} [initAccum] Specify using the last element of `array` as\n   *  the initial value.\n   * @returns {*} Returns the accumulated value.\n   */\n  function arrayReduceRight(array, iteratee, accumulator, initAccum) {\n    var length = array == null ? 0 : array.length;\n    if (initAccum && length) {\n      accumulator = array[--length];\n    }\n    while (length--) {\n      accumulator = iteratee(accumulator, array[length], length, array);\n    }\n    return accumulator;\n  }\n\n  /**\n   * A specialized version of `_.some` for arrays without support for iteratee\n   * shorthands.\n   *\n   * @private\n   * @param {Array} [array] The array to iterate over.\n   * @param {Function} predicate The function invoked per iteration.\n   * @returns {boolean} Returns `true` if any element passes the predicate check,\n   *  else `false`.\n   */\n  function arraySome(array, predicate) {\n    var index = -1,\n        length = array == null ? 0 : array.length;\n\n    while (++index < length) {\n      if (predicate(array[index], index, array)) {\n        return true;\n      }\n    }\n    return false;\n  }\n\n  /**\n   * Gets the size of an ASCII `string`.\n   *\n   * @private\n   * @param {string} string The string inspect.\n   * @returns {number} Returns the string size.\n   */\n  var asciiSize = baseProperty('length');\n\n  /**\n   * Converts an ASCII `string` to an array.\n   *\n   * @private\n   * @param {string} string The string to convert.\n   * @returns {Array} Returns the converted array.\n   */\n  function asciiToArray(string) {\n    return string.split('');\n  }\n\n  /**\n   * Splits an ASCII `string` into an array of its words.\n   *\n   * @private\n   * @param {string} The string to inspect.\n   * @returns {Array} Returns the words of `string`.\n   */\n  function asciiWords(string) {\n    return string.match(reAsciiWord) || [];\n  }\n\n  /**\n   * The base implementation of methods like `_.findKey` and `_.findLastKey`,\n   * without support for iteratee shorthands, which iterates over `collection`\n   * using `eachFunc`.\n   *\n   * @private\n   * @param {Array|Object} collection The collection to inspect.\n   * @param {Function} predicate The function invoked per iteration.\n   * @param {Function} eachFunc The function to iterate over `collection`.\n   * @returns {*} Returns the found element or its key, else `undefined`.\n   */\n  function baseFindKey(collection, predicate, eachFunc) {\n    var result;\n    eachFunc(collection, function(value, key, collection) {\n      if (predicate(value, key, collection)) {\n        result = key;\n        return false;\n      }\n    });\n    return result;\n  }\n\n  /**\n   * The base implementation of `_.findIndex` and `_.findLastIndex` without\n   * support for iteratee shorthands.\n   *\n   * @private\n   * @param {Array} array The array to inspect.\n   * @param {Function} predicate The function invoked per iteration.\n   * @param {number} fromIndex The index to search from.\n   * @param {boolean} [fromRight] Specify iterating from right to left.\n   * @returns {number} Returns the index of the matched value, else `-1`.\n   */\n  function baseFindIndex(array, predicate, fromIndex, fromRight) {\n    var length = array.length,\n        index = fromIndex + (fromRight ? 1 : -1);\n\n    while ((fromRight ? index-- : ++index < length)) {\n      if (predicate(array[index], index, array)) {\n        return index;\n      }\n    }\n    return -1;\n  }\n\n  /**\n   * The base implementation of `_.indexOf` without `fromIndex` bounds checks.\n   *\n   * @private\n   * @param {Array} array The array to inspect.\n   * @param {*} value The value to search for.\n   * @param {number} fromIndex The index to search from.\n   * @returns {number} Returns the index of the matched value, else `-1`.\n   */\n  function baseIndexOf(array, value, fromIndex) {\n    return value === value\n      ? strictIndexOf(array, value, fromIndex)\n      : baseFindIndex(array, baseIsNaN, fromIndex);\n  }\n\n  /**\n   * This function is like `baseIndexOf` except that it accepts a comparator.\n   *\n   * @private\n   * @param {Array} array The array to inspect.\n   * @param {*} value The value to search for.\n   * @param {number} fromIndex The index to search from.\n   * @param {Function} comparator The comparator invoked per element.\n   * @returns {number} Returns the index of the matched value, else `-1`.\n   */\n  function baseIndexOfWith(array, value, fromIndex, comparator) {\n    var index = fromIndex - 1,\n        length = array.length;\n\n    while (++index < length) {\n      if (comparator(array[index], value)) {\n        return index;\n      }\n    }\n    return -1;\n  }\n\n  /**\n   * The base implementation of `_.isNaN` without support for number objects.\n   *\n   * @private\n   * @param {*} value The value to check.\n   * @returns {boolean} Returns `true` if `value` is `NaN`, else `false`.\n   */\n  function baseIsNaN(value) {\n    return value !== value;\n  }\n\n  /**\n   * The base implementation of `_.mean` and `_.meanBy` without support for\n   * iteratee shorthands.\n   *\n   * @private\n   * @param {Array} array The array to iterate over.\n   * @param {Function} iteratee The function invoked per iteration.\n   * @returns {number} Returns the mean.\n   */\n  function baseMean(array, iteratee) {\n    var length = array == null ? 0 : array.length;\n    return length ? (baseSum(array, iteratee) / length) : NAN;\n  }\n\n  /**\n   * The base implementation of `_.property` without support for deep paths.\n   *\n   * @private\n   * @param {string} key The key of the property to get.\n   * @returns {Function} Returns the new accessor function.\n   */\n  function baseProperty(key) {\n    return function(object) {\n      return object == null ? undefined : object[key];\n    };\n  }\n\n  /**\n   * The base implementation of `_.propertyOf` without support for deep paths.\n   *\n   * @private\n   * @param {Object} object The object to query.\n   * @returns {Function} Returns the new accessor function.\n   */\n  function basePropertyOf(object) {\n    return function(key) {\n      return object == null ? undefined : object[key];\n    };\n  }\n\n  /**\n   * The base implementation of `_.reduce` and `_.reduceRight`, without support\n   * for iteratee shorthands, which iterates over `collection` using `eachFunc`.\n   *\n   * @private\n   * @param {Array|Object} collection The collection to iterate over.\n   * @param {Function} iteratee The function invoked per iteration.\n   * @param {*} accumulator The initial value.\n   * @param {boolean} initAccum Specify using the first or last element of\n   *  `collection` as the initial value.\n   * @param {Function} eachFunc The function to iterate over `collection`.\n   * @returns {*} Returns the accumulated value.\n   */\n  function baseReduce(collection, iteratee, accumulator, initAccum, eachFunc) {\n    eachFunc(collection, function(value, index, collection) {\n      accumulator = initAccum\n        ? (initAccum = false, value)\n        : iteratee(accumulator, value, index, collection);\n    });\n    return accumulator;\n  }\n\n  /**\n   * The base implementation of `_.sortBy` which uses `comparer` to define the\n   * sort order of `array` and replaces criteria objects with their corresponding\n   * values.\n   *\n   * @private\n   * @param {Array} array The array to sort.\n   * @param {Function} comparer The function to define sort order.\n   * @returns {Array} Returns `array`.\n   */\n  function baseSortBy(array, comparer) {\n    var length = array.length;\n\n    array.sort(comparer);\n    while (length--) {\n      array[length] = array[length].value;\n    }\n    return array;\n  }\n\n  /**\n   * The base implementation of `_.sum` and `_.sumBy` without support for\n   * iteratee shorthands.\n   *\n   * @private\n   * @param {Array} array The array to iterate over.\n   * @param {Function} iteratee The function invoked per iteration.\n   * @returns {number} Returns the sum.\n   */\n  function baseSum(array, iteratee) {\n    var result,\n        index = -1,\n        length = array.length;\n\n    while (++index < length) {\n      var current = iteratee(array[index]);\n      if (current !== undefined) {\n        result = result === undefined ? current : (result + current);\n      }\n    }\n    return result;\n  }\n\n  /**\n   * The base implementation of `_.times` without support for iteratee shorthands\n   * or max array length checks.\n   *\n   * @private\n   * @param {number} n The number of times to invoke `iteratee`.\n   * @param {Function} iteratee The function invoked per iteration.\n   * @returns {Array} Returns the array of results.\n   */\n  function baseTimes(n, iteratee) {\n    var index = -1,\n        result = Array(n);\n\n    while (++index < n) {\n      result[index] = iteratee(index);\n    }\n    return result;\n  }\n\n  /**\n   * The base implementation of `_.toPairs` and `_.toPairsIn` which creates an array\n   * of key-value pairs for `object` corresponding to the property names of `props`.\n   *\n   * @private\n   * @param {Object} object The object to query.\n   * @param {Array} props The property names to get values for.\n   * @returns {Object} Returns the key-value pairs.\n   */\n  function baseToPairs(object, props) {\n    return arrayMap(props, function(key) {\n      return [key, object[key]];\n    });\n  }\n\n  /**\n   * The base implementation of `_.unary` without support for storing metadata.\n   *\n   * @private\n   * @param {Function} func The function to cap arguments for.\n   * @returns {Function} Returns the new capped function.\n   */\n  function baseUnary(func) {\n    return function(value) {\n      return func(value);\n    };\n  }\n\n  /**\n   * The base implementation of `_.values` and `_.valuesIn` which creates an\n   * array of `object` property values corresponding to the property names\n   * of `props`.\n   *\n   * @private\n   * @param {Object} object The object to query.\n   * @param {Array} props The property names to get values for.\n   * @returns {Object} Returns the array of property values.\n   */\n  function baseValues(object, props) {\n    return arrayMap(props, function(key) {\n      return object[key];\n    });\n  }\n\n  /**\n   * Checks if a `cache` value for `key` exists.\n   *\n   * @private\n   * @param {Object} cache The cache to query.\n   * @param {string} key The key of the entry to check.\n   * @returns {boolean} Returns `true` if an entry for `key` exists, else `false`.\n   */\n  function cacheHas(cache, key) {\n    return cache.has(key);\n  }\n\n  /**\n   * Used by `_.trim` and `_.trimStart` to get the index of the first string symbol\n   * that is not found in the character symbols.\n   *\n   * @private\n   * @param {Array} strSymbols The string symbols to inspect.\n   * @param {Array} chrSymbols The character symbols to find.\n   * @returns {number} Returns the index of the first unmatched string symbol.\n   */\n  function charsStartIndex(strSymbols, chrSymbols) {\n    var index = -1,\n        length = strSymbols.length;\n\n    while (++index < length && baseIndexOf(chrSymbols, strSymbols[index], 0) > -1) {}\n    return index;\n  }\n\n  /**\n   * Used by `_.trim` and `_.trimEnd` to get the index of the last string symbol\n   * that is not found in the character symbols.\n   *\n   * @private\n   * @param {Array} strSymbols The string symbols to inspect.\n   * @param {Array} chrSymbols The character symbols to find.\n   * @returns {number} Returns the index of the last unmatched string symbol.\n   */\n  function charsEndIndex(strSymbols, chrSymbols) {\n    var index = strSymbols.length;\n\n    while (index-- && baseIndexOf(chrSymbols, strSymbols[index], 0) > -1) {}\n    return index;\n  }\n\n  /**\n   * Gets the number of `placeholder` occurrences in `array`.\n   *\n   * @private\n   * @param {Array} array The array to inspect.\n   * @param {*} placeholder The placeholder to search for.\n   * @returns {number} Returns the placeholder count.\n   */\n  function countHolders(array, placeholder) {\n    var length = array.length,\n        result = 0;\n\n    while (length--) {\n      if (array[length] === placeholder) {\n        ++result;\n      }\n    }\n    return result;\n  }\n\n  /**\n   * Used by `_.deburr` to convert Latin-1 Supplement and Latin Extended-A\n   * letters to basic Latin letters.\n   *\n   * @private\n   * @param {string} letter The matched letter to deburr.\n   * @returns {string} Returns the deburred letter.\n   */\n  var deburrLetter = basePropertyOf(deburredLetters);\n\n  /**\n   * Used by `_.escape` to convert characters to HTML entities.\n   *\n   * @private\n   * @param {string} chr The matched character to escape.\n   * @returns {string} Returns the escaped character.\n   */\n  var escapeHtmlChar = basePropertyOf(htmlEscapes);\n\n  /**\n   * Used by `_.template` to escape characters for inclusion in compiled string literals.\n   *\n   * @private\n   * @param {string} chr The matched character to escape.\n   * @returns {string} Returns the escaped character.\n   */\n  function escapeStringChar(chr) {\n    return '\\\\' + stringEscapes[chr];\n  }\n\n  /**\n   * Gets the value at `key` of `object`.\n   *\n   * @private\n   * @param {Object} [object] The object to query.\n   * @param {string} key The key of the property to get.\n   * @returns {*} Returns the property value.\n   */\n  function getValue(object, key) {\n    return object == null ? undefined : object[key];\n  }\n\n  /**\n   * Checks if `string` contains Unicode symbols.\n   *\n   * @private\n   * @param {string} string The string to inspect.\n   * @returns {boolean} Returns `true` if a symbol is found, else `false`.\n   */\n  function hasUnicode(string) {\n    return reHasUnicode.test(string);\n  }\n\n  /**\n   * Checks if `string` contains a word composed of Unicode symbols.\n   *\n   * @private\n   * @param {string} string The string to inspect.\n   * @returns {boolean} Returns `true` if a word is found, else `false`.\n   */\n  function hasUnicodeWord(string) {\n    return reHasUnicodeWord.test(string);\n  }\n\n  /**\n   * Converts `iterator` to an array.\n   *\n   * @private\n   * @param {Object} iterator The iterator to convert.\n   * @returns {Array} Returns the converted array.\n   */\n  function iteratorToArray(iterator) {\n    var data,\n        result = [];\n\n    while (!(data = iterator.next()).done) {\n      result.push(data.value);\n    }\n    return result;\n  }\n\n  /**\n   * Converts `map` to its key-value pairs.\n   *\n   * @private\n   * @param {Object} map The map to convert.\n   * @returns {Array} Returns the key-value pairs.\n   */\n  function mapToArray(map) {\n    var index = -1,\n        result = Array(map.size);\n\n    map.forEach(function(value, key) {\n      result[++index] = [key, value];\n    });\n    return result;\n  }\n\n  /**\n   * Creates a unary function that invokes `func` with its argument transformed.\n   *\n   * @private\n   * @param {Function} func The function to wrap.\n   * @param {Function} transform The argument transform.\n   * @returns {Function} Returns the new function.\n   */\n  function overArg(func, transform) {\n    return function(arg) {\n      return func(transform(arg));\n    };\n  }\n\n  /**\n   * Replaces all `placeholder` elements in `array` with an internal placeholder\n   * and returns an array of their indexes.\n   *\n   * @private\n   * @param {Array} array The array to modify.\n   * @param {*} placeholder The placeholder to replace.\n   * @returns {Array} Returns the new array of placeholder indexes.\n   */\n  function replaceHolders(array, placeholder) {\n    var index = -1,\n        length = array.length,\n        resIndex = 0,\n        result = [];\n\n    while (++index < length) {\n      var value = array[index];\n      if (value === placeholder || value === PLACEHOLDER) {\n        array[index] = PLACEHOLDER;\n        result[resIndex++] = index;\n      }\n    }\n    return result;\n  }\n\n  /**\n   * Converts `set` to an array of its values.\n   *\n   * @private\n   * @param {Object} set The set to convert.\n   * @returns {Array} Returns the values.\n   */\n  function setToArray(set) {\n    var index = -1,\n        result = Array(set.size);\n\n    set.forEach(function(value) {\n      result[++index] = value;\n    });\n    return result;\n  }\n\n  /**\n   * Converts `set` to its value-value pairs.\n   *\n   * @private\n   * @param {Object} set The set to convert.\n   * @returns {Array} Returns the value-value pairs.\n   */\n  function setToPairs(set) {\n    var index = -1,\n        result = Array(set.size);\n\n    set.forEach(function(value) {\n      result[++index] = [value, value];\n    });\n    return result;\n  }\n\n  /**\n   * A specialized version of `_.indexOf` which performs strict equality\n   * comparisons of values, i.e. `===`.\n   *\n   * @private\n   * @param {Array} array The array to inspect.\n   * @param {*} value The value to search for.\n   * @param {number} fromIndex The index to search from.\n   * @returns {number} Returns the index of the matched value, else `-1`.\n   */\n  function strictIndexOf(array, value, fromIndex) {\n    var index = fromIndex - 1,\n        length = array.length;\n\n    while (++index < length) {\n      if (array[index] === value) {\n        return index;\n      }\n    }\n    return -1;\n  }\n\n  /**\n   * A specialized version of `_.lastIndexOf` which performs strict equality\n   * comparisons of values, i.e. `===`.\n   *\n   * @private\n   * @param {Array} array The array to inspect.\n   * @param {*} value The value to search for.\n   * @param {number} fromIndex The index to search from.\n   * @returns {number} Returns the index of the matched value, else `-1`.\n   */\n  function strictLastIndexOf(array, value, fromIndex) {\n    var index = fromIndex + 1;\n    while (index--) {\n      if (array[index] === value) {\n        return index;\n      }\n    }\n    return index;\n  }\n\n  /**\n   * Gets the number of symbols in `string`.\n   *\n   * @private\n   * @param {string} string The string to inspect.\n   * @returns {number} Returns the string size.\n   */\n  function stringSize(string) {\n    return hasUnicode(string)\n      ? unicodeSize(string)\n      : asciiSize(string);\n  }\n\n  /**\n   * Converts `string` to an array.\n   *\n   * @private\n   * @param {string} string The string to convert.\n   * @returns {Array} Returns the converted array.\n   */\n  function stringToArray(string) {\n    return hasUnicode(string)\n      ? unicodeToArray(string)\n      : asciiToArray(string);\n  }\n\n  /**\n   * Used by `_.unescape` to convert HTML entities to characters.\n   *\n   * @private\n   * @param {string} chr The matched character to unescape.\n   * @returns {string} Returns the unescaped character.\n   */\n  var unescapeHtmlChar = basePropertyOf(htmlUnescapes);\n\n  /**\n   * Gets the size of a Unicode `string`.\n   *\n   * @private\n   * @param {string} string The string inspect.\n   * @returns {number} Returns the string size.\n   */\n  function unicodeSize(string) {\n    var result = reUnicode.lastIndex = 0;\n    while (reUnicode.test(string)) {\n      ++result;\n    }\n    return result;\n  }\n\n  /**\n   * Converts a Unicode `string` to an array.\n   *\n   * @private\n   * @param {string} string The string to convert.\n   * @returns {Array} Returns the converted array.\n   */\n  function unicodeToArray(string) {\n    return string.match(reUnicode) || [];\n  }\n\n  /**\n   * Splits a Unicode `string` into an array of its words.\n   *\n   * @private\n   * @param {string} The string to inspect.\n   * @returns {Array} Returns the words of `string`.\n   */\n  function unicodeWords(string) {\n    return string.match(reUnicodeWord) || [];\n  }\n\n  /*--------------------------------------------------------------------------*/\n\n  /**\n   * Create a new pristine `lodash` function using the `context` object.\n   *\n   * @static\n   * @memberOf _\n   * @since 1.1.0\n   * @category Util\n   * @param {Object} [context=root] The context object.\n   * @returns {Function} Returns a new `lodash` function.\n   * @example\n   *\n   * _.mixin({ 'foo': _.constant('foo') });\n   *\n   * var lodash = _.runInContext();\n   * lodash.mixin({ 'bar': lodash.constant('bar') });\n   *\n   * _.isFunction(_.foo);\n   * // => true\n   * _.isFunction(_.bar);\n   * // => false\n   *\n   * lodash.isFunction(lodash.foo);\n   * // => false\n   * lodash.isFunction(lodash.bar);\n   * // => true\n   *\n   * // Create a suped-up `defer` in Node.js.\n   * var defer = _.runInContext({ 'setTimeout': setImmediate }).defer;\n   */\n  var runInContext = (function runInContext(context) {\n    context = context == null ? root : _.defaults(root.Object(), context, _.pick(root, contextProps));\n\n    /** Built-in constructor references. */\n    var Array = context.Array,\n        Date = context.Date,\n        Error = context.Error,\n        Function = context.Function,\n        Math = context.Math,\n        Object = context.Object,\n        RegExp = context.RegExp,\n        String = context.String,\n        TypeError = context.TypeError;\n\n    /** Used for built-in method references. */\n    var arrayProto = Array.prototype,\n        funcProto = Function.prototype,\n        objectProto = Object.prototype;\n\n    /** Used to detect overreaching core-js shims. */\n    var coreJsData = context['__core-js_shared__'];\n\n    /** Used to resolve the decompiled source of functions. */\n    var funcToString = funcProto.toString;\n\n    /** Used to check objects for own properties. */\n    var hasOwnProperty = objectProto.hasOwnProperty;\n\n    /** Used to generate unique IDs. */\n    var idCounter = 0;\n\n    /** Used to detect methods masquerading as native. */\n    var maskSrcKey = (function() {\n      var uid = /[^.]+$/.exec(coreJsData && coreJsData.keys && coreJsData.keys.IE_PROTO || '');\n      return uid ? ('Symbol(src)_1.' + uid) : '';\n    }());\n\n    /**\n     * Used to resolve the\n     * [`toStringTag`](http://ecma-international.org/ecma-262/7.0/#sec-object.prototype.tostring)\n     * of values.\n     */\n    var nativeObjectToString = objectProto.toString;\n\n    /** Used to infer the `Object` constructor. */\n    var objectCtorString = funcToString.call(Object);\n\n    /** Used to restore the original `_` reference in `_.noConflict`. */\n    var oldDash = root._;\n\n    /** Used to detect if a method is native. */\n    var reIsNative = RegExp('^' +\n      funcToString.call(hasOwnProperty).replace(reRegExpChar, '\\\\$&')\n      .replace(/hasOwnProperty|(function).*?(?=\\\\\\()| for .+?(?=\\\\\\])/g, '$1.*?') + '$'\n    );\n\n    /** Built-in value references. */\n    var Buffer = moduleExports ? context.Buffer : undefined,\n        Symbol = context.Symbol,\n        Uint8Array = context.Uint8Array,\n        allocUnsafe = Buffer ? Buffer.allocUnsafe : undefined,\n        getPrototype = overArg(Object.getPrototypeOf, Object),\n        objectCreate = Object.create,\n        propertyIsEnumerable = objectProto.propertyIsEnumerable,\n        splice = arrayProto.splice,\n        spreadableSymbol = Symbol ? Symbol.isConcatSpreadable : undefined,\n        symIterator = Symbol ? Symbol.iterator : undefined,\n        symToStringTag = Symbol ? Symbol.toStringTag : undefined;\n\n    var defineProperty = (function() {\n      try {\n        var func = getNative(Object, 'defineProperty');\n        func({}, '', {});\n        return func;\n      } catch (e) {}\n    }());\n\n    /** Mocked built-ins. */\n    var ctxClearTimeout = context.clearTimeout !== root.clearTimeout && context.clearTimeout,\n        ctxNow = Date && Date.now !== root.Date.now && Date.now,\n        ctxSetTimeout = context.setTimeout !== root.setTimeout && context.setTimeout;\n\n    /* Built-in method references for those with the same name as other `lodash` methods. */\n    var nativeCeil = Math.ceil,\n        nativeFloor = Math.floor,\n        nativeGetSymbols = Object.getOwnPropertySymbols,\n        nativeIsBuffer = Buffer ? Buffer.isBuffer : undefined,\n        nativeIsFinite = context.isFinite,\n        nativeJoin = arrayProto.join,\n        nativeKeys = overArg(Object.keys, Object),\n        nativeMax = Math.max,\n        nativeMin = Math.min,\n        nativeNow = Date.now,\n        nativeParseInt = context.parseInt,\n        nativeRandom = Math.random,\n        nativeReverse = arrayProto.reverse;\n\n    /* Built-in method references that are verified to be native. */\n    var DataView = getNative(context, 'DataView'),\n        Map = getNative(context, 'Map'),\n        Promise = getNative(context, 'Promise'),\n        Set = getNative(context, 'Set'),\n        WeakMap = getNative(context, 'WeakMap'),\n        nativeCreate = getNative(Object, 'create');\n\n    /** Used to store function metadata. */\n    var metaMap = WeakMap && new WeakMap;\n\n    /** Used to lookup unminified function names. */\n    var realNames = {};\n\n    /** Used to detect maps, sets, and weakmaps. */\n    var dataViewCtorString = toSource(DataView),\n        mapCtorString = toSource(Map),\n        promiseCtorString = toSource(Promise),\n        setCtorString = toSource(Set),\n        weakMapCtorString = toSource(WeakMap);\n\n    /** Used to convert symbols to primitives and strings. */\n    var symbolProto = Symbol ? Symbol.prototype : undefined,\n        symbolValueOf = symbolProto ? symbolProto.valueOf : undefined,\n        symbolToString = symbolProto ? symbolProto.toString : undefined;\n\n    /*------------------------------------------------------------------------*/\n\n    /**\n     * Creates a `lodash` object which wraps `value` to enable implicit method\n     * chain sequences. Methods that operate on and return arrays, collections,\n     * and functions can be chained together. Methods that retrieve a single value\n     * or may return a primitive value will automatically end the chain sequence\n     * and return the unwrapped value. Otherwise, the value must be unwrapped\n     * with `_#value`.\n     *\n     * Explicit chain sequences, which must be unwrapped with `_#value`, may be\n     * enabled using `_.chain`.\n     *\n     * The execution of chained methods is lazy, that is, it's deferred until\n     * `_#value` is implicitly or explicitly called.\n     *\n     * Lazy evaluation allows several methods to support shortcut fusion.\n     * Shortcut fusion is an optimization to merge iteratee calls; this avoids\n     * the creation of intermediate arrays and can greatly reduce the number of\n     * iteratee executions. Sections of a chain sequence qualify for shortcut\n     * fusion if the section is applied to an array and iteratees accept only\n     * one argument. The heuristic for whether a section qualifies for shortcut\n     * fusion is subject to change.\n     *\n     * Chaining is supported in custom builds as long as the `_#value` method is\n     * directly or indirectly included in the build.\n     *\n     * In addition to lodash methods, wrappers have `Array` and `String` methods.\n     *\n     * The wrapper `Array` methods are:\n     * `concat`, `join`, `pop`, `push`, `shift`, `sort`, `splice`, and `unshift`\n     *\n     * The wrapper `String` methods are:\n     * `replace` and `split`\n     *\n     * The wrapper methods that support shortcut fusion are:\n     * `at`, `compact`, `drop`, `dropRight`, `dropWhile`, `filter`, `find`,\n     * `findLast`, `head`, `initial`, `last`, `map`, `reject`, `reverse`, `slice`,\n     * `tail`, `take`, `takeRight`, `takeRightWhile`, `takeWhile`, and `toArray`\n     *\n     * The chainable wrapper methods are:\n     * `after`, `ary`, `assign`, `assignIn`, `assignInWith`, `assignWith`, `at`,\n     * `before`, `bind`, `bindAll`, `bindKey`, `castArray`, `chain`, `chunk`,\n     * `commit`, `compact`, `concat`, `conforms`, `constant`, `countBy`, `create`,\n     * `curry`, `debounce`, `defaults`, `defaultsDeep`, `defer`, `delay`,\n     * `difference`, `differenceBy`, `differenceWith`, `drop`, `dropRight`,\n     * `dropRightWhile`, `dropWhile`, `extend`, `extendWith`, `fill`, `filter`,\n     * `flatMap`, `flatMapDeep`, `flatMapDepth`, `flatten`, `flattenDeep`,\n     * `flattenDepth`, `flip`, `flow`, `flowRight`, `fromPairs`, `functions`,\n     * `functionsIn`, `groupBy`, `initial`, `intersection`, `intersectionBy`,\n     * `intersectionWith`, `invert`, `invertBy`, `invokeMap`, `iteratee`, `keyBy`,\n     * `keys`, `keysIn`, `map`, `mapKeys`, `mapValues`, `matches`, `matchesProperty`,\n     * `memoize`, `merge`, `mergeWith`, `method`, `methodOf`, `mixin`, `negate`,\n     * `nthArg`, `omit`, `omitBy`, `once`, `orderBy`, `over`, `overArgs`,\n     * `overEvery`, `overSome`, `partial`, `partialRight`, `partition`, `pick`,\n     * `pickBy`, `plant`, `property`, `propertyOf`, `pull`, `pullAll`, `pullAllBy`,\n     * `pullAllWith`, `pullAt`, `push`, `range`, `rangeRight`, `rearg`, `reject`,\n     * `remove`, `rest`, `reverse`, `sampleSize`, `set`, `setWith`, `shuffle`,\n     * `slice`, `sort`, `sortBy`, `splice`, `spread`, `tail`, `take`, `takeRight`,\n     * `takeRightWhile`, `takeWhile`, `tap`, `throttle`, `thru`, `toArray`,\n     * `toPairs`, `toPairsIn`, `toPath`, `toPlainObject`, `transform`, `unary`,\n     * `union`, `unionBy`, `unionWith`, `uniq`, `uniqBy`, `uniqWith`, `unset`,\n     * `unshift`, `unzip`, `unzipWith`, `update`, `updateWith`, `values`,\n     * `valuesIn`, `without`, `wrap`, `xor`, `xorBy`, `xorWith`, `zip`,\n     * `zipObject`, `zipObjectDeep`, and `zipWith`\n     *\n     * The wrapper methods that are **not** chainable by default are:\n     * `add`, `attempt`, `camelCase`, `capitalize`, `ceil`, `clamp`, `clone`,\n     * `cloneDeep`, `cloneDeepWith`, `cloneWith`, `conformsTo`, `deburr`,\n     * `defaultTo`, `divide`, `each`, `eachRight`, `endsWith`, `eq`, `escape`,\n     * `escapeRegExp`, `every`, `find`, `findIndex`, `findKey`, `findLast`,\n     * `findLastIndex`, `findLastKey`, `first`, `floor`, `forEach`, `forEachRight`,\n     * `forIn`, `forInRight`, `forOwn`, `forOwnRight`, `get`, `gt`, `gte`, `has`,\n     * `hasIn`, `head`, `identity`, `includes`, `indexOf`, `inRange`, `invoke`,\n     * `isArguments`, `isArray`, `isArrayBuffer`, `isArrayLike`, `isArrayLikeObject`,\n     * `isBoolean`, `isBuffer`, `isDate`, `isElement`, `isEmpty`, `isEqual`,\n     * `isEqualWith`, `isError`, `isFinite`, `isFunction`, `isInteger`, `isLength`,\n     * `isMap`, `isMatch`, `isMatchWith`, `isNaN`, `isNative`, `isNil`, `isNull`,\n     * `isNumber`, `isObject`, `isObjectLike`, `isPlainObject`, `isRegExp`,\n     * `isSafeInteger`, `isSet`, `isString`, `isUndefined`, `isTypedArray`,\n     * `isWeakMap`, `isWeakSet`, `join`, `kebabCase`, `last`, `lastIndexOf`,\n     * `lowerCase`, `lowerFirst`, `lt`, `lte`, `max`, `maxBy`, `mean`, `meanBy`,\n     * `min`, `minBy`, `multiply`, `noConflict`, `noop`, `now`, `nth`, `pad`,\n     * `padEnd`, `padStart`, `parseInt`, `pop`, `random`, `reduce`, `reduceRight`,\n     * `repeat`, `result`, `round`, `runInContext`, `sample`, `shift`, `size`,\n     * `snakeCase`, `some`, `sortedIndex`, `sortedIndexBy`, `sortedLastIndex`,\n     * `sortedLastIndexBy`, `startCase`, `startsWith`, `stubArray`, `stubFalse`,\n     * `stubObject`, `stubString`, `stubTrue`, `subtract`, `sum`, `sumBy`,\n     * `template`, `times`, `toFinite`, `toInteger`, `toJSON`, `toLength`,\n     * `toLower`, `toNumber`, `toSafeInteger`, `toString`, `toUpper`, `trim`,\n     * `trimEnd`, `trimStart`, `truncate`, `unescape`, `uniqueId`, `upperCase`,\n     * `upperFirst`, `value`, and `words`\n     *\n     * @name _\n     * @constructor\n     * @category Seq\n     * @param {*} value The value to wrap in a `lodash` instance.\n     * @returns {Object} Returns the new `lodash` wrapper instance.\n     * @example\n     *\n     * function square(n) {\n     *   return n * n;\n     * }\n     *\n     * var wrapped = _([1, 2, 3]);\n     *\n     * // Returns an unwrapped value.\n     * wrapped.reduce(_.add);\n     * // => 6\n     *\n     * // Returns a wrapped value.\n     * var squares = wrapped.map(square);\n     *\n     * _.isArray(squares);\n     * // => false\n     *\n     * _.isArray(squares.value());\n     * // => true\n     */\n    function lodash(value) {\n      if (isObjectLike(value) && !isArray(value) && !(value instanceof LazyWrapper)) {\n        if (value instanceof LodashWrapper) {\n          return value;\n        }\n        if (hasOwnProperty.call(value, '__wrapped__')) {\n          return wrapperClone(value);\n        }\n      }\n      return new LodashWrapper(value);\n    }\n\n    /**\n     * The base implementation of `_.create` without support for assigning\n     * properties to the created object.\n     *\n     * @private\n     * @param {Object} proto The object to inherit from.\n     * @returns {Object} Returns the new object.\n     */\n    var baseCreate = (function() {\n      function object() {}\n      return function(proto) {\n        if (!isObject(proto)) {\n          return {};\n        }\n        if (objectCreate) {\n          return objectCreate(proto);\n        }\n        object.prototype = proto;\n        var result = new object;\n        object.prototype = undefined;\n        return result;\n      };\n    }());\n\n    /**\n     * The function whose prototype chain sequence wrappers inherit from.\n     *\n     * @private\n     */\n    function baseLodash() {\n      // No operation performed.\n    }\n\n    /**\n     * The base constructor for creating `lodash` wrapper objects.\n     *\n     * @private\n     * @param {*} value The value to wrap.\n     * @param {boolean} [chainAll] Enable explicit method chain sequences.\n     */\n    function LodashWrapper(value, chainAll) {\n      this.__wrapped__ = value;\n      this.__actions__ = [];\n      this.__chain__ = !!chainAll;\n      this.__index__ = 0;\n      this.__values__ = undefined;\n    }\n\n    /**\n     * By default, the template delimiters used by lodash are like those in\n     * embedded Ruby (ERB) as well as ES2015 template strings. Change the\n     * following template settings to use alternative delimiters.\n     *\n     * @static\n     * @memberOf _\n     * @type {Object}\n     */\n    lodash.templateSettings = {\n\n      /**\n       * Used to detect `data` property values to be HTML-escaped.\n       *\n       * @memberOf _.templateSettings\n       * @type {RegExp}\n       */\n      'escape': reEscape,\n\n      /**\n       * Used to detect code to be evaluated.\n       *\n       * @memberOf _.templateSettings\n       * @type {RegExp}\n       */\n      'evaluate': reEvaluate,\n\n      /**\n       * Used to detect `data` property values to inject.\n       *\n       * @memberOf _.templateSettings\n       * @type {RegExp}\n       */\n      'interpolate': reInterpolate,\n\n      /**\n       * Used to reference the data object in the template text.\n       *\n       * @memberOf _.templateSettings\n       * @type {string}\n       */\n      'variable': '',\n\n      /**\n       * Used to import variables into the compiled template.\n       *\n       * @memberOf _.templateSettings\n       * @type {Object}\n       */\n      'imports': {\n\n        /**\n         * A reference to the `lodash` function.\n         *\n         * @memberOf _.templateSettings.imports\n         * @type {Function}\n         */\n        '_': lodash\n      }\n    };\n\n    // Ensure wrappers are instances of `baseLodash`.\n    lodash.prototype = baseLodash.prototype;\n    lodash.prototype.constructor = lodash;\n\n    LodashWrapper.prototype = baseCreate(baseLodash.prototype);\n    LodashWrapper.prototype.constructor = LodashWrapper;\n\n    /*------------------------------------------------------------------------*/\n\n    /**\n     * Creates a lazy wrapper object which wraps `value` to enable lazy evaluation.\n     *\n     * @private\n     * @constructor\n     * @param {*} value The value to wrap.\n     */\n    function LazyWrapper(value) {\n      this.__wrapped__ = value;\n      this.__actions__ = [];\n      this.__dir__ = 1;\n      this.__filtered__ = false;\n      this.__iteratees__ = [];\n      this.__takeCount__ = MAX_ARRAY_LENGTH;\n      this.__views__ = [];\n    }\n\n    /**\n     * Creates a clone of the lazy wrapper object.\n     *\n     * @private\n     * @name clone\n     * @memberOf LazyWrapper\n     * @returns {Object} Returns the cloned `LazyWrapper` object.\n     */\n    function lazyClone() {\n      var result = new LazyWrapper(this.__wrapped__);\n      result.__actions__ = copyArray(this.__actions__);\n      result.__dir__ = this.__dir__;\n      result.__filtered__ = this.__filtered__;\n      result.__iteratees__ = copyArray(this.__iteratees__);\n      result.__takeCount__ = this.__takeCount__;\n      result.__views__ = copyArray(this.__views__);\n      return result;\n    }\n\n    /**\n     * Reverses the direction of lazy iteration.\n     *\n     * @private\n     * @name reverse\n     * @memberOf LazyWrapper\n     * @returns {Object} Returns the new reversed `LazyWrapper` object.\n     */\n    function lazyReverse() {\n      if (this.__filtered__) {\n        var result = new LazyWrapper(this);\n        result.__dir__ = -1;\n        result.__filtered__ = true;\n      } else {\n        result = this.clone();\n        result.__dir__ *= -1;\n      }\n      return result;\n    }\n\n    /**\n     * Extracts the unwrapped value from its lazy wrapper.\n     *\n     * @private\n     * @name value\n     * @memberOf LazyWrapper\n     * @returns {*} Returns the unwrapped value.\n     */\n    function lazyValue() {\n      var array = this.__wrapped__.value(),\n          dir = this.__dir__,\n          isArr = isArray(array),\n          isRight = dir < 0,\n          arrLength = isArr ? array.length : 0,\n          view = getView(0, arrLength, this.__views__),\n          start = view.start,\n          end = view.end,\n          length = end - start,\n          index = isRight ? end : (start - 1),\n          iteratees = this.__iteratees__,\n          iterLength = iteratees.length,\n          resIndex = 0,\n          takeCount = nativeMin(length, this.__takeCount__);\n\n      if (!isArr || (!isRight && arrLength == length && takeCount == length)) {\n        return baseWrapperValue(array, this.__actions__);\n      }\n      var result = [];\n\n      outer:\n      while (length-- && resIndex < takeCount) {\n        index += dir;\n\n        var iterIndex = -1,\n            value = array[index];\n\n        while (++iterIndex < iterLength) {\n          var data = iteratees[iterIndex],\n              iteratee = data.iteratee,\n              type = data.type,\n              computed = iteratee(value);\n\n          if (type == LAZY_MAP_FLAG) {\n            value = computed;\n          } else if (!computed) {\n            if (type == LAZY_FILTER_FLAG) {\n              continue outer;\n            } else {\n              break outer;\n            }\n          }\n        }\n        result[resIndex++] = value;\n      }\n      return result;\n    }\n\n    // Ensure `LazyWrapper` is an instance of `baseLodash`.\n    LazyWrapper.prototype = baseCreate(baseLodash.prototype);\n    LazyWrapper.prototype.constructor = LazyWrapper;\n\n    /*------------------------------------------------------------------------*/\n\n    /**\n     * Creates a hash object.\n     *\n     * @private\n     * @constructor\n     * @param {Array} [entries] The key-value pairs to cache.\n     */\n    function Hash(entries) {\n      var index = -1,\n          length = entries == null ? 0 : entries.length;\n\n      this.clear();\n      while (++index < length) {\n        var entry = entries[index];\n        this.set(entry[0], entry[1]);\n      }\n    }\n\n    /**\n     * Removes all key-value entries from the hash.\n     *\n     * @private\n     * @name clear\n     * @memberOf Hash\n     */\n    function hashClear() {\n      this.__data__ = nativeCreate ? nativeCreate(null) : {};\n      this.size = 0;\n    }\n\n    /**\n     * Removes `key` and its value from the hash.\n     *\n     * @private\n     * @name delete\n     * @memberOf Hash\n     * @param {Object} hash The hash to modify.\n     * @param {string} key The key of the value to remove.\n     * @returns {boolean} Returns `true` if the entry was removed, else `false`.\n     */\n    function hashDelete(key) {\n      var result = this.has(key) && delete this.__data__[key];\n      this.size -= result ? 1 : 0;\n      return result;\n    }\n\n    /**\n     * Gets the hash value for `key`.\n     *\n     * @private\n     * @name get\n     * @memberOf Hash\n     * @param {string} key The key of the value to get.\n     * @returns {*} Returns the entry value.\n     */\n    function hashGet(key) {\n      var data = this.__data__;\n      if (nativeCreate) {\n        var result = data[key];\n        return result === HASH_UNDEFINED ? undefined : result;\n      }\n      return hasOwnProperty.call(data, key) ? data[key] : undefined;\n    }\n\n    /**\n     * Checks if a hash value for `key` exists.\n     *\n     * @private\n     * @name has\n     * @memberOf Hash\n     * @param {string} key The key of the entry to check.\n     * @returns {boolean} Returns `true` if an entry for `key` exists, else `false`.\n     */\n    function hashHas(key) {\n      var data = this.__data__;\n      return nativeCreate ? (data[key] !== undefined) : hasOwnProperty.call(data, key);\n    }\n\n    /**\n     * Sets the hash `key` to `value`.\n     *\n     * @private\n     * @name set\n     * @memberOf Hash\n     * @param {string} key The key of the value to set.\n     * @param {*} value The value to set.\n     * @returns {Object} Returns the hash instance.\n     */\n    function hashSet(key, value) {\n      var data = this.__data__;\n      this.size += this.has(key) ? 0 : 1;\n      data[key] = (nativeCreate && value === undefined) ? HASH_UNDEFINED : value;\n      return this;\n    }\n\n    // Add methods to `Hash`.\n    Hash.prototype.clear = hashClear;\n    Hash.prototype['delete'] = hashDelete;\n    Hash.prototype.get = hashGet;\n    Hash.prototype.has = hashHas;\n    Hash.prototype.set = hashSet;\n\n    /*------------------------------------------------------------------------*/\n\n    /**\n     * Creates an list cache object.\n     *\n     * @private\n     * @constructor\n     * @param {Array} [entries] The key-value pairs to cache.\n     */\n    function ListCache(entries) {\n      var index = -1,\n          length = entries == null ? 0 : entries.length;\n\n      this.clear();\n      while (++index < length) {\n        var entry = entries[index];\n        this.set(entry[0], entry[1]);\n      }\n    }\n\n    /**\n     * Removes all key-value entries from the list cache.\n     *\n     * @private\n     * @name clear\n     * @memberOf ListCache\n     */\n    function listCacheClear() {\n      this.__data__ = [];\n      this.size = 0;\n    }\n\n    /**\n     * Removes `key` and its value from the list cache.\n     *\n     * @private\n     * @name delete\n     * @memberOf ListCache\n     * @param {string} key The key of the value to remove.\n     * @returns {boolean} Returns `true` if the entry was removed, else `false`.\n     */\n    function listCacheDelete(key) {\n      var data = this.__data__,\n          index = assocIndexOf(data, key);\n\n      if (index < 0) {\n        return false;\n      }\n      var lastIndex = data.length - 1;\n      if (index == lastIndex) {\n        data.pop();\n      } else {\n        splice.call(data, index, 1);\n      }\n      --this.size;\n      return true;\n    }\n\n    /**\n     * Gets the list cache value for `key`.\n     *\n     * @private\n     * @name get\n     * @memberOf ListCache\n     * @param {string} key The key of the value to get.\n     * @returns {*} Returns the entry value.\n     */\n    function listCacheGet(key) {\n      var data = this.__data__,\n          index = assocIndexOf(data, key);\n\n      return index < 0 ? undefined : data[index][1];\n    }\n\n    /**\n     * Checks if a list cache value for `key` exists.\n     *\n     * @private\n     * @name has\n     * @memberOf ListCache\n     * @param {string} key The key of the entry to check.\n     * @returns {boolean} Returns `true` if an entry for `key` exists, else `false`.\n     */\n    function listCacheHas(key) {\n      return assocIndexOf(this.__data__, key) > -1;\n    }\n\n    /**\n     * Sets the list cache `key` to `value`.\n     *\n     * @private\n     * @name set\n     * @memberOf ListCache\n     * @param {string} key The key of the value to set.\n     * @param {*} value The value to set.\n     * @returns {Object} Returns the list cache instance.\n     */\n    function listCacheSet(key, value) {\n      var data = this.__data__,\n          index = assocIndexOf(data, key);\n\n      if (index < 0) {\n        ++this.size;\n        data.push([key, value]);\n      } else {\n        data[index][1] = value;\n      }\n      return this;\n    }\n\n    // Add methods to `ListCache`.\n    ListCache.prototype.clear = listCacheClear;\n    ListCache.prototype['delete'] = listCacheDelete;\n    ListCache.prototype.get = listCacheGet;\n    ListCache.prototype.has = listCacheHas;\n    ListCache.prototype.set = listCacheSet;\n\n    /*------------------------------------------------------------------------*/\n\n    /**\n     * Creates a map cache object to store key-value pairs.\n     *\n     * @private\n     * @constructor\n     * @param {Array} [entries] The key-value pairs to cache.\n     */\n    function MapCache(entries) {\n      var index = -1,\n          length = entries == null ? 0 : entries.length;\n\n      this.clear();\n      while (++index < length) {\n        var entry = entries[index];\n        this.set(entry[0], entry[1]);\n      }\n    }\n\n    /**\n     * Removes all key-value entries from the map.\n     *\n     * @private\n     * @name clear\n     * @memberOf MapCache\n     */\n    function mapCacheClear() {\n      this.size = 0;\n      this.__data__ = {\n        'hash': new Hash,\n        'map': new (Map || ListCache),\n        'string': new Hash\n      };\n    }\n\n    /**\n     * Removes `key` and its value from the map.\n     *\n     * @private\n     * @name delete\n     * @memberOf MapCache\n     * @param {string} key The key of the value to remove.\n     * @returns {boolean} Returns `true` if the entry was removed, else `false`.\n     */\n    function mapCacheDelete(key) {\n      var result = getMapData(this, key)['delete'](key);\n      this.size -= result ? 1 : 0;\n      return result;\n    }\n\n    /**\n     * Gets the map value for `key`.\n     *\n     * @private\n     * @name get\n     * @memberOf MapCache\n     * @param {string} key The key of the value to get.\n     * @returns {*} Returns the entry value.\n     */\n    function mapCacheGet(key) {\n      return getMapData(this, key).get(key);\n    }\n\n    /**\n     * Checks if a map value for `key` exists.\n     *\n     * @private\n     * @name has\n     * @memberOf MapCache\n     * @param {string} key The key of the entry to check.\n     * @returns {boolean} Returns `true` if an entry for `key` exists, else `false`.\n     */\n    function mapCacheHas(key) {\n      return getMapData(this, key).has(key);\n    }\n\n    /**\n     * Sets the map `key` to `value`.\n     *\n     * @private\n     * @name set\n     * @memberOf MapCache\n     * @param {string} key The key of the value to set.\n     * @param {*} value The value to set.\n     * @returns {Object} Returns the map cache instance.\n     */\n    function mapCacheSet(key, value) {\n      var data = getMapData(this, key),\n          size = data.size;\n\n      data.set(key, value);\n      this.size += data.size == size ? 0 : 1;\n      return this;\n    }\n\n    // Add methods to `MapCache`.\n    MapCache.prototype.clear = mapCacheClear;\n    MapCache.prototype['delete'] = mapCacheDelete;\n    MapCache.prototype.get = mapCacheGet;\n    MapCache.prototype.has = mapCacheHas;\n    MapCache.prototype.set = mapCacheSet;\n\n    /*------------------------------------------------------------------------*/\n\n    /**\n     *\n     * Creates an array cache object to store unique values.\n     *\n     * @private\n     * @constructor\n     * @param {Array} [values] The values to cache.\n     */\n    function SetCache(values) {\n      var index = -1,\n          length = values == null ? 0 : values.length;\n\n      this.__data__ = new MapCache;\n      while (++index < length) {\n        this.add(values[index]);\n      }\n    }\n\n    /**\n     * Adds `value` to the array cache.\n     *\n     * @private\n     * @name add\n     * @memberOf SetCache\n     * @alias push\n     * @param {*} value The value to cache.\n     * @returns {Object} Returns the cache instance.\n     */\n    function setCacheAdd(value) {\n      this.__data__.set(value, HASH_UNDEFINED);\n      return this;\n    }\n\n    /**\n     * Checks if `value` is in the array cache.\n     *\n     * @private\n     * @name has\n     * @memberOf SetCache\n     * @param {*} value The value to search for.\n     * @returns {number} Returns `true` if `value` is found, else `false`.\n     */\n    function setCacheHas(value) {\n      return this.__data__.has(value);\n    }\n\n    // Add methods to `SetCache`.\n    SetCache.prototype.add = SetCache.prototype.push = setCacheAdd;\n    SetCache.prototype.has = setCacheHas;\n\n    /*------------------------------------------------------------------------*/\n\n    /**\n     * Creates a stack cache object to store key-value pairs.\n     *\n     * @private\n     * @constructor\n     * @param {Array} [entries] The key-value pairs to cache.\n     */\n    function Stack(entries) {\n      var data = this.__data__ = new ListCache(entries);\n      this.size = data.size;\n    }\n\n    /**\n     * Removes all key-value entries from the stack.\n     *\n     * @private\n     * @name clear\n     * @memberOf Stack\n     */\n    function stackClear() {\n      this.__data__ = new ListCache;\n      this.size = 0;\n    }\n\n    /**\n     * Removes `key` and its value from the stack.\n     *\n     * @private\n     * @name delete\n     * @memberOf Stack\n     * @param {string} key The key of the value to remove.\n     * @returns {boolean} Returns `true` if the entry was removed, else `false`.\n     */\n    function stackDelete(key) {\n      var data = this.__data__,\n          result = data['delete'](key);\n\n      this.size = data.size;\n      return result;\n    }\n\n    /**\n     * Gets the stack value for `key`.\n     *\n     * @private\n     * @name get\n     * @memberOf Stack\n     * @param {string} key The key of the value to get.\n     * @returns {*} Returns the entry value.\n     */\n    function stackGet(key) {\n      return this.__data__.get(key);\n    }\n\n    /**\n     * Checks if a stack value for `key` exists.\n     *\n     * @private\n     * @name has\n     * @memberOf Stack\n     * @param {string} key The key of the entry to check.\n     * @returns {boolean} Returns `true` if an entry for `key` exists, else `false`.\n     */\n    function stackHas(key) {\n      return this.__data__.has(key);\n    }\n\n    /**\n     * Sets the stack `key` to `value`.\n     *\n     * @private\n     * @name set\n     * @memberOf Stack\n     * @param {string} key The key of the value to set.\n     * @param {*} value The value to set.\n     * @returns {Object} Returns the stack cache instance.\n     */\n    function stackSet(key, value) {\n      var data = this.__data__;\n      if (data instanceof ListCache) {\n        var pairs = data.__data__;\n        if (!Map || (pairs.length < LARGE_ARRAY_SIZE - 1)) {\n          pairs.push([key, value]);\n          this.size = ++data.size;\n          return this;\n        }\n        data = this.__data__ = new MapCache(pairs);\n      }\n      data.set(key, value);\n      this.size = data.size;\n      return this;\n    }\n\n    // Add methods to `Stack`.\n    Stack.prototype.clear = stackClear;\n    Stack.prototype['delete'] = stackDelete;\n    Stack.prototype.get = stackGet;\n    Stack.prototype.has = stackHas;\n    Stack.prototype.set = stackSet;\n\n    /*------------------------------------------------------------------------*/\n\n    /**\n     * Creates an array of the enumerable property names of the array-like `value`.\n     *\n     * @private\n     * @param {*} value The value to query.\n     * @param {boolean} inherited Specify returning inherited property names.\n     * @returns {Array} Returns the array of property names.\n     */\n    function arrayLikeKeys(value, inherited) {\n      var isArr = isArray(value),\n          isArg = !isArr && isArguments(value),\n          isBuff = !isArr && !isArg && isBuffer(value),\n          isType = !isArr && !isArg && !isBuff && isTypedArray(value),\n          skipIndexes = isArr || isArg || isBuff || isType,\n          result = skipIndexes ? baseTimes(value.length, String) : [],\n          length = result.length;\n\n      for (var key in value) {\n        if ((inherited || hasOwnProperty.call(value, key)) &&\n            !(skipIndexes && (\n               // Safari 9 has enumerable `arguments.length` in strict mode.\n               key == 'length' ||\n               // Node.js 0.10 has enumerable non-index properties on buffers.\n               (isBuff && (key == 'offset' || key == 'parent')) ||\n               // PhantomJS 2 has enumerable non-index properties on typed arrays.\n               (isType && (key == 'buffer' || key == 'byteLength' || key == 'byteOffset')) ||\n               // Skip index properties.\n               isIndex(key, length)\n            ))) {\n          result.push(key);\n        }\n      }\n      return result;\n    }\n\n    /**\n     * A specialized version of `_.sample` for arrays.\n     *\n     * @private\n     * @param {Array} array The array to sample.\n     * @returns {*} Returns the random element.\n     */\n    function arraySample(array) {\n      var length = array.length;\n      return length ? array[baseRandom(0, length - 1)] : undefined;\n    }\n\n    /**\n     * A specialized version of `_.sampleSize` for arrays.\n     *\n     * @private\n     * @param {Array} array The array to sample.\n     * @param {number} n The number of elements to sample.\n     * @returns {Array} Returns the random elements.\n     */\n    function arraySampleSize(array, n) {\n      return shuffleSelf(copyArray(array), baseClamp(n, 0, array.length));\n    }\n\n    /**\n     * A specialized version of `_.shuffle` for arrays.\n     *\n     * @private\n     * @param {Array} array The array to shuffle.\n     * @returns {Array} Returns the new shuffled array.\n     */\n    function arrayShuffle(array) {\n      return shuffleSelf(copyArray(array));\n    }\n\n    /**\n     * This function is like `assignValue` except that it doesn't assign\n     * `undefined` values.\n     *\n     * @private\n     * @param {Object} object The object to modify.\n     * @param {string} key The key of the property to assign.\n     * @param {*} value The value to assign.\n     */\n    function assignMergeValue(object, key, value) {\n      if ((value !== undefined && !eq(object[key], value)) ||\n          (value === undefined && !(key in object))) {\n        baseAssignValue(object, key, value);\n      }\n    }\n\n    /**\n     * Assigns `value` to `key` of `object` if the existing value is not equivalent\n     * using [`SameValueZero`](http://ecma-international.org/ecma-262/7.0/#sec-samevaluezero)\n     * for equality comparisons.\n     *\n     * @private\n     * @param {Object} object The object to modify.\n     * @param {string} key The key of the property to assign.\n     * @param {*} value The value to assign.\n     */\n    function assignValue(object, key, value) {\n      var objValue = object[key];\n      if (!(hasOwnProperty.call(object, key) && eq(objValue, value)) ||\n          (value === undefined && !(key in object))) {\n        baseAssignValue(object, key, value);\n      }\n    }\n\n    /**\n     * Gets the index at which the `key` is found in `array` of key-value pairs.\n     *\n     * @private\n     * @param {Array} array The array to inspect.\n     * @param {*} key The key to search for.\n     * @returns {number} Returns the index of the matched value, else `-1`.\n     */\n    function assocIndexOf(array, key) {\n      var length = array.length;\n      while (length--) {\n        if (eq(array[length][0], key)) {\n          return length;\n        }\n      }\n      return -1;\n    }\n\n    /**\n     * Aggregates elements of `collection` on `accumulator` with keys transformed\n     * by `iteratee` and values set by `setter`.\n     *\n     * @private\n     * @param {Array|Object} collection The collection to iterate over.\n     * @param {Function} setter The function to set `accumulator` values.\n     * @param {Function} iteratee The iteratee to transform keys.\n     * @param {Object} accumulator The initial aggregated object.\n     * @returns {Function} Returns `accumulator`.\n     */\n    function baseAggregator(collection, setter, iteratee, accumulator) {\n      baseEach(collection, function(value, key, collection) {\n        setter(accumulator, value, iteratee(value), collection);\n      });\n      return accumulator;\n    }\n\n    /**\n     * The base implementation of `_.assign` without support for multiple sources\n     * or `customizer` functions.\n     *\n     * @private\n     * @param {Object} object The destination object.\n     * @param {Object} source The source object.\n     * @returns {Object} Returns `object`.\n     */\n    function baseAssign(object, source) {\n      return object && copyObject(source, keys(source), object);\n    }\n\n    /**\n     * The base implementation of `_.assignIn` without support for multiple sources\n     * or `customizer` functions.\n     *\n     * @private\n     * @param {Object} object The destination object.\n     * @param {Object} source The source object.\n     * @returns {Object} Returns `object`.\n     */\n    function baseAssignIn(object, source) {\n      return object && copyObject(source, keysIn(source), object);\n    }\n\n    /**\n     * The base implementation of `assignValue` and `assignMergeValue` without\n     * value checks.\n     *\n     * @private\n     * @param {Object} object The object to modify.\n     * @param {string} key The key of the property to assign.\n     * @param {*} value The value to assign.\n     */\n    function baseAssignValue(object, key, value) {\n      if (key == '__proto__' && defineProperty) {\n        defineProperty(object, key, {\n          'configurable': true,\n          'enumerable': true,\n          'value': value,\n          'writable': true\n        });\n      } else {\n        object[key] = value;\n      }\n    }\n\n    /**\n     * The base implementation of `_.at` without support for individual paths.\n     *\n     * @private\n     * @param {Object} object The object to iterate over.\n     * @param {string[]} paths The property paths to pick.\n     * @returns {Array} Returns the picked elements.\n     */\n    function baseAt(object, paths) {\n      var index = -1,\n          length = paths.length,\n          result = Array(length),\n          skip = object == null;\n\n      while (++index < length) {\n        result[index] = skip ? undefined : get(object, paths[index]);\n      }\n      return result;\n    }\n\n    /**\n     * The base implementation of `_.clamp` which doesn't coerce arguments.\n     *\n     * @private\n     * @param {number} number The number to clamp.\n     * @param {number} [lower] The lower bound.\n     * @param {number} upper The upper bound.\n     * @returns {number} Returns the clamped number.\n     */\n    function baseClamp(number, lower, upper) {\n      if (number === number) {\n        if (upper !== undefined) {\n          number = number <= upper ? number : upper;\n        }\n        if (lower !== undefined) {\n          number = number >= lower ? number : lower;\n        }\n      }\n      return number;\n    }\n\n    /**\n     * The base implementation of `_.clone` and `_.cloneDeep` which tracks\n     * traversed objects.\n     *\n     * @private\n     * @param {*} value The value to clone.\n     * @param {boolean} bitmask The bitmask flags.\n     *  1 - Deep clone\n     *  2 - Flatten inherited properties\n     *  4 - Clone symbols\n     * @param {Function} [customizer] The function to customize cloning.\n     * @param {string} [key] The key of `value`.\n     * @param {Object} [object] The parent object of `value`.\n     * @param {Object} [stack] Tracks traversed objects and their clone counterparts.\n     * @returns {*} Returns the cloned value.\n     */\n    function baseClone(value, bitmask, customizer, key, object, stack) {\n      var result,\n          isDeep = bitmask & CLONE_DEEP_FLAG,\n          isFlat = bitmask & CLONE_FLAT_FLAG,\n          isFull = bitmask & CLONE_SYMBOLS_FLAG;\n\n      if (customizer) {\n        result = object ? customizer(value, key, object, stack) : customizer(value);\n      }\n      if (result !== undefined) {\n        return result;\n      }\n      if (!isObject(value)) {\n        return value;\n      }\n      var isArr = isArray(value);\n      if (isArr) {\n        result = initCloneArray(value);\n        if (!isDeep) {\n          return copyArray(value, result);\n        }\n      } else {\n        var tag = getTag(value),\n            isFunc = tag == funcTag || tag == genTag;\n\n        if (isBuffer(value)) {\n          return cloneBuffer(value, isDeep);\n        }\n        if (tag == objectTag || tag == argsTag || (isFunc && !object)) {\n          result = (isFlat || isFunc) ? {} : initCloneObject(value);\n          if (!isDeep) {\n            return isFlat\n              ? copySymbolsIn(value, baseAssignIn(result, value))\n              : copySymbols(value, baseAssign(result, value));\n          }\n        } else {\n          if (!cloneableTags[tag]) {\n            return object ? value : {};\n          }\n          result = initCloneByTag(value, tag, baseClone, isDeep);\n        }\n      }\n      // Check for circular references and return its corresponding clone.\n      stack || (stack = new Stack);\n      var stacked = stack.get(value);\n      if (stacked) {\n        return stacked;\n      }\n      stack.set(value, result);\n\n      var keysFunc = isFull\n        ? (isFlat ? getAllKeysIn : getAllKeys)\n        : (isFlat ? keysIn : keys);\n\n      var props = isArr ? undefined : keysFunc(value);\n      arrayEach(props || value, function(subValue, key) {\n        if (props) {\n          key = subValue;\n          subValue = value[key];\n        }\n        // Recursively populate clone (susceptible to call stack limits).\n        assignValue(result, key, baseClone(subValue, bitmask, customizer, key, value, stack));\n      });\n      return result;\n    }\n\n    /**\n     * The base implementation of `_.conforms` which doesn't clone `source`.\n     *\n     * @private\n     * @param {Object} source The object of property predicates to conform to.\n     * @returns {Function} Returns the new spec function.\n     */\n    function baseConforms(source) {\n      var props = keys(source);\n      return function(object) {\n        return baseConformsTo(object, source, props);\n      };\n    }\n\n    /**\n     * The base implementation of `_.conformsTo` which accepts `props` to check.\n     *\n     * @private\n     * @param {Object} object The object to inspect.\n     * @param {Object} source The object of property predicates to conform to.\n     * @returns {boolean} Returns `true` if `object` conforms, else `false`.\n     */\n    function baseConformsTo(object, source, props) {\n      var length = props.length;\n      if (object == null) {\n        return !length;\n      }\n      object = Object(object);\n      while (length--) {\n        var key = props[length],\n            predicate = source[key],\n            value = object[key];\n\n        if ((value === undefined && !(key in object)) || !predicate(value)) {\n          return false;\n        }\n      }\n      return true;\n    }\n\n    /**\n     * The base implementation of `_.delay` and `_.defer` which accepts `args`\n     * to provide to `func`.\n     *\n     * @private\n     * @param {Function} func The function to delay.\n     * @param {number} wait The number of milliseconds to delay invocation.\n     * @param {Array} args The arguments to provide to `func`.\n     * @returns {number|Object} Returns the timer id or timeout object.\n     */\n    function baseDelay(func, wait, args) {\n      if (typeof func != 'function') {\n        throw new TypeError(FUNC_ERROR_TEXT);\n      }\n      return setTimeout(function() { func.apply(undefined, args); }, wait);\n    }\n\n    /**\n     * The base implementation of methods like `_.difference` without support\n     * for excluding multiple arrays or iteratee shorthands.\n     *\n     * @private\n     * @param {Array} array The array to inspect.\n     * @param {Array} values The values to exclude.\n     * @param {Function} [iteratee] The iteratee invoked per element.\n     * @param {Function} [comparator] The comparator invoked per element.\n     * @returns {Array} Returns the new array of filtered values.\n     */\n    function baseDifference(array, values, iteratee, comparator) {\n      var index = -1,\n          includes = arrayIncludes,\n          isCommon = true,\n          length = array.length,\n          result = [],\n          valuesLength = values.length;\n\n      if (!length) {\n        return result;\n      }\n      if (iteratee) {\n        values = arrayMap(values, baseUnary(iteratee));\n      }\n      if (comparator) {\n        includes = arrayIncludesWith;\n        isCommon = false;\n      }\n      else if (values.length >= LARGE_ARRAY_SIZE) {\n        includes = cacheHas;\n        isCommon = false;\n        values = new SetCache(values);\n      }\n      outer:\n      while (++index < length) {\n        var value = array[index],\n            computed = iteratee == null ? value : iteratee(value);\n\n        value = (comparator || value !== 0) ? value : 0;\n        if (isCommon && computed === computed) {\n          var valuesIndex = valuesLength;\n          while (valuesIndex--) {\n            if (values[valuesIndex] === computed) {\n              continue outer;\n            }\n          }\n          result.push(value);\n        }\n        else if (!includes(values, computed, comparator)) {\n          result.push(value);\n        }\n      }\n      return result;\n    }\n\n    /**\n     * The base implementation of `_.forEach` without support for iteratee shorthands.\n     *\n     * @private\n     * @param {Array|Object} collection The collection to iterate over.\n     * @param {Function} iteratee The function invoked per iteration.\n     * @returns {Array|Object} Returns `collection`.\n     */\n    var baseEach = createBaseEach(baseForOwn);\n\n    /**\n     * The base implementation of `_.forEachRight` without support for iteratee shorthands.\n     *\n     * @private\n     * @param {Array|Object} collection The collection to iterate over.\n     * @param {Function} iteratee The function invoked per iteration.\n     * @returns {Array|Object} Returns `collection`.\n     */\n    var baseEachRight = createBaseEach(baseForOwnRight, true);\n\n    /**\n     * The base implementation of `_.every` without support for iteratee shorthands.\n     *\n     * @private\n     * @param {Array|Object} collection The collection to iterate over.\n     * @param {Function} predicate The function invoked per iteration.\n     * @returns {boolean} Returns `true` if all elements pass the predicate check,\n     *  else `false`\n     */\n    function baseEvery(collection, predicate) {\n      var result = true;\n      baseEach(collection, function(value, index, collection) {\n        result = !!predicate(value, index, collection);\n        return result;\n      });\n      return result;\n    }\n\n    /**\n     * The base implementation of methods like `_.max` and `_.min` which accepts a\n     * `comparator` to determine the extremum value.\n     *\n     * @private\n     * @param {Array} array The array to iterate over.\n     * @param {Function} iteratee The iteratee invoked per iteration.\n     * @param {Function} comparator The comparator used to compare values.\n     * @returns {*} Returns the extremum value.\n     */\n    function baseExtremum(array, iteratee, comparator) {\n      var index = -1,\n          length = array.length;\n\n      while (++index < length) {\n        var value = array[index],\n            current = iteratee(value);\n\n        if (current != null && (computed === undefined\n              ? (current === current && !isSymbol(current))\n              : comparator(current, computed)\n            )) {\n          var computed = current,\n              result = value;\n        }\n      }\n      return result;\n    }\n\n    /**\n     * The base implementation of `_.fill` without an iteratee call guard.\n     *\n     * @private\n     * @param {Array} array The array to fill.\n     * @param {*} value The value to fill `array` with.\n     * @param {number} [start=0] The start position.\n     * @param {number} [end=array.length] The end position.\n     * @returns {Array} Returns `array`.\n     */\n    function baseFill(array, value, start, end) {\n      var length = array.length;\n\n      start = toInteger(start);\n      if (start < 0) {\n        start = -start > length ? 0 : (length + start);\n      }\n      end = (end === undefined || end > length) ? length : toInteger(end);\n      if (end < 0) {\n        end += length;\n      }\n      end = start > end ? 0 : toLength(end);\n      while (start < end) {\n        array[start++] = value;\n      }\n      return array;\n    }\n\n    /**\n     * The base implementation of `_.filter` without support for iteratee shorthands.\n     *\n     * @private\n     * @param {Array|Object} collection The collection to iterate over.\n     * @param {Function} predicate The function invoked per iteration.\n     * @returns {Array} Returns the new filtered array.\n     */\n    function baseFilter(collection, predicate) {\n      var result = [];\n      baseEach(collection, function(value, index, collection) {\n        if (predicate(value, index, collection)) {\n          result.push(value);\n        }\n      });\n      return result;\n    }\n\n    /**\n     * The base implementation of `_.flatten` with support for restricting flattening.\n     *\n     * @private\n     * @param {Array} array The array to flatten.\n     * @param {number} depth The maximum recursion depth.\n     * @param {boolean} [predicate=isFlattenable] The function invoked per iteration.\n     * @param {boolean} [isStrict] Restrict to values that pass `predicate` checks.\n     * @param {Array} [result=[]] The initial result value.\n     * @returns {Array} Returns the new flattened array.\n     */\n    function baseFlatten(array, depth, predicate, isStrict, result) {\n      var index = -1,\n          length = array.length;\n\n      predicate || (predicate = isFlattenable);\n      result || (result = []);\n\n      while (++index < length) {\n        var value = array[index];\n        if (depth > 0 && predicate(value)) {\n          if (depth > 1) {\n            // Recursively flatten arrays (susceptible to call stack limits).\n            baseFlatten(value, depth - 1, predicate, isStrict, result);\n          } else {\n            arrayPush(result, value);\n          }\n        } else if (!isStrict) {\n          result[result.length] = value;\n        }\n      }\n      return result;\n    }\n\n    /**\n     * The base implementation of `baseForOwn` which iterates over `object`\n     * properties returned by `keysFunc` and invokes `iteratee` for each property.\n     * Iteratee functions may exit iteration early by explicitly returning `false`.\n     *\n     * @private\n     * @param {Object} object The object to iterate over.\n     * @param {Function} iteratee The function invoked per iteration.\n     * @param {Function} keysFunc The function to get the keys of `object`.\n     * @returns {Object} Returns `object`.\n     */\n    var baseFor = createBaseFor();\n\n    /**\n     * This function is like `baseFor` except that it iterates over properties\n     * in the opposite order.\n     *\n     * @private\n     * @param {Object} object The object to iterate over.\n     * @param {Function} iteratee The function invoked per iteration.\n     * @param {Function} keysFunc The function to get the keys of `object`.\n     * @returns {Object} Returns `object`.\n     */\n    var baseForRight = createBaseFor(true);\n\n    /**\n     * The base implementation of `_.forOwn` without support for iteratee shorthands.\n     *\n     * @private\n     * @param {Object} object The object to iterate over.\n     * @param {Function} iteratee The function invoked per iteration.\n     * @returns {Object} Returns `object`.\n     */\n    function baseForOwn(object, iteratee) {\n      return object && baseFor(object, iteratee, keys);\n    }\n\n    /**\n     * The base implementation of `_.forOwnRight` without support for iteratee shorthands.\n     *\n     * @private\n     * @param {Object} object The object to iterate over.\n     * @param {Function} iteratee The function invoked per iteration.\n     * @returns {Object} Returns `object`.\n     */\n    function baseForOwnRight(object, iteratee) {\n      return object && baseForRight(object, iteratee, keys);\n    }\n\n    /**\n     * The base implementation of `_.functions` which creates an array of\n     * `object` function property names filtered from `props`.\n     *\n     * @private\n     * @param {Object} object The object to inspect.\n     * @param {Array} props The property names to filter.\n     * @returns {Array} Returns the function names.\n     */\n    function baseFunctions(object, props) {\n      return arrayFilter(props, function(key) {\n        return isFunction(object[key]);\n      });\n    }\n\n    /**\n     * The base implementation of `_.get` without support for default values.\n     *\n     * @private\n     * @param {Object} object The object to query.\n     * @param {Array|string} path The path of the property to get.\n     * @returns {*} Returns the resolved value.\n     */\n    function baseGet(object, path) {\n      path = castPath(path, object);\n\n      var index = 0,\n          length = path.length;\n\n      while (object != null && index < length) {\n        object = object[toKey(path[index++])];\n      }\n      return (index && index == length) ? object : undefined;\n    }\n\n    /**\n     * The base implementation of `getAllKeys` and `getAllKeysIn` which uses\n     * `keysFunc` and `symbolsFunc` to get the enumerable property names and\n     * symbols of `object`.\n     *\n     * @private\n     * @param {Object} object The object to query.\n     * @param {Function} keysFunc The function to get the keys of `object`.\n     * @param {Function} symbolsFunc The function to get the symbols of `object`.\n     * @returns {Array} Returns the array of property names and symbols.\n     */\n    function baseGetAllKeys(object, keysFunc, symbolsFunc) {\n      var result = keysFunc(object);\n      return isArray(object) ? result : arrayPush(result, symbolsFunc(object));\n    }\n\n    /**\n     * The base implementation of `getTag` without fallbacks for buggy environments.\n     *\n     * @private\n     * @param {*} value The value to query.\n     * @returns {string} Returns the `toStringTag`.\n     */\n    function baseGetTag(value) {\n      if (value == null) {\n        return value === undefined ? undefinedTag : nullTag;\n      }\n      return (symToStringTag && symToStringTag in Object(value))\n        ? getRawTag(value)\n        : objectToString(value);\n    }\n\n    /**\n     * The base implementation of `_.gt` which doesn't coerce arguments.\n     *\n     * @private\n     * @param {*} value The value to compare.\n     * @param {*} other The other value to compare.\n     * @returns {boolean} Returns `true` if `value` is greater than `other`,\n     *  else `false`.\n     */\n    function baseGt(value, other) {\n      return value > other;\n    }\n\n    /**\n     * The base implementation of `_.has` without support for deep paths.\n     *\n     * @private\n     * @param {Object} [object] The object to query.\n     * @param {Array|string} key The key to check.\n     * @returns {boolean} Returns `true` if `key` exists, else `false`.\n     */\n    function baseHas(object, key) {\n      return object != null && hasOwnProperty.call(object, key);\n    }\n\n    /**\n     * The base implementation of `_.hasIn` without support for deep paths.\n     *\n     * @private\n     * @param {Object} [object] The object to query.\n     * @param {Array|string} key The key to check.\n     * @returns {boolean} Returns `true` if `key` exists, else `false`.\n     */\n    function baseHasIn(object, key) {\n      return object != null && key in Object(object);\n    }\n\n    /**\n     * The base implementation of `_.inRange` which doesn't coerce arguments.\n     *\n     * @private\n     * @param {number} number The number to check.\n     * @param {number} start The start of the range.\n     * @param {number} end The end of the range.\n     * @returns {boolean} Returns `true` if `number` is in the range, else `false`.\n     */\n    function baseInRange(number, start, end) {\n      return number >= nativeMin(start, end) && number < nativeMax(start, end);\n    }\n\n    /**\n     * The base implementation of methods like `_.intersection`, without support\n     * for iteratee shorthands, that accepts an array of arrays to inspect.\n     *\n     * @private\n     * @param {Array} arrays The arrays to inspect.\n     * @param {Function} [iteratee] The iteratee invoked per element.\n     * @param {Function} [comparator] The comparator invoked per element.\n     * @returns {Array} Returns the new array of shared values.\n     */\n    function baseIntersection(arrays, iteratee, comparator) {\n      var includes = comparator ? arrayIncludesWith : arrayIncludes,\n          length = arrays[0].length,\n          othLength = arrays.length,\n          othIndex = othLength,\n          caches = Array(othLength),\n          maxLength = Infinity,\n          result = [];\n\n      while (othIndex--) {\n        var array = arrays[othIndex];\n        if (othIndex && iteratee) {\n          array = arrayMap(array, baseUnary(iteratee));\n        }\n        maxLength = nativeMin(array.length, maxLength);\n        caches[othIndex] = !comparator && (iteratee || (length >= 120 && array.length >= 120))\n          ? new SetCache(othIndex && array)\n          : undefined;\n      }\n      array = arrays[0];\n\n      var index = -1,\n          seen = caches[0];\n\n      outer:\n      while (++index < length && result.length < maxLength) {\n        var value = array[index],\n            computed = iteratee ? iteratee(value) : value;\n\n        value = (comparator || value !== 0) ? value : 0;\n        if (!(seen\n              ? cacheHas(seen, computed)\n              : includes(result, computed, comparator)\n            )) {\n          othIndex = othLength;\n          while (--othIndex) {\n            var cache = caches[othIndex];\n            if (!(cache\n                  ? cacheHas(cache, computed)\n                  : includes(arrays[othIndex], computed, comparator))\n                ) {\n              continue outer;\n            }\n          }\n          if (seen) {\n            seen.push(computed);\n          }\n          result.push(value);\n        }\n      }\n      return result;\n    }\n\n    /**\n     * The base implementation of `_.invert` and `_.invertBy` which inverts\n     * `object` with values transformed by `iteratee` and set by `setter`.\n     *\n     * @private\n     * @param {Object} object The object to iterate over.\n     * @param {Function} setter The function to set `accumulator` values.\n     * @param {Function} iteratee The iteratee to transform values.\n     * @param {Object} accumulator The initial inverted object.\n     * @returns {Function} Returns `accumulator`.\n     */\n    function baseInverter(object, setter, iteratee, accumulator) {\n      baseForOwn(object, function(value, key, object) {\n        setter(accumulator, iteratee(value), key, object);\n      });\n      return accumulator;\n    }\n\n    /**\n     * The base implementation of `_.invoke` without support for individual\n     * method arguments.\n     *\n     * @private\n     * @param {Object} object The object to query.\n     * @param {Array|string} path The path of the method to invoke.\n     * @param {Array} args The arguments to invoke the method with.\n     * @returns {*} Returns the result of the invoked method.\n     */\n    function baseInvoke(object, path, args) {\n      path = castPath(path, object);\n      object = parent(object, path);\n      var func = object == null ? object : object[toKey(last(path))];\n      return func == null ? undefined : apply(func, object, args);\n    }\n\n    /**\n     * The base implementation of `_.isArguments`.\n     *\n     * @private\n     * @param {*} value The value to check.\n     * @returns {boolean} Returns `true` if `value` is an `arguments` object,\n     */\n    function baseIsArguments(value) {\n      return isObjectLike(value) && baseGetTag(value) == argsTag;\n    }\n\n    /**\n     * The base implementation of `_.isArrayBuffer` without Node.js optimizations.\n     *\n     * @private\n     * @param {*} value The value to check.\n     * @returns {boolean} Returns `true` if `value` is an array buffer, else `false`.\n     */\n    function baseIsArrayBuffer(value) {\n      return isObjectLike(value) && baseGetTag(value) == arrayBufferTag;\n    }\n\n    /**\n     * The base implementation of `_.isDate` without Node.js optimizations.\n     *\n     * @private\n     * @param {*} value The value to check.\n     * @returns {boolean} Returns `true` if `value` is a date object, else `false`.\n     */\n    function baseIsDate(value) {\n      return isObjectLike(value) && baseGetTag(value) == dateTag;\n    }\n\n    /**\n     * The base implementation of `_.isEqual` which supports partial comparisons\n     * and tracks traversed objects.\n     *\n     * @private\n     * @param {*} value The value to compare.\n     * @param {*} other The other value to compare.\n     * @param {boolean} bitmask The bitmask flags.\n     *  1 - Unordered comparison\n     *  2 - Partial comparison\n     * @param {Function} [customizer] The function to customize comparisons.\n     * @param {Object} [stack] Tracks traversed `value` and `other` objects.\n     * @returns {boolean} Returns `true` if the values are equivalent, else `false`.\n     */\n    function baseIsEqual(value, other, bitmask, customizer, stack) {\n      if (value === other) {\n        return true;\n      }\n      if (value == null || other == null || (!isObjectLike(value) && !isObjectLike(other))) {\n        return value !== value && other !== other;\n      }\n      return baseIsEqualDeep(value, other, bitmask, customizer, baseIsEqual, stack);\n    }\n\n    /**\n     * A specialized version of `baseIsEqual` for arrays and objects which performs\n     * deep comparisons and tracks traversed objects enabling objects with circular\n     * references to be compared.\n     *\n     * @private\n     * @param {Object} object The object to compare.\n     * @param {Object} other The other object to compare.\n     * @param {number} bitmask The bitmask flags. See `baseIsEqual` for more details.\n     * @param {Function} customizer The function to customize comparisons.\n     * @param {Function} equalFunc The function to determine equivalents of values.\n     * @param {Object} [stack] Tracks traversed `object` and `other` objects.\n     * @returns {boolean} Returns `true` if the objects are equivalent, else `false`.\n     */\n    function baseIsEqualDeep(object, other, bitmask, customizer, equalFunc, stack) {\n      var objIsArr = isArray(object),\n          othIsArr = isArray(other),\n          objTag = objIsArr ? arrayTag : getTag(object),\n          othTag = othIsArr ? arrayTag : getTag(other);\n\n      objTag = objTag == argsTag ? objectTag : objTag;\n      othTag = othTag == argsTag ? objectTag : othTag;\n\n      var objIsObj = objTag == objectTag,\n          othIsObj = othTag == objectTag,\n          isSameTag = objTag == othTag;\n\n      if (isSameTag && isBuffer(object)) {\n        if (!isBuffer(other)) {\n          return false;\n        }\n        objIsArr = true;\n        objIsObj = false;\n      }\n      if (isSameTag && !objIsObj) {\n        stack || (stack = new Stack);\n        return (objIsArr || isTypedArray(object))\n          ? equalArrays(object, other, bitmask, customizer, equalFunc, stack)\n          : equalByTag(object, other, objTag, bitmask, customizer, equalFunc, stack);\n      }\n      if (!(bitmask & COMPARE_PARTIAL_FLAG)) {\n        var objIsWrapped = objIsObj && hasOwnProperty.call(object, '__wrapped__'),\n            othIsWrapped = othIsObj && hasOwnProperty.call(other, '__wrapped__');\n\n        if (objIsWrapped || othIsWrapped) {\n          var objUnwrapped = objIsWrapped ? object.value() : object,\n              othUnwrapped = othIsWrapped ? other.value() : other;\n\n          stack || (stack = new Stack);\n          return equalFunc(objUnwrapped, othUnwrapped, bitmask, customizer, stack);\n        }\n      }\n      if (!isSameTag) {\n        return false;\n      }\n      stack || (stack = new Stack);\n      return equalObjects(object, other, bitmask, customizer, equalFunc, stack);\n    }\n\n    /**\n     * The base implementation of `_.isMap` without Node.js optimizations.\n     *\n     * @private\n     * @param {*} value The value to check.\n     * @returns {boolean} Returns `true` if `value` is a map, else `false`.\n     */\n    function baseIsMap(value) {\n      return isObjectLike(value) && getTag(value) == mapTag;\n    }\n\n    /**\n     * The base implementation of `_.isMatch` without support for iteratee shorthands.\n     *\n     * @private\n     * @param {Object} object The object to inspect.\n     * @param {Object} source The object of property values to match.\n     * @param {Array} matchData The property names, values, and compare flags to match.\n     * @param {Function} [customizer] The function to customize comparisons.\n     * @returns {boolean} Returns `true` if `object` is a match, else `false`.\n     */\n    function baseIsMatch(object, source, matchData, customizer) {\n      var index = matchData.length,\n          length = index,\n          noCustomizer = !customizer;\n\n      if (object == null) {\n        return !length;\n      }\n      object = Object(object);\n      while (index--) {\n        var data = matchData[index];\n        if ((noCustomizer && data[2])\n              ? data[1] !== object[data[0]]\n              : !(data[0] in object)\n            ) {\n          return false;\n        }\n      }\n      while (++index < length) {\n        data = matchData[index];\n        var key = data[0],\n            objValue = object[key],\n            srcValue = data[1];\n\n        if (noCustomizer && data[2]) {\n          if (objValue === undefined && !(key in object)) {\n            return false;\n          }\n        } else {\n          var stack = new Stack;\n          if (customizer) {\n            var result = customizer(objValue, srcValue, key, object, source, stack);\n          }\n          if (!(result === undefined\n                ? baseIsEqual(srcValue, objValue, COMPARE_PARTIAL_FLAG | COMPARE_UNORDERED_FLAG, customizer, stack)\n                : result\n              )) {\n            return false;\n          }\n        }\n      }\n      return true;\n    }\n\n    /**\n     * The base implementation of `_.isNative` without bad shim checks.\n     *\n     * @private\n     * @param {*} value The value to check.\n     * @returns {boolean} Returns `true` if `value` is a native function,\n     *  else `false`.\n     */\n    function baseIsNative(value) {\n      if (!isObject(value) || isMasked(value)) {\n        return false;\n      }\n      var pattern = isFunction(value) ? reIsNative : reIsHostCtor;\n      return pattern.test(toSource(value));\n    }\n\n    /**\n     * The base implementation of `_.isRegExp` without Node.js optimizations.\n     *\n     * @private\n     * @param {*} value The value to check.\n     * @returns {boolean} Returns `true` if `value` is a regexp, else `false`.\n     */\n    function baseIsRegExp(value) {\n      return isObjectLike(value) && baseGetTag(value) == regexpTag;\n    }\n\n    /**\n     * The base implementation of `_.isSet` without Node.js optimizations.\n     *\n     * @private\n     * @param {*} value The value to check.\n     * @returns {boolean} Returns `true` if `value` is a set, else `false`.\n     */\n    function baseIsSet(value) {\n      return isObjectLike(value) && getTag(value) == setTag;\n    }\n\n    /**\n     * The base implementation of `_.isTypedArray` without Node.js optimizations.\n     *\n     * @private\n     * @param {*} value The value to check.\n     * @returns {boolean} Returns `true` if `value` is a typed array, else `false`.\n     */\n    function baseIsTypedArray(value) {\n      return isObjectLike(value) &&\n        isLength(value.length) && !!typedArrayTags[baseGetTag(value)];\n    }\n\n    /**\n     * The base implementation of `_.iteratee`.\n     *\n     * @private\n     * @param {*} [value=_.identity] The value to convert to an iteratee.\n     * @returns {Function} Returns the iteratee.\n     */\n    function baseIteratee(value) {\n      // Don't store the `typeof` result in a variable to avoid a JIT bug in Safari 9.\n      // See https://bugs.webkit.org/show_bug.cgi?id=156034 for more details.\n      if (typeof value == 'function') {\n        return value;\n      }\n      if (value == null) {\n        return identity;\n      }\n      if (typeof value == 'object') {\n        return isArray(value)\n          ? baseMatchesProperty(value[0], value[1])\n          : baseMatches(value);\n      }\n      return property(value);\n    }\n\n    /**\n     * The base implementation of `_.keys` which doesn't treat sparse arrays as dense.\n     *\n     * @private\n     * @param {Object} object The object to query.\n     * @returns {Array} Returns the array of property names.\n     */\n    function baseKeys(object) {\n      if (!isPrototype(object)) {\n        return nativeKeys(object);\n      }\n      var result = [];\n      for (var key in Object(object)) {\n        if (hasOwnProperty.call(object, key) && key != 'constructor') {\n          result.push(key);\n        }\n      }\n      return result;\n    }\n\n    /**\n     * The base implementation of `_.keysIn` which doesn't treat sparse arrays as dense.\n     *\n     * @private\n     * @param {Object} object The object to query.\n     * @returns {Array} Returns the array of property names.\n     */\n    function baseKeysIn(object) {\n      if (!isObject(object)) {\n        return nativeKeysIn(object);\n      }\n      var isProto = isPrototype(object),\n          result = [];\n\n      for (var key in object) {\n        if (!(key == 'constructor' && (isProto || !hasOwnProperty.call(object, key)))) {\n          result.push(key);\n        }\n      }\n      return result;\n    }\n\n    /**\n     * The base implementation of `_.lt` which doesn't coerce arguments.\n     *\n     * @private\n     * @param {*} value The value to compare.\n     * @param {*} other The other value to compare.\n     * @returns {boolean} Returns `true` if `value` is less than `other`,\n     *  else `false`.\n     */\n    function baseLt(value, other) {\n      return value < other;\n    }\n\n    /**\n     * The base implementation of `_.map` without support for iteratee shorthands.\n     *\n     * @private\n     * @param {Array|Object} collection The collection to iterate over.\n     * @param {Function} iteratee The function invoked per iteration.\n     * @returns {Array} Returns the new mapped array.\n     */\n    function baseMap(collection, iteratee) {\n      var index = -1,\n          result = isArrayLike(collection) ? Array(collection.length) : [];\n\n      baseEach(collection, function(value, key, collection) {\n        result[++index] = iteratee(value, key, collection);\n      });\n      return result;\n    }\n\n    /**\n     * The base implementation of `_.matches` which doesn't clone `source`.\n     *\n     * @private\n     * @param {Object} source The object of property values to match.\n     * @returns {Function} Returns the new spec function.\n     */\n    function baseMatches(source) {\n      var matchData = getMatchData(source);\n      if (matchData.length == 1 && matchData[0][2]) {\n        return matchesStrictComparable(matchData[0][0], matchData[0][1]);\n      }\n      return function(object) {\n        return object === source || baseIsMatch(object, source, matchData);\n      };\n    }\n\n    /**\n     * The base implementation of `_.matchesProperty` which doesn't clone `srcValue`.\n     *\n     * @private\n     * @param {string} path The path of the property to get.\n     * @param {*} srcValue The value to match.\n     * @returns {Function} Returns the new spec function.\n     */\n    function baseMatchesProperty(path, srcValue) {\n      if (isKey(path) && isStrictComparable(srcValue)) {\n        return matchesStrictComparable(toKey(path), srcValue);\n      }\n      return function(object) {\n        var objValue = get(object, path);\n        return (objValue === undefined && objValue === srcValue)\n          ? hasIn(object, path)\n          : baseIsEqual(srcValue, objValue, COMPARE_PARTIAL_FLAG | COMPARE_UNORDERED_FLAG);\n      };\n    }\n\n    /**\n     * The base implementation of `_.merge` without support for multiple sources.\n     *\n     * @private\n     * @param {Object} object The destination object.\n     * @param {Object} source The source object.\n     * @param {number} srcIndex The index of `source`.\n     * @param {Function} [customizer] The function to customize merged values.\n     * @param {Object} [stack] Tracks traversed source values and their merged\n     *  counterparts.\n     */\n    function baseMerge(object, source, srcIndex, customizer, stack) {\n      if (object === source) {\n        return;\n      }\n      baseFor(source, function(srcValue, key) {\n        if (isObject(srcValue)) {\n          stack || (stack = new Stack);\n          baseMergeDeep(object, source, key, srcIndex, baseMerge, customizer, stack);\n        }\n        else {\n          var newValue = customizer\n            ? customizer(object[key], srcValue, (key + ''), object, source, stack)\n            : undefined;\n\n          if (newValue === undefined) {\n            newValue = srcValue;\n          }\n          assignMergeValue(object, key, newValue);\n        }\n      }, keysIn);\n    }\n\n    /**\n     * A specialized version of `baseMerge` for arrays and objects which performs\n     * deep merges and tracks traversed objects enabling objects with circular\n     * references to be merged.\n     *\n     * @private\n     * @param {Object} object The destination object.\n     * @param {Object} source The source object.\n     * @param {string} key The key of the value to merge.\n     * @param {number} srcIndex The index of `source`.\n     * @param {Function} mergeFunc The function to merge values.\n     * @param {Function} [customizer] The function to customize assigned values.\n     * @param {Object} [stack] Tracks traversed source values and their merged\n     *  counterparts.\n     */\n    function baseMergeDeep(object, source, key, srcIndex, mergeFunc, customizer, stack) {\n      var objValue = object[key],\n          srcValue = source[key],\n          stacked = stack.get(srcValue);\n\n      if (stacked) {\n        assignMergeValue(object, key, stacked);\n        return;\n      }\n      var newValue = customizer\n        ? customizer(objValue, srcValue, (key + ''), object, source, stack)\n        : undefined;\n\n      var isCommon = newValue === undefined;\n\n      if (isCommon) {\n        var isArr = isArray(srcValue),\n            isBuff = !isArr && isBuffer(srcValue),\n            isTyped = !isArr && !isBuff && isTypedArray(srcValue);\n\n        newValue = srcValue;\n        if (isArr || isBuff || isTyped) {\n          if (isArray(objValue)) {\n            newValue = objValue;\n          }\n          else if (isArrayLikeObject(objValue)) {\n            newValue = copyArray(objValue);\n          }\n          else if (isBuff) {\n            isCommon = false;\n            newValue = cloneBuffer(srcValue, true);\n          }\n          else if (isTyped) {\n            isCommon = false;\n            newValue = cloneTypedArray(srcValue, true);\n          }\n          else {\n            newValue = [];\n          }\n        }\n        else if (isPlainObject(srcValue) || isArguments(srcValue)) {\n          newValue = objValue;\n          if (isArguments(objValue)) {\n            newValue = toPlainObject(objValue);\n          }\n          else if (!isObject(objValue) || (srcIndex && isFunction(objValue))) {\n            newValue = initCloneObject(srcValue);\n          }\n        }\n        else {\n          isCommon = false;\n        }\n      }\n      if (isCommon) {\n        // Recursively merge objects and arrays (susceptible to call stack limits).\n        stack.set(srcValue, newValue);\n        mergeFunc(newValue, srcValue, srcIndex, customizer, stack);\n        stack['delete'](srcValue);\n      }\n      assignMergeValue(object, key, newValue);\n    }\n\n    /**\n     * The base implementation of `_.nth` which doesn't coerce arguments.\n     *\n     * @private\n     * @param {Array} array The array to query.\n     * @param {number} n The index of the element to return.\n     * @returns {*} Returns the nth element of `array`.\n     */\n    function baseNth(array, n) {\n      var length = array.length;\n      if (!length) {\n        return;\n      }\n      n += n < 0 ? length : 0;\n      return isIndex(n, length) ? array[n] : undefined;\n    }\n\n    /**\n     * The base implementation of `_.orderBy` without param guards.\n     *\n     * @private\n     * @param {Array|Object} collection The collection to iterate over.\n     * @param {Function[]|Object[]|string[]} iteratees The iteratees to sort by.\n     * @param {string[]} orders The sort orders of `iteratees`.\n     * @returns {Array} Returns the new sorted array.\n     */\n    function baseOrderBy(collection, iteratees, orders) {\n      var index = -1;\n      iteratees = arrayMap(iteratees.length ? iteratees : [identity], baseUnary(getIteratee()));\n\n      var result = baseMap(collection, function(value, key, collection) {\n        var criteria = arrayMap(iteratees, function(iteratee) {\n          return iteratee(value);\n        });\n        return { 'criteria': criteria, 'index': ++index, 'value': value };\n      });\n\n      return baseSortBy(result, function(object, other) {\n        return compareMultiple(object, other, orders);\n      });\n    }\n\n    /**\n     * The base implementation of `_.pick` without support for individual\n     * property identifiers.\n     *\n     * @private\n     * @param {Object} object The source object.\n     * @param {string[]} paths The property paths to pick.\n     * @returns {Object} Returns the new object.\n     */\n    function basePick(object, paths) {\n      return basePickBy(object, paths, function(value, path) {\n        return hasIn(object, path);\n      });\n    }\n\n    /**\n     * The base implementation of  `_.pickBy` without support for iteratee shorthands.\n     *\n     * @private\n     * @param {Object} object The source object.\n     * @param {string[]} paths The property paths to pick.\n     * @param {Function} predicate The function invoked per property.\n     * @returns {Object} Returns the new object.\n     */\n    function basePickBy(object, paths, predicate) {\n      var index = -1,\n          length = paths.length,\n          result = {};\n\n      while (++index < length) {\n        var path = paths[index],\n            value = baseGet(object, path);\n\n        if (predicate(value, path)) {\n          baseSet(result, castPath(path, object), value);\n        }\n      }\n      return result;\n    }\n\n    /**\n     * A specialized version of `baseProperty` which supports deep paths.\n     *\n     * @private\n     * @param {Array|string} path The path of the property to get.\n     * @returns {Function} Returns the new accessor function.\n     */\n    function basePropertyDeep(path) {\n      return function(object) {\n        return baseGet(object, path);\n      };\n    }\n\n    /**\n     * The base implementation of `_.pullAllBy` without support for iteratee\n     * shorthands.\n     *\n     * @private\n     * @param {Array} array The array to modify.\n     * @param {Array} values The values to remove.\n     * @param {Function} [iteratee] The iteratee invoked per element.\n     * @param {Function} [comparator] The comparator invoked per element.\n     * @returns {Array} Returns `array`.\n     */\n    function basePullAll(array, values, iteratee, comparator) {\n      var indexOf = comparator ? baseIndexOfWith : baseIndexOf,\n          index = -1,\n          length = values.length,\n          seen = array;\n\n      if (array === values) {\n        values = copyArray(values);\n      }\n      if (iteratee) {\n        seen = arrayMap(array, baseUnary(iteratee));\n      }\n      while (++index < length) {\n        var fromIndex = 0,\n            value = values[index],\n            computed = iteratee ? iteratee(value) : value;\n\n        while ((fromIndex = indexOf(seen, computed, fromIndex, comparator)) > -1) {\n          if (seen !== array) {\n            splice.call(seen, fromIndex, 1);\n          }\n          splice.call(array, fromIndex, 1);\n        }\n      }\n      return array;\n    }\n\n    /**\n     * The base implementation of `_.pullAt` without support for individual\n     * indexes or capturing the removed elements.\n     *\n     * @private\n     * @param {Array} array The array to modify.\n     * @param {number[]} indexes The indexes of elements to remove.\n     * @returns {Array} Returns `array`.\n     */\n    function basePullAt(array, indexes) {\n      var length = array ? indexes.length : 0,\n          lastIndex = length - 1;\n\n      while (length--) {\n        var index = indexes[length];\n        if (length == lastIndex || index !== previous) {\n          var previous = index;\n          if (isIndex(index)) {\n            splice.call(array, index, 1);\n          } else {\n            baseUnset(array, index);\n          }\n        }\n      }\n      return array;\n    }\n\n    /**\n     * The base implementation of `_.random` without support for returning\n     * floating-point numbers.\n     *\n     * @private\n     * @param {number} lower The lower bound.\n     * @param {number} upper The upper bound.\n     * @returns {number} Returns the random number.\n     */\n    function baseRandom(lower, upper) {\n      return lower + nativeFloor(nativeRandom() * (upper - lower + 1));\n    }\n\n    /**\n     * The base implementation of `_.range` and `_.rangeRight` which doesn't\n     * coerce arguments.\n     *\n     * @private\n     * @param {number} start The start of the range.\n     * @param {number} end The end of the range.\n     * @param {number} step The value to increment or decrement by.\n     * @param {boolean} [fromRight] Specify iterating from right to left.\n     * @returns {Array} Returns the range of numbers.\n     */\n    function baseRange(start, end, step, fromRight) {\n      var index = -1,\n          length = nativeMax(nativeCeil((end - start) / (step || 1)), 0),\n          result = Array(length);\n\n      while (length--) {\n        result[fromRight ? length : ++index] = start;\n        start += step;\n      }\n      return result;\n    }\n\n    /**\n     * The base implementation of `_.repeat` which doesn't coerce arguments.\n     *\n     * @private\n     * @param {string} string The string to repeat.\n     * @param {number} n The number of times to repeat the string.\n     * @returns {string} Returns the repeated string.\n     */\n    function baseRepeat(string, n) {\n      var result = '';\n      if (!string || n < 1 || n > MAX_SAFE_INTEGER) {\n        return result;\n      }\n      // Leverage the exponentiation by squaring algorithm for a faster repeat.\n      // See https://en.wikipedia.org/wiki/Exponentiation_by_squaring for more details.\n      do {\n        if (n % 2) {\n          result += string;\n        }\n        n = nativeFloor(n / 2);\n        if (n) {\n          string += string;\n        }\n      } while (n);\n\n      return result;\n    }\n\n    /**\n     * The base implementation of `_.rest` which doesn't validate or coerce arguments.\n     *\n     * @private\n     * @param {Function} func The function to apply a rest parameter to.\n     * @param {number} [start=func.length-1] The start position of the rest parameter.\n     * @returns {Function} Returns the new function.\n     */\n    function baseRest(func, start) {\n      return setToString(overRest(func, start, identity), func + '');\n    }\n\n    /**\n     * The base implementation of `_.sample`.\n     *\n     * @private\n     * @param {Array|Object} collection The collection to sample.\n     * @returns {*} Returns the random element.\n     */\n    function baseSample(collection) {\n      return arraySample(values(collection));\n    }\n\n    /**\n     * The base implementation of `_.sampleSize` without param guards.\n     *\n     * @private\n     * @param {Array|Object} collection The collection to sample.\n     * @param {number} n The number of elements to sample.\n     * @returns {Array} Returns the random elements.\n     */\n    function baseSampleSize(collection, n) {\n      var array = values(collection);\n      return shuffleSelf(array, baseClamp(n, 0, array.length));\n    }\n\n    /**\n     * The base implementation of `_.set`.\n     *\n     * @private\n     * @param {Object} object The object to modify.\n     * @param {Array|string} path The path of the property to set.\n     * @param {*} value The value to set.\n     * @param {Function} [customizer] The function to customize path creation.\n     * @returns {Object} Returns `object`.\n     */\n    function baseSet(object, path, value, customizer) {\n      if (!isObject(object)) {\n        return object;\n      }\n      path = castPath(path, object);\n\n      var index = -1,\n          length = path.length,\n          lastIndex = length - 1,\n          nested = object;\n\n      while (nested != null && ++index < length) {\n        var key = toKey(path[index]),\n            newValue = value;\n\n        if (index != lastIndex) {\n          var objValue = nested[key];\n          newValue = customizer ? customizer(objValue, key, nested) : undefined;\n          if (newValue === undefined) {\n            newValue = isObject(objValue)\n              ? objValue\n              : (isIndex(path[index + 1]) ? [] : {});\n          }\n        }\n        assignValue(nested, key, newValue);\n        nested = nested[key];\n      }\n      return object;\n    }\n\n    /**\n     * The base implementation of `setData` without support for hot loop shorting.\n     *\n     * @private\n     * @param {Function} func The function to associate metadata with.\n     * @param {*} data The metadata.\n     * @returns {Function} Returns `func`.\n     */\n    var baseSetData = !metaMap ? identity : function(func, data) {\n      metaMap.set(func, data);\n      return func;\n    };\n\n    /**\n     * The base implementation of `setToString` without support for hot loop shorting.\n     *\n     * @private\n     * @param {Function} func The function to modify.\n     * @param {Function} string The `toString` result.\n     * @returns {Function} Returns `func`.\n     */\n    var baseSetToString = !defineProperty ? identity : function(func, string) {\n      return defineProperty(func, 'toString', {\n        'configurable': true,\n        'enumerable': false,\n        'value': constant(string),\n        'writable': true\n      });\n    };\n\n    /**\n     * The base implementation of `_.shuffle`.\n     *\n     * @private\n     * @param {Array|Object} collection The collection to shuffle.\n     * @returns {Array} Returns the new shuffled array.\n     */\n    function baseShuffle(collection) {\n      return shuffleSelf(values(collection));\n    }\n\n    /**\n     * The base implementation of `_.slice` without an iteratee call guard.\n     *\n     * @private\n     * @param {Array} array The array to slice.\n     * @param {number} [start=0] The start position.\n     * @param {number} [end=array.length] The end position.\n     * @returns {Array} Returns the slice of `array`.\n     */\n    function baseSlice(array, start, end) {\n      var index = -1,\n          length = array.length;\n\n      if (start < 0) {\n        start = -start > length ? 0 : (length + start);\n      }\n      end = end > length ? length : end;\n      if (end < 0) {\n        end += length;\n      }\n      length = start > end ? 0 : ((end - start) >>> 0);\n      start >>>= 0;\n\n      var result = Array(length);\n      while (++index < length) {\n        result[index] = array[index + start];\n      }\n      return result;\n    }\n\n    /**\n     * The base implementation of `_.some` without support for iteratee shorthands.\n     *\n     * @private\n     * @param {Array|Object} collection The collection to iterate over.\n     * @param {Function} predicate The function invoked per iteration.\n     * @returns {boolean} Returns `true` if any element passes the predicate check,\n     *  else `false`.\n     */\n    function baseSome(collection, predicate) {\n      var result;\n\n      baseEach(collection, function(value, index, collection) {\n        result = predicate(value, index, collection);\n        return !result;\n      });\n      return !!result;\n    }\n\n    /**\n     * The base implementation of `_.sortedIndex` and `_.sortedLastIndex` which\n     * performs a binary search of `array` to determine the index at which `value`\n     * should be inserted into `array` in order to maintain its sort order.\n     *\n     * @private\n     * @param {Array} array The sorted array to inspect.\n     * @param {*} value The value to evaluate.\n     * @param {boolean} [retHighest] Specify returning the highest qualified index.\n     * @returns {number} Returns the index at which `value` should be inserted\n     *  into `array`.\n     */\n    function baseSortedIndex(array, value, retHighest) {\n      var low = 0,\n          high = array == null ? low : array.length;\n\n      if (typeof value == 'number' && value === value && high <= HALF_MAX_ARRAY_LENGTH) {\n        while (low < high) {\n          var mid = (low + high) >>> 1,\n              computed = array[mid];\n\n          if (computed !== null && !isSymbol(computed) &&\n              (retHighest ? (computed <= value) : (computed < value))) {\n            low = mid + 1;\n          } else {\n            high = mid;\n          }\n        }\n        return high;\n      }\n      return baseSortedIndexBy(array, value, identity, retHighest);\n    }\n\n    /**\n     * The base implementation of `_.sortedIndexBy` and `_.sortedLastIndexBy`\n     * which invokes `iteratee` for `value` and each element of `array` to compute\n     * their sort ranking. The iteratee is invoked with one argument; (value).\n     *\n     * @private\n     * @param {Array} array The sorted array to inspect.\n     * @param {*} value The value to evaluate.\n     * @param {Function} iteratee The iteratee invoked per element.\n     * @param {boolean} [retHighest] Specify returning the highest qualified index.\n     * @returns {number} Returns the index at which `value` should be inserted\n     *  into `array`.\n     */\n    function baseSortedIndexBy(array, value, iteratee, retHighest) {\n      value = iteratee(value);\n\n      var low = 0,\n          high = array == null ? 0 : array.length,\n          valIsNaN = value !== value,\n          valIsNull = value === null,\n          valIsSymbol = isSymbol(value),\n          valIsUndefined = value === undefined;\n\n      while (low < high) {\n        var mid = nativeFloor((low + high) / 2),\n            computed = iteratee(array[mid]),\n            othIsDefined = computed !== undefined,\n            othIsNull = computed === null,\n            othIsReflexive = computed === computed,\n            othIsSymbol = isSymbol(computed);\n\n        if (valIsNaN) {\n          var setLow = retHighest || othIsReflexive;\n        } else if (valIsUndefined) {\n          setLow = othIsReflexive && (retHighest || othIsDefined);\n        } else if (valIsNull) {\n          setLow = othIsReflexive && othIsDefined && (retHighest || !othIsNull);\n        } else if (valIsSymbol) {\n          setLow = othIsReflexive && othIsDefined && !othIsNull && (retHighest || !othIsSymbol);\n        } else if (othIsNull || othIsSymbol) {\n          setLow = false;\n        } else {\n          setLow = retHighest ? (computed <= value) : (computed < value);\n        }\n        if (setLow) {\n          low = mid + 1;\n        } else {\n          high = mid;\n        }\n      }\n      return nativeMin(high, MAX_ARRAY_INDEX);\n    }\n\n    /**\n     * The base implementation of `_.sortedUniq` and `_.sortedUniqBy` without\n     * support for iteratee shorthands.\n     *\n     * @private\n     * @param {Array} array The array to inspect.\n     * @param {Function} [iteratee] The iteratee invoked per element.\n     * @returns {Array} Returns the new duplicate free array.\n     */\n    function baseSortedUniq(array, iteratee) {\n      var index = -1,\n          length = array.length,\n          resIndex = 0,\n          result = [];\n\n      while (++index < length) {\n        var value = array[index],\n            computed = iteratee ? iteratee(value) : value;\n\n        if (!index || !eq(computed, seen)) {\n          var seen = computed;\n          result[resIndex++] = value === 0 ? 0 : value;\n        }\n      }\n      return result;\n    }\n\n    /**\n     * The base implementation of `_.toNumber` which doesn't ensure correct\n     * conversions of binary, hexadecimal, or octal string values.\n     *\n     * @private\n     * @param {*} value The value to process.\n     * @returns {number} Returns the number.\n     */\n    function baseToNumber(value) {\n      if (typeof value == 'number') {\n        return value;\n      }\n      if (isSymbol(value)) {\n        return NAN;\n      }\n      return +value;\n    }\n\n    /**\n     * The base implementation of `_.toString` which doesn't convert nullish\n     * values to empty strings.\n     *\n     * @private\n     * @param {*} value The value to process.\n     * @returns {string} Returns the string.\n     */\n    function baseToString(value) {\n      // Exit early for strings to avoid a performance hit in some environments.\n      if (typeof value == 'string') {\n        return value;\n      }\n      if (isArray(value)) {\n        // Recursively convert values (susceptible to call stack limits).\n        return arrayMap(value, baseToString) + '';\n      }\n      if (isSymbol(value)) {\n        return symbolToString ? symbolToString.call(value) : '';\n      }\n      var result = (value + '');\n      return (result == '0' && (1 / value) == -INFINITY) ? '-0' : result;\n    }\n\n    /**\n     * The base implementation of `_.uniqBy` without support for iteratee shorthands.\n     *\n     * @private\n     * @param {Array} array The array to inspect.\n     * @param {Function} [iteratee] The iteratee invoked per element.\n     * @param {Function} [comparator] The comparator invoked per element.\n     * @returns {Array} Returns the new duplicate free array.\n     */\n    function baseUniq(array, iteratee, comparator) {\n      var index = -1,\n          includes = arrayIncludes,\n          length = array.length,\n          isCommon = true,\n          result = [],\n          seen = result;\n\n      if (comparator) {\n        isCommon = false;\n        includes = arrayIncludesWith;\n      }\n      else if (length >= LARGE_ARRAY_SIZE) {\n        var set = iteratee ? null : createSet(array);\n        if (set) {\n          return setToArray(set);\n        }\n        isCommon = false;\n        includes = cacheHas;\n        seen = new SetCache;\n      }\n      else {\n        seen = iteratee ? [] : result;\n      }\n      outer:\n      while (++index < length) {\n        var value = array[index],\n            computed = iteratee ? iteratee(value) : value;\n\n        value = (comparator || value !== 0) ? value : 0;\n        if (isCommon && computed === computed) {\n          var seenIndex = seen.length;\n          while (seenIndex--) {\n            if (seen[seenIndex] === computed) {\n              continue outer;\n            }\n          }\n          if (iteratee) {\n            seen.push(computed);\n          }\n          result.push(value);\n        }\n        else if (!includes(seen, computed, comparator)) {\n          if (seen !== result) {\n            seen.push(computed);\n          }\n          result.push(value);\n        }\n      }\n      return result;\n    }\n\n    /**\n     * The base implementation of `_.unset`.\n     *\n     * @private\n     * @param {Object} object The object to modify.\n     * @param {Array|string} path The property path to unset.\n     * @returns {boolean} Returns `true` if the property is deleted, else `false`.\n     */\n    function baseUnset(object, path) {\n      path = castPath(path, object);\n      object = parent(object, path);\n      return object == null || delete object[toKey(last(path))];\n    }\n\n    /**\n     * The base implementation of `_.update`.\n     *\n     * @private\n     * @param {Object} object The object to modify.\n     * @param {Array|string} path The path of the property to update.\n     * @param {Function} updater The function to produce the updated value.\n     * @param {Function} [customizer] The function to customize path creation.\n     * @returns {Object} Returns `object`.\n     */\n    function baseUpdate(object, path, updater, customizer) {\n      return baseSet(object, path, updater(baseGet(object, path)), customizer);\n    }\n\n    /**\n     * The base implementation of methods like `_.dropWhile` and `_.takeWhile`\n     * without support for iteratee shorthands.\n     *\n     * @private\n     * @param {Array} array The array to query.\n     * @param {Function} predicate The function invoked per iteration.\n     * @param {boolean} [isDrop] Specify dropping elements instead of taking them.\n     * @param {boolean} [fromRight] Specify iterating from right to left.\n     * @returns {Array} Returns the slice of `array`.\n     */\n    function baseWhile(array, predicate, isDrop, fromRight) {\n      var length = array.length,\n          index = fromRight ? length : -1;\n\n      while ((fromRight ? index-- : ++index < length) &&\n        predicate(array[index], index, array)) {}\n\n      return isDrop\n        ? baseSlice(array, (fromRight ? 0 : index), (fromRight ? index + 1 : length))\n        : baseSlice(array, (fromRight ? index + 1 : 0), (fromRight ? length : index));\n    }\n\n    /**\n     * The base implementation of `wrapperValue` which returns the result of\n     * performing a sequence of actions on the unwrapped `value`, where each\n     * successive action is supplied the return value of the previous.\n     *\n     * @private\n     * @param {*} value The unwrapped value.\n     * @param {Array} actions Actions to perform to resolve the unwrapped value.\n     * @returns {*} Returns the resolved value.\n     */\n    function baseWrapperValue(value, actions) {\n      var result = value;\n      if (result instanceof LazyWrapper) {\n        result = result.value();\n      }\n      return arrayReduce(actions, function(result, action) {\n        return action.func.apply(action.thisArg, arrayPush([result], action.args));\n      }, result);\n    }\n\n    /**\n     * The base implementation of methods like `_.xor`, without support for\n     * iteratee shorthands, that accepts an array of arrays to inspect.\n     *\n     * @private\n     * @param {Array} arrays The arrays to inspect.\n     * @param {Function} [iteratee] The iteratee invoked per element.\n     * @param {Function} [comparator] The comparator invoked per element.\n     * @returns {Array} Returns the new array of values.\n     */\n    function baseXor(arrays, iteratee, comparator) {\n      var length = arrays.length;\n      if (length < 2) {\n        return length ? baseUniq(arrays[0]) : [];\n      }\n      var index = -1,\n          result = Array(length);\n\n      while (++index < length) {\n        var array = arrays[index],\n            othIndex = -1;\n\n        while (++othIndex < length) {\n          if (othIndex != index) {\n            result[index] = baseDifference(result[index] || array, arrays[othIndex], iteratee, comparator);\n          }\n        }\n      }\n      return baseUniq(baseFlatten(result, 1), iteratee, comparator);\n    }\n\n    /**\n     * This base implementation of `_.zipObject` which assigns values using `assignFunc`.\n     *\n     * @private\n     * @param {Array} props The property identifiers.\n     * @param {Array} values The property values.\n     * @param {Function} assignFunc The function to assign values.\n     * @returns {Object} Returns the new object.\n     */\n    function baseZipObject(props, values, assignFunc) {\n      var index = -1,\n          length = props.length,\n          valsLength = values.length,\n          result = {};\n\n      while (++index < length) {\n        var value = index < valsLength ? values[index] : undefined;\n        assignFunc(result, props[index], value);\n      }\n      return result;\n    }\n\n    /**\n     * Casts `value` to an empty array if it's not an array like object.\n     *\n     * @private\n     * @param {*} value The value to inspect.\n     * @returns {Array|Object} Returns the cast array-like object.\n     */\n    function castArrayLikeObject(value) {\n      return isArrayLikeObject(value) ? value : [];\n    }\n\n    /**\n     * Casts `value` to `identity` if it's not a function.\n     *\n     * @private\n     * @param {*} value The value to inspect.\n     * @returns {Function} Returns cast function.\n     */\n    function castFunction(value) {\n      return typeof value == 'function' ? value : identity;\n    }\n\n    /**\n     * Casts `value` to a path array if it's not one.\n     *\n     * @private\n     * @param {*} value The value to inspect.\n     * @param {Object} [object] The object to query keys on.\n     * @returns {Array} Returns the cast property path array.\n     */\n    function castPath(value, object) {\n      if (isArray(value)) {\n        return value;\n      }\n      return isKey(value, object) ? [value] : stringToPath(toString(value));\n    }\n\n    /**\n     * A `baseRest` alias which can be replaced with `identity` by module\n     * replacement plugins.\n     *\n     * @private\n     * @type {Function}\n     * @param {Function} func The function to apply a rest parameter to.\n     * @returns {Function} Returns the new function.\n     */\n    var castRest = baseRest;\n\n    /**\n     * Casts `array` to a slice if it's needed.\n     *\n     * @private\n     * @param {Array} array The array to inspect.\n     * @param {number} start The start position.\n     * @param {number} [end=array.length] The end position.\n     * @returns {Array} Returns the cast slice.\n     */\n    function castSlice(array, start, end) {\n      var length = array.length;\n      end = end === undefined ? length : end;\n      return (!start && end >= length) ? array : baseSlice(array, start, end);\n    }\n\n    /**\n     * A simple wrapper around the global [`clearTimeout`](https://mdn.io/clearTimeout).\n     *\n     * @private\n     * @param {number|Object} id The timer id or timeout object of the timer to clear.\n     */\n    var clearTimeout = ctxClearTimeout || function(id) {\n      return root.clearTimeout(id);\n    };\n\n    /**\n     * Creates a clone of  `buffer`.\n     *\n     * @private\n     * @param {Buffer} buffer The buffer to clone.\n     * @param {boolean} [isDeep] Specify a deep clone.\n     * @returns {Buffer} Returns the cloned buffer.\n     */\n    function cloneBuffer(buffer, isDeep) {\n      if (isDeep) {\n        return buffer.slice();\n      }\n      var length = buffer.length,\n          result = allocUnsafe ? allocUnsafe(length) : new buffer.constructor(length);\n\n      buffer.copy(result);\n      return result;\n    }\n\n    /**\n     * Creates a clone of `arrayBuffer`.\n     *\n     * @private\n     * @param {ArrayBuffer} arrayBuffer The array buffer to clone.\n     * @returns {ArrayBuffer} Returns the cloned array buffer.\n     */\n    function cloneArrayBuffer(arrayBuffer) {\n      var result = new arrayBuffer.constructor(arrayBuffer.byteLength);\n      new Uint8Array(result).set(new Uint8Array(arrayBuffer));\n      return result;\n    }\n\n    /**\n     * Creates a clone of `dataView`.\n     *\n     * @private\n     * @param {Object} dataView The data view to clone.\n     * @param {boolean} [isDeep] Specify a deep clone.\n     * @returns {Object} Returns the cloned data view.\n     */\n    function cloneDataView(dataView, isDeep) {\n      var buffer = isDeep ? cloneArrayBuffer(dataView.buffer) : dataView.buffer;\n      return new dataView.constructor(buffer, dataView.byteOffset, dataView.byteLength);\n    }\n\n    /**\n     * Creates a clone of `map`.\n     *\n     * @private\n     * @param {Object} map The map to clone.\n     * @param {Function} cloneFunc The function to clone values.\n     * @param {boolean} [isDeep] Specify a deep clone.\n     * @returns {Object} Returns the cloned map.\n     */\n    function cloneMap(map, isDeep, cloneFunc) {\n      var array = isDeep ? cloneFunc(mapToArray(map), CLONE_DEEP_FLAG) : mapToArray(map);\n      return arrayReduce(array, addMapEntry, new map.constructor);\n    }\n\n    /**\n     * Creates a clone of `regexp`.\n     *\n     * @private\n     * @param {Object} regexp The regexp to clone.\n     * @returns {Object} Returns the cloned regexp.\n     */\n    function cloneRegExp(regexp) {\n      var result = new regexp.constructor(regexp.source, reFlags.exec(regexp));\n      result.lastIndex = regexp.lastIndex;\n      return result;\n    }\n\n    /**\n     * Creates a clone of `set`.\n     *\n     * @private\n     * @param {Object} set The set to clone.\n     * @param {Function} cloneFunc The function to clone values.\n     * @param {boolean} [isDeep] Specify a deep clone.\n     * @returns {Object} Returns the cloned set.\n     */\n    function cloneSet(set, isDeep, cloneFunc) {\n      var array = isDeep ? cloneFunc(setToArray(set), CLONE_DEEP_FLAG) : setToArray(set);\n      return arrayReduce(array, addSetEntry, new set.constructor);\n    }\n\n    /**\n     * Creates a clone of the `symbol` object.\n     *\n     * @private\n     * @param {Object} symbol The symbol object to clone.\n     * @returns {Object} Returns the cloned symbol object.\n     */\n    function cloneSymbol(symbol) {\n      return symbolValueOf ? Object(symbolValueOf.call(symbol)) : {};\n    }\n\n    /**\n     * Creates a clone of `typedArray`.\n     *\n     * @private\n     * @param {Object} typedArray The typed array to clone.\n     * @param {boolean} [isDeep] Specify a deep clone.\n     * @returns {Object} Returns the cloned typed array.\n     */\n    function cloneTypedArray(typedArray, isDeep) {\n      var buffer = isDeep ? cloneArrayBuffer(typedArray.buffer) : typedArray.buffer;\n      return new typedArray.constructor(buffer, typedArray.byteOffset, typedArray.length);\n    }\n\n    /**\n     * Compares values to sort them in ascending order.\n     *\n     * @private\n     * @param {*} value The value to compare.\n     * @param {*} other The other value to compare.\n     * @returns {number} Returns the sort order indicator for `value`.\n     */\n    function compareAscending(value, other) {\n      if (value !== other) {\n        var valIsDefined = value !== undefined,\n            valIsNull = value === null,\n            valIsReflexive = value === value,\n            valIsSymbol = isSymbol(value);\n\n        var othIsDefined = other !== undefined,\n            othIsNull = other === null,\n            othIsReflexive = other === other,\n            othIsSymbol = isSymbol(other);\n\n        if ((!othIsNull && !othIsSymbol && !valIsSymbol && value > other) ||\n            (valIsSymbol && othIsDefined && othIsReflexive && !othIsNull && !othIsSymbol) ||\n            (valIsNull && othIsDefined && othIsReflexive) ||\n            (!valIsDefined && othIsReflexive) ||\n            !valIsReflexive) {\n          return 1;\n        }\n        if ((!valIsNull && !valIsSymbol && !othIsSymbol && value < other) ||\n            (othIsSymbol && valIsDefined && valIsReflexive && !valIsNull && !valIsSymbol) ||\n            (othIsNull && valIsDefined && valIsReflexive) ||\n            (!othIsDefined && valIsReflexive) ||\n            !othIsReflexive) {\n          return -1;\n        }\n      }\n      return 0;\n    }\n\n    /**\n     * Used by `_.orderBy` to compare multiple properties of a value to another\n     * and stable sort them.\n     *\n     * If `orders` is unspecified, all values are sorted in ascending order. Otherwise,\n     * specify an order of \"desc\" for descending or \"asc\" for ascending sort order\n     * of corresponding values.\n     *\n     * @private\n     * @param {Object} object The object to compare.\n     * @param {Object} other The other object to compare.\n     * @param {boolean[]|string[]} orders The order to sort by for each property.\n     * @returns {number} Returns the sort order indicator for `object`.\n     */\n    function compareMultiple(object, other, orders) {\n      var index = -1,\n          objCriteria = object.criteria,\n          othCriteria = other.criteria,\n          length = objCriteria.length,\n          ordersLength = orders.length;\n\n      while (++index < length) {\n        var result = compareAscending(objCriteria[index], othCriteria[index]);\n        if (result) {\n          if (index >= ordersLength) {\n            return result;\n          }\n          var order = orders[index];\n          return result * (order == 'desc' ? -1 : 1);\n        }\n      }\n      // Fixes an `Array#sort` bug in the JS engine embedded in Adobe applications\n      // that causes it, under certain circumstances, to provide the same value for\n      // `object` and `other`. See https://github.com/jashkenas/underscore/pull/1247\n      // for more details.\n      //\n      // This also ensures a stable sort in V8 and other engines.\n      // See https://bugs.chromium.org/p/v8/issues/detail?id=90 for more details.\n      return object.index - other.index;\n    }\n\n    /**\n     * Creates an array that is the composition of partially applied arguments,\n     * placeholders, and provided arguments into a single array of arguments.\n     *\n     * @private\n     * @param {Array} args The provided arguments.\n     * @param {Array} partials The arguments to prepend to those provided.\n     * @param {Array} holders The `partials` placeholder indexes.\n     * @params {boolean} [isCurried] Specify composing for a curried function.\n     * @returns {Array} Returns the new array of composed arguments.\n     */\n    function composeArgs(args, partials, holders, isCurried) {\n      var argsIndex = -1,\n          argsLength = args.length,\n          holdersLength = holders.length,\n          leftIndex = -1,\n          leftLength = partials.length,\n          rangeLength = nativeMax(argsLength - holdersLength, 0),\n          result = Array(leftLength + rangeLength),\n          isUncurried = !isCurried;\n\n      while (++leftIndex < leftLength) {\n        result[leftIndex] = partials[leftIndex];\n      }\n      while (++argsIndex < holdersLength) {\n        if (isUncurried || argsIndex < argsLength) {\n          result[holders[argsIndex]] = args[argsIndex];\n        }\n      }\n      while (rangeLength--) {\n        result[leftIndex++] = args[argsIndex++];\n      }\n      return result;\n    }\n\n    /**\n     * This function is like `composeArgs` except that the arguments composition\n     * is tailored for `_.partialRight`.\n     *\n     * @private\n     * @param {Array} args The provided arguments.\n     * @param {Array} partials The arguments to append to those provided.\n     * @param {Array} holders The `partials` placeholder indexes.\n     * @params {boolean} [isCurried] Specify composing for a curried function.\n     * @returns {Array} Returns the new array of composed arguments.\n     */\n    function composeArgsRight(args, partials, holders, isCurried) {\n      var argsIndex = -1,\n          argsLength = args.length,\n          holdersIndex = -1,\n          holdersLength = holders.length,\n          rightIndex = -1,\n          rightLength = partials.length,\n          rangeLength = nativeMax(argsLength - holdersLength, 0),\n          result = Array(rangeLength + rightLength),\n          isUncurried = !isCurried;\n\n      while (++argsIndex < rangeLength) {\n        result[argsIndex] = args[argsIndex];\n      }\n      var offset = argsIndex;\n      while (++rightIndex < rightLength) {\n        result[offset + rightIndex] = partials[rightIndex];\n      }\n      while (++holdersIndex < holdersLength) {\n        if (isUncurried || argsIndex < argsLength) {\n          result[offset + holders[holdersIndex]] = args[argsIndex++];\n        }\n      }\n      return result;\n    }\n\n    /**\n     * Copies the values of `source` to `array`.\n     *\n     * @private\n     * @param {Array} source The array to copy values from.\n     * @param {Array} [array=[]] The array to copy values to.\n     * @returns {Array} Returns `array`.\n     */\n    function copyArray(source, array) {\n      var index = -1,\n          length = source.length;\n\n      array || (array = Array(length));\n      while (++index < length) {\n        array[index] = source[index];\n      }\n      return array;\n    }\n\n    /**\n     * Copies properties of `source` to `object`.\n     *\n     * @private\n     * @param {Object} source The object to copy properties from.\n     * @param {Array} props The property identifiers to copy.\n     * @param {Object} [object={}] The object to copy properties to.\n     * @param {Function} [customizer] The function to customize copied values.\n     * @returns {Object} Returns `object`.\n     */\n    function copyObject(source, props, object, customizer) {\n      var isNew = !object;\n      object || (object = {});\n\n      var index = -1,\n          length = props.length;\n\n      while (++index < length) {\n        var key = props[index];\n\n        var newValue = customizer\n          ? customizer(object[key], source[key], key, object, source)\n          : undefined;\n\n        if (newValue === undefined) {\n          newValue = source[key];\n        }\n        if (isNew) {\n          baseAssignValue(object, key, newValue);\n        } else {\n          assignValue(object, key, newValue);\n        }\n      }\n      return object;\n    }\n\n    /**\n     * Copies own symbols of `source` to `object`.\n     *\n     * @private\n     * @param {Object} source The object to copy symbols from.\n     * @param {Object} [object={}] The object to copy symbols to.\n     * @returns {Object} Returns `object`.\n     */\n    function copySymbols(source, object) {\n      return copyObject(source, getSymbols(source), object);\n    }\n\n    /**\n     * Copies own and inherited symbols of `source` to `object`.\n     *\n     * @private\n     * @param {Object} source The object to copy symbols from.\n     * @param {Object} [object={}] The object to copy symbols to.\n     * @returns {Object} Returns `object`.\n     */\n    function copySymbolsIn(source, object) {\n      return copyObject(source, getSymbolsIn(source), object);\n    }\n\n    /**\n     * Creates a function like `_.groupBy`.\n     *\n     * @private\n     * @param {Function} setter The function to set accumulator values.\n     * @param {Function} [initializer] The accumulator object initializer.\n     * @returns {Function} Returns the new aggregator function.\n     */\n    function createAggregator(setter, initializer) {\n      return function(collection, iteratee) {\n        var func = isArray(collection) ? arrayAggregator : baseAggregator,\n            accumulator = initializer ? initializer() : {};\n\n        return func(collection, setter, getIteratee(iteratee, 2), accumulator);\n      };\n    }\n\n    /**\n     * Creates a function like `_.assign`.\n     *\n     * @private\n     * @param {Function} assigner The function to assign values.\n     * @returns {Function} Returns the new assigner function.\n     */\n    function createAssigner(assigner) {\n      return baseRest(function(object, sources) {\n        var index = -1,\n            length = sources.length,\n            customizer = length > 1 ? sources[length - 1] : undefined,\n            guard = length > 2 ? sources[2] : undefined;\n\n        customizer = (assigner.length > 3 && typeof customizer == 'function')\n          ? (length--, customizer)\n          : undefined;\n\n        if (guard && isIterateeCall(sources[0], sources[1], guard)) {\n          customizer = length < 3 ? undefined : customizer;\n          length = 1;\n        }\n        object = Object(object);\n        while (++index < length) {\n          var source = sources[index];\n          if (source) {\n            assigner(object, source, index, customizer);\n          }\n        }\n        return object;\n      });\n    }\n\n    /**\n     * Creates a `baseEach` or `baseEachRight` function.\n     *\n     * @private\n     * @param {Function} eachFunc The function to iterate over a collection.\n     * @param {boolean} [fromRight] Specify iterating from right to left.\n     * @returns {Function} Returns the new base function.\n     */\n    function createBaseEach(eachFunc, fromRight) {\n      return function(collection, iteratee) {\n        if (collection == null) {\n          return collection;\n        }\n        if (!isArrayLike(collection)) {\n          return eachFunc(collection, iteratee);\n        }\n        var length = collection.length,\n            index = fromRight ? length : -1,\n            iterable = Object(collection);\n\n        while ((fromRight ? index-- : ++index < length)) {\n          if (iteratee(iterable[index], index, iterable) === false) {\n            break;\n          }\n        }\n        return collection;\n      };\n    }\n\n    /**\n     * Creates a base function for methods like `_.forIn` and `_.forOwn`.\n     *\n     * @private\n     * @param {boolean} [fromRight] Specify iterating from right to left.\n     * @returns {Function} Returns the new base function.\n     */\n    function createBaseFor(fromRight) {\n      return function(object, iteratee, keysFunc) {\n        var index = -1,\n            iterable = Object(object),\n            props = keysFunc(object),\n            length = props.length;\n\n        while (length--) {\n          var key = props[fromRight ? length : ++index];\n          if (iteratee(iterable[key], key, iterable) === false) {\n            break;\n          }\n        }\n        return object;\n      };\n    }\n\n    /**\n     * Creates a function that wraps `func` to invoke it with the optional `this`\n     * binding of `thisArg`.\n     *\n     * @private\n     * @param {Function} func The function to wrap.\n     * @param {number} bitmask The bitmask flags. See `createWrap` for more details.\n     * @param {*} [thisArg] The `this` binding of `func`.\n     * @returns {Function} Returns the new wrapped function.\n     */\n    function createBind(func, bitmask, thisArg) {\n      var isBind = bitmask & WRAP_BIND_FLAG,\n          Ctor = createCtor(func);\n\n      function wrapper() {\n        var fn = (this && this !== root && this instanceof wrapper) ? Ctor : func;\n        return fn.apply(isBind ? thisArg : this, arguments);\n      }\n      return wrapper;\n    }\n\n    /**\n     * Creates a function like `_.lowerFirst`.\n     *\n     * @private\n     * @param {string} methodName The name of the `String` case method to use.\n     * @returns {Function} Returns the new case function.\n     */\n    function createCaseFirst(methodName) {\n      return function(string) {\n        string = toString(string);\n\n        var strSymbols = hasUnicode(string)\n          ? stringToArray(string)\n          : undefined;\n\n        var chr = strSymbols\n          ? strSymbols[0]\n          : string.charAt(0);\n\n        var trailing = strSymbols\n          ? castSlice(strSymbols, 1).join('')\n          : string.slice(1);\n\n        return chr[methodName]() + trailing;\n      };\n    }\n\n    /**\n     * Creates a function like `_.camelCase`.\n     *\n     * @private\n     * @param {Function} callback The function to combine each word.\n     * @returns {Function} Returns the new compounder function.\n     */\n    function createCompounder(callback) {\n      return function(string) {\n        return arrayReduce(words(deburr(string).replace(reApos, '')), callback, '');\n      };\n    }\n\n    /**\n     * Creates a function that produces an instance of `Ctor` regardless of\n     * whether it was invoked as part of a `new` expression or by `call` or `apply`.\n     *\n     * @private\n     * @param {Function} Ctor The constructor to wrap.\n     * @returns {Function} Returns the new wrapped function.\n     */\n    function createCtor(Ctor) {\n      return function() {\n        // Use a `switch` statement to work with class constructors. See\n        // http://ecma-international.org/ecma-262/7.0/#sec-ecmascript-function-objects-call-thisargument-argumentslist\n        // for more details.\n        var args = arguments;\n        switch (args.length) {\n          case 0: return new Ctor;\n          case 1: return new Ctor(args[0]);\n          case 2: return new Ctor(args[0], args[1]);\n          case 3: return new Ctor(args[0], args[1], args[2]);\n          case 4: return new Ctor(args[0], args[1], args[2], args[3]);\n          case 5: return new Ctor(args[0], args[1], args[2], args[3], args[4]);\n          case 6: return new Ctor(args[0], args[1], args[2], args[3], args[4], args[5]);\n          case 7: return new Ctor(args[0], args[1], args[2], args[3], args[4], args[5], args[6]);\n        }\n        var thisBinding = baseCreate(Ctor.prototype),\n            result = Ctor.apply(thisBinding, args);\n\n        // Mimic the constructor's `return` behavior.\n        // See https://es5.github.io/#x13.2.2 for more details.\n        return isObject(result) ? result : thisBinding;\n      };\n    }\n\n    /**\n     * Creates a function that wraps `func` to enable currying.\n     *\n     * @private\n     * @param {Function} func The function to wrap.\n     * @param {number} bitmask The bitmask flags. See `createWrap` for more details.\n     * @param {number} arity The arity of `func`.\n     * @returns {Function} Returns the new wrapped function.\n     */\n    function createCurry(func, bitmask, arity) {\n      var Ctor = createCtor(func);\n\n      function wrapper() {\n        var length = arguments.length,\n            args = Array(length),\n            index = length,\n            placeholder = getHolder(wrapper);\n\n        while (index--) {\n          args[index] = arguments[index];\n        }\n        var holders = (length < 3 && args[0] !== placeholder && args[length - 1] !== placeholder)\n          ? []\n          : replaceHolders(args, placeholder);\n\n        length -= holders.length;\n        if (length < arity) {\n          return createRecurry(\n            func, bitmask, createHybrid, wrapper.placeholder, undefined,\n            args, holders, undefined, undefined, arity - length);\n        }\n        var fn = (this && this !== root && this instanceof wrapper) ? Ctor : func;\n        return apply(fn, this, args);\n      }\n      return wrapper;\n    }\n\n    /**\n     * Creates a `_.find` or `_.findLast` function.\n     *\n     * @private\n     * @param {Function} findIndexFunc The function to find the collection index.\n     * @returns {Function} Returns the new find function.\n     */\n    function createFind(findIndexFunc) {\n      return function(collection, predicate, fromIndex) {\n        var iterable = Object(collection);\n        if (!isArrayLike(collection)) {\n          var iteratee = getIteratee(predicate, 3);\n          collection = keys(collection);\n          predicate = function(key) { return iteratee(iterable[key], key, iterable); };\n        }\n        var index = findIndexFunc(collection, predicate, fromIndex);\n        return index > -1 ? iterable[iteratee ? collection[index] : index] : undefined;\n      };\n    }\n\n    /**\n     * Creates a `_.flow` or `_.flowRight` function.\n     *\n     * @private\n     * @param {boolean} [fromRight] Specify iterating from right to left.\n     * @returns {Function} Returns the new flow function.\n     */\n    function createFlow(fromRight) {\n      return flatRest(function(funcs) {\n        var length = funcs.length,\n            index = length,\n            prereq = LodashWrapper.prototype.thru;\n\n        if (fromRight) {\n          funcs.reverse();\n        }\n        while (index--) {\n          var func = funcs[index];\n          if (typeof func != 'function') {\n            throw new TypeError(FUNC_ERROR_TEXT);\n          }\n          if (prereq && !wrapper && getFuncName(func) == 'wrapper') {\n            var wrapper = new LodashWrapper([], true);\n          }\n        }\n        index = wrapper ? index : length;\n        while (++index < length) {\n          func = funcs[index];\n\n          var funcName = getFuncName(func),\n              data = funcName == 'wrapper' ? getData(func) : undefined;\n\n          if (data && isLaziable(data[0]) &&\n                data[1] == (WRAP_ARY_FLAG | WRAP_CURRY_FLAG | WRAP_PARTIAL_FLAG | WRAP_REARG_FLAG) &&\n                !data[4].length && data[9] == 1\n              ) {\n            wrapper = wrapper[getFuncName(data[0])].apply(wrapper, data[3]);\n          } else {\n            wrapper = (func.length == 1 && isLaziable(func))\n              ? wrapper[funcName]()\n              : wrapper.thru(func);\n          }\n        }\n        return function() {\n          var args = arguments,\n              value = args[0];\n\n          if (wrapper && args.length == 1 && isArray(value)) {\n            return wrapper.plant(value).value();\n          }\n          var index = 0,\n              result = length ? funcs[index].apply(this, args) : value;\n\n          while (++index < length) {\n            result = funcs[index].call(this, result);\n          }\n          return result;\n        };\n      });\n    }\n\n    /**\n     * Creates a function that wraps `func` to invoke it with optional `this`\n     * binding of `thisArg`, partial application, and currying.\n     *\n     * @private\n     * @param {Function|string} func The function or method name to wrap.\n     * @param {number} bitmask The bitmask flags. See `createWrap` for more details.\n     * @param {*} [thisArg] The `this` binding of `func`.\n     * @param {Array} [partials] The arguments to prepend to those provided to\n     *  the new function.\n     * @param {Array} [holders] The `partials` placeholder indexes.\n     * @param {Array} [partialsRight] The arguments to append to those provided\n     *  to the new function.\n     * @param {Array} [holdersRight] The `partialsRight` placeholder indexes.\n     * @param {Array} [argPos] The argument positions of the new function.\n     * @param {number} [ary] The arity cap of `func`.\n     * @param {number} [arity] The arity of `func`.\n     * @returns {Function} Returns the new wrapped function.\n     */\n    function createHybrid(func, bitmask, thisArg, partials, holders, partialsRight, holdersRight, argPos, ary, arity) {\n      var isAry = bitmask & WRAP_ARY_FLAG,\n          isBind = bitmask & WRAP_BIND_FLAG,\n          isBindKey = bitmask & WRAP_BIND_KEY_FLAG,\n          isCurried = bitmask & (WRAP_CURRY_FLAG | WRAP_CURRY_RIGHT_FLAG),\n          isFlip = bitmask & WRAP_FLIP_FLAG,\n          Ctor = isBindKey ? undefined : createCtor(func);\n\n      function wrapper() {\n        var length = arguments.length,\n            args = Array(length),\n            index = length;\n\n        while (index--) {\n          args[index] = arguments[index];\n        }\n        if (isCurried) {\n          var placeholder = getHolder(wrapper),\n              holdersCount = countHolders(args, placeholder);\n        }\n        if (partials) {\n          args = composeArgs(args, partials, holders, isCurried);\n        }\n        if (partialsRight) {\n          args = composeArgsRight(args, partialsRight, holdersRight, isCurried);\n        }\n        length -= holdersCount;\n        if (isCurried && length < arity) {\n          var newHolders = replaceHolders(args, placeholder);\n          return createRecurry(\n            func, bitmask, createHybrid, wrapper.placeholder, thisArg,\n            args, newHolders, argPos, ary, arity - length\n          );\n        }\n        var thisBinding = isBind ? thisArg : this,\n            fn = isBindKey ? thisBinding[func] : func;\n\n        length = args.length;\n        if (argPos) {\n          args = reorder(args, argPos);\n        } else if (isFlip && length > 1) {\n          args.reverse();\n        }\n        if (isAry && ary < length) {\n          args.length = ary;\n        }\n        if (this && this !== root && this instanceof wrapper) {\n          fn = Ctor || createCtor(fn);\n        }\n        return fn.apply(thisBinding, args);\n      }\n      return wrapper;\n    }\n\n    /**\n     * Creates a function like `_.invertBy`.\n     *\n     * @private\n     * @param {Function} setter The function to set accumulator values.\n     * @param {Function} toIteratee The function to resolve iteratees.\n     * @returns {Function} Returns the new inverter function.\n     */\n    function createInverter(setter, toIteratee) {\n      return function(object, iteratee) {\n        return baseInverter(object, setter, toIteratee(iteratee), {});\n      };\n    }\n\n    /**\n     * Creates a function that performs a mathematical operation on two values.\n     *\n     * @private\n     * @param {Function} operator The function to perform the operation.\n     * @param {number} [defaultValue] The value used for `undefined` arguments.\n     * @returns {Function} Returns the new mathematical operation function.\n     */\n    function createMathOperation(operator, defaultValue) {\n      return function(value, other) {\n        var result;\n        if (value === undefined && other === undefined) {\n          return defaultValue;\n        }\n        if (value !== undefined) {\n          result = value;\n        }\n        if (other !== undefined) {\n          if (result === undefined) {\n            return other;\n          }\n          if (typeof value == 'string' || typeof other == 'string') {\n            value = baseToString(value);\n            other = baseToString(other);\n          } else {\n            value = baseToNumber(value);\n            other = baseToNumber(other);\n          }\n          result = operator(value, other);\n        }\n        return result;\n      };\n    }\n\n    /**\n     * Creates a function like `_.over`.\n     *\n     * @private\n     * @param {Function} arrayFunc The function to iterate over iteratees.\n     * @returns {Function} Returns the new over function.\n     */\n    function createOver(arrayFunc) {\n      return flatRest(function(iteratees) {\n        iteratees = arrayMap(iteratees, baseUnary(getIteratee()));\n        return baseRest(function(args) {\n          var thisArg = this;\n          return arrayFunc(iteratees, function(iteratee) {\n            return apply(iteratee, thisArg, args);\n          });\n        });\n      });\n    }\n\n    /**\n     * Creates the padding for `string` based on `length`. The `chars` string\n     * is truncated if the number of characters exceeds `length`.\n     *\n     * @private\n     * @param {number} length The padding length.\n     * @param {string} [chars=' '] The string used as padding.\n     * @returns {string} Returns the padding for `string`.\n     */\n    function createPadding(length, chars) {\n      chars = chars === undefined ? ' ' : baseToString(chars);\n\n      var charsLength = chars.length;\n      if (charsLength < 2) {\n        return charsLength ? baseRepeat(chars, length) : chars;\n      }\n      var result = baseRepeat(chars, nativeCeil(length / stringSize(chars)));\n      return hasUnicode(chars)\n        ? castSlice(stringToArray(result), 0, length).join('')\n        : result.slice(0, length);\n    }\n\n    /**\n     * Creates a function that wraps `func` to invoke it with the `this` binding\n     * of `thisArg` and `partials` prepended to the arguments it receives.\n     *\n     * @private\n     * @param {Function} func The function to wrap.\n     * @param {number} bitmask The bitmask flags. See `createWrap` for more details.\n     * @param {*} thisArg The `this` binding of `func`.\n     * @param {Array} partials The arguments to prepend to those provided to\n     *  the new function.\n     * @returns {Function} Returns the new wrapped function.\n     */\n    function createPartial(func, bitmask, thisArg, partials) {\n      var isBind = bitmask & WRAP_BIND_FLAG,\n          Ctor = createCtor(func);\n\n      function wrapper() {\n        var argsIndex = -1,\n            argsLength = arguments.length,\n            leftIndex = -1,\n            leftLength = partials.length,\n            args = Array(leftLength + argsLength),\n            fn = (this && this !== root && this instanceof wrapper) ? Ctor : func;\n\n        while (++leftIndex < leftLength) {\n          args[leftIndex] = partials[leftIndex];\n        }\n        while (argsLength--) {\n          args[leftIndex++] = arguments[++argsIndex];\n        }\n        return apply(fn, isBind ? thisArg : this, args);\n      }\n      return wrapper;\n    }\n\n    /**\n     * Creates a `_.range` or `_.rangeRight` function.\n     *\n     * @private\n     * @param {boolean} [fromRight] Specify iterating from right to left.\n     * @returns {Function} Returns the new range function.\n     */\n    function createRange(fromRight) {\n      return function(start, end, step) {\n        if (step && typeof step != 'number' && isIterateeCall(start, end, step)) {\n          end = step = undefined;\n        }\n        // Ensure the sign of `-0` is preserved.\n        start = toFinite(start);\n        if (end === undefined) {\n          end = start;\n          start = 0;\n        } else {\n          end = toFinite(end);\n        }\n        step = step === undefined ? (start < end ? 1 : -1) : toFinite(step);\n        return baseRange(start, end, step, fromRight);\n      };\n    }\n\n    /**\n     * Creates a function that performs a relational operation on two values.\n     *\n     * @private\n     * @param {Function} operator The function to perform the operation.\n     * @returns {Function} Returns the new relational operation function.\n     */\n    function createRelationalOperation(operator) {\n      return function(value, other) {\n        if (!(typeof value == 'string' && typeof other == 'string')) {\n          value = toNumber(value);\n          other = toNumber(other);\n        }\n        return operator(value, other);\n      };\n    }\n\n    /**\n     * Creates a function that wraps `func` to continue currying.\n     *\n     * @private\n     * @param {Function} func The function to wrap.\n     * @param {number} bitmask The bitmask flags. See `createWrap` for more details.\n     * @param {Function} wrapFunc The function to create the `func` wrapper.\n     * @param {*} placeholder The placeholder value.\n     * @param {*} [thisArg] The `this` binding of `func`.\n     * @param {Array} [partials] The arguments to prepend to those provided to\n     *  the new function.\n     * @param {Array} [holders] The `partials` placeholder indexes.\n     * @param {Array} [argPos] The argument positions of the new function.\n     * @param {number} [ary] The arity cap of `func`.\n     * @param {number} [arity] The arity of `func`.\n     * @returns {Function} Returns the new wrapped function.\n     */\n    function createRecurry(func, bitmask, wrapFunc, placeholder, thisArg, partials, holders, argPos, ary, arity) {\n      var isCurry = bitmask & WRAP_CURRY_FLAG,\n          newHolders = isCurry ? holders : undefined,\n          newHoldersRight = isCurry ? undefined : holders,\n          newPartials = isCurry ? partials : undefined,\n          newPartialsRight = isCurry ? undefined : partials;\n\n      bitmask |= (isCurry ? WRAP_PARTIAL_FLAG : WRAP_PARTIAL_RIGHT_FLAG);\n      bitmask &= ~(isCurry ? WRAP_PARTIAL_RIGHT_FLAG : WRAP_PARTIAL_FLAG);\n\n      if (!(bitmask & WRAP_CURRY_BOUND_FLAG)) {\n        bitmask &= ~(WRAP_BIND_FLAG | WRAP_BIND_KEY_FLAG);\n      }\n      var newData = [\n        func, bitmask, thisArg, newPartials, newHolders, newPartialsRight,\n        newHoldersRight, argPos, ary, arity\n      ];\n\n      var result = wrapFunc.apply(undefined, newData);\n      if (isLaziable(func)) {\n        setData(result, newData);\n      }\n      result.placeholder = placeholder;\n      return setWrapToString(result, func, bitmask);\n    }\n\n    /**\n     * Creates a function like `_.round`.\n     *\n     * @private\n     * @param {string} methodName The name of the `Math` method to use when rounding.\n     * @returns {Function} Returns the new round function.\n     */\n    function createRound(methodName) {\n      var func = Math[methodName];\n      return function(number, precision) {\n        number = toNumber(number);\n        precision = precision == null ? 0 : nativeMin(toInteger(precision), 292);\n        if (precision) {\n          // Shift with exponential notation to avoid floating-point issues.\n          // See [MDN](https://mdn.io/round#Examples) for more details.\n          var pair = (toString(number) + 'e').split('e'),\n              value = func(pair[0] + 'e' + (+pair[1] + precision));\n\n          pair = (toString(value) + 'e').split('e');\n          return +(pair[0] + 'e' + (+pair[1] - precision));\n        }\n        return func(number);\n      };\n    }\n\n    /**\n     * Creates a set object of `values`.\n     *\n     * @private\n     * @param {Array} values The values to add to the set.\n     * @returns {Object} Returns the new set.\n     */\n    var createSet = !(Set && (1 / setToArray(new Set([,-0]))[1]) == INFINITY) ? noop : function(values) {\n      return new Set(values);\n    };\n\n    /**\n     * Creates a `_.toPairs` or `_.toPairsIn` function.\n     *\n     * @private\n     * @param {Function} keysFunc The function to get the keys of a given object.\n     * @returns {Function} Returns the new pairs function.\n     */\n    function createToPairs(keysFunc) {\n      return function(object) {\n        var tag = getTag(object);\n        if (tag == mapTag) {\n          return mapToArray(object);\n        }\n        if (tag == setTag) {\n          return setToPairs(object);\n        }\n        return baseToPairs(object, keysFunc(object));\n      };\n    }\n\n    /**\n     * Creates a function that either curries or invokes `func` with optional\n     * `this` binding and partially applied arguments.\n     *\n     * @private\n     * @param {Function|string} func The function or method name to wrap.\n     * @param {number} bitmask The bitmask flags.\n     *    1 - `_.bind`\n     *    2 - `_.bindKey`\n     *    4 - `_.curry` or `_.curryRight` of a bound function\n     *    8 - `_.curry`\n     *   16 - `_.curryRight`\n     *   32 - `_.partial`\n     *   64 - `_.partialRight`\n     *  128 - `_.rearg`\n     *  256 - `_.ary`\n     *  512 - `_.flip`\n     * @param {*} [thisArg] The `this` binding of `func`.\n     * @param {Array} [partials] The arguments to be partially applied.\n     * @param {Array} [holders] The `partials` placeholder indexes.\n     * @param {Array} [argPos] The argument positions of the new function.\n     * @param {number} [ary] The arity cap of `func`.\n     * @param {number} [arity] The arity of `func`.\n     * @returns {Function} Returns the new wrapped function.\n     */\n    function createWrap(func, bitmask, thisArg, partials, holders, argPos, ary, arity) {\n      var isBindKey = bitmask & WRAP_BIND_KEY_FLAG;\n      if (!isBindKey && typeof func != 'function') {\n        throw new TypeError(FUNC_ERROR_TEXT);\n      }\n      var length = partials ? partials.length : 0;\n      if (!length) {\n        bitmask &= ~(WRAP_PARTIAL_FLAG | WRAP_PARTIAL_RIGHT_FLAG);\n        partials = holders = undefined;\n      }\n      ary = ary === undefined ? ary : nativeMax(toInteger(ary), 0);\n      arity = arity === undefined ? arity : toInteger(arity);\n      length -= holders ? holders.length : 0;\n\n      if (bitmask & WRAP_PARTIAL_RIGHT_FLAG) {\n        var partialsRight = partials,\n            holdersRight = holders;\n\n        partials = holders = undefined;\n      }\n      var data = isBindKey ? undefined : getData(func);\n\n      var newData = [\n        func, bitmask, thisArg, partials, holders, partialsRight, holdersRight,\n        argPos, ary, arity\n      ];\n\n      if (data) {\n        mergeData(newData, data);\n      }\n      func = newData[0];\n      bitmask = newData[1];\n      thisArg = newData[2];\n      partials = newData[3];\n      holders = newData[4];\n      arity = newData[9] = newData[9] === undefined\n        ? (isBindKey ? 0 : func.length)\n        : nativeMax(newData[9] - length, 0);\n\n      if (!arity && bitmask & (WRAP_CURRY_FLAG | WRAP_CURRY_RIGHT_FLAG)) {\n        bitmask &= ~(WRAP_CURRY_FLAG | WRAP_CURRY_RIGHT_FLAG);\n      }\n      if (!bitmask || bitmask == WRAP_BIND_FLAG) {\n        var result = createBind(func, bitmask, thisArg);\n      } else if (bitmask == WRAP_CURRY_FLAG || bitmask == WRAP_CURRY_RIGHT_FLAG) {\n        result = createCurry(func, bitmask, arity);\n      } else if ((bitmask == WRAP_PARTIAL_FLAG || bitmask == (WRAP_BIND_FLAG | WRAP_PARTIAL_FLAG)) && !holders.length) {\n        result = createPartial(func, bitmask, thisArg, partials);\n      } else {\n        result = createHybrid.apply(undefined, newData);\n      }\n      var setter = data ? baseSetData : setData;\n      return setWrapToString(setter(result, newData), func, bitmask);\n    }\n\n    /**\n     * Used by `_.defaults` to customize its `_.assignIn` use to assign properties\n     * of source objects to the destination object for all destination properties\n     * that resolve to `undefined`.\n     *\n     * @private\n     * @param {*} objValue The destination value.\n     * @param {*} srcValue The source value.\n     * @param {string} key The key of the property to assign.\n     * @param {Object} object The parent object of `objValue`.\n     * @returns {*} Returns the value to assign.\n     */\n    function customDefaultsAssignIn(objValue, srcValue, key, object) {\n      if (objValue === undefined ||\n          (eq(objValue, objectProto[key]) && !hasOwnProperty.call(object, key))) {\n        return srcValue;\n      }\n      return objValue;\n    }\n\n    /**\n     * Used by `_.defaultsDeep` to customize its `_.merge` use to merge source\n     * objects into destination objects that are passed thru.\n     *\n     * @private\n     * @param {*} objValue The destination value.\n     * @param {*} srcValue The source value.\n     * @param {string} key The key of the property to merge.\n     * @param {Object} object The parent object of `objValue`.\n     * @param {Object} source The parent object of `srcValue`.\n     * @param {Object} [stack] Tracks traversed source values and their merged\n     *  counterparts.\n     * @returns {*} Returns the value to assign.\n     */\n    function customDefaultsMerge(objValue, srcValue, key, object, source, stack) {\n      if (isObject(objValue) && isObject(srcValue)) {\n        // Recursively merge objects and arrays (susceptible to call stack limits).\n        stack.set(srcValue, objValue);\n        baseMerge(objValue, srcValue, undefined, customDefaultsMerge, stack);\n        stack['delete'](srcValue);\n      }\n      return objValue;\n    }\n\n    /**\n     * Used by `_.omit` to customize its `_.cloneDeep` use to only clone plain\n     * objects.\n     *\n     * @private\n     * @param {*} value The value to inspect.\n     * @param {string} key The key of the property to inspect.\n     * @returns {*} Returns the uncloned value or `undefined` to defer cloning to `_.cloneDeep`.\n     */\n    function customOmitClone(value) {\n      return isPlainObject(value) ? undefined : value;\n    }\n\n    /**\n     * A specialized version of `baseIsEqualDeep` for arrays with support for\n     * partial deep comparisons.\n     *\n     * @private\n     * @param {Array} array The array to compare.\n     * @param {Array} other The other array to compare.\n     * @param {number} bitmask The bitmask flags. See `baseIsEqual` for more details.\n     * @param {Function} customizer The function to customize comparisons.\n     * @param {Function} equalFunc The function to determine equivalents of values.\n     * @param {Object} stack Tracks traversed `array` and `other` objects.\n     * @returns {boolean} Returns `true` if the arrays are equivalent, else `false`.\n     */\n    function equalArrays(array, other, bitmask, customizer, equalFunc, stack) {\n      var isPartial = bitmask & COMPARE_PARTIAL_FLAG,\n          arrLength = array.length,\n          othLength = other.length;\n\n      if (arrLength != othLength && !(isPartial && othLength > arrLength)) {\n        return false;\n      }\n      // Assume cyclic values are equal.\n      var stacked = stack.get(array);\n      if (stacked && stack.get(other)) {\n        return stacked == other;\n      }\n      var index = -1,\n          result = true,\n          seen = (bitmask & COMPARE_UNORDERED_FLAG) ? new SetCache : undefined;\n\n      stack.set(array, other);\n      stack.set(other, array);\n\n      // Ignore non-index properties.\n      while (++index < arrLength) {\n        var arrValue = array[index],\n            othValue = other[index];\n\n        if (customizer) {\n          var compared = isPartial\n            ? customizer(othValue, arrValue, index, other, array, stack)\n            : customizer(arrValue, othValue, index, array, other, stack);\n        }\n        if (compared !== undefined) {\n          if (compared) {\n            continue;\n          }\n          result = false;\n          break;\n        }\n        // Recursively compare arrays (susceptible to call stack limits).\n        if (seen) {\n          if (!arraySome(other, function(othValue, othIndex) {\n                if (!cacheHas(seen, othIndex) &&\n                    (arrValue === othValue || equalFunc(arrValue, othValue, bitmask, customizer, stack))) {\n                  return seen.push(othIndex);\n                }\n              })) {\n            result = false;\n            break;\n          }\n        } else if (!(\n              arrValue === othValue ||\n                equalFunc(arrValue, othValue, bitmask, customizer, stack)\n            )) {\n          result = false;\n          break;\n        }\n      }\n      stack['delete'](array);\n      stack['delete'](other);\n      return result;\n    }\n\n    /**\n     * A specialized version of `baseIsEqualDeep` for comparing objects of\n     * the same `toStringTag`.\n     *\n     * **Note:** This function only supports comparing values with tags of\n     * `Boolean`, `Date`, `Error`, `Number`, `RegExp`, or `String`.\n     *\n     * @private\n     * @param {Object} object The object to compare.\n     * @param {Object} other The other object to compare.\n     * @param {string} tag The `toStringTag` of the objects to compare.\n     * @param {number} bitmask The bitmask flags. See `baseIsEqual` for more details.\n     * @param {Function} customizer The function to customize comparisons.\n     * @param {Function} equalFunc The function to determine equivalents of values.\n     * @param {Object} stack Tracks traversed `object` and `other` objects.\n     * @returns {boolean} Returns `true` if the objects are equivalent, else `false`.\n     */\n    function equalByTag(object, other, tag, bitmask, customizer, equalFunc, stack) {\n      switch (tag) {\n        case dataViewTag:\n          if ((object.byteLength != other.byteLength) ||\n              (object.byteOffset != other.byteOffset)) {\n            return false;\n          }\n          object = object.buffer;\n          other = other.buffer;\n\n        case arrayBufferTag:\n          if ((object.byteLength != other.byteLength) ||\n              !equalFunc(new Uint8Array(object), new Uint8Array(other))) {\n            return false;\n          }\n          return true;\n\n        case boolTag:\n        case dateTag:\n        case numberTag:\n          // Coerce booleans to `1` or `0` and dates to milliseconds.\n          // Invalid dates are coerced to `NaN`.\n          return eq(+object, +other);\n\n        case errorTag:\n          return object.name == other.name && object.message == other.message;\n\n        case regexpTag:\n        case stringTag:\n          // Coerce regexes to strings and treat strings, primitives and objects,\n          // as equal. See http://www.ecma-international.org/ecma-262/7.0/#sec-regexp.prototype.tostring\n          // for more details.\n          return object == (other + '');\n\n        case mapTag:\n          var convert = mapToArray;\n\n        case setTag:\n          var isPartial = bitmask & COMPARE_PARTIAL_FLAG;\n          convert || (convert = setToArray);\n\n          if (object.size != other.size && !isPartial) {\n            return false;\n          }\n          // Assume cyclic values are equal.\n          var stacked = stack.get(object);\n          if (stacked) {\n            return stacked == other;\n          }\n          bitmask |= COMPARE_UNORDERED_FLAG;\n\n          // Recursively compare objects (susceptible to call stack limits).\n          stack.set(object, other);\n          var result = equalArrays(convert(object), convert(other), bitmask, customizer, equalFunc, stack);\n          stack['delete'](object);\n          return result;\n\n        case symbolTag:\n          if (symbolValueOf) {\n            return symbolValueOf.call(object) == symbolValueOf.call(other);\n          }\n      }\n      return false;\n    }\n\n    /**\n     * A specialized version of `baseIsEqualDeep` for objects with support for\n     * partial deep comparisons.\n     *\n     * @private\n     * @param {Object} object The object to compare.\n     * @param {Object} other The other object to compare.\n     * @param {number} bitmask The bitmask flags. See `baseIsEqual` for more details.\n     * @param {Function} customizer The function to customize comparisons.\n     * @param {Function} equalFunc The function to determine equivalents of values.\n     * @param {Object} stack Tracks traversed `object` and `other` objects.\n     * @returns {boolean} Returns `true` if the objects are equivalent, else `false`.\n     */\n    function equalObjects(object, other, bitmask, customizer, equalFunc, stack) {\n      var isPartial = bitmask & COMPARE_PARTIAL_FLAG,\n          objProps = getAllKeys(object),\n          objLength = objProps.length,\n          othProps = getAllKeys(other),\n          othLength = othProps.length;\n\n      if (objLength != othLength && !isPartial) {\n        return false;\n      }\n      var index = objLength;\n      while (index--) {\n        var key = objProps[index];\n        if (!(isPartial ? key in other : hasOwnProperty.call(other, key))) {\n          return false;\n        }\n      }\n      // Assume cyclic values are equal.\n      var stacked = stack.get(object);\n      if (stacked && stack.get(other)) {\n        return stacked == other;\n      }\n      var result = true;\n      stack.set(object, other);\n      stack.set(other, object);\n\n      var skipCtor = isPartial;\n      while (++index < objLength) {\n        key = objProps[index];\n        var objValue = object[key],\n            othValue = other[key];\n\n        if (customizer) {\n          var compared = isPartial\n            ? customizer(othValue, objValue, key, other, object, stack)\n            : customizer(objValue, othValue, key, object, other, stack);\n        }\n        // Recursively compare objects (susceptible to call stack limits).\n        if (!(compared === undefined\n              ? (objValue === othValue || equalFunc(objValue, othValue, bitmask, customizer, stack))\n              : compared\n            )) {\n          result = false;\n          break;\n        }\n        skipCtor || (skipCtor = key == 'constructor');\n      }\n      if (result && !skipCtor) {\n        var objCtor = object.constructor,\n            othCtor = other.constructor;\n\n        // Non `Object` object instances with different constructors are not equal.\n        if (objCtor != othCtor &&\n            ('constructor' in object && 'constructor' in other) &&\n            !(typeof objCtor == 'function' && objCtor instanceof objCtor &&\n              typeof othCtor == 'function' && othCtor instanceof othCtor)) {\n          result = false;\n        }\n      }\n      stack['delete'](object);\n      stack['delete'](other);\n      return result;\n    }\n\n    /**\n     * A specialized version of `baseRest` which flattens the rest array.\n     *\n     * @private\n     * @param {Function} func The function to apply a rest parameter to.\n     * @returns {Function} Returns the new function.\n     */\n    function flatRest(func) {\n      return setToString(overRest(func, undefined, flatten), func + '');\n    }\n\n    /**\n     * Creates an array of own enumerable property names and symbols of `object`.\n     *\n     * @private\n     * @param {Object} object The object to query.\n     * @returns {Array} Returns the array of property names and symbols.\n     */\n    function getAllKeys(object) {\n      return baseGetAllKeys(object, keys, getSymbols);\n    }\n\n    /**\n     * Creates an array of own and inherited enumerable property names and\n     * symbols of `object`.\n     *\n     * @private\n     * @param {Object} object The object to query.\n     * @returns {Array} Returns the array of property names and symbols.\n     */\n    function getAllKeysIn(object) {\n      return baseGetAllKeys(object, keysIn, getSymbolsIn);\n    }\n\n    /**\n     * Gets metadata for `func`.\n     *\n     * @private\n     * @param {Function} func The function to query.\n     * @returns {*} Returns the metadata for `func`.\n     */\n    var getData = !metaMap ? noop : function(func) {\n      return metaMap.get(func);\n    };\n\n    /**\n     * Gets the name of `func`.\n     *\n     * @private\n     * @param {Function} func The function to query.\n     * @returns {string} Returns the function name.\n     */\n    function getFuncName(func) {\n      var result = (func.name + ''),\n          array = realNames[result],\n          length = hasOwnProperty.call(realNames, result) ? array.length : 0;\n\n      while (length--) {\n        var data = array[length],\n            otherFunc = data.func;\n        if (otherFunc == null || otherFunc == func) {\n          return data.name;\n        }\n      }\n      return result;\n    }\n\n    /**\n     * Gets the argument placeholder value for `func`.\n     *\n     * @private\n     * @param {Function} func The function to inspect.\n     * @returns {*} Returns the placeholder value.\n     */\n    function getHolder(func) {\n      var object = hasOwnProperty.call(lodash, 'placeholder') ? lodash : func;\n      return object.placeholder;\n    }\n\n    /**\n     * Gets the appropriate \"iteratee\" function. If `_.iteratee` is customized,\n     * this function returns the custom method, otherwise it returns `baseIteratee`.\n     * If arguments are provided, the chosen function is invoked with them and\n     * its result is returned.\n     *\n     * @private\n     * @param {*} [value] The value to convert to an iteratee.\n     * @param {number} [arity] The arity of the created iteratee.\n     * @returns {Function} Returns the chosen function or its result.\n     */\n    function getIteratee() {\n      var result = lodash.iteratee || iteratee;\n      result = result === iteratee ? baseIteratee : result;\n      return arguments.length ? result(arguments[0], arguments[1]) : result;\n    }\n\n    /**\n     * Gets the data for `map`.\n     *\n     * @private\n     * @param {Object} map The map to query.\n     * @param {string} key The reference key.\n     * @returns {*} Returns the map data.\n     */\n    function getMapData(map, key) {\n      var data = map.__data__;\n      return isKeyable(key)\n        ? data[typeof key == 'string' ? 'string' : 'hash']\n        : data.map;\n    }\n\n    /**\n     * Gets the property names, values, and compare flags of `object`.\n     *\n     * @private\n     * @param {Object} object The object to query.\n     * @returns {Array} Returns the match data of `object`.\n     */\n    function getMatchData(object) {\n      var result = keys(object),\n          length = result.length;\n\n      while (length--) {\n        var key = result[length],\n            value = object[key];\n\n        result[length] = [key, value, isStrictComparable(value)];\n      }\n      return result;\n    }\n\n    /**\n     * Gets the native function at `key` of `object`.\n     *\n     * @private\n     * @param {Object} object The object to query.\n     * @param {string} key The key of the method to get.\n     * @returns {*} Returns the function if it's native, else `undefined`.\n     */\n    function getNative(object, key) {\n      var value = getValue(object, key);\n      return baseIsNative(value) ? value : undefined;\n    }\n\n    /**\n     * A specialized version of `baseGetTag` which ignores `Symbol.toStringTag` values.\n     *\n     * @private\n     * @param {*} value The value to query.\n     * @returns {string} Returns the raw `toStringTag`.\n     */\n    function getRawTag(value) {\n      var isOwn = hasOwnProperty.call(value, symToStringTag),\n          tag = value[symToStringTag];\n\n      try {\n        value[symToStringTag] = undefined;\n        var unmasked = true;\n      } catch (e) {}\n\n      var result = nativeObjectToString.call(value);\n      if (unmasked) {\n        if (isOwn) {\n          value[symToStringTag] = tag;\n        } else {\n          delete value[symToStringTag];\n        }\n      }\n      return result;\n    }\n\n    /**\n     * Creates an array of the own enumerable symbols of `object`.\n     *\n     * @private\n     * @param {Object} object The object to query.\n     * @returns {Array} Returns the array of symbols.\n     */\n    var getSymbols = !nativeGetSymbols ? stubArray : function(object) {\n      if (object == null) {\n        return [];\n      }\n      object = Object(object);\n      return arrayFilter(nativeGetSymbols(object), function(symbol) {\n        return propertyIsEnumerable.call(object, symbol);\n      });\n    };\n\n    /**\n     * Creates an array of the own and inherited enumerable symbols of `object`.\n     *\n     * @private\n     * @param {Object} object The object to query.\n     * @returns {Array} Returns the array of symbols.\n     */\n    var getSymbolsIn = !nativeGetSymbols ? stubArray : function(object) {\n      var result = [];\n      while (object) {\n        arrayPush(result, getSymbols(object));\n        object = getPrototype(object);\n      }\n      return result;\n    };\n\n    /**\n     * Gets the `toStringTag` of `value`.\n     *\n     * @private\n     * @param {*} value The value to query.\n     * @returns {string} Returns the `toStringTag`.\n     */\n    var getTag = baseGetTag;\n\n    // Fallback for data views, maps, sets, and weak maps in IE 11 and promises in Node.js < 6.\n    if ((DataView && getTag(new DataView(new ArrayBuffer(1))) != dataViewTag) ||\n        (Map && getTag(new Map) != mapTag) ||\n        (Promise && getTag(Promise.resolve()) != promiseTag) ||\n        (Set && getTag(new Set) != setTag) ||\n        (WeakMap && getTag(new WeakMap) != weakMapTag)) {\n      getTag = function(value) {\n        var result = baseGetTag(value),\n            Ctor = result == objectTag ? value.constructor : undefined,\n            ctorString = Ctor ? toSource(Ctor) : '';\n\n        if (ctorString) {\n          switch (ctorString) {\n            case dataViewCtorString: return dataViewTag;\n            case mapCtorString: return mapTag;\n            case promiseCtorString: return promiseTag;\n            case setCtorString: return setTag;\n            case weakMapCtorString: return weakMapTag;\n          }\n        }\n        return result;\n      };\n    }\n\n    /**\n     * Gets the view, applying any `transforms` to the `start` and `end` positions.\n     *\n     * @private\n     * @param {number} start The start of the view.\n     * @param {number} end The end of the view.\n     * @param {Array} transforms The transformations to apply to the view.\n     * @returns {Object} Returns an object containing the `start` and `end`\n     *  positions of the view.\n     */\n    function getView(start, end, transforms) {\n      var index = -1,\n          length = transforms.length;\n\n      while (++index < length) {\n        var data = transforms[index],\n            size = data.size;\n\n        switch (data.type) {\n          case 'drop':      start += size; break;\n          case 'dropRight': end -= size; break;\n          case 'take':      end = nativeMin(end, start + size); break;\n          case 'takeRight': start = nativeMax(start, end - size); break;\n        }\n      }\n      return { 'start': start, 'end': end };\n    }\n\n    /**\n     * Extracts wrapper details from the `source` body comment.\n     *\n     * @private\n     * @param {string} source The source to inspect.\n     * @returns {Array} Returns the wrapper details.\n     */\n    function getWrapDetails(source) {\n      var match = source.match(reWrapDetails);\n      return match ? match[1].split(reSplitDetails) : [];\n    }\n\n    /**\n     * Checks if `path` exists on `object`.\n     *\n     * @private\n     * @param {Object} object The object to query.\n     * @param {Array|string} path The path to check.\n     * @param {Function} hasFunc The function to check properties.\n     * @returns {boolean} Returns `true` if `path` exists, else `false`.\n     */\n    function hasPath(object, path, hasFunc) {\n      path = castPath(path, object);\n\n      var index = -1,\n          length = path.length,\n          result = false;\n\n      while (++index < length) {\n        var key = toKey(path[index]);\n        if (!(result = object != null && hasFunc(object, key))) {\n          break;\n        }\n        object = object[key];\n      }\n      if (result || ++index != length) {\n        return result;\n      }\n      length = object == null ? 0 : object.length;\n      return !!length && isLength(length) && isIndex(key, length) &&\n        (isArray(object) || isArguments(object));\n    }\n\n    /**\n     * Initializes an array clone.\n     *\n     * @private\n     * @param {Array} array The array to clone.\n     * @returns {Array} Returns the initialized clone.\n     */\n    function initCloneArray(array) {\n      var length = array.length,\n          result = array.constructor(length);\n\n      // Add properties assigned by `RegExp#exec`.\n      if (length && typeof array[0] == 'string' && hasOwnProperty.call(array, 'index')) {\n        result.index = array.index;\n        result.input = array.input;\n      }\n      return result;\n    }\n\n    /**\n     * Initializes an object clone.\n     *\n     * @private\n     * @param {Object} object The object to clone.\n     * @returns {Object} Returns the initialized clone.\n     */\n    function initCloneObject(object) {\n      return (typeof object.constructor == 'function' && !isPrototype(object))\n        ? baseCreate(getPrototype(object))\n        : {};\n    }\n\n    /**\n     * Initializes an object clone based on its `toStringTag`.\n     *\n     * **Note:** This function only supports cloning values with tags of\n     * `Boolean`, `Date`, `Error`, `Number`, `RegExp`, or `String`.\n     *\n     * @private\n     * @param {Object} object The object to clone.\n     * @param {string} tag The `toStringTag` of the object to clone.\n     * @param {Function} cloneFunc The function to clone values.\n     * @param {boolean} [isDeep] Specify a deep clone.\n     * @returns {Object} Returns the initialized clone.\n     */\n    function initCloneByTag(object, tag, cloneFunc, isDeep) {\n      var Ctor = object.constructor;\n      switch (tag) {\n        case arrayBufferTag:\n          return cloneArrayBuffer(object);\n\n        case boolTag:\n        case dateTag:\n          return new Ctor(+object);\n\n        case dataViewTag:\n          return cloneDataView(object, isDeep);\n\n        case float32Tag: case float64Tag:\n        case int8Tag: case int16Tag: case int32Tag:\n        case uint8Tag: case uint8ClampedTag: case uint16Tag: case uint32Tag:\n          return cloneTypedArray(object, isDeep);\n\n        case mapTag:\n          return cloneMap(object, isDeep, cloneFunc);\n\n        case numberTag:\n        case stringTag:\n          return new Ctor(object);\n\n        case regexpTag:\n          return cloneRegExp(object);\n\n        case setTag:\n          return cloneSet(object, isDeep, cloneFunc);\n\n        case symbolTag:\n          return cloneSymbol(object);\n      }\n    }\n\n    /**\n     * Inserts wrapper `details` in a comment at the top of the `source` body.\n     *\n     * @private\n     * @param {string} source The source to modify.\n     * @returns {Array} details The details to insert.\n     * @returns {string} Returns the modified source.\n     */\n    function insertWrapDetails(source, details) {\n      var length = details.length;\n      if (!length) {\n        return source;\n      }\n      var lastIndex = length - 1;\n      details[lastIndex] = (length > 1 ? '& ' : '') + details[lastIndex];\n      details = details.join(length > 2 ? ', ' : ' ');\n      return source.replace(reWrapComment, '{\\n/* [wrapped with ' + details + '] */\\n');\n    }\n\n    /**\n     * Checks if `value` is a flattenable `arguments` object or array.\n     *\n     * @private\n     * @param {*} value The value to check.\n     * @returns {boolean} Returns `true` if `value` is flattenable, else `false`.\n     */\n    function isFlattenable(value) {\n      return isArray(value) || isArguments(value) ||\n        !!(spreadableSymbol && value && value[spreadableSymbol]);\n    }\n\n    /**\n     * Checks if `value` is a valid array-like index.\n     *\n     * @private\n     * @param {*} value The value to check.\n     * @param {number} [length=MAX_SAFE_INTEGER] The upper bounds of a valid index.\n     * @returns {boolean} Returns `true` if `value` is a valid index, else `false`.\n     */\n    function isIndex(value, length) {\n      length = length == null ? MAX_SAFE_INTEGER : length;\n      return !!length &&\n        (typeof value == 'number' || reIsUint.test(value)) &&\n        (value > -1 && value % 1 == 0 && value < length);\n    }\n\n    /**\n     * Checks if the given arguments are from an iteratee call.\n     *\n     * @private\n     * @param {*} value The potential iteratee value argument.\n     * @param {*} index The potential iteratee index or key argument.\n     * @param {*} object The potential iteratee object argument.\n     * @returns {boolean} Returns `true` if the arguments are from an iteratee call,\n     *  else `false`.\n     */\n    function isIterateeCall(value, index, object) {\n      if (!isObject(object)) {\n        return false;\n      }\n      var type = typeof index;\n      if (type == 'number'\n            ? (isArrayLike(object) && isIndex(index, object.length))\n            : (type == 'string' && index in object)\n          ) {\n        return eq(object[index], value);\n      }\n      return false;\n    }\n\n    /**\n     * Checks if `value` is a property name and not a property path.\n     *\n     * @private\n     * @param {*} value The value to check.\n     * @param {Object} [object] The object to query keys on.\n     * @returns {boolean} Returns `true` if `value` is a property name, else `false`.\n     */\n    function isKey(value, object) {\n      if (isArray(value)) {\n        return false;\n      }\n      var type = typeof value;\n      if (type == 'number' || type == 'symbol' || type == 'boolean' ||\n          value == null || isSymbol(value)) {\n        return true;\n      }\n      return reIsPlainProp.test(value) || !reIsDeepProp.test(value) ||\n        (object != null && value in Object(object));\n    }\n\n    /**\n     * Checks if `value` is suitable for use as unique object key.\n     *\n     * @private\n     * @param {*} value The value to check.\n     * @returns {boolean} Returns `true` if `value` is suitable, else `false`.\n     */\n    function isKeyable(value) {\n      var type = typeof value;\n      return (type == 'string' || type == 'number' || type == 'symbol' || type == 'boolean')\n        ? (value !== '__proto__')\n        : (value === null);\n    }\n\n    /**\n     * Checks if `func` has a lazy counterpart.\n     *\n     * @private\n     * @param {Function} func The function to check.\n     * @returns {boolean} Returns `true` if `func` has a lazy counterpart,\n     *  else `false`.\n     */\n    function isLaziable(func) {\n      var funcName = getFuncName(func),\n          other = lodash[funcName];\n\n      if (typeof other != 'function' || !(funcName in LazyWrapper.prototype)) {\n        return false;\n      }\n      if (func === other) {\n        return true;\n      }\n      var data = getData(other);\n      return !!data && func === data[0];\n    }\n\n    /**\n     * Checks if `func` has its source masked.\n     *\n     * @private\n     * @param {Function} func The function to check.\n     * @returns {boolean} Returns `true` if `func` is masked, else `false`.\n     */\n    function isMasked(func) {\n      return !!maskSrcKey && (maskSrcKey in func);\n    }\n\n    /**\n     * Checks if `func` is capable of being masked.\n     *\n     * @private\n     * @param {*} value The value to check.\n     * @returns {boolean} Returns `true` if `func` is maskable, else `false`.\n     */\n    var isMaskable = coreJsData ? isFunction : stubFalse;\n\n    /**\n     * Checks if `value` is likely a prototype object.\n     *\n     * @private\n     * @param {*} value The value to check.\n     * @returns {boolean} Returns `true` if `value` is a prototype, else `false`.\n     */\n    function isPrototype(value) {\n      var Ctor = value && value.constructor,\n          proto = (typeof Ctor == 'function' && Ctor.prototype) || objectProto;\n\n      return value === proto;\n    }\n\n    /**\n     * Checks if `value` is suitable for strict equality comparisons, i.e. `===`.\n     *\n     * @private\n     * @param {*} value The value to check.\n     * @returns {boolean} Returns `true` if `value` if suitable for strict\n     *  equality comparisons, else `false`.\n     */\n    function isStrictComparable(value) {\n      return value === value && !isObject(value);\n    }\n\n    /**\n     * A specialized version of `matchesProperty` for source values suitable\n     * for strict equality comparisons, i.e. `===`.\n     *\n     * @private\n     * @param {string} key The key of the property to get.\n     * @param {*} srcValue The value to match.\n     * @returns {Function} Returns the new spec function.\n     */\n    function matchesStrictComparable(key, srcValue) {\n      return function(object) {\n        if (object == null) {\n          return false;\n        }\n        return object[key] === srcValue &&\n          (srcValue !== undefined || (key in Object(object)));\n      };\n    }\n\n    /**\n     * A specialized version of `_.memoize` which clears the memoized function's\n     * cache when it exceeds `MAX_MEMOIZE_SIZE`.\n     *\n     * @private\n     * @param {Function} func The function to have its output memoized.\n     * @returns {Function} Returns the new memoized function.\n     */\n    function memoizeCapped(func) {\n      var result = memoize(func, function(key) {\n        if (cache.size === MAX_MEMOIZE_SIZE) {\n          cache.clear();\n        }\n        return key;\n      });\n\n      var cache = result.cache;\n      return result;\n    }\n\n    /**\n     * Merges the function metadata of `source` into `data`.\n     *\n     * Merging metadata reduces the number of wrappers used to invoke a function.\n     * This is possible because methods like `_.bind`, `_.curry`, and `_.partial`\n     * may be applied regardless of execution order. Methods like `_.ary` and\n     * `_.rearg` modify function arguments, making the order in which they are\n     * executed important, preventing the merging of metadata. However, we make\n     * an exception for a safe combined case where curried functions have `_.ary`\n     * and or `_.rearg` applied.\n     *\n     * @private\n     * @param {Array} data The destination metadata.\n     * @param {Array} source The source metadata.\n     * @returns {Array} Returns `data`.\n     */\n    function mergeData(data, source) {\n      var bitmask = data[1],\n          srcBitmask = source[1],\n          newBitmask = bitmask | srcBitmask,\n          isCommon = newBitmask < (WRAP_BIND_FLAG | WRAP_BIND_KEY_FLAG | WRAP_ARY_FLAG);\n\n      var isCombo =\n        ((srcBitmask == WRAP_ARY_FLAG) && (bitmask == WRAP_CURRY_FLAG)) ||\n        ((srcBitmask == WRAP_ARY_FLAG) && (bitmask == WRAP_REARG_FLAG) && (data[7].length <= source[8])) ||\n        ((srcBitmask == (WRAP_ARY_FLAG | WRAP_REARG_FLAG)) && (source[7].length <= source[8]) && (bitmask == WRAP_CURRY_FLAG));\n\n      // Exit early if metadata can't be merged.\n      if (!(isCommon || isCombo)) {\n        return data;\n      }\n      // Use source `thisArg` if available.\n      if (srcBitmask & WRAP_BIND_FLAG) {\n        data[2] = source[2];\n        // Set when currying a bound function.\n        newBitmask |= bitmask & WRAP_BIND_FLAG ? 0 : WRAP_CURRY_BOUND_FLAG;\n      }\n      // Compose partial arguments.\n      var value = source[3];\n      if (value) {\n        var partials = data[3];\n        data[3] = partials ? composeArgs(partials, value, source[4]) : value;\n        data[4] = partials ? replaceHolders(data[3], PLACEHOLDER) : source[4];\n      }\n      // Compose partial right arguments.\n      value = source[5];\n      if (value) {\n        partials = data[5];\n        data[5] = partials ? composeArgsRight(partials, value, source[6]) : value;\n        data[6] = partials ? replaceHolders(data[5], PLACEHOLDER) : source[6];\n      }\n      // Use source `argPos` if available.\n      value = source[7];\n      if (value) {\n        data[7] = value;\n      }\n      // Use source `ary` if it's smaller.\n      if (srcBitmask & WRAP_ARY_FLAG) {\n        data[8] = data[8] == null ? source[8] : nativeMin(data[8], source[8]);\n      }\n      // Use source `arity` if one is not provided.\n      if (data[9] == null) {\n        data[9] = source[9];\n      }\n      // Use source `func` and merge bitmasks.\n      data[0] = source[0];\n      data[1] = newBitmask;\n\n      return data;\n    }\n\n    /**\n     * This function is like\n     * [`Object.keys`](http://ecma-international.org/ecma-262/7.0/#sec-object.keys)\n     * except that it includes inherited enumerable properties.\n     *\n     * @private\n     * @param {Object} object The object to query.\n     * @returns {Array} Returns the array of property names.\n     */\n    function nativeKeysIn(object) {\n      var result = [];\n      if (object != null) {\n        for (var key in Object(object)) {\n          result.push(key);\n        }\n      }\n      return result;\n    }\n\n    /**\n     * Converts `value` to a string using `Object.prototype.toString`.\n     *\n     * @private\n     * @param {*} value The value to convert.\n     * @returns {string} Returns the converted string.\n     */\n    function objectToString(value) {\n      return nativeObjectToString.call(value);\n    }\n\n    /**\n     * A specialized version of `baseRest` which transforms the rest array.\n     *\n     * @private\n     * @param {Function} func The function to apply a rest parameter to.\n     * @param {number} [start=func.length-1] The start position of the rest parameter.\n     * @param {Function} transform The rest array transform.\n     * @returns {Function} Returns the new function.\n     */\n    function overRest(func, start, transform) {\n      start = nativeMax(start === undefined ? (func.length - 1) : start, 0);\n      return function() {\n        var args = arguments,\n            index = -1,\n            length = nativeMax(args.length - start, 0),\n            array = Array(length);\n\n        while (++index < length) {\n          array[index] = args[start + index];\n        }\n        index = -1;\n        var otherArgs = Array(start + 1);\n        while (++index < start) {\n          otherArgs[index] = args[index];\n        }\n        otherArgs[start] = transform(array);\n        return apply(func, this, otherArgs);\n      };\n    }\n\n    /**\n     * Gets the parent value at `path` of `object`.\n     *\n     * @private\n     * @param {Object} object The object to query.\n     * @param {Array} path The path to get the parent value of.\n     * @returns {*} Returns the parent value.\n     */\n    function parent(object, path) {\n      return path.length < 2 ? object : baseGet(object, baseSlice(path, 0, -1));\n    }\n\n    /**\n     * Reorder `array` according to the specified indexes where the element at\n     * the first index is assigned as the first element, the element at\n     * the second index is assigned as the second element, and so on.\n     *\n     * @private\n     * @param {Array} array The array to reorder.\n     * @param {Array} indexes The arranged array indexes.\n     * @returns {Array} Returns `array`.\n     */\n    function reorder(array, indexes) {\n      var arrLength = array.length,\n          length = nativeMin(indexes.length, arrLength),\n          oldArray = copyArray(array);\n\n      while (length--) {\n        var index = indexes[length];\n        array[length] = isIndex(index, arrLength) ? oldArray[index] : undefined;\n      }\n      return array;\n    }\n\n    /**\n     * Sets metadata for `func`.\n     *\n     * **Note:** If this function becomes hot, i.e. is invoked a lot in a short\n     * period of time, it will trip its breaker and transition to an identity\n     * function to avoid garbage collection pauses in V8. See\n     * [V8 issue 2070](https://bugs.chromium.org/p/v8/issues/detail?id=2070)\n     * for more details.\n     *\n     * @private\n     * @param {Function} func The function to associate metadata with.\n     * @param {*} data The metadata.\n     * @returns {Function} Returns `func`.\n     */\n    var setData = shortOut(baseSetData);\n\n    /**\n     * A simple wrapper around the global [`setTimeout`](https://mdn.io/setTimeout).\n     *\n     * @private\n     * @param {Function} func The function to delay.\n     * @param {number} wait The number of milliseconds to delay invocation.\n     * @returns {number|Object} Returns the timer id or timeout object.\n     */\n    var setTimeout = ctxSetTimeout || function(func, wait) {\n      return root.setTimeout(func, wait);\n    };\n\n    /**\n     * Sets the `toString` method of `func` to return `string`.\n     *\n     * @private\n     * @param {Function} func The function to modify.\n     * @param {Function} string The `toString` result.\n     * @returns {Function} Returns `func`.\n     */\n    var setToString = shortOut(baseSetToString);\n\n    /**\n     * Sets the `toString` method of `wrapper` to mimic the source of `reference`\n     * with wrapper details in a comment at the top of the source body.\n     *\n     * @private\n     * @param {Function} wrapper The function to modify.\n     * @param {Function} reference The reference function.\n     * @param {number} bitmask The bitmask flags. See `createWrap` for more details.\n     * @returns {Function} Returns `wrapper`.\n     */\n    function setWrapToString(wrapper, reference, bitmask) {\n      var source = (reference + '');\n      return setToString(wrapper, insertWrapDetails(source, updateWrapDetails(getWrapDetails(source), bitmask)));\n    }\n\n    /**\n     * Creates a function that'll short out and invoke `identity` instead\n     * of `func` when it's called `HOT_COUNT` or more times in `HOT_SPAN`\n     * milliseconds.\n     *\n     * @private\n     * @param {Function} func The function to restrict.\n     * @returns {Function} Returns the new shortable function.\n     */\n    function shortOut(func) {\n      var count = 0,\n          lastCalled = 0;\n\n      return function() {\n        var stamp = nativeNow(),\n            remaining = HOT_SPAN - (stamp - lastCalled);\n\n        lastCalled = stamp;\n        if (remaining > 0) {\n          if (++count >= HOT_COUNT) {\n            return arguments[0];\n          }\n        } else {\n          count = 0;\n        }\n        return func.apply(undefined, arguments);\n      };\n    }\n\n    /**\n     * A specialized version of `_.shuffle` which mutates and sets the size of `array`.\n     *\n     * @private\n     * @param {Array} array The array to shuffle.\n     * @param {number} [size=array.length] The size of `array`.\n     * @returns {Array} Returns `array`.\n     */\n    function shuffleSelf(array, size) {\n      var index = -1,\n          length = array.length,\n          lastIndex = length - 1;\n\n      size = size === undefined ? length : size;\n      while (++index < size) {\n        var rand = baseRandom(index, lastIndex),\n            value = array[rand];\n\n        array[rand] = array[index];\n        array[index] = value;\n      }\n      array.length = size;\n      return array;\n    }\n\n    /**\n     * Converts `string` to a property path array.\n     *\n     * @private\n     * @param {string} string The string to convert.\n     * @returns {Array} Returns the property path array.\n     */\n    var stringToPath = memoizeCapped(function(string) {\n      var result = [];\n      if (reLeadingDot.test(string)) {\n        result.push('');\n      }\n      string.replace(rePropName, function(match, number, quote, string) {\n        result.push(quote ? string.replace(reEscapeChar, '$1') : (number || match));\n      });\n      return result;\n    });\n\n    /**\n     * Converts `value` to a string key if it's not a string or symbol.\n     *\n     * @private\n     * @param {*} value The value to inspect.\n     * @returns {string|symbol} Returns the key.\n     */\n    function toKey(value) {\n      if (typeof value == 'string' || isSymbol(value)) {\n        return value;\n      }\n      var result = (value + '');\n      return (result == '0' && (1 / value) == -INFINITY) ? '-0' : result;\n    }\n\n    /**\n     * Converts `func` to its source code.\n     *\n     * @private\n     * @param {Function} func The function to convert.\n     * @returns {string} Returns the source code.\n     */\n    function toSource(func) {\n      if (func != null) {\n        try {\n          return funcToString.call(func);\n        } catch (e) {}\n        try {\n          return (func + '');\n        } catch (e) {}\n      }\n      return '';\n    }\n\n    /**\n     * Updates wrapper `details` based on `bitmask` flags.\n     *\n     * @private\n     * @returns {Array} details The details to modify.\n     * @param {number} bitmask The bitmask flags. See `createWrap` for more details.\n     * @returns {Array} Returns `details`.\n     */\n    function updateWrapDetails(details, bitmask) {\n      arrayEach(wrapFlags, function(pair) {\n        var value = '_.' + pair[0];\n        if ((bitmask & pair[1]) && !arrayIncludes(details, value)) {\n          details.push(value);\n        }\n      });\n      return details.sort();\n    }\n\n    /**\n     * Creates a clone of `wrapper`.\n     *\n     * @private\n     * @param {Object} wrapper The wrapper to clone.\n     * @returns {Object} Returns the cloned wrapper.\n     */\n    function wrapperClone(wrapper) {\n      if (wrapper instanceof LazyWrapper) {\n        return wrapper.clone();\n      }\n      var result = new LodashWrapper(wrapper.__wrapped__, wrapper.__chain__);\n      result.__actions__ = copyArray(wrapper.__actions__);\n      result.__index__  = wrapper.__index__;\n      result.__values__ = wrapper.__values__;\n      return result;\n    }\n\n    /*------------------------------------------------------------------------*/\n\n    /**\n     * Creates an array of elements split into groups the length of `size`.\n     * If `array` can't be split evenly, the final chunk will be the remaining\n     * elements.\n     *\n     * @static\n     * @memberOf _\n     * @since 3.0.0\n     * @category Array\n     * @param {Array} array The array to process.\n     * @param {number} [size=1] The length of each chunk\n     * @param- {Object} [guard] Enables use as an iteratee for methods like `_.map`.\n     * @returns {Array} Returns the new array of chunks.\n     * @example\n     *\n     * _.chunk(['a', 'b', 'c', 'd'], 2);\n     * // => [['a', 'b'], ['c', 'd']]\n     *\n     * _.chunk(['a', 'b', 'c', 'd'], 3);\n     * // => [['a', 'b', 'c'], ['d']]\n     */\n    function chunk(array, size, guard) {\n      if ((guard ? isIterateeCall(array, size, guard) : size === undefined)) {\n        size = 1;\n      } else {\n        size = nativeMax(toInteger(size), 0);\n      }\n      var length = array == null ? 0 : array.length;\n      if (!length || size < 1) {\n        return [];\n      }\n      var index = 0,\n          resIndex = 0,\n          result = Array(nativeCeil(length / size));\n\n      while (index < length) {\n        result[resIndex++] = baseSlice(array, index, (index += size));\n      }\n      return result;\n    }\n\n    /**\n     * Creates an array with all falsey values removed. The values `false`, `null`,\n     * `0`, `\"\"`, `undefined`, and `NaN` are falsey.\n     *\n     * @static\n     * @memberOf _\n     * @since 0.1.0\n     * @category Array\n     * @param {Array} array The array to compact.\n     * @returns {Array} Returns the new array of filtered values.\n     * @example\n     *\n     * _.compact([0, 1, false, 2, '', 3]);\n     * // => [1, 2, 3]\n     */\n    function compact(array) {\n      var index = -1,\n          length = array == null ? 0 : array.length,\n          resIndex = 0,\n          result = [];\n\n      while (++index < length) {\n        var value = array[index];\n        if (value) {\n          result[resIndex++] = value;\n        }\n      }\n      return result;\n    }\n\n    /**\n     * Creates a new array concatenating `array` with any additional arrays\n     * and/or values.\n     *\n     * @static\n     * @memberOf _\n     * @since 4.0.0\n     * @category Array\n     * @param {Array} array The array to concatenate.\n     * @param {...*} [values] The values to concatenate.\n     * @returns {Array} Returns the new concatenated array.\n     * @example\n     *\n     * var array = [1];\n     * var other = _.concat(array, 2, [3], [[4]]);\n     *\n     * console.log(other);\n     * // => [1, 2, 3, [4]]\n     *\n     * console.log(array);\n     * // => [1]\n     */\n    function concat() {\n      var length = arguments.length;\n      if (!length) {\n        return [];\n      }\n      var args = Array(length - 1),\n          array = arguments[0],\n          index = length;\n\n      while (index--) {\n        args[index - 1] = arguments[index];\n      }\n      return arrayPush(isArray(array) ? copyArray(array) : [array], baseFlatten(args, 1));\n    }\n\n    /**\n     * Creates an array of `array` values not included in the other given arrays\n     * using [`SameValueZero`](http://ecma-international.org/ecma-262/7.0/#sec-samevaluezero)\n     * for equality comparisons. The order and references of result values are\n     * determined by the first array.\n     *\n     * **Note:** Unlike `_.pullAll`, this method returns a new array.\n     *\n     * @static\n     * @memberOf _\n     * @since 0.1.0\n     * @category Array\n     * @param {Array} array The array to inspect.\n     * @param {...Array} [values] The values to exclude.\n     * @returns {Array} Returns the new array of filtered values.\n     * @see _.without, _.xor\n     * @example\n     *\n     * _.difference([2, 1], [2, 3]);\n     * // => [1]\n     */\n    var difference = baseRest(function(array, values) {\n      return isArrayLikeObject(array)\n        ? baseDifference(array, baseFlatten(values, 1, isArrayLikeObject, true))\n        : [];\n    });\n\n    /**\n     * This method is like `_.difference` except that it accepts `iteratee` which\n     * is invoked for each element of `array` and `values` to generate the criterion\n     * by which they're compared. The order and references of result values are\n     * determined by the first array. The iteratee is invoked with one argument:\n     * (value).\n     *\n     * **Note:** Unlike `_.pullAllBy`, this method returns a new array.\n     *\n     * @static\n     * @memberOf _\n     * @since 4.0.0\n     * @category Array\n     * @param {Array} array The array to inspect.\n     * @param {...Array} [values] The values to exclude.\n     * @param {Function} [iteratee=_.identity] The iteratee invoked per element.\n     * @returns {Array} Returns the new array of filtered values.\n     * @example\n     *\n     * _.differenceBy([2.1, 1.2], [2.3, 3.4], Math.floor);\n     * // => [1.2]\n     *\n     * // The `_.property` iteratee shorthand.\n     * _.differenceBy([{ 'x': 2 }, { 'x': 1 }], [{ 'x': 1 }], 'x');\n     * // => [{ 'x': 2 }]\n     */\n    var differenceBy = baseRest(function(array, values) {\n      var iteratee = last(values);\n      if (isArrayLikeObject(iteratee)) {\n        iteratee = undefined;\n      }\n      return isArrayLikeObject(array)\n        ? baseDifference(array, baseFlatten(values, 1, isArrayLikeObject, true), getIteratee(iteratee, 2))\n        : [];\n    });\n\n    /**\n     * This method is like `_.difference` except that it accepts `comparator`\n     * which is invoked to compare elements of `array` to `values`. The order and\n     * references of result values are determined by the first array. The comparator\n     * is invoked with two arguments: (arrVal, othVal).\n     *\n     * **Note:** Unlike `_.pullAllWith`, this method returns a new array.\n     *\n     * @static\n     * @memberOf _\n     * @since 4.0.0\n     * @category Array\n     * @param {Array} array The array to inspect.\n     * @param {...Array} [values] The values to exclude.\n     * @param {Function} [comparator] The comparator invoked per element.\n     * @returns {Array} Returns the new array of filtered values.\n     * @example\n     *\n     * var objects = [{ 'x': 1, 'y': 2 }, { 'x': 2, 'y': 1 }];\n     *\n     * _.differenceWith(objects, [{ 'x': 1, 'y': 2 }], _.isEqual);\n     * // => [{ 'x': 2, 'y': 1 }]\n     */\n    var differenceWith = baseRest(function(array, values) {\n      var comparator = last(values);\n      if (isArrayLikeObject(comparator)) {\n        comparator = undefined;\n      }\n      return isArrayLikeObject(array)\n        ? baseDifference(array, baseFlatten(values, 1, isArrayLikeObject, true), undefined, comparator)\n        : [];\n    });\n\n    /**\n     * Creates a slice of `array` with `n` elements dropped from the beginning.\n     *\n     * @static\n     * @memberOf _\n     * @since 0.5.0\n     * @category Array\n     * @param {Array} array The array to query.\n     * @param {number} [n=1] The number of elements to drop.\n     * @param- {Object} [guard] Enables use as an iteratee for methods like `_.map`.\n     * @returns {Array} Returns the slice of `array`.\n     * @example\n     *\n     * _.drop([1, 2, 3]);\n     * // => [2, 3]\n     *\n     * _.drop([1, 2, 3], 2);\n     * // => [3]\n     *\n     * _.drop([1, 2, 3], 5);\n     * // => []\n     *\n     * _.drop([1, 2, 3], 0);\n     * // => [1, 2, 3]\n     */\n    function drop(array, n, guard) {\n      var length = array == null ? 0 : array.length;\n      if (!length) {\n        return [];\n      }\n      n = (guard || n === undefined) ? 1 : toInteger(n);\n      return baseSlice(array, n < 0 ? 0 : n, length);\n    }\n\n    /**\n     * Creates a slice of `array` with `n` elements dropped from the end.\n     *\n     * @static\n     * @memberOf _\n     * @since 3.0.0\n     * @category Array\n     * @param {Array} array The array to query.\n     * @param {number} [n=1] The number of elements to drop.\n     * @param- {Object} [guard] Enables use as an iteratee for methods like `_.map`.\n     * @returns {Array} Returns the slice of `array`.\n     * @example\n     *\n     * _.dropRight([1, 2, 3]);\n     * // => [1, 2]\n     *\n     * _.dropRight([1, 2, 3], 2);\n     * // => [1]\n     *\n     * _.dropRight([1, 2, 3], 5);\n     * // => []\n     *\n     * _.dropRight([1, 2, 3], 0);\n     * // => [1, 2, 3]\n     */\n    function dropRight(array, n, guard) {\n      var length = array == null ? 0 : array.length;\n      if (!length) {\n        return [];\n      }\n      n = (guard || n === undefined) ? 1 : toInteger(n);\n      n = length - n;\n      return baseSlice(array, 0, n < 0 ? 0 : n);\n    }\n\n    /**\n     * Creates a slice of `array` excluding elements dropped from the end.\n     * Elements are dropped until `predicate` returns falsey. The predicate is\n     * invoked with three arguments: (value, index, array).\n     *\n     * @static\n     * @memberOf _\n     * @since 3.0.0\n     * @category Array\n     * @param {Array} array The array to query.\n     * @param {Function} [predicate=_.identity] The function invoked per iteration.\n     * @returns {Array} Returns the slice of `array`.\n     * @example\n     *\n     * var users = [\n     *   { 'user': 'barney',  'active': true },\n     *   { 'user': 'fred',    'active': false },\n     *   { 'user': 'pebbles', 'active': false }\n     * ];\n     *\n     * _.dropRightWhile(users, function(o) { return !o.active; });\n     * // => objects for ['barney']\n     *\n     * // The `_.matches` iteratee shorthand.\n     * _.dropRightWhile(users, { 'user': 'pebbles', 'active': false });\n     * // => objects for ['barney', 'fred']\n     *\n     * // The `_.matchesProperty` iteratee shorthand.\n     * _.dropRightWhile(users, ['active', false]);\n     * // => objects for ['barney']\n     *\n     * // The `_.property` iteratee shorthand.\n     * _.dropRightWhile(users, 'active');\n     * // => objects for ['barney', 'fred', 'pebbles']\n     */\n    function dropRightWhile(array, predicate) {\n      return (array && array.length)\n        ? baseWhile(array, getIteratee(predicate, 3), true, true)\n        : [];\n    }\n\n    /**\n     * Creates a slice of `array` excluding elements dropped from the beginning.\n     * Elements are dropped until `predicate` returns falsey. The predicate is\n     * invoked with three arguments: (value, index, array).\n     *\n     * @static\n     * @memberOf _\n     * @since 3.0.0\n     * @category Array\n     * @param {Array} array The array to query.\n     * @param {Function} [predicate=_.identity] The function invoked per iteration.\n     * @returns {Array} Returns the slice of `array`.\n     * @example\n     *\n     * var users = [\n     *   { 'user': 'barney',  'active': false },\n     *   { 'user': 'fred',    'active': false },\n     *   { 'user': 'pebbles', 'active': true }\n     * ];\n     *\n     * _.dropWhile(users, function(o) { return !o.active; });\n     * // => objects for ['pebbles']\n     *\n     * // The `_.matches` iteratee shorthand.\n     * _.dropWhile(users, { 'user': 'barney', 'active': false });\n     * // => objects for ['fred', 'pebbles']\n     *\n     * // The `_.matchesProperty` iteratee shorthand.\n     * _.dropWhile(users, ['active', false]);\n     * // => objects for ['pebbles']\n     *\n     * // The `_.property` iteratee shorthand.\n     * _.dropWhile(users, 'active');\n     * // => objects for ['barney', 'fred', 'pebbles']\n     */\n    function dropWhile(array, predicate) {\n      return (array && array.length)\n        ? baseWhile(array, getIteratee(predicate, 3), true)\n        : [];\n    }\n\n    /**\n     * Fills elements of `array` with `value` from `start` up to, but not\n     * including, `end`.\n     *\n     * **Note:** This method mutates `array`.\n     *\n     * @static\n     * @memberOf _\n     * @since 3.2.0\n     * @category Array\n     * @param {Array} array The array to fill.\n     * @param {*} value The value to fill `array` with.\n     * @param {number} [start=0] The start position.\n     * @param {number} [end=array.length] The end position.\n     * @returns {Array} Returns `array`.\n     * @example\n     *\n     * var array = [1, 2, 3];\n     *\n     * _.fill(array, 'a');\n     * console.log(array);\n     * // => ['a', 'a', 'a']\n     *\n     * _.fill(Array(3), 2);\n     * // => [2, 2, 2]\n     *\n     * _.fill([4, 6, 8, 10], '*', 1, 3);\n     * // => [4, '*', '*', 10]\n     */\n    function fill(array, value, start, end) {\n      var length = array == null ? 0 : array.length;\n      if (!length) {\n        return [];\n      }\n      if (start && typeof start != 'number' && isIterateeCall(array, value, start)) {\n        start = 0;\n        end = length;\n      }\n      return baseFill(array, value, start, end);\n    }\n\n    /**\n     * This method is like `_.find` except that it returns the index of the first\n     * element `predicate` returns truthy for instead of the element itself.\n     *\n     * @static\n     * @memberOf _\n     * @since 1.1.0\n     * @category Array\n     * @param {Array} array The array to inspect.\n     * @param {Function} [predicate=_.identity] The function invoked per iteration.\n     * @param {number} [fromIndex=0] The index to search from.\n     * @returns {number} Returns the index of the found element, else `-1`.\n     * @example\n     *\n     * var users = [\n     *   { 'user': 'barney',  'active': false },\n     *   { 'user': 'fred',    'active': false },\n     *   { 'user': 'pebbles', 'active': true }\n     * ];\n     *\n     * _.findIndex(users, function(o) { return o.user == 'barney'; });\n     * // => 0\n     *\n     * // The `_.matches` iteratee shorthand.\n     * _.findIndex(users, { 'user': 'fred', 'active': false });\n     * // => 1\n     *\n     * // The `_.matchesProperty` iteratee shorthand.\n     * _.findIndex(users, ['active', false]);\n     * // => 0\n     *\n     * // The `_.property` iteratee shorthand.\n     * _.findIndex(users, 'active');\n     * // => 2\n     */\n    function findIndex(array, predicate, fromIndex) {\n      var length = array == null ? 0 : array.length;\n      if (!length) {\n        return -1;\n      }\n      var index = fromIndex == null ? 0 : toInteger(fromIndex);\n      if (index < 0) {\n        index = nativeMax(length + index, 0);\n      }\n      return baseFindIndex(array, getIteratee(predicate, 3), index);\n    }\n\n    /**\n     * This method is like `_.findIndex` except that it iterates over elements\n     * of `collection` from right to left.\n     *\n     * @static\n     * @memberOf _\n     * @since 2.0.0\n     * @category Array\n     * @param {Array} array The array to inspect.\n     * @param {Function} [predicate=_.identity] The function invoked per iteration.\n     * @param {number} [fromIndex=array.length-1] The index to search from.\n     * @returns {number} Returns the index of the found element, else `-1`.\n     * @example\n     *\n     * var users = [\n     *   { 'user': 'barney',  'active': true },\n     *   { 'user': 'fred',    'active': false },\n     *   { 'user': 'pebbles', 'active': false }\n     * ];\n     *\n     * _.findLastIndex(users, function(o) { return o.user == 'pebbles'; });\n     * // => 2\n     *\n     * // The `_.matches` iteratee shorthand.\n     * _.findLastIndex(users, { 'user': 'barney', 'active': true });\n     * // => 0\n     *\n     * // The `_.matchesProperty` iteratee shorthand.\n     * _.findLastIndex(users, ['active', false]);\n     * // => 2\n     *\n     * // The `_.property` iteratee shorthand.\n     * _.findLastIndex(users, 'active');\n     * // => 0\n     */\n    function findLastIndex(array, predicate, fromIndex) {\n      var length = array == null ? 0 : array.length;\n      if (!length) {\n        return -1;\n      }\n      var index = length - 1;\n      if (fromIndex !== undefined) {\n        index = toInteger(fromIndex);\n        index = fromIndex < 0\n          ? nativeMax(length + index, 0)\n          : nativeMin(index, length - 1);\n      }\n      return baseFindIndex(array, getIteratee(predicate, 3), index, true);\n    }\n\n    /**\n     * Flattens `array` a single level deep.\n     *\n     * @static\n     * @memberOf _\n     * @since 0.1.0\n     * @category Array\n     * @param {Array} array The array to flatten.\n     * @returns {Array} Returns the new flattened array.\n     * @example\n     *\n     * _.flatten([1, [2, [3, [4]], 5]]);\n     * // => [1, 2, [3, [4]], 5]\n     */\n    function flatten(array) {\n      var length = array == null ? 0 : array.length;\n      return length ? baseFlatten(array, 1) : [];\n    }\n\n    /**\n     * Recursively flattens `array`.\n     *\n     * @static\n     * @memberOf _\n     * @since 3.0.0\n     * @category Array\n     * @param {Array} array The array to flatten.\n     * @returns {Array} Returns the new flattened array.\n     * @example\n     *\n     * _.flattenDeep([1, [2, [3, [4]], 5]]);\n     * // => [1, 2, 3, 4, 5]\n     */\n    function flattenDeep(array) {\n      var length = array == null ? 0 : array.length;\n      return length ? baseFlatten(array, INFINITY) : [];\n    }\n\n    /**\n     * Recursively flatten `array` up to `depth` times.\n     *\n     * @static\n     * @memberOf _\n     * @since 4.4.0\n     * @category Array\n     * @param {Array} array The array to flatten.\n     * @param {number} [depth=1] The maximum recursion depth.\n     * @returns {Array} Returns the new flattened array.\n     * @example\n     *\n     * var array = [1, [2, [3, [4]], 5]];\n     *\n     * _.flattenDepth(array, 1);\n     * // => [1, 2, [3, [4]], 5]\n     *\n     * _.flattenDepth(array, 2);\n     * // => [1, 2, 3, [4], 5]\n     */\n    function flattenDepth(array, depth) {\n      var length = array == null ? 0 : array.length;\n      if (!length) {\n        return [];\n      }\n      depth = depth === undefined ? 1 : toInteger(depth);\n      return baseFlatten(array, depth);\n    }\n\n    /**\n     * The inverse of `_.toPairs`; this method returns an object composed\n     * from key-value `pairs`.\n     *\n     * @static\n     * @memberOf _\n     * @since 4.0.0\n     * @category Array\n     * @param {Array} pairs The key-value pairs.\n     * @returns {Object} Returns the new object.\n     * @example\n     *\n     * _.fromPairs([['a', 1], ['b', 2]]);\n     * // => { 'a': 1, 'b': 2 }\n     */\n    function fromPairs(pairs) {\n      var index = -1,\n          length = pairs == null ? 0 : pairs.length,\n          result = {};\n\n      while (++index < length) {\n        var pair = pairs[index];\n        result[pair[0]] = pair[1];\n      }\n      return result;\n    }\n\n    /**\n     * Gets the first element of `array`.\n     *\n     * @static\n     * @memberOf _\n     * @since 0.1.0\n     * @alias first\n     * @category Array\n     * @param {Array} array The array to query.\n     * @returns {*} Returns the first element of `array`.\n     * @example\n     *\n     * _.head([1, 2, 3]);\n     * // => 1\n     *\n     * _.head([]);\n     * // => undefined\n     */\n    function head(array) {\n      return (array && array.length) ? array[0] : undefined;\n    }\n\n    /**\n     * Gets the index at which the first occurrence of `value` is found in `array`\n     * using [`SameValueZero`](http://ecma-international.org/ecma-262/7.0/#sec-samevaluezero)\n     * for equality comparisons. If `fromIndex` is negative, it's used as the\n     * offset from the end of `array`.\n     *\n     * @static\n     * @memberOf _\n     * @since 0.1.0\n     * @category Array\n     * @param {Array} array The array to inspect.\n     * @param {*} value The value to search for.\n     * @param {number} [fromIndex=0] The index to search from.\n     * @returns {number} Returns the index of the matched value, else `-1`.\n     * @example\n     *\n     * _.indexOf([1, 2, 1, 2], 2);\n     * // => 1\n     *\n     * // Search from the `fromIndex`.\n     * _.indexOf([1, 2, 1, 2], 2, 2);\n     * // => 3\n     */\n    function indexOf(array, value, fromIndex) {\n      var length = array == null ? 0 : array.length;\n      if (!length) {\n        return -1;\n      }\n      var index = fromIndex == null ? 0 : toInteger(fromIndex);\n      if (index < 0) {\n        index = nativeMax(length + index, 0);\n      }\n      return baseIndexOf(array, value, index);\n    }\n\n    /**\n     * Gets all but the last element of `array`.\n     *\n     * @static\n     * @memberOf _\n     * @since 0.1.0\n     * @category Array\n     * @param {Array} array The array to query.\n     * @returns {Array} Returns the slice of `array`.\n     * @example\n     *\n     * _.initial([1, 2, 3]);\n     * // => [1, 2]\n     */\n    function initial(array) {\n      var length = array == null ? 0 : array.length;\n      return length ? baseSlice(array, 0, -1) : [];\n    }\n\n    /**\n     * Creates an array of unique values that are included in all given arrays\n     * using [`SameValueZero`](http://ecma-international.org/ecma-262/7.0/#sec-samevaluezero)\n     * for equality comparisons. The order and references of result values are\n     * determined by the first array.\n     *\n     * @static\n     * @memberOf _\n     * @since 0.1.0\n     * @category Array\n     * @param {...Array} [arrays] The arrays to inspect.\n     * @returns {Array} Returns the new array of intersecting values.\n     * @example\n     *\n     * _.intersection([2, 1], [2, 3]);\n     * // => [2]\n     */\n    var intersection = baseRest(function(arrays) {\n      var mapped = arrayMap(arrays, castArrayLikeObject);\n      return (mapped.length && mapped[0] === arrays[0])\n        ? baseIntersection(mapped)\n        : [];\n    });\n\n    /**\n     * This method is like `_.intersection` except that it accepts `iteratee`\n     * which is invoked for each element of each `arrays` to generate the criterion\n     * by which they're compared. The order and references of result values are\n     * determined by the first array. The iteratee is invoked with one argument:\n     * (value).\n     *\n     * @static\n     * @memberOf _\n     * @since 4.0.0\n     * @category Array\n     * @param {...Array} [arrays] The arrays to inspect.\n     * @param {Function} [iteratee=_.identity] The iteratee invoked per element.\n     * @returns {Array} Returns the new array of intersecting values.\n     * @example\n     *\n     * _.intersectionBy([2.1, 1.2], [2.3, 3.4], Math.floor);\n     * // => [2.1]\n     *\n     * // The `_.property` iteratee shorthand.\n     * _.intersectionBy([{ 'x': 1 }], [{ 'x': 2 }, { 'x': 1 }], 'x');\n     * // => [{ 'x': 1 }]\n     */\n    var intersectionBy = baseRest(function(arrays) {\n      var iteratee = last(arrays),\n          mapped = arrayMap(arrays, castArrayLikeObject);\n\n      if (iteratee === last(mapped)) {\n        iteratee = undefined;\n      } else {\n        mapped.pop();\n      }\n      return (mapped.length && mapped[0] === arrays[0])\n        ? baseIntersection(mapped, getIteratee(iteratee, 2))\n        : [];\n    });\n\n    /**\n     * This method is like `_.intersection` except that it accepts `comparator`\n     * which is invoked to compare elements of `arrays`. The order and references\n     * of result values are determined by the first array. The comparator is\n     * invoked with two arguments: (arrVal, othVal).\n     *\n     * @static\n     * @memberOf _\n     * @since 4.0.0\n     * @category Array\n     * @param {...Array} [arrays] The arrays to inspect.\n     * @param {Function} [comparator] The comparator invoked per element.\n     * @returns {Array} Returns the new array of intersecting values.\n     * @example\n     *\n     * var objects = [{ 'x': 1, 'y': 2 }, { 'x': 2, 'y': 1 }];\n     * var others = [{ 'x': 1, 'y': 1 }, { 'x': 1, 'y': 2 }];\n     *\n     * _.intersectionWith(objects, others, _.isEqual);\n     * // => [{ 'x': 1, 'y': 2 }]\n     */\n    var intersectionWith = baseRest(function(arrays) {\n      var comparator = last(arrays),\n          mapped = arrayMap(arrays, castArrayLikeObject);\n\n      comparator = typeof comparator == 'function' ? comparator : undefined;\n      if (comparator) {\n        mapped.pop();\n      }\n      return (mapped.length && mapped[0] === arrays[0])\n        ? baseIntersection(mapped, undefined, comparator)\n        : [];\n    });\n\n    /**\n     * Converts all elements in `array` into a string separated by `separator`.\n     *\n     * @static\n     * @memberOf _\n     * @since 4.0.0\n     * @category Array\n     * @param {Array} array The array to convert.\n     * @param {string} [separator=','] The element separator.\n     * @returns {string} Returns the joined string.\n     * @example\n     *\n     * _.join(['a', 'b', 'c'], '~');\n     * // => 'a~b~c'\n     */\n    function join(array, separator) {\n      return array == null ? '' : nativeJoin.call(array, separator);\n    }\n\n    /**\n     * Gets the last element of `array`.\n     *\n     * @static\n     * @memberOf _\n     * @since 0.1.0\n     * @category Array\n     * @param {Array} array The array to query.\n     * @returns {*} Returns the last element of `array`.\n     * @example\n     *\n     * _.last([1, 2, 3]);\n     * // => 3\n     */\n    function last(array) {\n      var length = array == null ? 0 : array.length;\n      return length ? array[length - 1] : undefined;\n    }\n\n    /**\n     * This method is like `_.indexOf` except that it iterates over elements of\n     * `array` from right to left.\n     *\n     * @static\n     * @memberOf _\n     * @since 0.1.0\n     * @category Array\n     * @param {Array} array The array to inspect.\n     * @param {*} value The value to search for.\n     * @param {number} [fromIndex=array.length-1] The index to search from.\n     * @returns {number} Returns the index of the matched value, else `-1`.\n     * @example\n     *\n     * _.lastIndexOf([1, 2, 1, 2], 2);\n     * // => 3\n     *\n     * // Search from the `fromIndex`.\n     * _.lastIndexOf([1, 2, 1, 2], 2, 2);\n     * // => 1\n     */\n    function lastIndexOf(array, value, fromIndex) {\n      var length = array == null ? 0 : array.length;\n      if (!length) {\n        return -1;\n      }\n      var index = length;\n      if (fromIndex !== undefined) {\n        index = toInteger(fromIndex);\n        index = index < 0 ? nativeMax(length + index, 0) : nativeMin(index, length - 1);\n      }\n      return value === value\n        ? strictLastIndexOf(array, value, index)\n        : baseFindIndex(array, baseIsNaN, index, true);\n    }\n\n    /**\n     * Gets the element at index `n` of `array`. If `n` is negative, the nth\n     * element from the end is returned.\n     *\n     * @static\n     * @memberOf _\n     * @since 4.11.0\n     * @category Array\n     * @param {Array} array The array to query.\n     * @param {number} [n=0] The index of the element to return.\n     * @returns {*} Returns the nth element of `array`.\n     * @example\n     *\n     * var array = ['a', 'b', 'c', 'd'];\n     *\n     * _.nth(array, 1);\n     * // => 'b'\n     *\n     * _.nth(array, -2);\n     * // => 'c';\n     */\n    function nth(array, n) {\n      return (array && array.length) ? baseNth(array, toInteger(n)) : undefined;\n    }\n\n    /**\n     * Removes all given values from `array` using\n     * [`SameValueZero`](http://ecma-international.org/ecma-262/7.0/#sec-samevaluezero)\n     * for equality comparisons.\n     *\n     * **Note:** Unlike `_.without`, this method mutates `array`. Use `_.remove`\n     * to remove elements from an array by predicate.\n     *\n     * @static\n     * @memberOf _\n     * @since 2.0.0\n     * @category Array\n     * @param {Array} array The array to modify.\n     * @param {...*} [values] The values to remove.\n     * @returns {Array} Returns `array`.\n     * @example\n     *\n     * var array = ['a', 'b', 'c', 'a', 'b', 'c'];\n     *\n     * _.pull(array, 'a', 'c');\n     * console.log(array);\n     * // => ['b', 'b']\n     */\n    var pull = baseRest(pullAll);\n\n    /**\n     * This method is like `_.pull` except that it accepts an array of values to remove.\n     *\n     * **Note:** Unlike `_.difference`, this method mutates `array`.\n     *\n     * @static\n     * @memberOf _\n     * @since 4.0.0\n     * @category Array\n     * @param {Array} array The array to modify.\n     * @param {Array} values The values to remove.\n     * @returns {Array} Returns `array`.\n     * @example\n     *\n     * var array = ['a', 'b', 'c', 'a', 'b', 'c'];\n     *\n     * _.pullAll(array, ['a', 'c']);\n     * console.log(array);\n     * // => ['b', 'b']\n     */\n    function pullAll(array, values) {\n      return (array && array.length && values && values.length)\n        ? basePullAll(array, values)\n        : array;\n    }\n\n    /**\n     * This method is like `_.pullAll` except that it accepts `iteratee` which is\n     * invoked for each element of `array` and `values` to generate the criterion\n     * by which they're compared. The iteratee is invoked with one argument: (value).\n     *\n     * **Note:** Unlike `_.differenceBy`, this method mutates `array`.\n     *\n     * @static\n     * @memberOf _\n     * @since 4.0.0\n     * @category Array\n     * @param {Array} array The array to modify.\n     * @param {Array} values The values to remove.\n     * @param {Function} [iteratee=_.identity] The iteratee invoked per element.\n     * @returns {Array} Returns `array`.\n     * @example\n     *\n     * var array = [{ 'x': 1 }, { 'x': 2 }, { 'x': 3 }, { 'x': 1 }];\n     *\n     * _.pullAllBy(array, [{ 'x': 1 }, { 'x': 3 }], 'x');\n     * console.log(array);\n     * // => [{ 'x': 2 }]\n     */\n    function pullAllBy(array, values, iteratee) {\n      return (array && array.length && values && values.length)\n        ? basePullAll(array, values, getIteratee(iteratee, 2))\n        : array;\n    }\n\n    /**\n     * This method is like `_.pullAll` except that it accepts `comparator` which\n     * is invoked to compare elements of `array` to `values`. The comparator is\n     * invoked with two arguments: (arrVal, othVal).\n     *\n     * **Note:** Unlike `_.differenceWith`, this method mutates `array`.\n     *\n     * @static\n     * @memberOf _\n     * @since 4.6.0\n     * @category Array\n     * @param {Array} array The array to modify.\n     * @param {Array} values The values to remove.\n     * @param {Function} [comparator] The comparator invoked per element.\n     * @returns {Array} Returns `array`.\n     * @example\n     *\n     * var array = [{ 'x': 1, 'y': 2 }, { 'x': 3, 'y': 4 }, { 'x': 5, 'y': 6 }];\n     *\n     * _.pullAllWith(array, [{ 'x': 3, 'y': 4 }], _.isEqual);\n     * console.log(array);\n     * // => [{ 'x': 1, 'y': 2 }, { 'x': 5, 'y': 6 }]\n     */\n    function pullAllWith(array, values, comparator) {\n      return (array && array.length && values && values.length)\n        ? basePullAll(array, values, undefined, comparator)\n        : array;\n    }\n\n    /**\n     * Removes elements from `array` corresponding to `indexes` and returns an\n     * array of removed elements.\n     *\n     * **Note:** Unlike `_.at`, this method mutates `array`.\n     *\n     * @static\n     * @memberOf _\n     * @since 3.0.0\n     * @category Array\n     * @param {Array} array The array to modify.\n     * @param {...(number|number[])} [indexes] The indexes of elements to remove.\n     * @returns {Array} Returns the new array of removed elements.\n     * @example\n     *\n     * var array = ['a', 'b', 'c', 'd'];\n     * var pulled = _.pullAt(array, [1, 3]);\n     *\n     * console.log(array);\n     * // => ['a', 'c']\n     *\n     * console.log(pulled);\n     * // => ['b', 'd']\n     */\n    var pullAt = flatRest(function(array, indexes) {\n      var length = array == null ? 0 : array.length,\n          result = baseAt(array, indexes);\n\n      basePullAt(array, arrayMap(indexes, function(index) {\n        return isIndex(index, length) ? +index : index;\n      }).sort(compareAscending));\n\n      return result;\n    });\n\n    /**\n     * Removes all elements from `array` that `predicate` returns truthy for\n     * and returns an array of the removed elements. The predicate is invoked\n     * with three arguments: (value, index, array).\n     *\n     * **Note:** Unlike `_.filter`, this method mutates `array`. Use `_.pull`\n     * to pull elements from an array by value.\n     *\n     * @static\n     * @memberOf _\n     * @since 2.0.0\n     * @category Array\n     * @param {Array} array The array to modify.\n     * @param {Function} [predicate=_.identity] The function invoked per iteration.\n     * @returns {Array} Returns the new array of removed elements.\n     * @example\n     *\n     * var array = [1, 2, 3, 4];\n     * var evens = _.remove(array, function(n) {\n     *   return n % 2 == 0;\n     * });\n     *\n     * console.log(array);\n     * // => [1, 3]\n     *\n     * console.log(evens);\n     * // => [2, 4]\n     */\n    function remove(array, predicate) {\n      var result = [];\n      if (!(array && array.length)) {\n        return result;\n      }\n      var index = -1,\n          indexes = [],\n          length = array.length;\n\n      predicate = getIteratee(predicate, 3);\n      while (++index < length) {\n        var value = array[index];\n        if (predicate(value, index, array)) {\n          result.push(value);\n          indexes.push(index);\n        }\n      }\n      basePullAt(array, indexes);\n      return result;\n    }\n\n    /**\n     * Reverses `array` so that the first element becomes the last, the second\n     * element becomes the second to last, and so on.\n     *\n     * **Note:** This method mutates `array` and is based on\n     * [`Array#reverse`](https://mdn.io/Array/reverse).\n     *\n     * @static\n     * @memberOf _\n     * @since 4.0.0\n     * @category Array\n     * @param {Array} array The array to modify.\n     * @returns {Array} Returns `array`.\n     * @example\n     *\n     * var array = [1, 2, 3];\n     *\n     * _.reverse(array);\n     * // => [3, 2, 1]\n     *\n     * console.log(array);\n     * // => [3, 2, 1]\n     */\n    function reverse(array) {\n      return array == null ? array : nativeReverse.call(array);\n    }\n\n    /**\n     * Creates a slice of `array` from `start` up to, but not including, `end`.\n     *\n     * **Note:** This method is used instead of\n     * [`Array#slice`](https://mdn.io/Array/slice) to ensure dense arrays are\n     * returned.\n     *\n     * @static\n     * @memberOf _\n     * @since 3.0.0\n     * @category Array\n     * @param {Array} array The array to slice.\n     * @param {number} [start=0] The start position.\n     * @param {number} [end=array.length] The end position.\n     * @returns {Array} Returns the slice of `array`.\n     */\n    function slice(array, start, end) {\n      var length = array == null ? 0 : array.length;\n      if (!length) {\n        return [];\n      }\n      if (end && typeof end != 'number' && isIterateeCall(array, start, end)) {\n        start = 0;\n        end = length;\n      }\n      else {\n        start = start == null ? 0 : toInteger(start);\n        end = end === undefined ? length : toInteger(end);\n      }\n      return baseSlice(array, start, end);\n    }\n\n    /**\n     * Uses a binary search to determine the lowest index at which `value`\n     * should be inserted into `array` in order to maintain its sort order.\n     *\n     * @static\n     * @memberOf _\n     * @since 0.1.0\n     * @category Array\n     * @param {Array} array The sorted array to inspect.\n     * @param {*} value The value to evaluate.\n     * @returns {number} Returns the index at which `value` should be inserted\n     *  into `array`.\n     * @example\n     *\n     * _.sortedIndex([30, 50], 40);\n     * // => 1\n     */\n    function sortedIndex(array, value) {\n      return baseSortedIndex(array, value);\n    }\n\n    /**\n     * This method is like `_.sortedIndex` except that it accepts `iteratee`\n     * which is invoked for `value` and each element of `array` to compute their\n     * sort ranking. The iteratee is invoked with one argument: (value).\n     *\n     * @static\n     * @memberOf _\n     * @since 4.0.0\n     * @category Array\n     * @param {Array} array The sorted array to inspect.\n     * @param {*} value The value to evaluate.\n     * @param {Function} [iteratee=_.identity] The iteratee invoked per element.\n     * @returns {number} Returns the index at which `value` should be inserted\n     *  into `array`.\n     * @example\n     *\n     * var objects = [{ 'x': 4 }, { 'x': 5 }];\n     *\n     * _.sortedIndexBy(objects, { 'x': 4 }, function(o) { return o.x; });\n     * // => 0\n     *\n     * // The `_.property` iteratee shorthand.\n     * _.sortedIndexBy(objects, { 'x': 4 }, 'x');\n     * // => 0\n     */\n    function sortedIndexBy(array, value, iteratee) {\n      return baseSortedIndexBy(array, value, getIteratee(iteratee, 2));\n    }\n\n    /**\n     * This method is like `_.indexOf` except that it performs a binary\n     * search on a sorted `array`.\n     *\n     * @static\n     * @memberOf _\n     * @since 4.0.0\n     * @category Array\n     * @param {Array} array The array to inspect.\n     * @param {*} value The value to search for.\n     * @returns {number} Returns the index of the matched value, else `-1`.\n     * @example\n     *\n     * _.sortedIndexOf([4, 5, 5, 5, 6], 5);\n     * // => 1\n     */\n    function sortedIndexOf(array, value) {\n      var length = array == null ? 0 : array.length;\n      if (length) {\n        var index = baseSortedIndex(array, value);\n        if (index < length && eq(array[index], value)) {\n          return index;\n        }\n      }\n      return -1;\n    }\n\n    /**\n     * This method is like `_.sortedIndex` except that it returns the highest\n     * index at which `value` should be inserted into `array` in order to\n     * maintain its sort order.\n     *\n     * @static\n     * @memberOf _\n     * @since 3.0.0\n     * @category Array\n     * @param {Array} array The sorted array to inspect.\n     * @param {*} value The value to evaluate.\n     * @returns {number} Returns the index at which `value` should be inserted\n     *  into `array`.\n     * @example\n     *\n     * _.sortedLastIndex([4, 5, 5, 5, 6], 5);\n     * // => 4\n     */\n    function sortedLastIndex(array, value) {\n      return baseSortedIndex(array, value, true);\n    }\n\n    /**\n     * This method is like `_.sortedLastIndex` except that it accepts `iteratee`\n     * which is invoked for `value` and each element of `array` to compute their\n     * sort ranking. The iteratee is invoked with one argument: (value).\n     *\n     * @static\n     * @memberOf _\n     * @since 4.0.0\n     * @category Array\n     * @param {Array} array The sorted array to inspect.\n     * @param {*} value The value to evaluate.\n     * @param {Function} [iteratee=_.identity] The iteratee invoked per element.\n     * @returns {number} Returns the index at which `value` should be inserted\n     *  into `array`.\n     * @example\n     *\n     * var objects = [{ 'x': 4 }, { 'x': 5 }];\n     *\n     * _.sortedLastIndexBy(objects, { 'x': 4 }, function(o) { return o.x; });\n     * // => 1\n     *\n     * // The `_.property` iteratee shorthand.\n     * _.sortedLastIndexBy(objects, { 'x': 4 }, 'x');\n     * // => 1\n     */\n    function sortedLastIndexBy(array, value, iteratee) {\n      return baseSortedIndexBy(array, value, getIteratee(iteratee, 2), true);\n    }\n\n    /**\n     * This method is like `_.lastIndexOf` except that it performs a binary\n     * search on a sorted `array`.\n     *\n     * @static\n     * @memberOf _\n     * @since 4.0.0\n     * @category Array\n     * @param {Array} array The array to inspect.\n     * @param {*} value The value to search for.\n     * @returns {number} Returns the index of the matched value, else `-1`.\n     * @example\n     *\n     * _.sortedLastIndexOf([4, 5, 5, 5, 6], 5);\n     * // => 3\n     */\n    function sortedLastIndexOf(array, value) {\n      var length = array == null ? 0 : array.length;\n      if (length) {\n        var index = baseSortedIndex(array, value, true) - 1;\n        if (eq(array[index], value)) {\n          return index;\n        }\n      }\n      return -1;\n    }\n\n    /**\n     * This method is like `_.uniq` except that it's designed and optimized\n     * for sorted arrays.\n     *\n     * @static\n     * @memberOf _\n     * @since 4.0.0\n     * @category Array\n     * @param {Array} array The array to inspect.\n     * @returns {Array} Returns the new duplicate free array.\n     * @example\n     *\n     * _.sortedUniq([1, 1, 2]);\n     * // => [1, 2]\n     */\n    function sortedUniq(array) {\n      return (array && array.length)\n        ? baseSortedUniq(array)\n        : [];\n    }\n\n    /**\n     * This method is like `_.uniqBy` except that it's designed and optimized\n     * for sorted arrays.\n     *\n     * @static\n     * @memberOf _\n     * @since 4.0.0\n     * @category Array\n     * @param {Array} array The array to inspect.\n     * @param {Function} [iteratee] The iteratee invoked per element.\n     * @returns {Array} Returns the new duplicate free array.\n     * @example\n     *\n     * _.sortedUniqBy([1.1, 1.2, 2.3, 2.4], Math.floor);\n     * // => [1.1, 2.3]\n     */\n    function sortedUniqBy(array, iteratee) {\n      return (array && array.length)\n        ? baseSortedUniq(array, getIteratee(iteratee, 2))\n        : [];\n    }\n\n    /**\n     * Gets all but the first element of `array`.\n     *\n     * @static\n     * @memberOf _\n     * @since 4.0.0\n     * @category Array\n     * @param {Array} array The array to query.\n     * @returns {Array} Returns the slice of `array`.\n     * @example\n     *\n     * _.tail([1, 2, 3]);\n     * // => [2, 3]\n     */\n    function tail(array) {\n      var length = array == null ? 0 : array.length;\n      return length ? baseSlice(array, 1, length) : [];\n    }\n\n    /**\n     * Creates a slice of `array` with `n` elements taken from the beginning.\n     *\n     * @static\n     * @memberOf _\n     * @since 0.1.0\n     * @category Array\n     * @param {Array} array The array to query.\n     * @param {number} [n=1] The number of elements to take.\n     * @param- {Object} [guard] Enables use as an iteratee for methods like `_.map`.\n     * @returns {Array} Returns the slice of `array`.\n     * @example\n     *\n     * _.take([1, 2, 3]);\n     * // => [1]\n     *\n     * _.take([1, 2, 3], 2);\n     * // => [1, 2]\n     *\n     * _.take([1, 2, 3], 5);\n     * // => [1, 2, 3]\n     *\n     * _.take([1, 2, 3], 0);\n     * // => []\n     */\n    function take(array, n, guard) {\n      if (!(array && array.length)) {\n        return [];\n      }\n      n = (guard || n === undefined) ? 1 : toInteger(n);\n      return baseSlice(array, 0, n < 0 ? 0 : n);\n    }\n\n    /**\n     * Creates a slice of `array` with `n` elements taken from the end.\n     *\n     * @static\n     * @memberOf _\n     * @since 3.0.0\n     * @category Array\n     * @param {Array} array The array to query.\n     * @param {number} [n=1] The number of elements to take.\n     * @param- {Object} [guard] Enables use as an iteratee for methods like `_.map`.\n     * @returns {Array} Returns the slice of `array`.\n     * @example\n     *\n     * _.takeRight([1, 2, 3]);\n     * // => [3]\n     *\n     * _.takeRight([1, 2, 3], 2);\n     * // => [2, 3]\n     *\n     * _.takeRight([1, 2, 3], 5);\n     * // => [1, 2, 3]\n     *\n     * _.takeRight([1, 2, 3], 0);\n     * // => []\n     */\n    function takeRight(array, n, guard) {\n      var length = array == null ? 0 : array.length;\n      if (!length) {\n        return [];\n      }\n      n = (guard || n === undefined) ? 1 : toInteger(n);\n      n = length - n;\n      return baseSlice(array, n < 0 ? 0 : n, length);\n    }\n\n    /**\n     * Creates a slice of `array` with elements taken from the end. Elements are\n     * taken until `predicate` returns falsey. The predicate is invoked with\n     * three arguments: (value, index, array).\n     *\n     * @static\n     * @memberOf _\n     * @since 3.0.0\n     * @category Array\n     * @param {Array} array The array to query.\n     * @param {Function} [predicate=_.identity] The function invoked per iteration.\n     * @returns {Array} Returns the slice of `array`.\n     * @example\n     *\n     * var users = [\n     *   { 'user': 'barney',  'active': true },\n     *   { 'user': 'fred',    'active': false },\n     *   { 'user': 'pebbles', 'active': false }\n     * ];\n     *\n     * _.takeRightWhile(users, function(o) { return !o.active; });\n     * // => objects for ['fred', 'pebbles']\n     *\n     * // The `_.matches` iteratee shorthand.\n     * _.takeRightWhile(users, { 'user': 'pebbles', 'active': false });\n     * // => objects for ['pebbles']\n     *\n     * // The `_.matchesProperty` iteratee shorthand.\n     * _.takeRightWhile(users, ['active', false]);\n     * // => objects for ['fred', 'pebbles']\n     *\n     * // The `_.property` iteratee shorthand.\n     * _.takeRightWhile(users, 'active');\n     * // => []\n     */\n    function takeRightWhile(array, predicate) {\n      return (array && array.length)\n        ? baseWhile(array, getIteratee(predicate, 3), false, true)\n        : [];\n    }\n\n    /**\n     * Creates a slice of `array` with elements taken from the beginning. Elements\n     * are taken until `predicate` returns falsey. The predicate is invoked with\n     * three arguments: (value, index, array).\n     *\n     * @static\n     * @memberOf _\n     * @since 3.0.0\n     * @category Array\n     * @param {Array} array The array to query.\n     * @param {Function} [predicate=_.identity] The function invoked per iteration.\n     * @returns {Array} Returns the slice of `array`.\n     * @example\n     *\n     * var users = [\n     *   { 'user': 'barney',  'active': false },\n     *   { 'user': 'fred',    'active': false },\n     *   { 'user': 'pebbles', 'active': true }\n     * ];\n     *\n     * _.takeWhile(users, function(o) { return !o.active; });\n     * // => objects for ['barney', 'fred']\n     *\n     * // The `_.matches` iteratee shorthand.\n     * _.takeWhile(users, { 'user': 'barney', 'active': false });\n     * // => objects for ['barney']\n     *\n     * // The `_.matchesProperty` iteratee shorthand.\n     * _.takeWhile(users, ['active', false]);\n     * // => objects for ['barney', 'fred']\n     *\n     * // The `_.property` iteratee shorthand.\n     * _.takeWhile(users, 'active');\n     * // => []\n     */\n    function takeWhile(array, predicate) {\n      return (array && array.length)\n        ? baseWhile(array, getIteratee(predicate, 3))\n        : [];\n    }\n\n    /**\n     * Creates an array of unique values, in order, from all given arrays using\n     * [`SameValueZero`](http://ecma-international.org/ecma-262/7.0/#sec-samevaluezero)\n     * for equality comparisons.\n     *\n     * @static\n     * @memberOf _\n     * @since 0.1.0\n     * @category Array\n     * @param {...Array} [arrays] The arrays to inspect.\n     * @returns {Array} Returns the new array of combined values.\n     * @example\n     *\n     * _.union([2], [1, 2]);\n     * // => [2, 1]\n     */\n    var union = baseRest(function(arrays) {\n      return baseUniq(baseFlatten(arrays, 1, isArrayLikeObject, true));\n    });\n\n    /**\n     * This method is like `_.union` except that it accepts `iteratee` which is\n     * invoked for each element of each `arrays` to generate the criterion by\n     * which uniqueness is computed. Result values are chosen from the first\n     * array in which the value occurs. The iteratee is invoked with one argument:\n     * (value).\n     *\n     * @static\n     * @memberOf _\n     * @since 4.0.0\n     * @category Array\n     * @param {...Array} [arrays] The arrays to inspect.\n     * @param {Function} [iteratee=_.identity] The iteratee invoked per element.\n     * @returns {Array} Returns the new array of combined values.\n     * @example\n     *\n     * _.unionBy([2.1], [1.2, 2.3], Math.floor);\n     * // => [2.1, 1.2]\n     *\n     * // The `_.property` iteratee shorthand.\n     * _.unionBy([{ 'x': 1 }], [{ 'x': 2 }, { 'x': 1 }], 'x');\n     * // => [{ 'x': 1 }, { 'x': 2 }]\n     */\n    var unionBy = baseRest(function(arrays) {\n      var iteratee = last(arrays);\n      if (isArrayLikeObject(iteratee)) {\n        iteratee = undefined;\n      }\n      return baseUniq(baseFlatten(arrays, 1, isArrayLikeObject, true), getIteratee(iteratee, 2));\n    });\n\n    /**\n     * This method is like `_.union` except that it accepts `comparator` which\n     * is invoked to compare elements of `arrays`. Result values are chosen from\n     * the first array in which the value occurs. The comparator is invoked\n     * with two arguments: (arrVal, othVal).\n     *\n     * @static\n     * @memberOf _\n     * @since 4.0.0\n     * @category Array\n     * @param {...Array} [arrays] The arrays to inspect.\n     * @param {Function} [comparator] The comparator invoked per element.\n     * @returns {Array} Returns the new array of combined values.\n     * @example\n     *\n     * var objects = [{ 'x': 1, 'y': 2 }, { 'x': 2, 'y': 1 }];\n     * var others = [{ 'x': 1, 'y': 1 }, { 'x': 1, 'y': 2 }];\n     *\n     * _.unionWith(objects, others, _.isEqual);\n     * // => [{ 'x': 1, 'y': 2 }, { 'x': 2, 'y': 1 }, { 'x': 1, 'y': 1 }]\n     */\n    var unionWith = baseRest(function(arrays) {\n      var comparator = last(arrays);\n      comparator = typeof comparator == 'function' ? comparator : undefined;\n      return baseUniq(baseFlatten(arrays, 1, isArrayLikeObject, true), undefined, comparator);\n    });\n\n    /**\n     * Creates a duplicate-free version of an array, using\n     * [`SameValueZero`](http://ecma-international.org/ecma-262/7.0/#sec-samevaluezero)\n     * for equality comparisons, in which only the first occurrence of each element\n     * is kept. The order of result values is determined by the order they occur\n     * in the array.\n     *\n     * @static\n     * @memberOf _\n     * @since 0.1.0\n     * @category Array\n     * @param {Array} array The array to inspect.\n     * @returns {Array} Returns the new duplicate free array.\n     * @example\n     *\n     * _.uniq([2, 1, 2]);\n     * // => [2, 1]\n     */\n    function uniq(array) {\n      return (array && array.length) ? baseUniq(array) : [];\n    }\n\n    /**\n     * This method is like `_.uniq` except that it accepts `iteratee` which is\n     * invoked for each element in `array` to generate the criterion by which\n     * uniqueness is computed. The order of result values is determined by the\n     * order they occur in the array. The iteratee is invoked with one argument:\n     * (value).\n     *\n     * @static\n     * @memberOf _\n     * @since 4.0.0\n     * @category Array\n     * @param {Array} array The array to inspect.\n     * @param {Function} [iteratee=_.identity] The iteratee invoked per element.\n     * @returns {Array} Returns the new duplicate free array.\n     * @example\n     *\n     * _.uniqBy([2.1, 1.2, 2.3], Math.floor);\n     * // => [2.1, 1.2]\n     *\n     * // The `_.property` iteratee shorthand.\n     * _.uniqBy([{ 'x': 1 }, { 'x': 2 }, { 'x': 1 }], 'x');\n     * // => [{ 'x': 1 }, { 'x': 2 }]\n     */\n    function uniqBy(array, iteratee) {\n      return (array && array.length) ? baseUniq(array, getIteratee(iteratee, 2)) : [];\n    }\n\n    /**\n     * This method is like `_.uniq` except that it accepts `comparator` which\n     * is invoked to compare elements of `array`. The order of result values is\n     * determined by the order they occur in the array.The comparator is invoked\n     * with two arguments: (arrVal, othVal).\n     *\n     * @static\n     * @memberOf _\n     * @since 4.0.0\n     * @category Array\n     * @param {Array} array The array to inspect.\n     * @param {Function} [comparator] The comparator invoked per element.\n     * @returns {Array} Returns the new duplicate free array.\n     * @example\n     *\n     * var objects = [{ 'x': 1, 'y': 2 }, { 'x': 2, 'y': 1 }, { 'x': 1, 'y': 2 }];\n     *\n     * _.uniqWith(objects, _.isEqual);\n     * // => [{ 'x': 1, 'y': 2 }, { 'x': 2, 'y': 1 }]\n     */\n    function uniqWith(array, comparator) {\n      comparator = typeof comparator == 'function' ? comparator : undefined;\n      return (array && array.length) ? baseUniq(array, undefined, comparator) : [];\n    }\n\n    /**\n     * This method is like `_.zip` except that it accepts an array of grouped\n     * elements and creates an array regrouping the elements to their pre-zip\n     * configuration.\n     *\n     * @static\n     * @memberOf _\n     * @since 1.2.0\n     * @category Array\n     * @param {Array} array The array of grouped elements to process.\n     * @returns {Array} Returns the new array of regrouped elements.\n     * @example\n     *\n     * var zipped = _.zip(['a', 'b'], [1, 2], [true, false]);\n     * // => [['a', 1, true], ['b', 2, false]]\n     *\n     * _.unzip(zipped);\n     * // => [['a', 'b'], [1, 2], [true, false]]\n     */\n    function unzip(array) {\n      if (!(array && array.length)) {\n        return [];\n      }\n      var length = 0;\n      array = arrayFilter(array, function(group) {\n        if (isArrayLikeObject(group)) {\n          length = nativeMax(group.length, length);\n          return true;\n        }\n      });\n      return baseTimes(length, function(index) {\n        return arrayMap(array, baseProperty(index));\n      });\n    }\n\n    /**\n     * This method is like `_.unzip` except that it accepts `iteratee` to specify\n     * how regrouped values should be combined. The iteratee is invoked with the\n     * elements of each group: (...group).\n     *\n     * @static\n     * @memberOf _\n     * @since 3.8.0\n     * @category Array\n     * @param {Array} array The array of grouped elements to process.\n     * @param {Function} [iteratee=_.identity] The function to combine\n     *  regrouped values.\n     * @returns {Array} Returns the new array of regrouped elements.\n     * @example\n     *\n     * var zipped = _.zip([1, 2], [10, 20], [100, 200]);\n     * // => [[1, 10, 100], [2, 20, 200]]\n     *\n     * _.unzipWith(zipped, _.add);\n     * // => [3, 30, 300]\n     */\n    function unzipWith(array, iteratee) {\n      if (!(array && array.length)) {\n        return [];\n      }\n      var result = unzip(array);\n      if (iteratee == null) {\n        return result;\n      }\n      return arrayMap(result, function(group) {\n        return apply(iteratee, undefined, group);\n      });\n    }\n\n    /**\n     * Creates an array excluding all given values using\n     * [`SameValueZero`](http://ecma-international.org/ecma-262/7.0/#sec-samevaluezero)\n     * for equality comparisons.\n     *\n     * **Note:** Unlike `_.pull`, this method returns a new array.\n     *\n     * @static\n     * @memberOf _\n     * @since 0.1.0\n     * @category Array\n     * @param {Array} array The array to inspect.\n     * @param {...*} [values] The values to exclude.\n     * @returns {Array} Returns the new array of filtered values.\n     * @see _.difference, _.xor\n     * @example\n     *\n     * _.without([2, 1, 2, 3], 1, 2);\n     * // => [3]\n     */\n    var without = baseRest(function(array, values) {\n      return isArrayLikeObject(array)\n        ? baseDifference(array, values)\n        : [];\n    });\n\n    /**\n     * Creates an array of unique values that is the\n     * [symmetric difference](https://en.wikipedia.org/wiki/Symmetric_difference)\n     * of the given arrays. The order of result values is determined by the order\n     * they occur in the arrays.\n     *\n     * @static\n     * @memberOf _\n     * @since 2.4.0\n     * @category Array\n     * @param {...Array} [arrays] The arrays to inspect.\n     * @returns {Array} Returns the new array of filtered values.\n     * @see _.difference, _.without\n     * @example\n     *\n     * _.xor([2, 1], [2, 3]);\n     * // => [1, 3]\n     */\n    var xor = baseRest(function(arrays) {\n      return baseXor(arrayFilter(arrays, isArrayLikeObject));\n    });\n\n    /**\n     * This method is like `_.xor` except that it accepts `iteratee` which is\n     * invoked for each element of each `arrays` to generate the criterion by\n     * which by which they're compared. The order of result values is determined\n     * by the order they occur in the arrays. The iteratee is invoked with one\n     * argument: (value).\n     *\n     * @static\n     * @memberOf _\n     * @since 4.0.0\n     * @category Array\n     * @param {...Array} [arrays] The arrays to inspect.\n     * @param {Function} [iteratee=_.identity] The iteratee invoked per element.\n     * @returns {Array} Returns the new array of filtered values.\n     * @example\n     *\n     * _.xorBy([2.1, 1.2], [2.3, 3.4], Math.floor);\n     * // => [1.2, 3.4]\n     *\n     * // The `_.property` iteratee shorthand.\n     * _.xorBy([{ 'x': 1 }], [{ 'x': 2 }, { 'x': 1 }], 'x');\n     * // => [{ 'x': 2 }]\n     */\n    var xorBy = baseRest(function(arrays) {\n      var iteratee = last(arrays);\n      if (isArrayLikeObject(iteratee)) {\n        iteratee = undefined;\n      }\n      return baseXor(arrayFilter(arrays, isArrayLikeObject), getIteratee(iteratee, 2));\n    });\n\n    /**\n     * This method is like `_.xor` except that it accepts `comparator` which is\n     * invoked to compare elements of `arrays`. The order of result values is\n     * determined by the order they occur in the arrays. The comparator is invoked\n     * with two arguments: (arrVal, othVal).\n     *\n     * @static\n     * @memberOf _\n     * @since 4.0.0\n     * @category Array\n     * @param {...Array} [arrays] The arrays to inspect.\n     * @param {Function} [comparator] The comparator invoked per element.\n     * @returns {Array} Returns the new array of filtered values.\n     * @example\n     *\n     * var objects = [{ 'x': 1, 'y': 2 }, { 'x': 2, 'y': 1 }];\n     * var others = [{ 'x': 1, 'y': 1 }, { 'x': 1, 'y': 2 }];\n     *\n     * _.xorWith(objects, others, _.isEqual);\n     * // => [{ 'x': 2, 'y': 1 }, { 'x': 1, 'y': 1 }]\n     */\n    var xorWith = baseRest(function(arrays) {\n      var comparator = last(arrays);\n      comparator = typeof comparator == 'function' ? comparator : undefined;\n      return baseXor(arrayFilter(arrays, isArrayLikeObject), undefined, comparator);\n    });\n\n    /**\n     * Creates an array of grouped elements, the first of which contains the\n     * first elements of the given arrays, the second of which contains the\n     * second elements of the given arrays, and so on.\n     *\n     * @static\n     * @memberOf _\n     * @since 0.1.0\n     * @category Array\n     * @param {...Array} [arrays] The arrays to process.\n     * @returns {Array} Returns the new array of grouped elements.\n     * @example\n     *\n     * _.zip(['a', 'b'], [1, 2], [true, false]);\n     * // => [['a', 1, true], ['b', 2, false]]\n     */\n    var zip = baseRest(unzip);\n\n    /**\n     * This method is like `_.fromPairs` except that it accepts two arrays,\n     * one of property identifiers and one of corresponding values.\n     *\n     * @static\n     * @memberOf _\n     * @since 0.4.0\n     * @category Array\n     * @param {Array} [props=[]] The property identifiers.\n     * @param {Array} [values=[]] The property values.\n     * @returns {Object} Returns the new object.\n     * @example\n     *\n     * _.zipObject(['a', 'b'], [1, 2]);\n     * // => { 'a': 1, 'b': 2 }\n     */\n    function zipObject(props, values) {\n      return baseZipObject(props || [], values || [], assignValue);\n    }\n\n    /**\n     * This method is like `_.zipObject` except that it supports property paths.\n     *\n     * @static\n     * @memberOf _\n     * @since 4.1.0\n     * @category Array\n     * @param {Array} [props=[]] The property identifiers.\n     * @param {Array} [values=[]] The property values.\n     * @returns {Object} Returns the new object.\n     * @example\n     *\n     * _.zipObjectDeep(['a.b[0].c', 'a.b[1].d'], [1, 2]);\n     * // => { 'a': { 'b': [{ 'c': 1 }, { 'd': 2 }] } }\n     */\n    function zipObjectDeep(props, values) {\n      return baseZipObject(props || [], values || [], baseSet);\n    }\n\n    /**\n     * This method is like `_.zip` except that it accepts `iteratee` to specify\n     * how grouped values should be combined. The iteratee is invoked with the\n     * elements of each group: (...group).\n     *\n     * @static\n     * @memberOf _\n     * @since 3.8.0\n     * @category Array\n     * @param {...Array} [arrays] The arrays to process.\n     * @param {Function} [iteratee=_.identity] The function to combine\n     *  grouped values.\n     * @returns {Array} Returns the new array of grouped elements.\n     * @example\n     *\n     * _.zipWith([1, 2], [10, 20], [100, 200], function(a, b, c) {\n     *   return a + b + c;\n     * });\n     * // => [111, 222]\n     */\n    var zipWith = baseRest(function(arrays) {\n      var length = arrays.length,\n          iteratee = length > 1 ? arrays[length - 1] : undefined;\n\n      iteratee = typeof iteratee == 'function' ? (arrays.pop(), iteratee) : undefined;\n      return unzipWith(arrays, iteratee);\n    });\n\n    /*------------------------------------------------------------------------*/\n\n    /**\n     * Creates a `lodash` wrapper instance that wraps `value` with explicit method\n     * chain sequences enabled. The result of such sequences must be unwrapped\n     * with `_#value`.\n     *\n     * @static\n     * @memberOf _\n     * @since 1.3.0\n     * @category Seq\n     * @param {*} value The value to wrap.\n     * @returns {Object} Returns the new `lodash` wrapper instance.\n     * @example\n     *\n     * var users = [\n     *   { 'user': 'barney',  'age': 36 },\n     *   { 'user': 'fred',    'age': 40 },\n     *   { 'user': 'pebbles', 'age': 1 }\n     * ];\n     *\n     * var youngest = _\n     *   .chain(users)\n     *   .sortBy('age')\n     *   .map(function(o) {\n     *     return o.user + ' is ' + o.age;\n     *   })\n     *   .head()\n     *   .value();\n     * // => 'pebbles is 1'\n     */\n    function chain(value) {\n      var result = lodash(value);\n      result.__chain__ = true;\n      return result;\n    }\n\n    /**\n     * This method invokes `interceptor` and returns `value`. The interceptor\n     * is invoked with one argument; (value). The purpose of this method is to\n     * \"tap into\" a method chain sequence in order to modify intermediate results.\n     *\n     * @static\n     * @memberOf _\n     * @since 0.1.0\n     * @category Seq\n     * @param {*} value The value to provide to `interceptor`.\n     * @param {Function} interceptor The function to invoke.\n     * @returns {*} Returns `value`.\n     * @example\n     *\n     * _([1, 2, 3])\n     *  .tap(function(array) {\n     *    // Mutate input array.\n     *    array.pop();\n     *  })\n     *  .reverse()\n     *  .value();\n     * // => [2, 1]\n     */\n    function tap(value, interceptor) {\n      interceptor(value);\n      return value;\n    }\n\n    /**\n     * This method is like `_.tap` except that it returns the result of `interceptor`.\n     * The purpose of this method is to \"pass thru\" values replacing intermediate\n     * results in a method chain sequence.\n     *\n     * @static\n     * @memberOf _\n     * @since 3.0.0\n     * @category Seq\n     * @param {*} value The value to provide to `interceptor`.\n     * @param {Function} interceptor The function to invoke.\n     * @returns {*} Returns the result of `interceptor`.\n     * @example\n     *\n     * _('  abc  ')\n     *  .chain()\n     *  .trim()\n     *  .thru(function(value) {\n     *    return [value];\n     *  })\n     *  .value();\n     * // => ['abc']\n     */\n    function thru(value, interceptor) {\n      return interceptor(value);\n    }\n\n    /**\n     * This method is the wrapper version of `_.at`.\n     *\n     * @name at\n     * @memberOf _\n     * @since 1.0.0\n     * @category Seq\n     * @param {...(string|string[])} [paths] The property paths to pick.\n     * @returns {Object} Returns the new `lodash` wrapper instance.\n     * @example\n     *\n     * var object = { 'a': [{ 'b': { 'c': 3 } }, 4] };\n     *\n     * _(object).at(['a[0].b.c', 'a[1]']).value();\n     * // => [3, 4]\n     */\n    var wrapperAt = flatRest(function(paths) {\n      var length = paths.length,\n          start = length ? paths[0] : 0,\n          value = this.__wrapped__,\n          interceptor = function(object) { return baseAt(object, paths); };\n\n      if (length > 1 || this.__actions__.length ||\n          !(value instanceof LazyWrapper) || !isIndex(start)) {\n        return this.thru(interceptor);\n      }\n      value = value.slice(start, +start + (length ? 1 : 0));\n      value.__actions__.push({\n        'func': thru,\n        'args': [interceptor],\n        'thisArg': undefined\n      });\n      return new LodashWrapper(value, this.__chain__).thru(function(array) {\n        if (length && !array.length) {\n          array.push(undefined);\n        }\n        return array;\n      });\n    });\n\n    /**\n     * Creates a `lodash` wrapper instance with explicit method chain sequences enabled.\n     *\n     * @name chain\n     * @memberOf _\n     * @since 0.1.0\n     * @category Seq\n     * @returns {Object} Returns the new `lodash` wrapper instance.\n     * @example\n     *\n     * var users = [\n     *   { 'user': 'barney', 'age': 36 },\n     *   { 'user': 'fred',   'age': 40 }\n     * ];\n     *\n     * // A sequence without explicit chaining.\n     * _(users).head();\n     * // => { 'user': 'barney', 'age': 36 }\n     *\n     * // A sequence with explicit chaining.\n     * _(users)\n     *   .chain()\n     *   .head()\n     *   .pick('user')\n     *   .value();\n     * // => { 'user': 'barney' }\n     */\n    function wrapperChain() {\n      return chain(this);\n    }\n\n    /**\n     * Executes the chain sequence and returns the wrapped result.\n     *\n     * @name commit\n     * @memberOf _\n     * @since 3.2.0\n     * @category Seq\n     * @returns {Object} Returns the new `lodash` wrapper instance.\n     * @example\n     *\n     * var array = [1, 2];\n     * var wrapped = _(array).push(3);\n     *\n     * console.log(array);\n     * // => [1, 2]\n     *\n     * wrapped = wrapped.commit();\n     * console.log(array);\n     * // => [1, 2, 3]\n     *\n     * wrapped.last();\n     * // => 3\n     *\n     * console.log(array);\n     * // => [1, 2, 3]\n     */\n    function wrapperCommit() {\n      return new LodashWrapper(this.value(), this.__chain__);\n    }\n\n    /**\n     * Gets the next value on a wrapped object following the\n     * [iterator protocol](https://mdn.io/iteration_protocols#iterator).\n     *\n     * @name next\n     * @memberOf _\n     * @since 4.0.0\n     * @category Seq\n     * @returns {Object} Returns the next iterator value.\n     * @example\n     *\n     * var wrapped = _([1, 2]);\n     *\n     * wrapped.next();\n     * // => { 'done': false, 'value': 1 }\n     *\n     * wrapped.next();\n     * // => { 'done': false, 'value': 2 }\n     *\n     * wrapped.next();\n     * // => { 'done': true, 'value': undefined }\n     */\n    function wrapperNext() {\n      if (this.__values__ === undefined) {\n        this.__values__ = toArray(this.value());\n      }\n      var done = this.__index__ >= this.__values__.length,\n          value = done ? undefined : this.__values__[this.__index__++];\n\n      return { 'done': done, 'value': value };\n    }\n\n    /**\n     * Enables the wrapper to be iterable.\n     *\n     * @name Symbol.iterator\n     * @memberOf _\n     * @since 4.0.0\n     * @category Seq\n     * @returns {Object} Returns the wrapper object.\n     * @example\n     *\n     * var wrapped = _([1, 2]);\n     *\n     * wrapped[Symbol.iterator]() === wrapped;\n     * // => true\n     *\n     * Array.from(wrapped);\n     * // => [1, 2]\n     */\n    function wrapperToIterator() {\n      return this;\n    }\n\n    /**\n     * Creates a clone of the chain sequence planting `value` as the wrapped value.\n     *\n     * @name plant\n     * @memberOf _\n     * @since 3.2.0\n     * @category Seq\n     * @param {*} value The value to plant.\n     * @returns {Object} Returns the new `lodash` wrapper instance.\n     * @example\n     *\n     * function square(n) {\n     *   return n * n;\n     * }\n     *\n     * var wrapped = _([1, 2]).map(square);\n     * var other = wrapped.plant([3, 4]);\n     *\n     * other.value();\n     * // => [9, 16]\n     *\n     * wrapped.value();\n     * // => [1, 4]\n     */\n    function wrapperPlant(value) {\n      var result,\n          parent = this;\n\n      while (parent instanceof baseLodash) {\n        var clone = wrapperClone(parent);\n        clone.__index__ = 0;\n        clone.__values__ = undefined;\n        if (result) {\n          previous.__wrapped__ = clone;\n        } else {\n          result = clone;\n        }\n        var previous = clone;\n        parent = parent.__wrapped__;\n      }\n      previous.__wrapped__ = value;\n      return result;\n    }\n\n    /**\n     * This method is the wrapper version of `_.reverse`.\n     *\n     * **Note:** This method mutates the wrapped array.\n     *\n     * @name reverse\n     * @memberOf _\n     * @since 0.1.0\n     * @category Seq\n     * @returns {Object} Returns the new `lodash` wrapper instance.\n     * @example\n     *\n     * var array = [1, 2, 3];\n     *\n     * _(array).reverse().value()\n     * // => [3, 2, 1]\n     *\n     * console.log(array);\n     * // => [3, 2, 1]\n     */\n    function wrapperReverse() {\n      var value = this.__wrapped__;\n      if (value instanceof LazyWrapper) {\n        var wrapped = value;\n        if (this.__actions__.length) {\n          wrapped = new LazyWrapper(this);\n        }\n        wrapped = wrapped.reverse();\n        wrapped.__actions__.push({\n          'func': thru,\n          'args': [reverse],\n          'thisArg': undefined\n        });\n        return new LodashWrapper(wrapped, this.__chain__);\n      }\n      return this.thru(reverse);\n    }\n\n    /**\n     * Executes the chain sequence to resolve the unwrapped value.\n     *\n     * @name value\n     * @memberOf _\n     * @since 0.1.0\n     * @alias toJSON, valueOf\n     * @category Seq\n     * @returns {*} Returns the resolved unwrapped value.\n     * @example\n     *\n     * _([1, 2, 3]).value();\n     * // => [1, 2, 3]\n     */\n    function wrapperValue() {\n      return baseWrapperValue(this.__wrapped__, this.__actions__);\n    }\n\n    /*------------------------------------------------------------------------*/\n\n    /**\n     * Creates an object composed of keys generated from the results of running\n     * each element of `collection` thru `iteratee`. The corresponding value of\n     * each key is the number of times the key was returned by `iteratee`. The\n     * iteratee is invoked with one argument: (value).\n     *\n     * @static\n     * @memberOf _\n     * @since 0.5.0\n     * @category Collection\n     * @param {Array|Object} collection The collection to iterate over.\n     * @param {Function} [iteratee=_.identity] The iteratee to transform keys.\n     * @returns {Object} Returns the composed aggregate object.\n     * @example\n     *\n     * _.countBy([6.1, 4.2, 6.3], Math.floor);\n     * // => { '4': 1, '6': 2 }\n     *\n     * // The `_.property` iteratee shorthand.\n     * _.countBy(['one', 'two', 'three'], 'length');\n     * // => { '3': 2, '5': 1 }\n     */\n    var countBy = createAggregator(function(result, value, key) {\n      if (hasOwnProperty.call(result, key)) {\n        ++result[key];\n      } else {\n        baseAssignValue(result, key, 1);\n      }\n    });\n\n    /**\n     * Checks if `predicate` returns truthy for **all** elements of `collection`.\n     * Iteration is stopped once `predicate` returns falsey. The predicate is\n     * invoked with three arguments: (value, index|key, collection).\n     *\n     * **Note:** This method returns `true` for\n     * [empty collections](https://en.wikipedia.org/wiki/Empty_set) because\n     * [everything is true](https://en.wikipedia.org/wiki/Vacuous_truth) of\n     * elements of empty collections.\n     *\n     * @static\n     * @memberOf _\n     * @since 0.1.0\n     * @category Collection\n     * @param {Array|Object} collection The collection to iterate over.\n     * @param {Function} [predicate=_.identity] The function invoked per iteration.\n     * @param- {Object} [guard] Enables use as an iteratee for methods like `_.map`.\n     * @returns {boolean} Returns `true` if all elements pass the predicate check,\n     *  else `false`.\n     * @example\n     *\n     * _.every([true, 1, null, 'yes'], Boolean);\n     * // => false\n     *\n     * var users = [\n     *   { 'user': 'barney', 'age': 36, 'active': false },\n     *   { 'user': 'fred',   'age': 40, 'active': false }\n     * ];\n     *\n     * // The `_.matches` iteratee shorthand.\n     * _.every(users, { 'user': 'barney', 'active': false });\n     * // => false\n     *\n     * // The `_.matchesProperty` iteratee shorthand.\n     * _.every(users, ['active', false]);\n     * // => true\n     *\n     * // The `_.property` iteratee shorthand.\n     * _.every(users, 'active');\n     * // => false\n     */\n    function every(collection, predicate, guard) {\n      var func = isArray(collection) ? arrayEvery : baseEvery;\n      if (guard && isIterateeCall(collection, predicate, guard)) {\n        predicate = undefined;\n      }\n      return func(collection, getIteratee(predicate, 3));\n    }\n\n    /**\n     * Iterates over elements of `collection`, returning an array of all elements\n     * `predicate` returns truthy for. The predicate is invoked with three\n     * arguments: (value, index|key, collection).\n     *\n     * **Note:** Unlike `_.remove`, this method returns a new array.\n     *\n     * @static\n     * @memberOf _\n     * @since 0.1.0\n     * @category Collection\n     * @param {Array|Object} collection The collection to iterate over.\n     * @param {Function} [predicate=_.identity] The function invoked per iteration.\n     * @returns {Array} Returns the new filtered array.\n     * @see _.reject\n     * @example\n     *\n     * var users = [\n     *   { 'user': 'barney', 'age': 36, 'active': true },\n     *   { 'user': 'fred',   'age': 40, 'active': false }\n     * ];\n     *\n     * _.filter(users, function(o) { return !o.active; });\n     * // => objects for ['fred']\n     *\n     * // The `_.matches` iteratee shorthand.\n     * _.filter(users, { 'age': 36, 'active': true });\n     * // => objects for ['barney']\n     *\n     * // The `_.matchesProperty` iteratee shorthand.\n     * _.filter(users, ['active', false]);\n     * // => objects for ['fred']\n     *\n     * // The `_.property` iteratee shorthand.\n     * _.filter(users, 'active');\n     * // => objects for ['barney']\n     */\n    function filter(collection, predicate) {\n      var func = isArray(collection) ? arrayFilter : baseFilter;\n      return func(collection, getIteratee(predicate, 3));\n    }\n\n    /**\n     * Iterates over elements of `collection`, returning the first element\n     * `predicate` returns truthy for. The predicate is invoked with three\n     * arguments: (value, index|key, collection).\n     *\n     * @static\n     * @memberOf _\n     * @since 0.1.0\n     * @category Collection\n     * @param {Array|Object} collection The collection to inspect.\n     * @param {Function} [predicate=_.identity] The function invoked per iteration.\n     * @param {number} [fromIndex=0] The index to search from.\n     * @returns {*} Returns the matched element, else `undefined`.\n     * @example\n     *\n     * var users = [\n     *   { 'user': 'barney',  'age': 36, 'active': true },\n     *   { 'user': 'fred',    'age': 40, 'active': false },\n     *   { 'user': 'pebbles', 'age': 1,  'active': true }\n     * ];\n     *\n     * _.find(users, function(o) { return o.age < 40; });\n     * // => object for 'barney'\n     *\n     * // The `_.matches` iteratee shorthand.\n     * _.find(users, { 'age': 1, 'active': true });\n     * // => object for 'pebbles'\n     *\n     * // The `_.matchesProperty` iteratee shorthand.\n     * _.find(users, ['active', false]);\n     * // => object for 'fred'\n     *\n     * // The `_.property` iteratee shorthand.\n     * _.find(users, 'active');\n     * // => object for 'barney'\n     */\n    var find = createFind(findIndex);\n\n    /**\n     * This method is like `_.find` except that it iterates over elements of\n     * `collection` from right to left.\n     *\n     * @static\n     * @memberOf _\n     * @since 2.0.0\n     * @category Collection\n     * @param {Array|Object} collection The collection to inspect.\n     * @param {Function} [predicate=_.identity] The function invoked per iteration.\n     * @param {number} [fromIndex=collection.length-1] The index to search from.\n     * @returns {*} Returns the matched element, else `undefined`.\n     * @example\n     *\n     * _.findLast([1, 2, 3, 4], function(n) {\n     *   return n % 2 == 1;\n     * });\n     * // => 3\n     */\n    var findLast = createFind(findLastIndex);\n\n    /**\n     * Creates a flattened array of values by running each element in `collection`\n     * thru `iteratee` and flattening the mapped results. The iteratee is invoked\n     * with three arguments: (value, index|key, collection).\n     *\n     * @static\n     * @memberOf _\n     * @since 4.0.0\n     * @category Collection\n     * @param {Array|Object} collection The collection to iterate over.\n     * @param {Function} [iteratee=_.identity] The function invoked per iteration.\n     * @returns {Array} Returns the new flattened array.\n     * @example\n     *\n     * function duplicate(n) {\n     *   return [n, n];\n     * }\n     *\n     * _.flatMap([1, 2], duplicate);\n     * // => [1, 1, 2, 2]\n     */\n    function flatMap(collection, iteratee) {\n      return baseFlatten(map(collection, iteratee), 1);\n    }\n\n    /**\n     * This method is like `_.flatMap` except that it recursively flattens the\n     * mapped results.\n     *\n     * @static\n     * @memberOf _\n     * @since 4.7.0\n     * @category Collection\n     * @param {Array|Object} collection The collection to iterate over.\n     * @param {Function} [iteratee=_.identity] The function invoked per iteration.\n     * @returns {Array} Returns the new flattened array.\n     * @example\n     *\n     * function duplicate(n) {\n     *   return [[[n, n]]];\n     * }\n     *\n     * _.flatMapDeep([1, 2], duplicate);\n     * // => [1, 1, 2, 2]\n     */\n    function flatMapDeep(collection, iteratee) {\n      return baseFlatten(map(collection, iteratee), INFINITY);\n    }\n\n    /**\n     * This method is like `_.flatMap` except that it recursively flattens the\n     * mapped results up to `depth` times.\n     *\n     * @static\n     * @memberOf _\n     * @since 4.7.0\n     * @category Collection\n     * @param {Array|Object} collection The collection to iterate over.\n     * @param {Function} [iteratee=_.identity] The function invoked per iteration.\n     * @param {number} [depth=1] The maximum recursion depth.\n     * @returns {Array} Returns the new flattened array.\n     * @example\n     *\n     * function duplicate(n) {\n     *   return [[[n, n]]];\n     * }\n     *\n     * _.flatMapDepth([1, 2], duplicate, 2);\n     * // => [[1, 1], [2, 2]]\n     */\n    function flatMapDepth(collection, iteratee, depth) {\n      depth = depth === undefined ? 1 : toInteger(depth);\n      return baseFlatten(map(collection, iteratee), depth);\n    }\n\n    /**\n     * Iterates over elements of `collection` and invokes `iteratee` for each element.\n     * The iteratee is invoked with three arguments: (value, index|key, collection).\n     * Iteratee functions may exit iteration early by explicitly returning `false`.\n     *\n     * **Note:** As with other \"Collections\" methods, objects with a \"length\"\n     * property are iterated like arrays. To avoid this behavior use `_.forIn`\n     * or `_.forOwn` for object iteration.\n     *\n     * @static\n     * @memberOf _\n     * @since 0.1.0\n     * @alias each\n     * @category Collection\n     * @param {Array|Object} collection The collection to iterate over.\n     * @param {Function} [iteratee=_.identity] The function invoked per iteration.\n     * @returns {Array|Object} Returns `collection`.\n     * @see _.forEachRight\n     * @example\n     *\n     * _.forEach([1, 2], function(value) {\n     *   console.log(value);\n     * });\n     * // => Logs `1` then `2`.\n     *\n     * _.forEach({ 'a': 1, 'b': 2 }, function(value, key) {\n     *   console.log(key);\n     * });\n     * // => Logs 'a' then 'b' (iteration order is not guaranteed).\n     */\n    function forEach(collection, iteratee) {\n      var func = isArray(collection) ? arrayEach : baseEach;\n      return func(collection, getIteratee(iteratee, 3));\n    }\n\n    /**\n     * This method is like `_.forEach` except that it iterates over elements of\n     * `collection` from right to left.\n     *\n     * @static\n     * @memberOf _\n     * @since 2.0.0\n     * @alias eachRight\n     * @category Collection\n     * @param {Array|Object} collection The collection to iterate over.\n     * @param {Function} [iteratee=_.identity] The function invoked per iteration.\n     * @returns {Array|Object} Returns `collection`.\n     * @see _.forEach\n     * @example\n     *\n     * _.forEachRight([1, 2], function(value) {\n     *   console.log(value);\n     * });\n     * // => Logs `2` then `1`.\n     */\n    function forEachRight(collection, iteratee) {\n      var func = isArray(collection) ? arrayEachRight : baseEachRight;\n      return func(collection, getIteratee(iteratee, 3));\n    }\n\n    /**\n     * Creates an object composed of keys generated from the results of running\n     * each element of `collection` thru `iteratee`. The order of grouped values\n     * is determined by the order they occur in `collection`. The corresponding\n     * value of each key is an array of elements responsible for generating the\n     * key. The iteratee is invoked with one argument: (value).\n     *\n     * @static\n     * @memberOf _\n     * @since 0.1.0\n     * @category Collection\n     * @param {Array|Object} collection The collection to iterate over.\n     * @param {Function} [iteratee=_.identity] The iteratee to transform keys.\n     * @returns {Object} Returns the composed aggregate object.\n     * @example\n     *\n     * _.groupBy([6.1, 4.2, 6.3], Math.floor);\n     * // => { '4': [4.2], '6': [6.1, 6.3] }\n     *\n     * // The `_.property` iteratee shorthand.\n     * _.groupBy(['one', 'two', 'three'], 'length');\n     * // => { '3': ['one', 'two'], '5': ['three'] }\n     */\n    var groupBy = createAggregator(function(result, value, key) {\n      if (hasOwnProperty.call(result, key)) {\n        result[key].push(value);\n      } else {\n        baseAssignValue(result, key, [value]);\n      }\n    });\n\n    /**\n     * Checks if `value` is in `collection`. If `collection` is a string, it's\n     * checked for a substring of `value`, otherwise\n     * [`SameValueZero`](http://ecma-international.org/ecma-262/7.0/#sec-samevaluezero)\n     * is used for equality comparisons. If `fromIndex` is negative, it's used as\n     * the offset from the end of `collection`.\n     *\n     * @static\n     * @memberOf _\n     * @since 0.1.0\n     * @category Collection\n     * @param {Array|Object|string} collection The collection to inspect.\n     * @param {*} value The value to search for.\n     * @param {number} [fromIndex=0] The index to search from.\n     * @param- {Object} [guard] Enables use as an iteratee for methods like `_.reduce`.\n     * @returns {boolean} Returns `true` if `value` is found, else `false`.\n     * @example\n     *\n     * _.includes([1, 2, 3], 1);\n     * // => true\n     *\n     * _.includes([1, 2, 3], 1, 2);\n     * // => false\n     *\n     * _.includes({ 'a': 1, 'b': 2 }, 1);\n     * // => true\n     *\n     * _.includes('abcd', 'bc');\n     * // => true\n     */\n    function includes(collection, value, fromIndex, guard) {\n      collection = isArrayLike(collection) ? collection : values(collection);\n      fromIndex = (fromIndex && !guard) ? toInteger(fromIndex) : 0;\n\n      var length = collection.length;\n      if (fromIndex < 0) {\n        fromIndex = nativeMax(length + fromIndex, 0);\n      }\n      return isString(collection)\n        ? (fromIndex <= length && collection.indexOf(value, fromIndex) > -1)\n        : (!!length && baseIndexOf(collection, value, fromIndex) > -1);\n    }\n\n    /**\n     * Invokes the method at `path` of each element in `collection`, returning\n     * an array of the results of each invoked method. Any additional arguments\n     * are provided to each invoked method. If `path` is a function, it's invoked\n     * for, and `this` bound to, each element in `collection`.\n     *\n     * @static\n     * @memberOf _\n     * @since 4.0.0\n     * @category Collection\n     * @param {Array|Object} collection The collection to iterate over.\n     * @param {Array|Function|string} path The path of the method to invoke or\n     *  the function invoked per iteration.\n     * @param {...*} [args] The arguments to invoke each method with.\n     * @returns {Array} Returns the array of results.\n     * @example\n     *\n     * _.invokeMap([[5, 1, 7], [3, 2, 1]], 'sort');\n     * // => [[1, 5, 7], [1, 2, 3]]\n     *\n     * _.invokeMap([123, 456], String.prototype.split, '');\n     * // => [['1', '2', '3'], ['4', '5', '6']]\n     */\n    var invokeMap = baseRest(function(collection, path, args) {\n      var index = -1,\n          isFunc = typeof path == 'function',\n          result = isArrayLike(collection) ? Array(collection.length) : [];\n\n      baseEach(collection, function(value) {\n        result[++index] = isFunc ? apply(path, value, args) : baseInvoke(value, path, args);\n      });\n      return result;\n    });\n\n    /**\n     * Creates an object composed of keys generated from the results of running\n     * each element of `collection` thru `iteratee`. The corresponding value of\n     * each key is the last element responsible for generating the key. The\n     * iteratee is invoked with one argument: (value).\n     *\n     * @static\n     * @memberOf _\n     * @since 4.0.0\n     * @category Collection\n     * @param {Array|Object} collection The collection to iterate over.\n     * @param {Function} [iteratee=_.identity] The iteratee to transform keys.\n     * @returns {Object} Returns the composed aggregate object.\n     * @example\n     *\n     * var array = [\n     *   { 'dir': 'left', 'code': 97 },\n     *   { 'dir': 'right', 'code': 100 }\n     * ];\n     *\n     * _.keyBy(array, function(o) {\n     *   return String.fromCharCode(o.code);\n     * });\n     * // => { 'a': { 'dir': 'left', 'code': 97 }, 'd': { 'dir': 'right', 'code': 100 } }\n     *\n     * _.keyBy(array, 'dir');\n     * // => { 'left': { 'dir': 'left', 'code': 97 }, 'right': { 'dir': 'right', 'code': 100 } }\n     */\n    var keyBy = createAggregator(function(result, value, key) {\n      baseAssignValue(result, key, value);\n    });\n\n    /**\n     * Creates an array of values by running each element in `collection` thru\n     * `iteratee`. The iteratee is invoked with three arguments:\n     * (value, index|key, collection).\n     *\n     * Many lodash methods are guarded to work as iteratees for methods like\n     * `_.every`, `_.filter`, `_.map`, `_.mapValues`, `_.reject`, and `_.some`.\n     *\n     * The guarded methods are:\n     * `ary`, `chunk`, `curry`, `curryRight`, `drop`, `dropRight`, `every`,\n     * `fill`, `invert`, `parseInt`, `random`, `range`, `rangeRight`, `repeat`,\n     * `sampleSize`, `slice`, `some`, `sortBy`, `split`, `take`, `takeRight`,\n     * `template`, `trim`, `trimEnd`, `trimStart`, and `words`\n     *\n     * @static\n     * @memberOf _\n     * @since 0.1.0\n     * @category Collection\n     * @param {Array|Object} collection The collection to iterate over.\n     * @param {Function} [iteratee=_.identity] The function invoked per iteration.\n     * @returns {Array} Returns the new mapped array.\n     * @example\n     *\n     * function square(n) {\n     *   return n * n;\n     * }\n     *\n     * _.map([4, 8], square);\n     * // => [16, 64]\n     *\n     * _.map({ 'a': 4, 'b': 8 }, square);\n     * // => [16, 64] (iteration order is not guaranteed)\n     *\n     * var users = [\n     *   { 'user': 'barney' },\n     *   { 'user': 'fred' }\n     * ];\n     *\n     * // The `_.property` iteratee shorthand.\n     * _.map(users, 'user');\n     * // => ['barney', 'fred']\n     */\n    function map(collection, iteratee) {\n      var func = isArray(collection) ? arrayMap : baseMap;\n      return func(collection, getIteratee(iteratee, 3));\n    }\n\n    /**\n     * This method is like `_.sortBy` except that it allows specifying the sort\n     * orders of the iteratees to sort by. If `orders` is unspecified, all values\n     * are sorted in ascending order. Otherwise, specify an order of \"desc\" for\n     * descending or \"asc\" for ascending sort order of corresponding values.\n     *\n     * @static\n     * @memberOf _\n     * @since 4.0.0\n     * @category Collection\n     * @param {Array|Object} collection The collection to iterate over.\n     * @param {Array[]|Function[]|Object[]|string[]} [iteratees=[_.identity]]\n     *  The iteratees to sort by.\n     * @param {string[]} [orders] The sort orders of `iteratees`.\n     * @param- {Object} [guard] Enables use as an iteratee for methods like `_.reduce`.\n     * @returns {Array} Returns the new sorted array.\n     * @example\n     *\n     * var users = [\n     *   { 'user': 'fred',   'age': 48 },\n     *   { 'user': 'barney', 'age': 34 },\n     *   { 'user': 'fred',   'age': 40 },\n     *   { 'user': 'barney', 'age': 36 }\n     * ];\n     *\n     * // Sort by `user` in ascending order and by `age` in descending order.\n     * _.orderBy(users, ['user', 'age'], ['asc', 'desc']);\n     * // => objects for [['barney', 36], ['barney', 34], ['fred', 48], ['fred', 40]]\n     */\n    function orderBy(collection, iteratees, orders, guard) {\n      if (collection == null) {\n        return [];\n      }\n      if (!isArray(iteratees)) {\n        iteratees = iteratees == null ? [] : [iteratees];\n      }\n      orders = guard ? undefined : orders;\n      if (!isArray(orders)) {\n        orders = orders == null ? [] : [orders];\n      }\n      return baseOrderBy(collection, iteratees, orders);\n    }\n\n    /**\n     * Creates an array of elements split into two groups, the first of which\n     * contains elements `predicate` returns truthy for, the second of which\n     * contains elements `predicate` returns falsey for. The predicate is\n     * invoked with one argument: (value).\n     *\n     * @static\n     * @memberOf _\n     * @since 3.0.0\n     * @category Collection\n     * @param {Array|Object} collection The collection to iterate over.\n     * @param {Function} [predicate=_.identity] The function invoked per iteration.\n     * @returns {Array} Returns the array of grouped elements.\n     * @example\n     *\n     * var users = [\n     *   { 'user': 'barney',  'age': 36, 'active': false },\n     *   { 'user': 'fred',    'age': 40, 'active': true },\n     *   { 'user': 'pebbles', 'age': 1,  'active': false }\n     * ];\n     *\n     * _.partition(users, function(o) { return o.active; });\n     * // => objects for [['fred'], ['barney', 'pebbles']]\n     *\n     * // The `_.matches` iteratee shorthand.\n     * _.partition(users, { 'age': 1, 'active': false });\n     * // => objects for [['pebbles'], ['barney', 'fred']]\n     *\n     * // The `_.matchesProperty` iteratee shorthand.\n     * _.partition(users, ['active', false]);\n     * // => objects for [['barney', 'pebbles'], ['fred']]\n     *\n     * // The `_.property` iteratee shorthand.\n     * _.partition(users, 'active');\n     * // => objects for [['fred'], ['barney', 'pebbles']]\n     */\n    var partition = createAggregator(function(result, value, key) {\n      result[key ? 0 : 1].push(value);\n    }, function() { return [[], []]; });\n\n    /**\n     * Reduces `collection` to a value which is the accumulated result of running\n     * each element in `collection` thru `iteratee`, where each successive\n     * invocation is supplied the return value of the previous. If `accumulator`\n     * is not given, the first element of `collection` is used as the initial\n     * value. The iteratee is invoked with four arguments:\n     * (accumulator, value, index|key, collection).\n     *\n     * Many lodash methods are guarded to work as iteratees for methods like\n     * `_.reduce`, `_.reduceRight`, and `_.transform`.\n     *\n     * The guarded methods are:\n     * `assign`, `defaults`, `defaultsDeep`, `includes`, `merge`, `orderBy`,\n     * and `sortBy`\n     *\n     * @static\n     * @memberOf _\n     * @since 0.1.0\n     * @category Collection\n     * @param {Array|Object} collection The collection to iterate over.\n     * @param {Function} [iteratee=_.identity] The function invoked per iteration.\n     * @param {*} [accumulator] The initial value.\n     * @returns {*} Returns the accumulated value.\n     * @see _.reduceRight\n     * @example\n     *\n     * _.reduce([1, 2], function(sum, n) {\n     *   return sum + n;\n     * }, 0);\n     * // => 3\n     *\n     * _.reduce({ 'a': 1, 'b': 2, 'c': 1 }, function(result, value, key) {\n     *   (result[value] || (result[value] = [])).push(key);\n     *   return result;\n     * }, {});\n     * // => { '1': ['a', 'c'], '2': ['b'] } (iteration order is not guaranteed)\n     */\n    function reduce(collection, iteratee, accumulator) {\n      var func = isArray(collection) ? arrayReduce : baseReduce,\n          initAccum = arguments.length < 3;\n\n      return func(collection, getIteratee(iteratee, 4), accumulator, initAccum, baseEach);\n    }\n\n    /**\n     * This method is like `_.reduce` except that it iterates over elements of\n     * `collection` from right to left.\n     *\n     * @static\n     * @memberOf _\n     * @since 0.1.0\n     * @category Collection\n     * @param {Array|Object} collection The collection to iterate over.\n     * @param {Function} [iteratee=_.identity] The function invoked per iteration.\n     * @param {*} [accumulator] The initial value.\n     * @returns {*} Returns the accumulated value.\n     * @see _.reduce\n     * @example\n     *\n     * var array = [[0, 1], [2, 3], [4, 5]];\n     *\n     * _.reduceRight(array, function(flattened, other) {\n     *   return flattened.concat(other);\n     * }, []);\n     * // => [4, 5, 2, 3, 0, 1]\n     */\n    function reduceRight(collection, iteratee, accumulator) {\n      var func = isArray(collection) ? arrayReduceRight : baseReduce,\n          initAccum = arguments.length < 3;\n\n      return func(collection, getIteratee(iteratee, 4), accumulator, initAccum, baseEachRight);\n    }\n\n    /**\n     * The opposite of `_.filter`; this method returns the elements of `collection`\n     * that `predicate` does **not** return truthy for.\n     *\n     * @static\n     * @memberOf _\n     * @since 0.1.0\n     * @category Collection\n     * @param {Array|Object} collection The collection to iterate over.\n     * @param {Function} [predicate=_.identity] The function invoked per iteration.\n     * @returns {Array} Returns the new filtered array.\n     * @see _.filter\n     * @example\n     *\n     * var users = [\n     *   { 'user': 'barney', 'age': 36, 'active': false },\n     *   { 'user': 'fred',   'age': 40, 'active': true }\n     * ];\n     *\n     * _.reject(users, function(o) { return !o.active; });\n     * // => objects for ['fred']\n     *\n     * // The `_.matches` iteratee shorthand.\n     * _.reject(users, { 'age': 40, 'active': true });\n     * // => objects for ['barney']\n     *\n     * // The `_.matchesProperty` iteratee shorthand.\n     * _.reject(users, ['active', false]);\n     * // => objects for ['fred']\n     *\n     * // The `_.property` iteratee shorthand.\n     * _.reject(users, 'active');\n     * // => objects for ['barney']\n     */\n    function reject(collection, predicate) {\n      var func = isArray(collection) ? arrayFilter : baseFilter;\n      return func(collection, negate(getIteratee(predicate, 3)));\n    }\n\n    /**\n     * Gets a random element from `collection`.\n     *\n     * @static\n     * @memberOf _\n     * @since 2.0.0\n     * @category Collection\n     * @param {Array|Object} collection The collection to sample.\n     * @returns {*} Returns the random element.\n     * @example\n     *\n     * _.sample([1, 2, 3, 4]);\n     * // => 2\n     */\n    function sample(collection) {\n      var func = isArray(collection) ? arraySample : baseSample;\n      return func(collection);\n    }\n\n    /**\n     * Gets `n` random elements at unique keys from `collection` up to the\n     * size of `collection`.\n     *\n     * @static\n     * @memberOf _\n     * @since 4.0.0\n     * @category Collection\n     * @param {Array|Object} collection The collection to sample.\n     * @param {number} [n=1] The number of elements to sample.\n     * @param- {Object} [guard] Enables use as an iteratee for methods like `_.map`.\n     * @returns {Array} Returns the random elements.\n     * @example\n     *\n     * _.sampleSize([1, 2, 3], 2);\n     * // => [3, 1]\n     *\n     * _.sampleSize([1, 2, 3], 4);\n     * // => [2, 3, 1]\n     */\n    function sampleSize(collection, n, guard) {\n      if ((guard ? isIterateeCall(collection, n, guard) : n === undefined)) {\n        n = 1;\n      } else {\n        n = toInteger(n);\n      }\n      var func = isArray(collection) ? arraySampleSize : baseSampleSize;\n      return func(collection, n);\n    }\n\n    /**\n     * Creates an array of shuffled values, using a version of the\n     * [Fisher-Yates shuffle](https://en.wikipedia.org/wiki/Fisher-Yates_shuffle).\n     *\n     * @static\n     * @memberOf _\n     * @since 0.1.0\n     * @category Collection\n     * @param {Array|Object} collection The collection to shuffle.\n     * @returns {Array} Returns the new shuffled array.\n     * @example\n     *\n     * _.shuffle([1, 2, 3, 4]);\n     * // => [4, 1, 3, 2]\n     */\n    function shuffle(collection) {\n      var func = isArray(collection) ? arrayShuffle : baseShuffle;\n      return func(collection);\n    }\n\n    /**\n     * Gets the size of `collection` by returning its length for array-like\n     * values or the number of own enumerable string keyed properties for objects.\n     *\n     * @static\n     * @memberOf _\n     * @since 0.1.0\n     * @category Collection\n     * @param {Array|Object|string} collection The collection to inspect.\n     * @returns {number} Returns the collection size.\n     * @example\n     *\n     * _.size([1, 2, 3]);\n     * // => 3\n     *\n     * _.size({ 'a': 1, 'b': 2 });\n     * // => 2\n     *\n     * _.size('pebbles');\n     * // => 7\n     */\n    function size(collection) {\n      if (collection == null) {\n        return 0;\n      }\n      if (isArrayLike(collection)) {\n        return isString(collection) ? stringSize(collection) : collection.length;\n      }\n      var tag = getTag(collection);\n      if (tag == mapTag || tag == setTag) {\n        return collection.size;\n      }\n      return baseKeys(collection).length;\n    }\n\n    /**\n     * Checks if `predicate` returns truthy for **any** element of `collection`.\n     * Iteration is stopped once `predicate` returns truthy. The predicate is\n     * invoked with three arguments: (value, index|key, collection).\n     *\n     * @static\n     * @memberOf _\n     * @since 0.1.0\n     * @category Collection\n     * @param {Array|Object} collection The collection to iterate over.\n     * @param {Function} [predicate=_.identity] The function invoked per iteration.\n     * @param- {Object} [guard] Enables use as an iteratee for methods like `_.map`.\n     * @returns {boolean} Returns `true` if any element passes the predicate check,\n     *  else `false`.\n     * @example\n     *\n     * _.some([null, 0, 'yes', false], Boolean);\n     * // => true\n     *\n     * var users = [\n     *   { 'user': 'barney', 'active': true },\n     *   { 'user': 'fred',   'active': false }\n     * ];\n     *\n     * // The `_.matches` iteratee shorthand.\n     * _.some(users, { 'user': 'barney', 'active': false });\n     * // => false\n     *\n     * // The `_.matchesProperty` iteratee shorthand.\n     * _.some(users, ['active', false]);\n     * // => true\n     *\n     * // The `_.property` iteratee shorthand.\n     * _.some(users, 'active');\n     * // => true\n     */\n    function some(collection, predicate, guard) {\n      var func = isArray(collection) ? arraySome : baseSome;\n      if (guard && isIterateeCall(collection, predicate, guard)) {\n        predicate = undefined;\n      }\n      return func(collection, getIteratee(predicate, 3));\n    }\n\n    /**\n     * Creates an array of elements, sorted in ascending order by the results of\n     * running each element in a collection thru each iteratee. This method\n     * performs a stable sort, that is, it preserves the original sort order of\n     * equal elements. The iteratees are invoked with one argument: (value).\n     *\n     * @static\n     * @memberOf _\n     * @since 0.1.0\n     * @category Collection\n     * @param {Array|Object} collection The collection to iterate over.\n     * @param {...(Function|Function[])} [iteratees=[_.identity]]\n     *  The iteratees to sort by.\n     * @returns {Array} Returns the new sorted array.\n     * @example\n     *\n     * var users = [\n     *   { 'user': 'fred',   'age': 48 },\n     *   { 'user': 'barney', 'age': 36 },\n     *   { 'user': 'fred',   'age': 40 },\n     *   { 'user': 'barney', 'age': 34 }\n     * ];\n     *\n     * _.sortBy(users, [function(o) { return o.user; }]);\n     * // => objects for [['barney', 36], ['barney', 34], ['fred', 48], ['fred', 40]]\n     *\n     * _.sortBy(users, ['user', 'age']);\n     * // => objects for [['barney', 34], ['barney', 36], ['fred', 40], ['fred', 48]]\n     */\n    var sortBy = baseRest(function(collection, iteratees) {\n      if (collection == null) {\n        return [];\n      }\n      var length = iteratees.length;\n      if (length > 1 && isIterateeCall(collection, iteratees[0], iteratees[1])) {\n        iteratees = [];\n      } else if (length > 2 && isIterateeCall(iteratees[0], iteratees[1], iteratees[2])) {\n        iteratees = [iteratees[0]];\n      }\n      return baseOrderBy(collection, baseFlatten(iteratees, 1), []);\n    });\n\n    /*------------------------------------------------------------------------*/\n\n    /**\n     * Gets the timestamp of the number of milliseconds that have elapsed since\n     * the Unix epoch (1 January 1970 00:00:00 UTC).\n     *\n     * @static\n     * @memberOf _\n     * @since 2.4.0\n     * @category Date\n     * @returns {number} Returns the timestamp.\n     * @example\n     *\n     * _.defer(function(stamp) {\n     *   console.log(_.now() - stamp);\n     * }, _.now());\n     * // => Logs the number of milliseconds it took for the deferred invocation.\n     */\n    var now = ctxNow || function() {\n      return root.Date.now();\n    };\n\n    /*------------------------------------------------------------------------*/\n\n    /**\n     * The opposite of `_.before`; this method creates a function that invokes\n     * `func` once it's called `n` or more times.\n     *\n     * @static\n     * @memberOf _\n     * @since 0.1.0\n     * @category Function\n     * @param {number} n The number of calls before `func` is invoked.\n     * @param {Function} func The function to restrict.\n     * @returns {Function} Returns the new restricted function.\n     * @example\n     *\n     * var saves = ['profile', 'settings'];\n     *\n     * var done = _.after(saves.length, function() {\n     *   console.log('done saving!');\n     * });\n     *\n     * _.forEach(saves, function(type) {\n     *   asyncSave({ 'type': type, 'complete': done });\n     * });\n     * // => Logs 'done saving!' after the two async saves have completed.\n     */\n    function after(n, func) {\n      if (typeof func != 'function') {\n        throw new TypeError(FUNC_ERROR_TEXT);\n      }\n      n = toInteger(n);\n      return function() {\n        if (--n < 1) {\n          return func.apply(this, arguments);\n        }\n      };\n    }\n\n    /**\n     * Creates a function that invokes `func`, with up to `n` arguments,\n     * ignoring any additional arguments.\n     *\n     * @static\n     * @memberOf _\n     * @since 3.0.0\n     * @category Function\n     * @param {Function} func The function to cap arguments for.\n     * @param {number} [n=func.length] The arity cap.\n     * @param- {Object} [guard] Enables use as an iteratee for methods like `_.map`.\n     * @returns {Function} Returns the new capped function.\n     * @example\n     *\n     * _.map(['6', '8', '10'], _.ary(parseInt, 1));\n     * // => [6, 8, 10]\n     */\n    function ary(func, n, guard) {\n      n = guard ? undefined : n;\n      n = (func && n == null) ? func.length : n;\n      return createWrap(func, WRAP_ARY_FLAG, undefined, undefined, undefined, undefined, n);\n    }\n\n    /**\n     * Creates a function that invokes `func`, with the `this` binding and arguments\n     * of the created function, while it's called less than `n` times. Subsequent\n     * calls to the created function return the result of the last `func` invocation.\n     *\n     * @static\n     * @memberOf _\n     * @since 3.0.0\n     * @category Function\n     * @param {number} n The number of calls at which `func` is no longer invoked.\n     * @param {Function} func The function to restrict.\n     * @returns {Function} Returns the new restricted function.\n     * @example\n     *\n     * jQuery(element).on('click', _.before(5, addContactToList));\n     * // => Allows adding up to 4 contacts to the list.\n     */\n    function before(n, func) {\n      var result;\n      if (typeof func != 'function') {\n        throw new TypeError(FUNC_ERROR_TEXT);\n      }\n      n = toInteger(n);\n      return function() {\n        if (--n > 0) {\n          result = func.apply(this, arguments);\n        }\n        if (n <= 1) {\n          func = undefined;\n        }\n        return result;\n      };\n    }\n\n    /**\n     * Creates a function that invokes `func` with the `this` binding of `thisArg`\n     * and `partials` prepended to the arguments it receives.\n     *\n     * The `_.bind.placeholder` value, which defaults to `_` in monolithic builds,\n     * may be used as a placeholder for partially applied arguments.\n     *\n     * **Note:** Unlike native `Function#bind`, this method doesn't set the \"length\"\n     * property of bound functions.\n     *\n     * @static\n     * @memberOf _\n     * @since 0.1.0\n     * @category Function\n     * @param {Function} func The function to bind.\n     * @param {*} thisArg The `this` binding of `func`.\n     * @param {...*} [partials] The arguments to be partially applied.\n     * @returns {Function} Returns the new bound function.\n     * @example\n     *\n     * function greet(greeting, punctuation) {\n     *   return greeting + ' ' + this.user + punctuation;\n     * }\n     *\n     * var object = { 'user': 'fred' };\n     *\n     * var bound = _.bind(greet, object, 'hi');\n     * bound('!');\n     * // => 'hi fred!'\n     *\n     * // Bound with placeholders.\n     * var bound = _.bind(greet, object, _, '!');\n     * bound('hi');\n     * // => 'hi fred!'\n     */\n    var bind = baseRest(function(func, thisArg, partials) {\n      var bitmask = WRAP_BIND_FLAG;\n      if (partials.length) {\n        var holders = replaceHolders(partials, getHolder(bind));\n        bitmask |= WRAP_PARTIAL_FLAG;\n      }\n      return createWrap(func, bitmask, thisArg, partials, holders);\n    });\n\n    /**\n     * Creates a function that invokes the method at `object[key]` with `partials`\n     * prepended to the arguments it receives.\n     *\n     * This method differs from `_.bind` by allowing bound functions to reference\n     * methods that may be redefined or don't yet exist. See\n     * [Peter Michaux's article](http://peter.michaux.ca/articles/lazy-function-definition-pattern)\n     * for more details.\n     *\n     * The `_.bindKey.placeholder` value, which defaults to `_` in monolithic\n     * builds, may be used as a placeholder for partially applied arguments.\n     *\n     * @static\n     * @memberOf _\n     * @since 0.10.0\n     * @category Function\n     * @param {Object} object The object to invoke the method on.\n     * @param {string} key The key of the method.\n     * @param {...*} [partials] The arguments to be partially applied.\n     * @returns {Function} Returns the new bound function.\n     * @example\n     *\n     * var object = {\n     *   'user': 'fred',\n     *   'greet': function(greeting, punctuation) {\n     *     return greeting + ' ' + this.user + punctuation;\n     *   }\n     * };\n     *\n     * var bound = _.bindKey(object, 'greet', 'hi');\n     * bound('!');\n     * // => 'hi fred!'\n     *\n     * object.greet = function(greeting, punctuation) {\n     *   return greeting + 'ya ' + this.user + punctuation;\n     * };\n     *\n     * bound('!');\n     * // => 'hiya fred!'\n     *\n     * // Bound with placeholders.\n     * var bound = _.bindKey(object, 'greet', _, '!');\n     * bound('hi');\n     * // => 'hiya fred!'\n     */\n    var bindKey = baseRest(function(object, key, partials) {\n      var bitmask = WRAP_BIND_FLAG | WRAP_BIND_KEY_FLAG;\n      if (partials.length) {\n        var holders = replaceHolders(partials, getHolder(bindKey));\n        bitmask |= WRAP_PARTIAL_FLAG;\n      }\n      return createWrap(key, bitmask, object, partials, holders);\n    });\n\n    /**\n     * Creates a function that accepts arguments of `func` and either invokes\n     * `func` returning its result, if at least `arity` number of arguments have\n     * been provided, or returns a function that accepts the remaining `func`\n     * arguments, and so on. The arity of `func` may be specified if `func.length`\n     * is not sufficient.\n     *\n     * The `_.curry.placeholder` value, which defaults to `_` in monolithic builds,\n     * may be used as a placeholder for provided arguments.\n     *\n     * **Note:** This method doesn't set the \"length\" property of curried functions.\n     *\n     * @static\n     * @memberOf _\n     * @since 2.0.0\n     * @category Function\n     * @param {Function} func The function to curry.\n     * @param {number} [arity=func.length] The arity of `func`.\n     * @param- {Object} [guard] Enables use as an iteratee for methods like `_.map`.\n     * @returns {Function} Returns the new curried function.\n     * @example\n     *\n     * var abc = function(a, b, c) {\n     *   return [a, b, c];\n     * };\n     *\n     * var curried = _.curry(abc);\n     *\n     * curried(1)(2)(3);\n     * // => [1, 2, 3]\n     *\n     * curried(1, 2)(3);\n     * // => [1, 2, 3]\n     *\n     * curried(1, 2, 3);\n     * // => [1, 2, 3]\n     *\n     * // Curried with placeholders.\n     * curried(1)(_, 3)(2);\n     * // => [1, 2, 3]\n     */\n    function curry(func, arity, guard) {\n      arity = guard ? undefined : arity;\n      var result = createWrap(func, WRAP_CURRY_FLAG, undefined, undefined, undefined, undefined, undefined, arity);\n      result.placeholder = curry.placeholder;\n      return result;\n    }\n\n    /**\n     * This method is like `_.curry` except that arguments are applied to `func`\n     * in the manner of `_.partialRight` instead of `_.partial`.\n     *\n     * The `_.curryRight.placeholder` value, which defaults to `_` in monolithic\n     * builds, may be used as a placeholder for provided arguments.\n     *\n     * **Note:** This method doesn't set the \"length\" property of curried functions.\n     *\n     * @static\n     * @memberOf _\n     * @since 3.0.0\n     * @category Function\n     * @param {Function} func The function to curry.\n     * @param {number} [arity=func.length] The arity of `func`.\n     * @param- {Object} [guard] Enables use as an iteratee for methods like `_.map`.\n     * @returns {Function} Returns the new curried function.\n     * @example\n     *\n     * var abc = function(a, b, c) {\n     *   return [a, b, c];\n     * };\n     *\n     * var curried = _.curryRight(abc);\n     *\n     * curried(3)(2)(1);\n     * // => [1, 2, 3]\n     *\n     * curried(2, 3)(1);\n     * // => [1, 2, 3]\n     *\n     * curried(1, 2, 3);\n     * // => [1, 2, 3]\n     *\n     * // Curried with placeholders.\n     * curried(3)(1, _)(2);\n     * // => [1, 2, 3]\n     */\n    function curryRight(func, arity, guard) {\n      arity = guard ? undefined : arity;\n      var result = createWrap(func, WRAP_CURRY_RIGHT_FLAG, undefined, undefined, undefined, undefined, undefined, arity);\n      result.placeholder = curryRight.placeholder;\n      return result;\n    }\n\n    /**\n     * Creates a debounced function that delays invoking `func` until after `wait`\n     * milliseconds have elapsed since the last time the debounced function was\n     * invoked. The debounced function comes with a `cancel` method to cancel\n     * delayed `func` invocations and a `flush` method to immediately invoke them.\n     * Provide `options` to indicate whether `func` should be invoked on the\n     * leading and/or trailing edge of the `wait` timeout. The `func` is invoked\n     * with the last arguments provided to the debounced function. Subsequent\n     * calls to the debounced function return the result of the last `func`\n     * invocation.\n     *\n     * **Note:** If `leading` and `trailing` options are `true`, `func` is\n     * invoked on the trailing edge of the timeout only if the debounced function\n     * is invoked more than once during the `wait` timeout.\n     *\n     * If `wait` is `0` and `leading` is `false`, `func` invocation is deferred\n     * until to the next tick, similar to `setTimeout` with a timeout of `0`.\n     *\n     * See [David Corbacho's article](https://css-tricks.com/debouncing-throttling-explained-examples/)\n     * for details over the differences between `_.debounce` and `_.throttle`.\n     *\n     * @static\n     * @memberOf _\n     * @since 0.1.0\n     * @category Function\n     * @param {Function} func The function to debounce.\n     * @param {number} [wait=0] The number of milliseconds to delay.\n     * @param {Object} [options={}] The options object.\n     * @param {boolean} [options.leading=false]\n     *  Specify invoking on the leading edge of the timeout.\n     * @param {number} [options.maxWait]\n     *  The maximum time `func` is allowed to be delayed before it's invoked.\n     * @param {boolean} [options.trailing=true]\n     *  Specify invoking on the trailing edge of the timeout.\n     * @returns {Function} Returns the new debounced function.\n     * @example\n     *\n     * // Avoid costly calculations while the window size is in flux.\n     * jQuery(window).on('resize', _.debounce(calculateLayout, 150));\n     *\n     * // Invoke `sendMail` when clicked, debouncing subsequent calls.\n     * jQuery(element).on('click', _.debounce(sendMail, 300, {\n     *   'leading': true,\n     *   'trailing': false\n     * }));\n     *\n     * // Ensure `batchLog` is invoked once after 1 second of debounced calls.\n     * var debounced = _.debounce(batchLog, 250, { 'maxWait': 1000 });\n     * var source = new EventSource('/stream');\n     * jQuery(source).on('message', debounced);\n     *\n     * // Cancel the trailing debounced invocation.\n     * jQuery(window).on('popstate', debounced.cancel);\n     */\n    function debounce(func, wait, options) {\n      var lastArgs,\n          lastThis,\n          maxWait,\n          result,\n          timerId,\n          lastCallTime,\n          lastInvokeTime = 0,\n          leading = false,\n          maxing = false,\n          trailing = true;\n\n      if (typeof func != 'function') {\n        throw new TypeError(FUNC_ERROR_TEXT);\n      }\n      wait = toNumber(wait) || 0;\n      if (isObject(options)) {\n        leading = !!options.leading;\n        maxing = 'maxWait' in options;\n        maxWait = maxing ? nativeMax(toNumber(options.maxWait) || 0, wait) : maxWait;\n        trailing = 'trailing' in options ? !!options.trailing : trailing;\n      }\n\n      function invokeFunc(time) {\n        var args = lastArgs,\n            thisArg = lastThis;\n\n        lastArgs = lastThis = undefined;\n        lastInvokeTime = time;\n        result = func.apply(thisArg, args);\n        return result;\n      }\n\n      function leadingEdge(time) {\n        // Reset any `maxWait` timer.\n        lastInvokeTime = time;\n        // Start the timer for the trailing edge.\n        timerId = setTimeout(timerExpired, wait);\n        // Invoke the leading edge.\n        return leading ? invokeFunc(time) : result;\n      }\n\n      function remainingWait(time) {\n        var timeSinceLastCall = time - lastCallTime,\n            timeSinceLastInvoke = time - lastInvokeTime,\n            result = wait - timeSinceLastCall;\n\n        return maxing ? nativeMin(result, maxWait - timeSinceLastInvoke) : result;\n      }\n\n      function shouldInvoke(time) {\n        var timeSinceLastCall = time - lastCallTime,\n            timeSinceLastInvoke = time - lastInvokeTime;\n\n        // Either this is the first call, activity has stopped and we're at the\n        // trailing edge, the system time has gone backwards and we're treating\n        // it as the trailing edge, or we've hit the `maxWait` limit.\n        return (lastCallTime === undefined || (timeSinceLastCall >= wait) ||\n          (timeSinceLastCall < 0) || (maxing && timeSinceLastInvoke >= maxWait));\n      }\n\n      function timerExpired() {\n        var time = now();\n        if (shouldInvoke(time)) {\n          return trailingEdge(time);\n        }\n        // Restart the timer.\n        timerId = setTimeout(timerExpired, remainingWait(time));\n      }\n\n      function trailingEdge(time) {\n        timerId = undefined;\n\n        // Only invoke if we have `lastArgs` which means `func` has been\n        // debounced at least once.\n        if (trailing && lastArgs) {\n          return invokeFunc(time);\n        }\n        lastArgs = lastThis = undefined;\n        return result;\n      }\n\n      function cancel() {\n        if (timerId !== undefined) {\n          clearTimeout(timerId);\n        }\n        lastInvokeTime = 0;\n        lastArgs = lastCallTime = lastThis = timerId = undefined;\n      }\n\n      function flush() {\n        return timerId === undefined ? result : trailingEdge(now());\n      }\n\n      function debounced() {\n        var time = now(),\n            isInvoking = shouldInvoke(time);\n\n        lastArgs = arguments;\n        lastThis = this;\n        lastCallTime = time;\n\n        if (isInvoking) {\n          if (timerId === undefined) {\n            return leadingEdge(lastCallTime);\n          }\n          if (maxing) {\n            // Handle invocations in a tight loop.\n            timerId = setTimeout(timerExpired, wait);\n            return invokeFunc(lastCallTime);\n          }\n        }\n        if (timerId === undefined) {\n          timerId = setTimeout(timerExpired, wait);\n        }\n        return result;\n      }\n      debounced.cancel = cancel;\n      debounced.flush = flush;\n      return debounced;\n    }\n\n    /**\n     * Defers invoking the `func` until the current call stack has cleared. Any\n     * additional arguments are provided to `func` when it's invoked.\n     *\n     * @static\n     * @memberOf _\n     * @since 0.1.0\n     * @category Function\n     * @param {Function} func The function to defer.\n     * @param {...*} [args] The arguments to invoke `func` with.\n     * @returns {number} Returns the timer id.\n     * @example\n     *\n     * _.defer(function(text) {\n     *   console.log(text);\n     * }, 'deferred');\n     * // => Logs 'deferred' after one millisecond.\n     */\n    var defer = baseRest(function(func, args) {\n      return baseDelay(func, 1, args);\n    });\n\n    /**\n     * Invokes `func` after `wait` milliseconds. Any additional arguments are\n     * provided to `func` when it's invoked.\n     *\n     * @static\n     * @memberOf _\n     * @since 0.1.0\n     * @category Function\n     * @param {Function} func The function to delay.\n     * @param {number} wait The number of milliseconds to delay invocation.\n     * @param {...*} [args] The arguments to invoke `func` with.\n     * @returns {number} Returns the timer id.\n     * @example\n     *\n     * _.delay(function(text) {\n     *   console.log(text);\n     * }, 1000, 'later');\n     * // => Logs 'later' after one second.\n     */\n    var delay = baseRest(function(func, wait, args) {\n      return baseDelay(func, toNumber(wait) || 0, args);\n    });\n\n    /**\n     * Creates a function that invokes `func` with arguments reversed.\n     *\n     * @static\n     * @memberOf _\n     * @since 4.0.0\n     * @category Function\n     * @param {Function} func The function to flip arguments for.\n     * @returns {Function} Returns the new flipped function.\n     * @example\n     *\n     * var flipped = _.flip(function() {\n     *   return _.toArray(arguments);\n     * });\n     *\n     * flipped('a', 'b', 'c', 'd');\n     * // => ['d', 'c', 'b', 'a']\n     */\n    function flip(func) {\n      return createWrap(func, WRAP_FLIP_FLAG);\n    }\n\n    /**\n     * Creates a function that memoizes the result of `func`. If `resolver` is\n     * provided, it determines the cache key for storing the result based on the\n     * arguments provided to the memoized function. By default, the first argument\n     * provided to the memoized function is used as the map cache key. The `func`\n     * is invoked with the `this` binding of the memoized function.\n     *\n     * **Note:** The cache is exposed as the `cache` property on the memoized\n     * function. Its creation may be customized by replacing the `_.memoize.Cache`\n     * constructor with one whose instances implement the\n     * [`Map`](http://ecma-international.org/ecma-262/7.0/#sec-properties-of-the-map-prototype-object)\n     * method interface of `clear`, `delete`, `get`, `has`, and `set`.\n     *\n     * @static\n     * @memberOf _\n     * @since 0.1.0\n     * @category Function\n     * @param {Function} func The function to have its output memoized.\n     * @param {Function} [resolver] The function to resolve the cache key.\n     * @returns {Function} Returns the new memoized function.\n     * @example\n     *\n     * var object = { 'a': 1, 'b': 2 };\n     * var other = { 'c': 3, 'd': 4 };\n     *\n     * var values = _.memoize(_.values);\n     * values(object);\n     * // => [1, 2]\n     *\n     * values(other);\n     * // => [3, 4]\n     *\n     * object.a = 2;\n     * values(object);\n     * // => [1, 2]\n     *\n     * // Modify the result cache.\n     * values.cache.set(object, ['a', 'b']);\n     * values(object);\n     * // => ['a', 'b']\n     *\n     * // Replace `_.memoize.Cache`.\n     * _.memoize.Cache = WeakMap;\n     */\n    function memoize(func, resolver) {\n      if (typeof func != 'function' || (resolver != null && typeof resolver != 'function')) {\n        throw new TypeError(FUNC_ERROR_TEXT);\n      }\n      var memoized = function() {\n        var args = arguments,\n            key = resolver ? resolver.apply(this, args) : args[0],\n            cache = memoized.cache;\n\n        if (cache.has(key)) {\n          return cache.get(key);\n        }\n        var result = func.apply(this, args);\n        memoized.cache = cache.set(key, result) || cache;\n        return result;\n      };\n      memoized.cache = new (memoize.Cache || MapCache);\n      return memoized;\n    }\n\n    // Expose `MapCache`.\n    memoize.Cache = MapCache;\n\n    /**\n     * Creates a function that negates the result of the predicate `func`. The\n     * `func` predicate is invoked with the `this` binding and arguments of the\n     * created function.\n     *\n     * @static\n     * @memberOf _\n     * @since 3.0.0\n     * @category Function\n     * @param {Function} predicate The predicate to negate.\n     * @returns {Function} Returns the new negated function.\n     * @example\n     *\n     * function isEven(n) {\n     *   return n % 2 == 0;\n     * }\n     *\n     * _.filter([1, 2, 3, 4, 5, 6], _.negate(isEven));\n     * // => [1, 3, 5]\n     */\n    function negate(predicate) {\n      if (typeof predicate != 'function') {\n        throw new TypeError(FUNC_ERROR_TEXT);\n      }\n      return function() {\n        var args = arguments;\n        switch (args.length) {\n          case 0: return !predicate.call(this);\n          case 1: return !predicate.call(this, args[0]);\n          case 2: return !predicate.call(this, args[0], args[1]);\n          case 3: return !predicate.call(this, args[0], args[1], args[2]);\n        }\n        return !predicate.apply(this, args);\n      };\n    }\n\n    /**\n     * Creates a function that is restricted to invoking `func` once. Repeat calls\n     * to the function return the value of the first invocation. The `func` is\n     * invoked with the `this` binding and arguments of the created function.\n     *\n     * @static\n     * @memberOf _\n     * @since 0.1.0\n     * @category Function\n     * @param {Function} func The function to restrict.\n     * @returns {Function} Returns the new restricted function.\n     * @example\n     *\n     * var initialize = _.once(createApplication);\n     * initialize();\n     * initialize();\n     * // => `createApplication` is invoked once\n     */\n    function once(func) {\n      return before(2, func);\n    }\n\n    /**\n     * Creates a function that invokes `func` with its arguments transformed.\n     *\n     * @static\n     * @since 4.0.0\n     * @memberOf _\n     * @category Function\n     * @param {Function} func The function to wrap.\n     * @param {...(Function|Function[])} [transforms=[_.identity]]\n     *  The argument transforms.\n     * @returns {Function} Returns the new function.\n     * @example\n     *\n     * function doubled(n) {\n     *   return n * 2;\n     * }\n     *\n     * function square(n) {\n     *   return n * n;\n     * }\n     *\n     * var func = _.overArgs(function(x, y) {\n     *   return [x, y];\n     * }, [square, doubled]);\n     *\n     * func(9, 3);\n     * // => [81, 6]\n     *\n     * func(10, 5);\n     * // => [100, 10]\n     */\n    var overArgs = castRest(function(func, transforms) {\n      transforms = (transforms.length == 1 && isArray(transforms[0]))\n        ? arrayMap(transforms[0], baseUnary(getIteratee()))\n        : arrayMap(baseFlatten(transforms, 1), baseUnary(getIteratee()));\n\n      var funcsLength = transforms.length;\n      return baseRest(function(args) {\n        var index = -1,\n            length = nativeMin(args.length, funcsLength);\n\n        while (++index < length) {\n          args[index] = transforms[index].call(this, args[index]);\n        }\n        return apply(func, this, args);\n      });\n    });\n\n    /**\n     * Creates a function that invokes `func` with `partials` prepended to the\n     * arguments it receives. This method is like `_.bind` except it does **not**\n     * alter the `this` binding.\n     *\n     * The `_.partial.placeholder` value, which defaults to `_` in monolithic\n     * builds, may be used as a placeholder for partially applied arguments.\n     *\n     * **Note:** This method doesn't set the \"length\" property of partially\n     * applied functions.\n     *\n     * @static\n     * @memberOf _\n     * @since 0.2.0\n     * @category Function\n     * @param {Function} func The function to partially apply arguments to.\n     * @param {...*} [partials] The arguments to be partially applied.\n     * @returns {Function} Returns the new partially applied function.\n     * @example\n     *\n     * function greet(greeting, name) {\n     *   return greeting + ' ' + name;\n     * }\n     *\n     * var sayHelloTo = _.partial(greet, 'hello');\n     * sayHelloTo('fred');\n     * // => 'hello fred'\n     *\n     * // Partially applied with placeholders.\n     * var greetFred = _.partial(greet, _, 'fred');\n     * greetFred('hi');\n     * // => 'hi fred'\n     */\n    var partial = baseRest(function(func, partials) {\n      var holders = replaceHolders(partials, getHolder(partial));\n      return createWrap(func, WRAP_PARTIAL_FLAG, undefined, partials, holders);\n    });\n\n    /**\n     * This method is like `_.partial` except that partially applied arguments\n     * are appended to the arguments it receives.\n     *\n     * The `_.partialRight.placeholder` value, which defaults to `_` in monolithic\n     * builds, may be used as a placeholder for partially applied arguments.\n     *\n     * **Note:** This method doesn't set the \"length\" property of partially\n     * applied functions.\n     *\n     * @static\n     * @memberOf _\n     * @since 1.0.0\n     * @category Function\n     * @param {Function} func The function to partially apply arguments to.\n     * @param {...*} [partials] The arguments to be partially applied.\n     * @returns {Function} Returns the new partially applied function.\n     * @example\n     *\n     * function greet(greeting, name) {\n     *   return greeting + ' ' + name;\n     * }\n     *\n     * var greetFred = _.partialRight(greet, 'fred');\n     * greetFred('hi');\n     * // => 'hi fred'\n     *\n     * // Partially applied with placeholders.\n     * var sayHelloTo = _.partialRight(greet, 'hello', _);\n     * sayHelloTo('fred');\n     * // => 'hello fred'\n     */\n    var partialRight = baseRest(function(func, partials) {\n      var holders = replaceHolders(partials, getHolder(partialRight));\n      return createWrap(func, WRAP_PARTIAL_RIGHT_FLAG, undefined, partials, holders);\n    });\n\n    /**\n     * Creates a function that invokes `func` with arguments arranged according\n     * to the specified `indexes` where the argument value at the first index is\n     * provided as the first argument, the argument value at the second index is\n     * provided as the second argument, and so on.\n     *\n     * @static\n     * @memberOf _\n     * @since 3.0.0\n     * @category Function\n     * @param {Function} func The function to rearrange arguments for.\n     * @param {...(number|number[])} indexes The arranged argument indexes.\n     * @returns {Function} Returns the new function.\n     * @example\n     *\n     * var rearged = _.rearg(function(a, b, c) {\n     *   return [a, b, c];\n     * }, [2, 0, 1]);\n     *\n     * rearged('b', 'c', 'a')\n     * // => ['a', 'b', 'c']\n     */\n    var rearg = flatRest(function(func, indexes) {\n      return createWrap(func, WRAP_REARG_FLAG, undefined, undefined, undefined, indexes);\n    });\n\n    /**\n     * Creates a function that invokes `func` with the `this` binding of the\n     * created function and arguments from `start` and beyond provided as\n     * an array.\n     *\n     * **Note:** This method is based on the\n     * [rest parameter](https://mdn.io/rest_parameters).\n     *\n     * @static\n     * @memberOf _\n     * @since 4.0.0\n     * @category Function\n     * @param {Function} func The function to apply a rest parameter to.\n     * @param {number} [start=func.length-1] The start position of the rest parameter.\n     * @returns {Function} Returns the new function.\n     * @example\n     *\n     * var say = _.rest(function(what, names) {\n     *   return what + ' ' + _.initial(names).join(', ') +\n     *     (_.size(names) > 1 ? ', & ' : '') + _.last(names);\n     * });\n     *\n     * say('hello', 'fred', 'barney', 'pebbles');\n     * // => 'hello fred, barney, & pebbles'\n     */\n    function rest(func, start) {\n      if (typeof func != 'function') {\n        throw new TypeError(FUNC_ERROR_TEXT);\n      }\n      start = start === undefined ? start : toInteger(start);\n      return baseRest(func, start);\n    }\n\n    /**\n     * Creates a function that invokes `func` with the `this` binding of the\n     * create function and an array of arguments much like\n     * [`Function#apply`](http://www.ecma-international.org/ecma-262/7.0/#sec-function.prototype.apply).\n     *\n     * **Note:** This method is based on the\n     * [spread operator](https://mdn.io/spread_operator).\n     *\n     * @static\n     * @memberOf _\n     * @since 3.2.0\n     * @category Function\n     * @param {Function} func The function to spread arguments over.\n     * @param {number} [start=0] The start position of the spread.\n     * @returns {Function} Returns the new function.\n     * @example\n     *\n     * var say = _.spread(function(who, what) {\n     *   return who + ' says ' + what;\n     * });\n     *\n     * say(['fred', 'hello']);\n     * // => 'fred says hello'\n     *\n     * var numbers = Promise.all([\n     *   Promise.resolve(40),\n     *   Promise.resolve(36)\n     * ]);\n     *\n     * numbers.then(_.spread(function(x, y) {\n     *   return x + y;\n     * }));\n     * // => a Promise of 76\n     */\n    function spread(func, start) {\n      if (typeof func != 'function') {\n        throw new TypeError(FUNC_ERROR_TEXT);\n      }\n      start = start == null ? 0 : nativeMax(toInteger(start), 0);\n      return baseRest(function(args) {\n        var array = args[start],\n            otherArgs = castSlice(args, 0, start);\n\n        if (array) {\n          arrayPush(otherArgs, array);\n        }\n        return apply(func, this, otherArgs);\n      });\n    }\n\n    /**\n     * Creates a throttled function that only invokes `func` at most once per\n     * every `wait` milliseconds. The throttled function comes with a `cancel`\n     * method to cancel delayed `func` invocations and a `flush` method to\n     * immediately invoke them. Provide `options` to indicate whether `func`\n     * should be invoked on the leading and/or trailing edge of the `wait`\n     * timeout. The `func` is invoked with the last arguments provided to the\n     * throttled function. Subsequent calls to the throttled function return the\n     * result of the last `func` invocation.\n     *\n     * **Note:** If `leading` and `trailing` options are `true`, `func` is\n     * invoked on the trailing edge of the timeout only if the throttled function\n     * is invoked more than once during the `wait` timeout.\n     *\n     * If `wait` is `0` and `leading` is `false`, `func` invocation is deferred\n     * until to the next tick, similar to `setTimeout` with a timeout of `0`.\n     *\n     * See [David Corbacho's article](https://css-tricks.com/debouncing-throttling-explained-examples/)\n     * for details over the differences between `_.throttle` and `_.debounce`.\n     *\n     * @static\n     * @memberOf _\n     * @since 0.1.0\n     * @category Function\n     * @param {Function} func The function to throttle.\n     * @param {number} [wait=0] The number of milliseconds to throttle invocations to.\n     * @param {Object} [options={}] The options object.\n     * @param {boolean} [options.leading=true]\n     *  Specify invoking on the leading edge of the timeout.\n     * @param {boolean} [options.trailing=true]\n     *  Specify invoking on the trailing edge of the timeout.\n     * @returns {Function} Returns the new throttled function.\n     * @example\n     *\n     * // Avoid excessively updating the position while scrolling.\n     * jQuery(window).on('scroll', _.throttle(updatePosition, 100));\n     *\n     * // Invoke `renewToken` when the click event is fired, but not more than once every 5 minutes.\n     * var throttled = _.throttle(renewToken, 300000, { 'trailing': false });\n     * jQuery(element).on('click', throttled);\n     *\n     * // Cancel the trailing throttled invocation.\n     * jQuery(window).on('popstate', throttled.cancel);\n     */\n    function throttle(func, wait, options) {\n      var leading = true,\n          trailing = true;\n\n      if (typeof func != 'function') {\n        throw new TypeError(FUNC_ERROR_TEXT);\n      }\n      if (isObject(options)) {\n        leading = 'leading' in options ? !!options.leading : leading;\n        trailing = 'trailing' in options ? !!options.trailing : trailing;\n      }\n      return debounce(func, wait, {\n        'leading': leading,\n        'maxWait': wait,\n        'trailing': trailing\n      });\n    }\n\n    /**\n     * Creates a function that accepts up to one argument, ignoring any\n     * additional arguments.\n     *\n     * @static\n     * @memberOf _\n     * @since 4.0.0\n     * @category Function\n     * @param {Function} func The function to cap arguments for.\n     * @returns {Function} Returns the new capped function.\n     * @example\n     *\n     * _.map(['6', '8', '10'], _.unary(parseInt));\n     * // => [6, 8, 10]\n     */\n    function unary(func) {\n      return ary(func, 1);\n    }\n\n    /**\n     * Creates a function that provides `value` to `wrapper` as its first\n     * argument. Any additional arguments provided to the function are appended\n     * to those provided to the `wrapper`. The wrapper is invoked with the `this`\n     * binding of the created function.\n     *\n     * @static\n     * @memberOf _\n     * @since 0.1.0\n     * @category Function\n     * @param {*} value The value to wrap.\n     * @param {Function} [wrapper=identity] The wrapper function.\n     * @returns {Function} Returns the new function.\n     * @example\n     *\n     * var p = _.wrap(_.escape, function(func, text) {\n     *   return '<p>' + func(text) + '</p>';\n     * });\n     *\n     * p('fred, barney, & pebbles');\n     * // => '<p>fred, barney, &amp; pebbles</p>'\n     */\n    function wrap(value, wrapper) {\n      return partial(castFunction(wrapper), value);\n    }\n\n    /*------------------------------------------------------------------------*/\n\n    /**\n     * Casts `value` as an array if it's not one.\n     *\n     * @static\n     * @memberOf _\n     * @since 4.4.0\n     * @category Lang\n     * @param {*} value The value to inspect.\n     * @returns {Array} Returns the cast array.\n     * @example\n     *\n     * _.castArray(1);\n     * // => [1]\n     *\n     * _.castArray({ 'a': 1 });\n     * // => [{ 'a': 1 }]\n     *\n     * _.castArray('abc');\n     * // => ['abc']\n     *\n     * _.castArray(null);\n     * // => [null]\n     *\n     * _.castArray(undefined);\n     * // => [undefined]\n     *\n     * _.castArray();\n     * // => []\n     *\n     * var array = [1, 2, 3];\n     * console.log(_.castArray(array) === array);\n     * // => true\n     */\n    function castArray() {\n      if (!arguments.length) {\n        return [];\n      }\n      var value = arguments[0];\n      return isArray(value) ? value : [value];\n    }\n\n    /**\n     * Creates a shallow clone of `value`.\n     *\n     * **Note:** This method is loosely based on the\n     * [structured clone algorithm](https://mdn.io/Structured_clone_algorithm)\n     * and supports cloning arrays, array buffers, booleans, date objects, maps,\n     * numbers, `Object` objects, regexes, sets, strings, symbols, and typed\n     * arrays. The own enumerable properties of `arguments` objects are cloned\n     * as plain objects. An empty object is returned for uncloneable values such\n     * as error objects, functions, DOM nodes, and WeakMaps.\n     *\n     * @static\n     * @memberOf _\n     * @since 0.1.0\n     * @category Lang\n     * @param {*} value The value to clone.\n     * @returns {*} Returns the cloned value.\n     * @see _.cloneDeep\n     * @example\n     *\n     * var objects = [{ 'a': 1 }, { 'b': 2 }];\n     *\n     * var shallow = _.clone(objects);\n     * console.log(shallow[0] === objects[0]);\n     * // => true\n     */\n    function clone(value) {\n      return baseClone(value, CLONE_SYMBOLS_FLAG);\n    }\n\n    /**\n     * This method is like `_.clone` except that it accepts `customizer` which\n     * is invoked to produce the cloned value. If `customizer` returns `undefined`,\n     * cloning is handled by the method instead. The `customizer` is invoked with\n     * up to four arguments; (value [, index|key, object, stack]).\n     *\n     * @static\n     * @memberOf _\n     * @since 4.0.0\n     * @category Lang\n     * @param {*} value The value to clone.\n     * @param {Function} [customizer] The function to customize cloning.\n     * @returns {*} Returns the cloned value.\n     * @see _.cloneDeepWith\n     * @example\n     *\n     * function customizer(value) {\n     *   if (_.isElement(value)) {\n     *     return value.cloneNode(false);\n     *   }\n     * }\n     *\n     * var el = _.cloneWith(document.body, customizer);\n     *\n     * console.log(el === document.body);\n     * // => false\n     * console.log(el.nodeName);\n     * // => 'BODY'\n     * console.log(el.childNodes.length);\n     * // => 0\n     */\n    function cloneWith(value, customizer) {\n      customizer = typeof customizer == 'function' ? customizer : undefined;\n      return baseClone(value, CLONE_SYMBOLS_FLAG, customizer);\n    }\n\n    /**\n     * This method is like `_.clone` except that it recursively clones `value`.\n     *\n     * @static\n     * @memberOf _\n     * @since 1.0.0\n     * @category Lang\n     * @param {*} value The value to recursively clone.\n     * @returns {*} Returns the deep cloned value.\n     * @see _.clone\n     * @example\n     *\n     * var objects = [{ 'a': 1 }, { 'b': 2 }];\n     *\n     * var deep = _.cloneDeep(objects);\n     * console.log(deep[0] === objects[0]);\n     * // => false\n     */\n    function cloneDeep(value) {\n      return baseClone(value, CLONE_DEEP_FLAG | CLONE_SYMBOLS_FLAG);\n    }\n\n    /**\n     * This method is like `_.cloneWith` except that it recursively clones `value`.\n     *\n     * @static\n     * @memberOf _\n     * @since 4.0.0\n     * @category Lang\n     * @param {*} value The value to recursively clone.\n     * @param {Function} [customizer] The function to customize cloning.\n     * @returns {*} Returns the deep cloned value.\n     * @see _.cloneWith\n     * @example\n     *\n     * function customizer(value) {\n     *   if (_.isElement(value)) {\n     *     return value.cloneNode(true);\n     *   }\n     * }\n     *\n     * var el = _.cloneDeepWith(document.body, customizer);\n     *\n     * console.log(el === document.body);\n     * // => false\n     * console.log(el.nodeName);\n     * // => 'BODY'\n     * console.log(el.childNodes.length);\n     * // => 20\n     */\n    function cloneDeepWith(value, customizer) {\n      customizer = typeof customizer == 'function' ? customizer : undefined;\n      return baseClone(value, CLONE_DEEP_FLAG | CLONE_SYMBOLS_FLAG, customizer);\n    }\n\n    /**\n     * Checks if `object` conforms to `source` by invoking the predicate\n     * properties of `source` with the corresponding property values of `object`.\n     *\n     * **Note:** This method is equivalent to `_.conforms` when `source` is\n     * partially applied.\n     *\n     * @static\n     * @memberOf _\n     * @since 4.14.0\n     * @category Lang\n     * @param {Object} object The object to inspect.\n     * @param {Object} source The object of property predicates to conform to.\n     * @returns {boolean} Returns `true` if `object` conforms, else `false`.\n     * @example\n     *\n     * var object = { 'a': 1, 'b': 2 };\n     *\n     * _.conformsTo(object, { 'b': function(n) { return n > 1; } });\n     * // => true\n     *\n     * _.conformsTo(object, { 'b': function(n) { return n > 2; } });\n     * // => false\n     */\n    function conformsTo(object, source) {\n      return source == null || baseConformsTo(object, source, keys(source));\n    }\n\n    /**\n     * Performs a\n     * [`SameValueZero`](http://ecma-international.org/ecma-262/7.0/#sec-samevaluezero)\n     * comparison between two values to determine if they are equivalent.\n     *\n     * @static\n     * @memberOf _\n     * @since 4.0.0\n     * @category Lang\n     * @param {*} value The value to compare.\n     * @param {*} other The other value to compare.\n     * @returns {boolean} Returns `true` if the values are equivalent, else `false`.\n     * @example\n     *\n     * var object = { 'a': 1 };\n     * var other = { 'a': 1 };\n     *\n     * _.eq(object, object);\n     * // => true\n     *\n     * _.eq(object, other);\n     * // => false\n     *\n     * _.eq('a', 'a');\n     * // => true\n     *\n     * _.eq('a', Object('a'));\n     * // => false\n     *\n     * _.eq(NaN, NaN);\n     * // => true\n     */\n    function eq(value, other) {\n      return value === other || (value !== value && other !== other);\n    }\n\n    /**\n     * Checks if `value` is greater than `other`.\n     *\n     * @static\n     * @memberOf _\n     * @since 3.9.0\n     * @category Lang\n     * @param {*} value The value to compare.\n     * @param {*} other The other value to compare.\n     * @returns {boolean} Returns `true` if `value` is greater than `other`,\n     *  else `false`.\n     * @see _.lt\n     * @example\n     *\n     * _.gt(3, 1);\n     * // => true\n     *\n     * _.gt(3, 3);\n     * // => false\n     *\n     * _.gt(1, 3);\n     * // => false\n     */\n    var gt = createRelationalOperation(baseGt);\n\n    /**\n     * Checks if `value` is greater than or equal to `other`.\n     *\n     * @static\n     * @memberOf _\n     * @since 3.9.0\n     * @category Lang\n     * @param {*} value The value to compare.\n     * @param {*} other The other value to compare.\n     * @returns {boolean} Returns `true` if `value` is greater than or equal to\n     *  `other`, else `false`.\n     * @see _.lte\n     * @example\n     *\n     * _.gte(3, 1);\n     * // => true\n     *\n     * _.gte(3, 3);\n     * // => true\n     *\n     * _.gte(1, 3);\n     * // => false\n     */\n    var gte = createRelationalOperation(function(value, other) {\n      return value >= other;\n    });\n\n    /**\n     * Checks if `value` is likely an `arguments` object.\n     *\n     * @static\n     * @memberOf _\n     * @since 0.1.0\n     * @category Lang\n     * @param {*} value The value to check.\n     * @returns {boolean} Returns `true` if `value` is an `arguments` object,\n     *  else `false`.\n     * @example\n     *\n     * _.isArguments(function() { return arguments; }());\n     * // => true\n     *\n     * _.isArguments([1, 2, 3]);\n     * // => false\n     */\n    var isArguments = baseIsArguments(function() { return arguments; }()) ? baseIsArguments : function(value) {\n      return isObjectLike(value) && hasOwnProperty.call(value, 'callee') &&\n        !propertyIsEnumerable.call(value, 'callee');\n    };\n\n    /**\n     * Checks if `value` is classified as an `Array` object.\n     *\n     * @static\n     * @memberOf _\n     * @since 0.1.0\n     * @category Lang\n     * @param {*} value The value to check.\n     * @returns {boolean} Returns `true` if `value` is an array, else `false`.\n     * @example\n     *\n     * _.isArray([1, 2, 3]);\n     * // => true\n     *\n     * _.isArray(document.body.children);\n     * // => false\n     *\n     * _.isArray('abc');\n     * // => false\n     *\n     * _.isArray(_.noop);\n     * // => false\n     */\n    var isArray = Array.isArray;\n\n    /**\n     * Checks if `value` is classified as an `ArrayBuffer` object.\n     *\n     * @static\n     * @memberOf _\n     * @since 4.3.0\n     * @category Lang\n     * @param {*} value The value to check.\n     * @returns {boolean} Returns `true` if `value` is an array buffer, else `false`.\n     * @example\n     *\n     * _.isArrayBuffer(new ArrayBuffer(2));\n     * // => true\n     *\n     * _.isArrayBuffer(new Array(2));\n     * // => false\n     */\n    var isArrayBuffer = nodeIsArrayBuffer ? baseUnary(nodeIsArrayBuffer) : baseIsArrayBuffer;\n\n    /**\n     * Checks if `value` is array-like. A value is considered array-like if it's\n     * not a function and has a `value.length` that's an integer greater than or\n     * equal to `0` and less than or equal to `Number.MAX_SAFE_INTEGER`.\n     *\n     * @static\n     * @memberOf _\n     * @since 4.0.0\n     * @category Lang\n     * @param {*} value The value to check.\n     * @returns {boolean} Returns `true` if `value` is array-like, else `false`.\n     * @example\n     *\n     * _.isArrayLike([1, 2, 3]);\n     * // => true\n     *\n     * _.isArrayLike(document.body.children);\n     * // => true\n     *\n     * _.isArrayLike('abc');\n     * // => true\n     *\n     * _.isArrayLike(_.noop);\n     * // => false\n     */\n    function isArrayLike(value) {\n      return value != null && isLength(value.length) && !isFunction(value);\n    }\n\n    /**\n     * This method is like `_.isArrayLike` except that it also checks if `value`\n     * is an object.\n     *\n     * @static\n     * @memberOf _\n     * @since 4.0.0\n     * @category Lang\n     * @param {*} value The value to check.\n     * @returns {boolean} Returns `true` if `value` is an array-like object,\n     *  else `false`.\n     * @example\n     *\n     * _.isArrayLikeObject([1, 2, 3]);\n     * // => true\n     *\n     * _.isArrayLikeObject(document.body.children);\n     * // => true\n     *\n     * _.isArrayLikeObject('abc');\n     * // => false\n     *\n     * _.isArrayLikeObject(_.noop);\n     * // => false\n     */\n    function isArrayLikeObject(value) {\n      return isObjectLike(value) && isArrayLike(value);\n    }\n\n    /**\n     * Checks if `value` is classified as a boolean primitive or object.\n     *\n     * @static\n     * @memberOf _\n     * @since 0.1.0\n     * @category Lang\n     * @param {*} value The value to check.\n     * @returns {boolean} Returns `true` if `value` is a boolean, else `false`.\n     * @example\n     *\n     * _.isBoolean(false);\n     * // => true\n     *\n     * _.isBoolean(null);\n     * // => false\n     */\n    function isBoolean(value) {\n      return value === true || value === false ||\n        (isObjectLike(value) && baseGetTag(value) == boolTag);\n    }\n\n    /**\n     * Checks if `value` is a buffer.\n     *\n     * @static\n     * @memberOf _\n     * @since 4.3.0\n     * @category Lang\n     * @param {*} value The value to check.\n     * @returns {boolean} Returns `true` if `value` is a buffer, else `false`.\n     * @example\n     *\n     * _.isBuffer(new Buffer(2));\n     * // => true\n     *\n     * _.isBuffer(new Uint8Array(2));\n     * // => false\n     */\n    var isBuffer = nativeIsBuffer || stubFalse;\n\n    /**\n     * Checks if `value` is classified as a `Date` object.\n     *\n     * @static\n     * @memberOf _\n     * @since 0.1.0\n     * @category Lang\n     * @param {*} value The value to check.\n     * @returns {boolean} Returns `true` if `value` is a date object, else `false`.\n     * @example\n     *\n     * _.isDate(new Date);\n     * // => true\n     *\n     * _.isDate('Mon April 23 2012');\n     * // => false\n     */\n    var isDate = nodeIsDate ? baseUnary(nodeIsDate) : baseIsDate;\n\n    /**\n     * Checks if `value` is likely a DOM element.\n     *\n     * @static\n     * @memberOf _\n     * @since 0.1.0\n     * @category Lang\n     * @param {*} value The value to check.\n     * @returns {boolean} Returns `true` if `value` is a DOM element, else `false`.\n     * @example\n     *\n     * _.isElement(document.body);\n     * // => true\n     *\n     * _.isElement('<body>');\n     * // => false\n     */\n    function isElement(value) {\n      return isObjectLike(value) && value.nodeType === 1 && !isPlainObject(value);\n    }\n\n    /**\n     * Checks if `value` is an empty object, collection, map, or set.\n     *\n     * Objects are considered empty if they have no own enumerable string keyed\n     * properties.\n     *\n     * Array-like values such as `arguments` objects, arrays, buffers, strings, or\n     * jQuery-like collections are considered empty if they have a `length` of `0`.\n     * Similarly, maps and sets are considered empty if they have a `size` of `0`.\n     *\n     * @static\n     * @memberOf _\n     * @since 0.1.0\n     * @category Lang\n     * @param {*} value The value to check.\n     * @returns {boolean} Returns `true` if `value` is empty, else `false`.\n     * @example\n     *\n     * _.isEmpty(null);\n     * // => true\n     *\n     * _.isEmpty(true);\n     * // => true\n     *\n     * _.isEmpty(1);\n     * // => true\n     *\n     * _.isEmpty([1, 2, 3]);\n     * // => false\n     *\n     * _.isEmpty({ 'a': 1 });\n     * // => false\n     */\n    function isEmpty(value) {\n      if (value == null) {\n        return true;\n      }\n      if (isArrayLike(value) &&\n          (isArray(value) || typeof value == 'string' || typeof value.splice == 'function' ||\n            isBuffer(value) || isTypedArray(value) || isArguments(value))) {\n        return !value.length;\n      }\n      var tag = getTag(value);\n      if (tag == mapTag || tag == setTag) {\n        return !value.size;\n      }\n      if (isPrototype(value)) {\n        return !baseKeys(value).length;\n      }\n      for (var key in value) {\n        if (hasOwnProperty.call(value, key)) {\n          return false;\n        }\n      }\n      return true;\n    }\n\n    /**\n     * Performs a deep comparison between two values to determine if they are\n     * equivalent.\n     *\n     * **Note:** This method supports comparing arrays, array buffers, booleans,\n     * date objects, error objects, maps, numbers, `Object` objects, regexes,\n     * sets, strings, symbols, and typed arrays. `Object` objects are compared\n     * by their own, not inherited, enumerable properties. Functions and DOM\n     * nodes are compared by strict equality, i.e. `===`.\n     *\n     * @static\n     * @memberOf _\n     * @since 0.1.0\n     * @category Lang\n     * @param {*} value The value to compare.\n     * @param {*} other The other value to compare.\n     * @returns {boolean} Returns `true` if the values are equivalent, else `false`.\n     * @example\n     *\n     * var object = { 'a': 1 };\n     * var other = { 'a': 1 };\n     *\n     * _.isEqual(object, other);\n     * // => true\n     *\n     * object === other;\n     * // => false\n     */\n    function isEqual(value, other) {\n      return baseIsEqual(value, other);\n    }\n\n    /**\n     * This method is like `_.isEqual` except that it accepts `customizer` which\n     * is invoked to compare values. If `customizer` returns `undefined`, comparisons\n     * are handled by the method instead. The `customizer` is invoked with up to\n     * six arguments: (objValue, othValue [, index|key, object, other, stack]).\n     *\n     * @static\n     * @memberOf _\n     * @since 4.0.0\n     * @category Lang\n     * @param {*} value The value to compare.\n     * @param {*} other The other value to compare.\n     * @param {Function} [customizer] The function to customize comparisons.\n     * @returns {boolean} Returns `true` if the values are equivalent, else `false`.\n     * @example\n     *\n     * function isGreeting(value) {\n     *   return /^h(?:i|ello)$/.test(value);\n     * }\n     *\n     * function customizer(objValue, othValue) {\n     *   if (isGreeting(objValue) && isGreeting(othValue)) {\n     *     return true;\n     *   }\n     * }\n     *\n     * var array = ['hello', 'goodbye'];\n     * var other = ['hi', 'goodbye'];\n     *\n     * _.isEqualWith(array, other, customizer);\n     * // => true\n     */\n    function isEqualWith(value, other, customizer) {\n      customizer = typeof customizer == 'function' ? customizer : undefined;\n      var result = customizer ? customizer(value, other) : undefined;\n      return result === undefined ? baseIsEqual(value, other, undefined, customizer) : !!result;\n    }\n\n    /**\n     * Checks if `value` is an `Error`, `EvalError`, `RangeError`, `ReferenceError`,\n     * `SyntaxError`, `TypeError`, or `URIError` object.\n     *\n     * @static\n     * @memberOf _\n     * @since 3.0.0\n     * @category Lang\n     * @param {*} value The value to check.\n     * @returns {boolean} Returns `true` if `value` is an error object, else `false`.\n     * @example\n     *\n     * _.isError(new Error);\n     * // => true\n     *\n     * _.isError(Error);\n     * // => false\n     */\n    function isError(value) {\n      if (!isObjectLike(value)) {\n        return false;\n      }\n      var tag = baseGetTag(value);\n      return tag == errorTag || tag == domExcTag ||\n        (typeof value.message == 'string' && typeof value.name == 'string' && !isPlainObject(value));\n    }\n\n    /**\n     * Checks if `value` is a finite primitive number.\n     *\n     * **Note:** This method is based on\n     * [`Number.isFinite`](https://mdn.io/Number/isFinite).\n     *\n     * @static\n     * @memberOf _\n     * @since 0.1.0\n     * @category Lang\n     * @param {*} value The value to check.\n     * @returns {boolean} Returns `true` if `value` is a finite number, else `false`.\n     * @example\n     *\n     * _.isFinite(3);\n     * // => true\n     *\n     * _.isFinite(Number.MIN_VALUE);\n     * // => true\n     *\n     * _.isFinite(Infinity);\n     * // => false\n     *\n     * _.isFinite('3');\n     * // => false\n     */\n    function isFinite(value) {\n      return typeof value == 'number' && nativeIsFinite(value);\n    }\n\n    /**\n     * Checks if `value` is classified as a `Function` object.\n     *\n     * @static\n     * @memberOf _\n     * @since 0.1.0\n     * @category Lang\n     * @param {*} value The value to check.\n     * @returns {boolean} Returns `true` if `value` is a function, else `false`.\n     * @example\n     *\n     * _.isFunction(_);\n     * // => true\n     *\n     * _.isFunction(/abc/);\n     * // => false\n     */\n    function isFunction(value) {\n      if (!isObject(value)) {\n        return false;\n      }\n      // The use of `Object#toString` avoids issues with the `typeof` operator\n      // in Safari 9 which returns 'object' for typed arrays and other constructors.\n      var tag = baseGetTag(value);\n      return tag == funcTag || tag == genTag || tag == asyncTag || tag == proxyTag;\n    }\n\n    /**\n     * Checks if `value` is an integer.\n     *\n     * **Note:** This method is based on\n     * [`Number.isInteger`](https://mdn.io/Number/isInteger).\n     *\n     * @static\n     * @memberOf _\n     * @since 4.0.0\n     * @category Lang\n     * @param {*} value The value to check.\n     * @returns {boolean} Returns `true` if `value` is an integer, else `false`.\n     * @example\n     *\n     * _.isInteger(3);\n     * // => true\n     *\n     * _.isInteger(Number.MIN_VALUE);\n     * // => false\n     *\n     * _.isInteger(Infinity);\n     * // => false\n     *\n     * _.isInteger('3');\n     * // => false\n     */\n    function isInteger(value) {\n      return typeof value == 'number' && value == toInteger(value);\n    }\n\n    /**\n     * Checks if `value` is a valid array-like length.\n     *\n     * **Note:** This method is loosely based on\n     * [`ToLength`](http://ecma-international.org/ecma-262/7.0/#sec-tolength).\n     *\n     * @static\n     * @memberOf _\n     * @since 4.0.0\n     * @category Lang\n     * @param {*} value The value to check.\n     * @returns {boolean} Returns `true` if `value` is a valid length, else `false`.\n     * @example\n     *\n     * _.isLength(3);\n     * // => true\n     *\n     * _.isLength(Number.MIN_VALUE);\n     * // => false\n     *\n     * _.isLength(Infinity);\n     * // => false\n     *\n     * _.isLength('3');\n     * // => false\n     */\n    function isLength(value) {\n      return typeof value == 'number' &&\n        value > -1 && value % 1 == 0 && value <= MAX_SAFE_INTEGER;\n    }\n\n    /**\n     * Checks if `value` is the\n     * [language type](http://www.ecma-international.org/ecma-262/7.0/#sec-ecmascript-language-types)\n     * of `Object`. (e.g. arrays, functions, objects, regexes, `new Number(0)`, and `new String('')`)\n     *\n     * @static\n     * @memberOf _\n     * @since 0.1.0\n     * @category Lang\n     * @param {*} value The value to check.\n     * @returns {boolean} Returns `true` if `value` is an object, else `false`.\n     * @example\n     *\n     * _.isObject({});\n     * // => true\n     *\n     * _.isObject([1, 2, 3]);\n     * // => true\n     *\n     * _.isObject(_.noop);\n     * // => true\n     *\n     * _.isObject(null);\n     * // => false\n     */\n    function isObject(value) {\n      var type = typeof value;\n      return value != null && (type == 'object' || type == 'function');\n    }\n\n    /**\n     * Checks if `value` is object-like. A value is object-like if it's not `null`\n     * and has a `typeof` result of \"object\".\n     *\n     * @static\n     * @memberOf _\n     * @since 4.0.0\n     * @category Lang\n     * @param {*} value The value to check.\n     * @returns {boolean} Returns `true` if `value` is object-like, else `false`.\n     * @example\n     *\n     * _.isObjectLike({});\n     * // => true\n     *\n     * _.isObjectLike([1, 2, 3]);\n     * // => true\n     *\n     * _.isObjectLike(_.noop);\n     * // => false\n     *\n     * _.isObjectLike(null);\n     * // => false\n     */\n    function isObjectLike(value) {\n      return value != null && typeof value == 'object';\n    }\n\n    /**\n     * Checks if `value` is classified as a `Map` object.\n     *\n     * @static\n     * @memberOf _\n     * @since 4.3.0\n     * @category Lang\n     * @param {*} value The value to check.\n     * @returns {boolean} Returns `true` if `value` is a map, else `false`.\n     * @example\n     *\n     * _.isMap(new Map);\n     * // => true\n     *\n     * _.isMap(new WeakMap);\n     * // => false\n     */\n    var isMap = nodeIsMap ? baseUnary(nodeIsMap) : baseIsMap;\n\n    /**\n     * Performs a partial deep comparison between `object` and `source` to\n     * determine if `object` contains equivalent property values.\n     *\n     * **Note:** This method is equivalent to `_.matches` when `source` is\n     * partially applied.\n     *\n     * Partial comparisons will match empty array and empty object `source`\n     * values against any array or object value, respectively. See `_.isEqual`\n     * for a list of supported value comparisons.\n     *\n     * @static\n     * @memberOf _\n     * @since 3.0.0\n     * @category Lang\n     * @param {Object} object The object to inspect.\n     * @param {Object} source The object of property values to match.\n     * @returns {boolean} Returns `true` if `object` is a match, else `false`.\n     * @example\n     *\n     * var object = { 'a': 1, 'b': 2 };\n     *\n     * _.isMatch(object, { 'b': 2 });\n     * // => true\n     *\n     * _.isMatch(object, { 'b': 1 });\n     * // => false\n     */\n    function isMatch(object, source) {\n      return object === source || baseIsMatch(object, source, getMatchData(source));\n    }\n\n    /**\n     * This method is like `_.isMatch` except that it accepts `customizer` which\n     * is invoked to compare values. If `customizer` returns `undefined`, comparisons\n     * are handled by the method instead. The `customizer` is invoked with five\n     * arguments: (objValue, srcValue, index|key, object, source).\n     *\n     * @static\n     * @memberOf _\n     * @since 4.0.0\n     * @category Lang\n     * @param {Object} object The object to inspect.\n     * @param {Object} source The object of property values to match.\n     * @param {Function} [customizer] The function to customize comparisons.\n     * @returns {boolean} Returns `true` if `object` is a match, else `false`.\n     * @example\n     *\n     * function isGreeting(value) {\n     *   return /^h(?:i|ello)$/.test(value);\n     * }\n     *\n     * function customizer(objValue, srcValue) {\n     *   if (isGreeting(objValue) && isGreeting(srcValue)) {\n     *     return true;\n     *   }\n     * }\n     *\n     * var object = { 'greeting': 'hello' };\n     * var source = { 'greeting': 'hi' };\n     *\n     * _.isMatchWith(object, source, customizer);\n     * // => true\n     */\n    function isMatchWith(object, source, customizer) {\n      customizer = typeof customizer == 'function' ? customizer : undefined;\n      return baseIsMatch(object, source, getMatchData(source), customizer);\n    }\n\n    /**\n     * Checks if `value` is `NaN`.\n     *\n     * **Note:** This method is based on\n     * [`Number.isNaN`](https://mdn.io/Number/isNaN) and is not the same as\n     * global [`isNaN`](https://mdn.io/isNaN) which returns `true` for\n     * `undefined` and other non-number values.\n     *\n     * @static\n     * @memberOf _\n     * @since 0.1.0\n     * @category Lang\n     * @param {*} value The value to check.\n     * @returns {boolean} Returns `true` if `value` is `NaN`, else `false`.\n     * @example\n     *\n     * _.isNaN(NaN);\n     * // => true\n     *\n     * _.isNaN(new Number(NaN));\n     * // => true\n     *\n     * isNaN(undefined);\n     * // => true\n     *\n     * _.isNaN(undefined);\n     * // => false\n     */\n    function isNaN(value) {\n      // An `NaN` primitive is the only value that is not equal to itself.\n      // Perform the `toStringTag` check first to avoid errors with some\n      // ActiveX objects in IE.\n      return isNumber(value) && value != +value;\n    }\n\n    /**\n     * Checks if `value` is a pristine native function.\n     *\n     * **Note:** This method can't reliably detect native functions in the presence\n     * of the core-js package because core-js circumvents this kind of detection.\n     * Despite multiple requests, the core-js maintainer has made it clear: any\n     * attempt to fix the detection will be obstructed. As a result, we're left\n     * with little choice but to throw an error. Unfortunately, this also affects\n     * packages, like [babel-polyfill](https://www.npmjs.com/package/babel-polyfill),\n     * which rely on core-js.\n     *\n     * @static\n     * @memberOf _\n     * @since 3.0.0\n     * @category Lang\n     * @param {*} value The value to check.\n     * @returns {boolean} Returns `true` if `value` is a native function,\n     *  else `false`.\n     * @example\n     *\n     * _.isNative(Array.prototype.push);\n     * // => true\n     *\n     * _.isNative(_);\n     * // => false\n     */\n    function isNative(value) {\n      if (isMaskable(value)) {\n        throw new Error(CORE_ERROR_TEXT);\n      }\n      return baseIsNative(value);\n    }\n\n    /**\n     * Checks if `value` is `null`.\n     *\n     * @static\n     * @memberOf _\n     * @since 0.1.0\n     * @category Lang\n     * @param {*} value The value to check.\n     * @returns {boolean} Returns `true` if `value` is `null`, else `false`.\n     * @example\n     *\n     * _.isNull(null);\n     * // => true\n     *\n     * _.isNull(void 0);\n     * // => false\n     */\n    function isNull(value) {\n      return value === null;\n    }\n\n    /**\n     * Checks if `value` is `null` or `undefined`.\n     *\n     * @static\n     * @memberOf _\n     * @since 4.0.0\n     * @category Lang\n     * @param {*} value The value to check.\n     * @returns {boolean} Returns `true` if `value` is nullish, else `false`.\n     * @example\n     *\n     * _.isNil(null);\n     * // => true\n     *\n     * _.isNil(void 0);\n     * // => true\n     *\n     * _.isNil(NaN);\n     * // => false\n     */\n    function isNil(value) {\n      return value == null;\n    }\n\n    /**\n     * Checks if `value` is classified as a `Number` primitive or object.\n     *\n     * **Note:** To exclude `Infinity`, `-Infinity`, and `NaN`, which are\n     * classified as numbers, use the `_.isFinite` method.\n     *\n     * @static\n     * @memberOf _\n     * @since 0.1.0\n     * @category Lang\n     * @param {*} value The value to check.\n     * @returns {boolean} Returns `true` if `value` is a number, else `false`.\n     * @example\n     *\n     * _.isNumber(3);\n     * // => true\n     *\n     * _.isNumber(Number.MIN_VALUE);\n     * // => true\n     *\n     * _.isNumber(Infinity);\n     * // => true\n     *\n     * _.isNumber('3');\n     * // => false\n     */\n    function isNumber(value) {\n      return typeof value == 'number' ||\n        (isObjectLike(value) && baseGetTag(value) == numberTag);\n    }\n\n    /**\n     * Checks if `value` is a plain object, that is, an object created by the\n     * `Object` constructor or one with a `[[Prototype]]` of `null`.\n     *\n     * @static\n     * @memberOf _\n     * @since 0.8.0\n     * @category Lang\n     * @param {*} value The value to check.\n     * @returns {boolean} Returns `true` if `value` is a plain object, else `false`.\n     * @example\n     *\n     * function Foo() {\n     *   this.a = 1;\n     * }\n     *\n     * _.isPlainObject(new Foo);\n     * // => false\n     *\n     * _.isPlainObject([1, 2, 3]);\n     * // => false\n     *\n     * _.isPlainObject({ 'x': 0, 'y': 0 });\n     * // => true\n     *\n     * _.isPlainObject(Object.create(null));\n     * // => true\n     */\n    function isPlainObject(value) {\n      if (!isObjectLike(value) || baseGetTag(value) != objectTag) {\n        return false;\n      }\n      var proto = getPrototype(value);\n      if (proto === null) {\n        return true;\n      }\n      var Ctor = hasOwnProperty.call(proto, 'constructor') && proto.constructor;\n      return typeof Ctor == 'function' && Ctor instanceof Ctor &&\n        funcToString.call(Ctor) == objectCtorString;\n    }\n\n    /**\n     * Checks if `value` is classified as a `RegExp` object.\n     *\n     * @static\n     * @memberOf _\n     * @since 0.1.0\n     * @category Lang\n     * @param {*} value The value to check.\n     * @returns {boolean} Returns `true` if `value` is a regexp, else `false`.\n     * @example\n     *\n     * _.isRegExp(/abc/);\n     * // => true\n     *\n     * _.isRegExp('/abc/');\n     * // => false\n     */\n    var isRegExp = nodeIsRegExp ? baseUnary(nodeIsRegExp) : baseIsRegExp;\n\n    /**\n     * Checks if `value` is a safe integer. An integer is safe if it's an IEEE-754\n     * double precision number which isn't the result of a rounded unsafe integer.\n     *\n     * **Note:** This method is based on\n     * [`Number.isSafeInteger`](https://mdn.io/Number/isSafeInteger).\n     *\n     * @static\n     * @memberOf _\n     * @since 4.0.0\n     * @category Lang\n     * @param {*} value The value to check.\n     * @returns {boolean} Returns `true` if `value` is a safe integer, else `false`.\n     * @example\n     *\n     * _.isSafeInteger(3);\n     * // => true\n     *\n     * _.isSafeInteger(Number.MIN_VALUE);\n     * // => false\n     *\n     * _.isSafeInteger(Infinity);\n     * // => false\n     *\n     * _.isSafeInteger('3');\n     * // => false\n     */\n    function isSafeInteger(value) {\n      return isInteger(value) && value >= -MAX_SAFE_INTEGER && value <= MAX_SAFE_INTEGER;\n    }\n\n    /**\n     * Checks if `value` is classified as a `Set` object.\n     *\n     * @static\n     * @memberOf _\n     * @since 4.3.0\n     * @category Lang\n     * @param {*} value The value to check.\n     * @returns {boolean} Returns `true` if `value` is a set, else `false`.\n     * @example\n     *\n     * _.isSet(new Set);\n     * // => true\n     *\n     * _.isSet(new WeakSet);\n     * // => false\n     */\n    var isSet = nodeIsSet ? baseUnary(nodeIsSet) : baseIsSet;\n\n    /**\n     * Checks if `value` is classified as a `String` primitive or object.\n     *\n     * @static\n     * @since 0.1.0\n     * @memberOf _\n     * @category Lang\n     * @param {*} value The value to check.\n     * @returns {boolean} Returns `true` if `value` is a string, else `false`.\n     * @example\n     *\n     * _.isString('abc');\n     * // => true\n     *\n     * _.isString(1);\n     * // => false\n     */\n    function isString(value) {\n      return typeof value == 'string' ||\n        (!isArray(value) && isObjectLike(value) && baseGetTag(value) == stringTag);\n    }\n\n    /**\n     * Checks if `value` is classified as a `Symbol` primitive or object.\n     *\n     * @static\n     * @memberOf _\n     * @since 4.0.0\n     * @category Lang\n     * @param {*} value The value to check.\n     * @returns {boolean} Returns `true` if `value` is a symbol, else `false`.\n     * @example\n     *\n     * _.isSymbol(Symbol.iterator);\n     * // => true\n     *\n     * _.isSymbol('abc');\n     * // => false\n     */\n    function isSymbol(value) {\n      return typeof value == 'symbol' ||\n        (isObjectLike(value) && baseGetTag(value) == symbolTag);\n    }\n\n    /**\n     * Checks if `value` is classified as a typed array.\n     *\n     * @static\n     * @memberOf _\n     * @since 3.0.0\n     * @category Lang\n     * @param {*} value The value to check.\n     * @returns {boolean} Returns `true` if `value` is a typed array, else `false`.\n     * @example\n     *\n     * _.isTypedArray(new Uint8Array);\n     * // => true\n     *\n     * _.isTypedArray([]);\n     * // => false\n     */\n    var isTypedArray = nodeIsTypedArray ? baseUnary(nodeIsTypedArray) : baseIsTypedArray;\n\n    /**\n     * Checks if `value` is `undefined`.\n     *\n     * @static\n     * @since 0.1.0\n     * @memberOf _\n     * @category Lang\n     * @param {*} value The value to check.\n     * @returns {boolean} Returns `true` if `value` is `undefined`, else `false`.\n     * @example\n     *\n     * _.isUndefined(void 0);\n     * // => true\n     *\n     * _.isUndefined(null);\n     * // => false\n     */\n    function isUndefined(value) {\n      return value === undefined;\n    }\n\n    /**\n     * Checks if `value` is classified as a `WeakMap` object.\n     *\n     * @static\n     * @memberOf _\n     * @since 4.3.0\n     * @category Lang\n     * @param {*} value The value to check.\n     * @returns {boolean} Returns `true` if `value` is a weak map, else `false`.\n     * @example\n     *\n     * _.isWeakMap(new WeakMap);\n     * // => true\n     *\n     * _.isWeakMap(new Map);\n     * // => false\n     */\n    function isWeakMap(value) {\n      return isObjectLike(value) && getTag(value) == weakMapTag;\n    }\n\n    /**\n     * Checks if `value` is classified as a `WeakSet` object.\n     *\n     * @static\n     * @memberOf _\n     * @since 4.3.0\n     * @category Lang\n     * @param {*} value The value to check.\n     * @returns {boolean} Returns `true` if `value` is a weak set, else `false`.\n     * @example\n     *\n     * _.isWeakSet(new WeakSet);\n     * // => true\n     *\n     * _.isWeakSet(new Set);\n     * // => false\n     */\n    function isWeakSet(value) {\n      return isObjectLike(value) && baseGetTag(value) == weakSetTag;\n    }\n\n    /**\n     * Checks if `value` is less than `other`.\n     *\n     * @static\n     * @memberOf _\n     * @since 3.9.0\n     * @category Lang\n     * @param {*} value The value to compare.\n     * @param {*} other The other value to compare.\n     * @returns {boolean} Returns `true` if `value` is less than `other`,\n     *  else `false`.\n     * @see _.gt\n     * @example\n     *\n     * _.lt(1, 3);\n     * // => true\n     *\n     * _.lt(3, 3);\n     * // => false\n     *\n     * _.lt(3, 1);\n     * // => false\n     */\n    var lt = createRelationalOperation(baseLt);\n\n    /**\n     * Checks if `value` is less than or equal to `other`.\n     *\n     * @static\n     * @memberOf _\n     * @since 3.9.0\n     * @category Lang\n     * @param {*} value The value to compare.\n     * @param {*} other The other value to compare.\n     * @returns {boolean} Returns `true` if `value` is less than or equal to\n     *  `other`, else `false`.\n     * @see _.gte\n     * @example\n     *\n     * _.lte(1, 3);\n     * // => true\n     *\n     * _.lte(3, 3);\n     * // => true\n     *\n     * _.lte(3, 1);\n     * // => false\n     */\n    var lte = createRelationalOperation(function(value, other) {\n      return value <= other;\n    });\n\n    /**\n     * Converts `value` to an array.\n     *\n     * @static\n     * @since 0.1.0\n     * @memberOf _\n     * @category Lang\n     * @param {*} value The value to convert.\n     * @returns {Array} Returns the converted array.\n     * @example\n     *\n     * _.toArray({ 'a': 1, 'b': 2 });\n     * // => [1, 2]\n     *\n     * _.toArray('abc');\n     * // => ['a', 'b', 'c']\n     *\n     * _.toArray(1);\n     * // => []\n     *\n     * _.toArray(null);\n     * // => []\n     */\n    function toArray(value) {\n      if (!value) {\n        return [];\n      }\n      if (isArrayLike(value)) {\n        return isString(value) ? stringToArray(value) : copyArray(value);\n      }\n      if (symIterator && value[symIterator]) {\n        return iteratorToArray(value[symIterator]());\n      }\n      var tag = getTag(value),\n          func = tag == mapTag ? mapToArray : (tag == setTag ? setToArray : values);\n\n      return func(value);\n    }\n\n    /**\n     * Converts `value` to a finite number.\n     *\n     * @static\n     * @memberOf _\n     * @since 4.12.0\n     * @category Lang\n     * @param {*} value The value to convert.\n     * @returns {number} Returns the converted number.\n     * @example\n     *\n     * _.toFinite(3.2);\n     * // => 3.2\n     *\n     * _.toFinite(Number.MIN_VALUE);\n     * // => 5e-324\n     *\n     * _.toFinite(Infinity);\n     * // => 1.7976931348623157e+308\n     *\n     * _.toFinite('3.2');\n     * // => 3.2\n     */\n    function toFinite(value) {\n      if (!value) {\n        return value === 0 ? value : 0;\n      }\n      value = toNumber(value);\n      if (value === INFINITY || value === -INFINITY) {\n        var sign = (value < 0 ? -1 : 1);\n        return sign * MAX_INTEGER;\n      }\n      return value === value ? value : 0;\n    }\n\n    /**\n     * Converts `value` to an integer.\n     *\n     * **Note:** This method is loosely based on\n     * [`ToInteger`](http://www.ecma-international.org/ecma-262/7.0/#sec-tointeger).\n     *\n     * @static\n     * @memberOf _\n     * @since 4.0.0\n     * @category Lang\n     * @param {*} value The value to convert.\n     * @returns {number} Returns the converted integer.\n     * @example\n     *\n     * _.toInteger(3.2);\n     * // => 3\n     *\n     * _.toInteger(Number.MIN_VALUE);\n     * // => 0\n     *\n     * _.toInteger(Infinity);\n     * // => 1.7976931348623157e+308\n     *\n     * _.toInteger('3.2');\n     * // => 3\n     */\n    function toInteger(value) {\n      var result = toFinite(value),\n          remainder = result % 1;\n\n      return result === result ? (remainder ? result - remainder : result) : 0;\n    }\n\n    /**\n     * Converts `value` to an integer suitable for use as the length of an\n     * array-like object.\n     *\n     * **Note:** This method is based on\n     * [`ToLength`](http://ecma-international.org/ecma-262/7.0/#sec-tolength).\n     *\n     * @static\n     * @memberOf _\n     * @since 4.0.0\n     * @category Lang\n     * @param {*} value The value to convert.\n     * @returns {number} Returns the converted integer.\n     * @example\n     *\n     * _.toLength(3.2);\n     * // => 3\n     *\n     * _.toLength(Number.MIN_VALUE);\n     * // => 0\n     *\n     * _.toLength(Infinity);\n     * // => 4294967295\n     *\n     * _.toLength('3.2');\n     * // => 3\n     */\n    function toLength(value) {\n      return value ? baseClamp(toInteger(value), 0, MAX_ARRAY_LENGTH) : 0;\n    }\n\n    /**\n     * Converts `value` to a number.\n     *\n     * @static\n     * @memberOf _\n     * @since 4.0.0\n     * @category Lang\n     * @param {*} value The value to process.\n     * @returns {number} Returns the number.\n     * @example\n     *\n     * _.toNumber(3.2);\n     * // => 3.2\n     *\n     * _.toNumber(Number.MIN_VALUE);\n     * // => 5e-324\n     *\n     * _.toNumber(Infinity);\n     * // => Infinity\n     *\n     * _.toNumber('3.2');\n     * // => 3.2\n     */\n    function toNumber(value) {\n      if (typeof value == 'number') {\n        return value;\n      }\n      if (isSymbol(value)) {\n        return NAN;\n      }\n      if (isObject(value)) {\n        var other = typeof value.valueOf == 'function' ? value.valueOf() : value;\n        value = isObject(other) ? (other + '') : other;\n      }\n      if (typeof value != 'string') {\n        return value === 0 ? value : +value;\n      }\n      value = value.replace(reTrim, '');\n      var isBinary = reIsBinary.test(value);\n      return (isBinary || reIsOctal.test(value))\n        ? freeParseInt(value.slice(2), isBinary ? 2 : 8)\n        : (reIsBadHex.test(value) ? NAN : +value);\n    }\n\n    /**\n     * Converts `value` to a plain object flattening inherited enumerable string\n     * keyed properties of `value` to own properties of the plain object.\n     *\n     * @static\n     * @memberOf _\n     * @since 3.0.0\n     * @category Lang\n     * @param {*} value The value to convert.\n     * @returns {Object} Returns the converted plain object.\n     * @example\n     *\n     * function Foo() {\n     *   this.b = 2;\n     * }\n     *\n     * Foo.prototype.c = 3;\n     *\n     * _.assign({ 'a': 1 }, new Foo);\n     * // => { 'a': 1, 'b': 2 }\n     *\n     * _.assign({ 'a': 1 }, _.toPlainObject(new Foo));\n     * // => { 'a': 1, 'b': 2, 'c': 3 }\n     */\n    function toPlainObject(value) {\n      return copyObject(value, keysIn(value));\n    }\n\n    /**\n     * Converts `value` to a safe integer. A safe integer can be compared and\n     * represented correctly.\n     *\n     * @static\n     * @memberOf _\n     * @since 4.0.0\n     * @category Lang\n     * @param {*} value The value to convert.\n     * @returns {number} Returns the converted integer.\n     * @example\n     *\n     * _.toSafeInteger(3.2);\n     * // => 3\n     *\n     * _.toSafeInteger(Number.MIN_VALUE);\n     * // => 0\n     *\n     * _.toSafeInteger(Infinity);\n     * // => 9007199254740991\n     *\n     * _.toSafeInteger('3.2');\n     * // => 3\n     */\n    function toSafeInteger(value) {\n      return value\n        ? baseClamp(toInteger(value), -MAX_SAFE_INTEGER, MAX_SAFE_INTEGER)\n        : (value === 0 ? value : 0);\n    }\n\n    /**\n     * Converts `value` to a string. An empty string is returned for `null`\n     * and `undefined` values. The sign of `-0` is preserved.\n     *\n     * @static\n     * @memberOf _\n     * @since 4.0.0\n     * @category Lang\n     * @param {*} value The value to convert.\n     * @returns {string} Returns the converted string.\n     * @example\n     *\n     * _.toString(null);\n     * // => ''\n     *\n     * _.toString(-0);\n     * // => '-0'\n     *\n     * _.toString([1, 2, 3]);\n     * // => '1,2,3'\n     */\n    function toString(value) {\n      return value == null ? '' : baseToString(value);\n    }\n\n    /*------------------------------------------------------------------------*/\n\n    /**\n     * Assigns own enumerable string keyed properties of source objects to the\n     * destination object. Source objects are applied from left to right.\n     * Subsequent sources overwrite property assignments of previous sources.\n     *\n     * **Note:** This method mutates `object` and is loosely based on\n     * [`Object.assign`](https://mdn.io/Object/assign).\n     *\n     * @static\n     * @memberOf _\n     * @since 0.10.0\n     * @category Object\n     * @param {Object} object The destination object.\n     * @param {...Object} [sources] The source objects.\n     * @returns {Object} Returns `object`.\n     * @see _.assignIn\n     * @example\n     *\n     * function Foo() {\n     *   this.a = 1;\n     * }\n     *\n     * function Bar() {\n     *   this.c = 3;\n     * }\n     *\n     * Foo.prototype.b = 2;\n     * Bar.prototype.d = 4;\n     *\n     * _.assign({ 'a': 0 }, new Foo, new Bar);\n     * // => { 'a': 1, 'c': 3 }\n     */\n    var assign = createAssigner(function(object, source) {\n      if (isPrototype(source) || isArrayLike(source)) {\n        copyObject(source, keys(source), object);\n        return;\n      }\n      for (var key in source) {\n        if (hasOwnProperty.call(source, key)) {\n          assignValue(object, key, source[key]);\n        }\n      }\n    });\n\n    /**\n     * This method is like `_.assign` except that it iterates over own and\n     * inherited source properties.\n     *\n     * **Note:** This method mutates `object`.\n     *\n     * @static\n     * @memberOf _\n     * @since 4.0.0\n     * @alias extend\n     * @category Object\n     * @param {Object} object The destination object.\n     * @param {...Object} [sources] The source objects.\n     * @returns {Object} Returns `object`.\n     * @see _.assign\n     * @example\n     *\n     * function Foo() {\n     *   this.a = 1;\n     * }\n     *\n     * function Bar() {\n     *   this.c = 3;\n     * }\n     *\n     * Foo.prototype.b = 2;\n     * Bar.prototype.d = 4;\n     *\n     * _.assignIn({ 'a': 0 }, new Foo, new Bar);\n     * // => { 'a': 1, 'b': 2, 'c': 3, 'd': 4 }\n     */\n    var assignIn = createAssigner(function(object, source) {\n      copyObject(source, keysIn(source), object);\n    });\n\n    /**\n     * This method is like `_.assignIn` except that it accepts `customizer`\n     * which is invoked to produce the assigned values. If `customizer` returns\n     * `undefined`, assignment is handled by the method instead. The `customizer`\n     * is invoked with five arguments: (objValue, srcValue, key, object, source).\n     *\n     * **Note:** This method mutates `object`.\n     *\n     * @static\n     * @memberOf _\n     * @since 4.0.0\n     * @alias extendWith\n     * @category Object\n     * @param {Object} object The destination object.\n     * @param {...Object} sources The source objects.\n     * @param {Function} [customizer] The function to customize assigned values.\n     * @returns {Object} Returns `object`.\n     * @see _.assignWith\n     * @example\n     *\n     * function customizer(objValue, srcValue) {\n     *   return _.isUndefined(objValue) ? srcValue : objValue;\n     * }\n     *\n     * var defaults = _.partialRight(_.assignInWith, customizer);\n     *\n     * defaults({ 'a': 1 }, { 'b': 2 }, { 'a': 3 });\n     * // => { 'a': 1, 'b': 2 }\n     */\n    var assignInWith = createAssigner(function(object, source, srcIndex, customizer) {\n      copyObject(source, keysIn(source), object, customizer);\n    });\n\n    /**\n     * This method is like `_.assign` except that it accepts `customizer`\n     * which is invoked to produce the assigned values. If `customizer` returns\n     * `undefined`, assignment is handled by the method instead. The `customizer`\n     * is invoked with five arguments: (objValue, srcValue, key, object, source).\n     *\n     * **Note:** This method mutates `object`.\n     *\n     * @static\n     * @memberOf _\n     * @since 4.0.0\n     * @category Object\n     * @param {Object} object The destination object.\n     * @param {...Object} sources The source objects.\n     * @param {Function} [customizer] The function to customize assigned values.\n     * @returns {Object} Returns `object`.\n     * @see _.assignInWith\n     * @example\n     *\n     * function customizer(objValue, srcValue) {\n     *   return _.isUndefined(objValue) ? srcValue : objValue;\n     * }\n     *\n     * var defaults = _.partialRight(_.assignWith, customizer);\n     *\n     * defaults({ 'a': 1 }, { 'b': 2 }, { 'a': 3 });\n     * // => { 'a': 1, 'b': 2 }\n     */\n    var assignWith = createAssigner(function(object, source, srcIndex, customizer) {\n      copyObject(source, keys(source), object, customizer);\n    });\n\n    /**\n     * Creates an array of values corresponding to `paths` of `object`.\n     *\n     * @static\n     * @memberOf _\n     * @since 1.0.0\n     * @category Object\n     * @param {Object} object The object to iterate over.\n     * @param {...(string|string[])} [paths] The property paths to pick.\n     * @returns {Array} Returns the picked values.\n     * @example\n     *\n     * var object = { 'a': [{ 'b': { 'c': 3 } }, 4] };\n     *\n     * _.at(object, ['a[0].b.c', 'a[1]']);\n     * // => [3, 4]\n     */\n    var at = flatRest(baseAt);\n\n    /**\n     * Creates an object that inherits from the `prototype` object. If a\n     * `properties` object is given, its own enumerable string keyed properties\n     * are assigned to the created object.\n     *\n     * @static\n     * @memberOf _\n     * @since 2.3.0\n     * @category Object\n     * @param {Object} prototype The object to inherit from.\n     * @param {Object} [properties] The properties to assign to the object.\n     * @returns {Object} Returns the new object.\n     * @example\n     *\n     * function Shape() {\n     *   this.x = 0;\n     *   this.y = 0;\n     * }\n     *\n     * function Circle() {\n     *   Shape.call(this);\n     * }\n     *\n     * Circle.prototype = _.create(Shape.prototype, {\n     *   'constructor': Circle\n     * });\n     *\n     * var circle = new Circle;\n     * circle instanceof Circle;\n     * // => true\n     *\n     * circle instanceof Shape;\n     * // => true\n     */\n    function create(prototype, properties) {\n      var result = baseCreate(prototype);\n      return properties == null ? result : baseAssign(result, properties);\n    }\n\n    /**\n     * Assigns own and inherited enumerable string keyed properties of source\n     * objects to the destination object for all destination properties that\n     * resolve to `undefined`. Source objects are applied from left to right.\n     * Once a property is set, additional values of the same property are ignored.\n     *\n     * **Note:** This method mutates `object`.\n     *\n     * @static\n     * @since 0.1.0\n     * @memberOf _\n     * @category Object\n     * @param {Object} object The destination object.\n     * @param {...Object} [sources] The source objects.\n     * @returns {Object} Returns `object`.\n     * @see _.defaultsDeep\n     * @example\n     *\n     * _.defaults({ 'a': 1 }, { 'b': 2 }, { 'a': 3 });\n     * // => { 'a': 1, 'b': 2 }\n     */\n    var defaults = baseRest(function(args) {\n      args.push(undefined, customDefaultsAssignIn);\n      return apply(assignInWith, undefined, args);\n    });\n\n    /**\n     * This method is like `_.defaults` except that it recursively assigns\n     * default properties.\n     *\n     * **Note:** This method mutates `object`.\n     *\n     * @static\n     * @memberOf _\n     * @since 3.10.0\n     * @category Object\n     * @param {Object} object The destination object.\n     * @param {...Object} [sources] The source objects.\n     * @returns {Object} Returns `object`.\n     * @see _.defaults\n     * @example\n     *\n     * _.defaultsDeep({ 'a': { 'b': 2 } }, { 'a': { 'b': 1, 'c': 3 } });\n     * // => { 'a': { 'b': 2, 'c': 3 } }\n     */\n    var defaultsDeep = baseRest(function(args) {\n      args.push(undefined, customDefaultsMerge);\n      return apply(mergeWith, undefined, args);\n    });\n\n    /**\n     * This method is like `_.find` except that it returns the key of the first\n     * element `predicate` returns truthy for instead of the element itself.\n     *\n     * @static\n     * @memberOf _\n     * @since 1.1.0\n     * @category Object\n     * @param {Object} object The object to inspect.\n     * @param {Function} [predicate=_.identity] The function invoked per iteration.\n     * @returns {string|undefined} Returns the key of the matched element,\n     *  else `undefined`.\n     * @example\n     *\n     * var users = {\n     *   'barney':  { 'age': 36, 'active': true },\n     *   'fred':    { 'age': 40, 'active': false },\n     *   'pebbles': { 'age': 1,  'active': true }\n     * };\n     *\n     * _.findKey(users, function(o) { return o.age < 40; });\n     * // => 'barney' (iteration order is not guaranteed)\n     *\n     * // The `_.matches` iteratee shorthand.\n     * _.findKey(users, { 'age': 1, 'active': true });\n     * // => 'pebbles'\n     *\n     * // The `_.matchesProperty` iteratee shorthand.\n     * _.findKey(users, ['active', false]);\n     * // => 'fred'\n     *\n     * // The `_.property` iteratee shorthand.\n     * _.findKey(users, 'active');\n     * // => 'barney'\n     */\n    function findKey(object, predicate) {\n      return baseFindKey(object, getIteratee(predicate, 3), baseForOwn);\n    }\n\n    /**\n     * This method is like `_.findKey` except that it iterates over elements of\n     * a collection in the opposite order.\n     *\n     * @static\n     * @memberOf _\n     * @since 2.0.0\n     * @category Object\n     * @param {Object} object The object to inspect.\n     * @param {Function} [predicate=_.identity] The function invoked per iteration.\n     * @returns {string|undefined} Returns the key of the matched element,\n     *  else `undefined`.\n     * @example\n     *\n     * var users = {\n     *   'barney':  { 'age': 36, 'active': true },\n     *   'fred':    { 'age': 40, 'active': false },\n     *   'pebbles': { 'age': 1,  'active': true }\n     * };\n     *\n     * _.findLastKey(users, function(o) { return o.age < 40; });\n     * // => returns 'pebbles' assuming `_.findKey` returns 'barney'\n     *\n     * // The `_.matches` iteratee shorthand.\n     * _.findLastKey(users, { 'age': 36, 'active': true });\n     * // => 'barney'\n     *\n     * // The `_.matchesProperty` iteratee shorthand.\n     * _.findLastKey(users, ['active', false]);\n     * // => 'fred'\n     *\n     * // The `_.property` iteratee shorthand.\n     * _.findLastKey(users, 'active');\n     * // => 'pebbles'\n     */\n    function findLastKey(object, predicate) {\n      return baseFindKey(object, getIteratee(predicate, 3), baseForOwnRight);\n    }\n\n    /**\n     * Iterates over own and inherited enumerable string keyed properties of an\n     * object and invokes `iteratee` for each property. The iteratee is invoked\n     * with three arguments: (value, key, object). Iteratee functions may exit\n     * iteration early by explicitly returning `false`.\n     *\n     * @static\n     * @memberOf _\n     * @since 0.3.0\n     * @category Object\n     * @param {Object} object The object to iterate over.\n     * @param {Function} [iteratee=_.identity] The function invoked per iteration.\n     * @returns {Object} Returns `object`.\n     * @see _.forInRight\n     * @example\n     *\n     * function Foo() {\n     *   this.a = 1;\n     *   this.b = 2;\n     * }\n     *\n     * Foo.prototype.c = 3;\n     *\n     * _.forIn(new Foo, function(value, key) {\n     *   console.log(key);\n     * });\n     * // => Logs 'a', 'b', then 'c' (iteration order is not guaranteed).\n     */\n    function forIn(object, iteratee) {\n      return object == null\n        ? object\n        : baseFor(object, getIteratee(iteratee, 3), keysIn);\n    }\n\n    /**\n     * This method is like `_.forIn` except that it iterates over properties of\n     * `object` in the opposite order.\n     *\n     * @static\n     * @memberOf _\n     * @since 2.0.0\n     * @category Object\n     * @param {Object} object The object to iterate over.\n     * @param {Function} [iteratee=_.identity] The function invoked per iteration.\n     * @returns {Object} Returns `object`.\n     * @see _.forIn\n     * @example\n     *\n     * function Foo() {\n     *   this.a = 1;\n     *   this.b = 2;\n     * }\n     *\n     * Foo.prototype.c = 3;\n     *\n     * _.forInRight(new Foo, function(value, key) {\n     *   console.log(key);\n     * });\n     * // => Logs 'c', 'b', then 'a' assuming `_.forIn` logs 'a', 'b', then 'c'.\n     */\n    function forInRight(object, iteratee) {\n      return object == null\n        ? object\n        : baseForRight(object, getIteratee(iteratee, 3), keysIn);\n    }\n\n    /**\n     * Iterates over own enumerable string keyed properties of an object and\n     * invokes `iteratee` for each property. The iteratee is invoked with three\n     * arguments: (value, key, object). Iteratee functions may exit iteration\n     * early by explicitly returning `false`.\n     *\n     * @static\n     * @memberOf _\n     * @since 0.3.0\n     * @category Object\n     * @param {Object} object The object to iterate over.\n     * @param {Function} [iteratee=_.identity] The function invoked per iteration.\n     * @returns {Object} Returns `object`.\n     * @see _.forOwnRight\n     * @example\n     *\n     * function Foo() {\n     *   this.a = 1;\n     *   this.b = 2;\n     * }\n     *\n     * Foo.prototype.c = 3;\n     *\n     * _.forOwn(new Foo, function(value, key) {\n     *   console.log(key);\n     * });\n     * // => Logs 'a' then 'b' (iteration order is not guaranteed).\n     */\n    function forOwn(object, iteratee) {\n      return object && baseForOwn(object, getIteratee(iteratee, 3));\n    }\n\n    /**\n     * This method is like `_.forOwn` except that it iterates over properties of\n     * `object` in the opposite order.\n     *\n     * @static\n     * @memberOf _\n     * @since 2.0.0\n     * @category Object\n     * @param {Object} object The object to iterate over.\n     * @param {Function} [iteratee=_.identity] The function invoked per iteration.\n     * @returns {Object} Returns `object`.\n     * @see _.forOwn\n     * @example\n     *\n     * function Foo() {\n     *   this.a = 1;\n     *   this.b = 2;\n     * }\n     *\n     * Foo.prototype.c = 3;\n     *\n     * _.forOwnRight(new Foo, function(value, key) {\n     *   console.log(key);\n     * });\n     * // => Logs 'b' then 'a' assuming `_.forOwn` logs 'a' then 'b'.\n     */\n    function forOwnRight(object, iteratee) {\n      return object && baseForOwnRight(object, getIteratee(iteratee, 3));\n    }\n\n    /**\n     * Creates an array of function property names from own enumerable properties\n     * of `object`.\n     *\n     * @static\n     * @since 0.1.0\n     * @memberOf _\n     * @category Object\n     * @param {Object} object The object to inspect.\n     * @returns {Array} Returns the function names.\n     * @see _.functionsIn\n     * @example\n     *\n     * function Foo() {\n     *   this.a = _.constant('a');\n     *   this.b = _.constant('b');\n     * }\n     *\n     * Foo.prototype.c = _.constant('c');\n     *\n     * _.functions(new Foo);\n     * // => ['a', 'b']\n     */\n    function functions(object) {\n      return object == null ? [] : baseFunctions(object, keys(object));\n    }\n\n    /**\n     * Creates an array of function property names from own and inherited\n     * enumerable properties of `object`.\n     *\n     * @static\n     * @memberOf _\n     * @since 4.0.0\n     * @category Object\n     * @param {Object} object The object to inspect.\n     * @returns {Array} Returns the function names.\n     * @see _.functions\n     * @example\n     *\n     * function Foo() {\n     *   this.a = _.constant('a');\n     *   this.b = _.constant('b');\n     * }\n     *\n     * Foo.prototype.c = _.constant('c');\n     *\n     * _.functionsIn(new Foo);\n     * // => ['a', 'b', 'c']\n     */\n    function functionsIn(object) {\n      return object == null ? [] : baseFunctions(object, keysIn(object));\n    }\n\n    /**\n     * Gets the value at `path` of `object`. If the resolved value is\n     * `undefined`, the `defaultValue` is returned in its place.\n     *\n     * @static\n     * @memberOf _\n     * @since 3.7.0\n     * @category Object\n     * @param {Object} object The object to query.\n     * @param {Array|string} path The path of the property to get.\n     * @param {*} [defaultValue] The value returned for `undefined` resolved values.\n     * @returns {*} Returns the resolved value.\n     * @example\n     *\n     * var object = { 'a': [{ 'b': { 'c': 3 } }] };\n     *\n     * _.get(object, 'a[0].b.c');\n     * // => 3\n     *\n     * _.get(object, ['a', '0', 'b', 'c']);\n     * // => 3\n     *\n     * _.get(object, 'a.b.c', 'default');\n     * // => 'default'\n     */\n    function get(object, path, defaultValue) {\n      var result = object == null ? undefined : baseGet(object, path);\n      return result === undefined ? defaultValue : result;\n    }\n\n    /**\n     * Checks if `path` is a direct property of `object`.\n     *\n     * @static\n     * @since 0.1.0\n     * @memberOf _\n     * @category Object\n     * @param {Object} object The object to query.\n     * @param {Array|string} path The path to check.\n     * @returns {boolean} Returns `true` if `path` exists, else `false`.\n     * @example\n     *\n     * var object = { 'a': { 'b': 2 } };\n     * var other = _.create({ 'a': _.create({ 'b': 2 }) });\n     *\n     * _.has(object, 'a');\n     * // => true\n     *\n     * _.has(object, 'a.b');\n     * // => true\n     *\n     * _.has(object, ['a', 'b']);\n     * // => true\n     *\n     * _.has(other, 'a');\n     * // => false\n     */\n    function has(object, path) {\n      return object != null && hasPath(object, path, baseHas);\n    }\n\n    /**\n     * Checks if `path` is a direct or inherited property of `object`.\n     *\n     * @static\n     * @memberOf _\n     * @since 4.0.0\n     * @category Object\n     * @param {Object} object The object to query.\n     * @param {Array|string} path The path to check.\n     * @returns {boolean} Returns `true` if `path` exists, else `false`.\n     * @example\n     *\n     * var object = _.create({ 'a': _.create({ 'b': 2 }) });\n     *\n     * _.hasIn(object, 'a');\n     * // => true\n     *\n     * _.hasIn(object, 'a.b');\n     * // => true\n     *\n     * _.hasIn(object, ['a', 'b']);\n     * // => true\n     *\n     * _.hasIn(object, 'b');\n     * // => false\n     */\n    function hasIn(object, path) {\n      return object != null && hasPath(object, path, baseHasIn);\n    }\n\n    /**\n     * Creates an object composed of the inverted keys and values of `object`.\n     * If `object` contains duplicate values, subsequent values overwrite\n     * property assignments of previous values.\n     *\n     * @static\n     * @memberOf _\n     * @since 0.7.0\n     * @category Object\n     * @param {Object} object The object to invert.\n     * @returns {Object} Returns the new inverted object.\n     * @example\n     *\n     * var object = { 'a': 1, 'b': 2, 'c': 1 };\n     *\n     * _.invert(object);\n     * // => { '1': 'c', '2': 'b' }\n     */\n    var invert = createInverter(function(result, value, key) {\n      result[value] = key;\n    }, constant(identity));\n\n    /**\n     * This method is like `_.invert` except that the inverted object is generated\n     * from the results of running each element of `object` thru `iteratee`. The\n     * corresponding inverted value of each inverted key is an array of keys\n     * responsible for generating the inverted value. The iteratee is invoked\n     * with one argument: (value).\n     *\n     * @static\n     * @memberOf _\n     * @since 4.1.0\n     * @category Object\n     * @param {Object} object The object to invert.\n     * @param {Function} [iteratee=_.identity] The iteratee invoked per element.\n     * @returns {Object} Returns the new inverted object.\n     * @example\n     *\n     * var object = { 'a': 1, 'b': 2, 'c': 1 };\n     *\n     * _.invertBy(object);\n     * // => { '1': ['a', 'c'], '2': ['b'] }\n     *\n     * _.invertBy(object, function(value) {\n     *   return 'group' + value;\n     * });\n     * // => { 'group1': ['a', 'c'], 'group2': ['b'] }\n     */\n    var invertBy = createInverter(function(result, value, key) {\n      if (hasOwnProperty.call(result, value)) {\n        result[value].push(key);\n      } else {\n        result[value] = [key];\n      }\n    }, getIteratee);\n\n    /**\n     * Invokes the method at `path` of `object`.\n     *\n     * @static\n     * @memberOf _\n     * @since 4.0.0\n     * @category Object\n     * @param {Object} object The object to query.\n     * @param {Array|string} path The path of the method to invoke.\n     * @param {...*} [args] The arguments to invoke the method with.\n     * @returns {*} Returns the result of the invoked method.\n     * @example\n     *\n     * var object = { 'a': [{ 'b': { 'c': [1, 2, 3, 4] } }] };\n     *\n     * _.invoke(object, 'a[0].b.c.slice', 1, 3);\n     * // => [2, 3]\n     */\n    var invoke = baseRest(baseInvoke);\n\n    /**\n     * Creates an array of the own enumerable property names of `object`.\n     *\n     * **Note:** Non-object values are coerced to objects. See the\n     * [ES spec](http://ecma-international.org/ecma-262/7.0/#sec-object.keys)\n     * for more details.\n     *\n     * @static\n     * @since 0.1.0\n     * @memberOf _\n     * @category Object\n     * @param {Object} object The object to query.\n     * @returns {Array} Returns the array of property names.\n     * @example\n     *\n     * function Foo() {\n     *   this.a = 1;\n     *   this.b = 2;\n     * }\n     *\n     * Foo.prototype.c = 3;\n     *\n     * _.keys(new Foo);\n     * // => ['a', 'b'] (iteration order is not guaranteed)\n     *\n     * _.keys('hi');\n     * // => ['0', '1']\n     */\n    function keys(object) {\n      return isArrayLike(object) ? arrayLikeKeys(object) : baseKeys(object);\n    }\n\n    /**\n     * Creates an array of the own and inherited enumerable property names of `object`.\n     *\n     * **Note:** Non-object values are coerced to objects.\n     *\n     * @static\n     * @memberOf _\n     * @since 3.0.0\n     * @category Object\n     * @param {Object} object The object to query.\n     * @returns {Array} Returns the array of property names.\n     * @example\n     *\n     * function Foo() {\n     *   this.a = 1;\n     *   this.b = 2;\n     * }\n     *\n     * Foo.prototype.c = 3;\n     *\n     * _.keysIn(new Foo);\n     * // => ['a', 'b', 'c'] (iteration order is not guaranteed)\n     */\n    function keysIn(object) {\n      return isArrayLike(object) ? arrayLikeKeys(object, true) : baseKeysIn(object);\n    }\n\n    /**\n     * The opposite of `_.mapValues`; this method creates an object with the\n     * same values as `object` and keys generated by running each own enumerable\n     * string keyed property of `object` thru `iteratee`. The iteratee is invoked\n     * with three arguments: (value, key, object).\n     *\n     * @static\n     * @memberOf _\n     * @since 3.8.0\n     * @category Object\n     * @param {Object} object The object to iterate over.\n     * @param {Function} [iteratee=_.identity] The function invoked per iteration.\n     * @returns {Object} Returns the new mapped object.\n     * @see _.mapValues\n     * @example\n     *\n     * _.mapKeys({ 'a': 1, 'b': 2 }, function(value, key) {\n     *   return key + value;\n     * });\n     * // => { 'a1': 1, 'b2': 2 }\n     */\n    function mapKeys(object, iteratee) {\n      var result = {};\n      iteratee = getIteratee(iteratee, 3);\n\n      baseForOwn(object, function(value, key, object) {\n        baseAssignValue(result, iteratee(value, key, object), value);\n      });\n      return result;\n    }\n\n    /**\n     * Creates an object with the same keys as `object` and values generated\n     * by running each own enumerable string keyed property of `object` thru\n     * `iteratee`. The iteratee is invoked with three arguments:\n     * (value, key, object).\n     *\n     * @static\n     * @memberOf _\n     * @since 2.4.0\n     * @category Object\n     * @param {Object} object The object to iterate over.\n     * @param {Function} [iteratee=_.identity] The function invoked per iteration.\n     * @returns {Object} Returns the new mapped object.\n     * @see _.mapKeys\n     * @example\n     *\n     * var users = {\n     *   'fred':    { 'user': 'fred',    'age': 40 },\n     *   'pebbles': { 'user': 'pebbles', 'age': 1 }\n     * };\n     *\n     * _.mapValues(users, function(o) { return o.age; });\n     * // => { 'fred': 40, 'pebbles': 1 } (iteration order is not guaranteed)\n     *\n     * // The `_.property` iteratee shorthand.\n     * _.mapValues(users, 'age');\n     * // => { 'fred': 40, 'pebbles': 1 } (iteration order is not guaranteed)\n     */\n    function mapValues(object, iteratee) {\n      var result = {};\n      iteratee = getIteratee(iteratee, 3);\n\n      baseForOwn(object, function(value, key, object) {\n        baseAssignValue(result, key, iteratee(value, key, object));\n      });\n      return result;\n    }\n\n    /**\n     * This method is like `_.assign` except that it recursively merges own and\n     * inherited enumerable string keyed properties of source objects into the\n     * destination object. Source properties that resolve to `undefined` are\n     * skipped if a destination value exists. Array and plain object properties\n     * are merged recursively. Other objects and value types are overridden by\n     * assignment. Source objects are applied from left to right. Subsequent\n     * sources overwrite property assignments of previous sources.\n     *\n     * **Note:** This method mutates `object`.\n     *\n     * @static\n     * @memberOf _\n     * @since 0.5.0\n     * @category Object\n     * @param {Object} object The destination object.\n     * @param {...Object} [sources] The source objects.\n     * @returns {Object} Returns `object`.\n     * @example\n     *\n     * var object = {\n     *   'a': [{ 'b': 2 }, { 'd': 4 }]\n     * };\n     *\n     * var other = {\n     *   'a': [{ 'c': 3 }, { 'e': 5 }]\n     * };\n     *\n     * _.merge(object, other);\n     * // => { 'a': [{ 'b': 2, 'c': 3 }, { 'd': 4, 'e': 5 }] }\n     */\n    var merge = createAssigner(function(object, source, srcIndex) {\n      baseMerge(object, source, srcIndex);\n    });\n\n    /**\n     * This method is like `_.merge` except that it accepts `customizer` which\n     * is invoked to produce the merged values of the destination and source\n     * properties. If `customizer` returns `undefined`, merging is handled by the\n     * method instead. The `customizer` is invoked with six arguments:\n     * (objValue, srcValue, key, object, source, stack).\n     *\n     * **Note:** This method mutates `object`.\n     *\n     * @static\n     * @memberOf _\n     * @since 4.0.0\n     * @category Object\n     * @param {Object} object The destination object.\n     * @param {...Object} sources The source objects.\n     * @param {Function} customizer The function to customize assigned values.\n     * @returns {Object} Returns `object`.\n     * @example\n     *\n     * function customizer(objValue, srcValue) {\n     *   if (_.isArray(objValue)) {\n     *     return objValue.concat(srcValue);\n     *   }\n     * }\n     *\n     * var object = { 'a': [1], 'b': [2] };\n     * var other = { 'a': [3], 'b': [4] };\n     *\n     * _.mergeWith(object, other, customizer);\n     * // => { 'a': [1, 3], 'b': [2, 4] }\n     */\n    var mergeWith = createAssigner(function(object, source, srcIndex, customizer) {\n      baseMerge(object, source, srcIndex, customizer);\n    });\n\n    /**\n     * The opposite of `_.pick`; this method creates an object composed of the\n     * own and inherited enumerable property paths of `object` that are not omitted.\n     *\n     * **Note:** This method is considerably slower than `_.pick`.\n     *\n     * @static\n     * @since 0.1.0\n     * @memberOf _\n     * @category Object\n     * @param {Object} object The source object.\n     * @param {...(string|string[])} [paths] The property paths to omit.\n     * @returns {Object} Returns the new object.\n     * @example\n     *\n     * var object = { 'a': 1, 'b': '2', 'c': 3 };\n     *\n     * _.omit(object, ['a', 'c']);\n     * // => { 'b': '2' }\n     */\n    var omit = flatRest(function(object, paths) {\n      var result = {};\n      if (object == null) {\n        return result;\n      }\n      var isDeep = false;\n      paths = arrayMap(paths, function(path) {\n        path = castPath(path, object);\n        isDeep || (isDeep = path.length > 1);\n        return path;\n      });\n      copyObject(object, getAllKeysIn(object), result);\n      if (isDeep) {\n        result = baseClone(result, CLONE_DEEP_FLAG | CLONE_FLAT_FLAG | CLONE_SYMBOLS_FLAG, customOmitClone);\n      }\n      var length = paths.length;\n      while (length--) {\n        baseUnset(result, paths[length]);\n      }\n      return result;\n    });\n\n    /**\n     * The opposite of `_.pickBy`; this method creates an object composed of\n     * the own and inherited enumerable string keyed properties of `object` that\n     * `predicate` doesn't return truthy for. The predicate is invoked with two\n     * arguments: (value, key).\n     *\n     * @static\n     * @memberOf _\n     * @since 4.0.0\n     * @category Object\n     * @param {Object} object The source object.\n     * @param {Function} [predicate=_.identity] The function invoked per property.\n     * @returns {Object} Returns the new object.\n     * @example\n     *\n     * var object = { 'a': 1, 'b': '2', 'c': 3 };\n     *\n     * _.omitBy(object, _.isNumber);\n     * // => { 'b': '2' }\n     */\n    function omitBy(object, predicate) {\n      return pickBy(object, negate(getIteratee(predicate)));\n    }\n\n    /**\n     * Creates an object composed of the picked `object` properties.\n     *\n     * @static\n     * @since 0.1.0\n     * @memberOf _\n     * @category Object\n     * @param {Object} object The source object.\n     * @param {...(string|string[])} [paths] The property paths to pick.\n     * @returns {Object} Returns the new object.\n     * @example\n     *\n     * var object = { 'a': 1, 'b': '2', 'c': 3 };\n     *\n     * _.pick(object, ['a', 'c']);\n     * // => { 'a': 1, 'c': 3 }\n     */\n    var pick = flatRest(function(object, paths) {\n      return object == null ? {} : basePick(object, paths);\n    });\n\n    /**\n     * Creates an object composed of the `object` properties `predicate` returns\n     * truthy for. The predicate is invoked with two arguments: (value, key).\n     *\n     * @static\n     * @memberOf _\n     * @since 4.0.0\n     * @category Object\n     * @param {Object} object The source object.\n     * @param {Function} [predicate=_.identity] The function invoked per property.\n     * @returns {Object} Returns the new object.\n     * @example\n     *\n     * var object = { 'a': 1, 'b': '2', 'c': 3 };\n     *\n     * _.pickBy(object, _.isNumber);\n     * // => { 'a': 1, 'c': 3 }\n     */\n    function pickBy(object, predicate) {\n      if (object == null) {\n        return {};\n      }\n      var props = arrayMap(getAllKeysIn(object), function(prop) {\n        return [prop];\n      });\n      predicate = getIteratee(predicate);\n      return basePickBy(object, props, function(value, path) {\n        return predicate(value, path[0]);\n      });\n    }\n\n    /**\n     * This method is like `_.get` except that if the resolved value is a\n     * function it's invoked with the `this` binding of its parent object and\n     * its result is returned.\n     *\n     * @static\n     * @since 0.1.0\n     * @memberOf _\n     * @category Object\n     * @param {Object} object The object to query.\n     * @param {Array|string} path The path of the property to resolve.\n     * @param {*} [defaultValue] The value returned for `undefined` resolved values.\n     * @returns {*} Returns the resolved value.\n     * @example\n     *\n     * var object = { 'a': [{ 'b': { 'c1': 3, 'c2': _.constant(4) } }] };\n     *\n     * _.result(object, 'a[0].b.c1');\n     * // => 3\n     *\n     * _.result(object, 'a[0].b.c2');\n     * // => 4\n     *\n     * _.result(object, 'a[0].b.c3', 'default');\n     * // => 'default'\n     *\n     * _.result(object, 'a[0].b.c3', _.constant('default'));\n     * // => 'default'\n     */\n    function result(object, path, defaultValue) {\n      path = castPath(path, object);\n\n      var index = -1,\n          length = path.length;\n\n      // Ensure the loop is entered when path is empty.\n      if (!length) {\n        length = 1;\n        object = undefined;\n      }\n      while (++index < length) {\n        var value = object == null ? undefined : object[toKey(path[index])];\n        if (value === undefined) {\n          index = length;\n          value = defaultValue;\n        }\n        object = isFunction(value) ? value.call(object) : value;\n      }\n      return object;\n    }\n\n    /**\n     * Sets the value at `path` of `object`. If a portion of `path` doesn't exist,\n     * it's created. Arrays are created for missing index properties while objects\n     * are created for all other missing properties. Use `_.setWith` to customize\n     * `path` creation.\n     *\n     * **Note:** This method mutates `object`.\n     *\n     * @static\n     * @memberOf _\n     * @since 3.7.0\n     * @category Object\n     * @param {Object} object The object to modify.\n     * @param {Array|string} path The path of the property to set.\n     * @param {*} value The value to set.\n     * @returns {Object} Returns `object`.\n     * @example\n     *\n     * var object = { 'a': [{ 'b': { 'c': 3 } }] };\n     *\n     * _.set(object, 'a[0].b.c', 4);\n     * console.log(object.a[0].b.c);\n     * // => 4\n     *\n     * _.set(object, ['x', '0', 'y', 'z'], 5);\n     * console.log(object.x[0].y.z);\n     * // => 5\n     */\n    function set(object, path, value) {\n      return object == null ? object : baseSet(object, path, value);\n    }\n\n    /**\n     * This method is like `_.set` except that it accepts `customizer` which is\n     * invoked to produce the objects of `path`.  If `customizer` returns `undefined`\n     * path creation is handled by the method instead. The `customizer` is invoked\n     * with three arguments: (nsValue, key, nsObject).\n     *\n     * **Note:** This method mutates `object`.\n     *\n     * @static\n     * @memberOf _\n     * @since 4.0.0\n     * @category Object\n     * @param {Object} object The object to modify.\n     * @param {Array|string} path The path of the property to set.\n     * @param {*} value The value to set.\n     * @param {Function} [customizer] The function to customize assigned values.\n     * @returns {Object} Returns `object`.\n     * @example\n     *\n     * var object = {};\n     *\n     * _.setWith(object, '[0][1]', 'a', Object);\n     * // => { '0': { '1': 'a' } }\n     */\n    function setWith(object, path, value, customizer) {\n      customizer = typeof customizer == 'function' ? customizer : undefined;\n      return object == null ? object : baseSet(object, path, value, customizer);\n    }\n\n    /**\n     * Creates an array of own enumerable string keyed-value pairs for `object`\n     * which can be consumed by `_.fromPairs`. If `object` is a map or set, its\n     * entries are returned.\n     *\n     * @static\n     * @memberOf _\n     * @since 4.0.0\n     * @alias entries\n     * @category Object\n     * @param {Object} object The object to query.\n     * @returns {Array} Returns the key-value pairs.\n     * @example\n     *\n     * function Foo() {\n     *   this.a = 1;\n     *   this.b = 2;\n     * }\n     *\n     * Foo.prototype.c = 3;\n     *\n     * _.toPairs(new Foo);\n     * // => [['a', 1], ['b', 2]] (iteration order is not guaranteed)\n     */\n    var toPairs = createToPairs(keys);\n\n    /**\n     * Creates an array of own and inherited enumerable string keyed-value pairs\n     * for `object` which can be consumed by `_.fromPairs`. If `object` is a map\n     * or set, its entries are returned.\n     *\n     * @static\n     * @memberOf _\n     * @since 4.0.0\n     * @alias entriesIn\n     * @category Object\n     * @param {Object} object The object to query.\n     * @returns {Array} Returns the key-value pairs.\n     * @example\n     *\n     * function Foo() {\n     *   this.a = 1;\n     *   this.b = 2;\n     * }\n     *\n     * Foo.prototype.c = 3;\n     *\n     * _.toPairsIn(new Foo);\n     * // => [['a', 1], ['b', 2], ['c', 3]] (iteration order is not guaranteed)\n     */\n    var toPairsIn = createToPairs(keysIn);\n\n    /**\n     * An alternative to `_.reduce`; this method transforms `object` to a new\n     * `accumulator` object which is the result of running each of its own\n     * enumerable string keyed properties thru `iteratee`, with each invocation\n     * potentially mutating the `accumulator` object. If `accumulator` is not\n     * provided, a new object with the same `[[Prototype]]` will be used. The\n     * iteratee is invoked with four arguments: (accumulator, value, key, object).\n     * Iteratee functions may exit iteration early by explicitly returning `false`.\n     *\n     * @static\n     * @memberOf _\n     * @since 1.3.0\n     * @category Object\n     * @param {Object} object The object to iterate over.\n     * @param {Function} [iteratee=_.identity] The function invoked per iteration.\n     * @param {*} [accumulator] The custom accumulator value.\n     * @returns {*} Returns the accumulated value.\n     * @example\n     *\n     * _.transform([2, 3, 4], function(result, n) {\n     *   result.push(n *= n);\n     *   return n % 2 == 0;\n     * }, []);\n     * // => [4, 9]\n     *\n     * _.transform({ 'a': 1, 'b': 2, 'c': 1 }, function(result, value, key) {\n     *   (result[value] || (result[value] = [])).push(key);\n     * }, {});\n     * // => { '1': ['a', 'c'], '2': ['b'] }\n     */\n    function transform(object, iteratee, accumulator) {\n      var isArr = isArray(object),\n          isArrLike = isArr || isBuffer(object) || isTypedArray(object);\n\n      iteratee = getIteratee(iteratee, 4);\n      if (accumulator == null) {\n        var Ctor = object && object.constructor;\n        if (isArrLike) {\n          accumulator = isArr ? new Ctor : [];\n        }\n        else if (isObject(object)) {\n          accumulator = isFunction(Ctor) ? baseCreate(getPrototype(object)) : {};\n        }\n        else {\n          accumulator = {};\n        }\n      }\n      (isArrLike ? arrayEach : baseForOwn)(object, function(value, index, object) {\n        return iteratee(accumulator, value, index, object);\n      });\n      return accumulator;\n    }\n\n    /**\n     * Removes the property at `path` of `object`.\n     *\n     * **Note:** This method mutates `object`.\n     *\n     * @static\n     * @memberOf _\n     * @since 4.0.0\n     * @category Object\n     * @param {Object} object The object to modify.\n     * @param {Array|string} path The path of the property to unset.\n     * @returns {boolean} Returns `true` if the property is deleted, else `false`.\n     * @example\n     *\n     * var object = { 'a': [{ 'b': { 'c': 7 } }] };\n     * _.unset(object, 'a[0].b.c');\n     * // => true\n     *\n     * console.log(object);\n     * // => { 'a': [{ 'b': {} }] };\n     *\n     * _.unset(object, ['a', '0', 'b', 'c']);\n     * // => true\n     *\n     * console.log(object);\n     * // => { 'a': [{ 'b': {} }] };\n     */\n    function unset(object, path) {\n      return object == null ? true : baseUnset(object, path);\n    }\n\n    /**\n     * This method is like `_.set` except that accepts `updater` to produce the\n     * value to set. Use `_.updateWith` to customize `path` creation. The `updater`\n     * is invoked with one argument: (value).\n     *\n     * **Note:** This method mutates `object`.\n     *\n     * @static\n     * @memberOf _\n     * @since 4.6.0\n     * @category Object\n     * @param {Object} object The object to modify.\n     * @param {Array|string} path The path of the property to set.\n     * @param {Function} updater The function to produce the updated value.\n     * @returns {Object} Returns `object`.\n     * @example\n     *\n     * var object = { 'a': [{ 'b': { 'c': 3 } }] };\n     *\n     * _.update(object, 'a[0].b.c', function(n) { return n * n; });\n     * console.log(object.a[0].b.c);\n     * // => 9\n     *\n     * _.update(object, 'x[0].y.z', function(n) { return n ? n + 1 : 0; });\n     * console.log(object.x[0].y.z);\n     * // => 0\n     */\n    function update(object, path, updater) {\n      return object == null ? object : baseUpdate(object, path, castFunction(updater));\n    }\n\n    /**\n     * This method is like `_.update` except that it accepts `customizer` which is\n     * invoked to produce the objects of `path`.  If `customizer` returns `undefined`\n     * path creation is handled by the method instead. The `customizer` is invoked\n     * with three arguments: (nsValue, key, nsObject).\n     *\n     * **Note:** This method mutates `object`.\n     *\n     * @static\n     * @memberOf _\n     * @since 4.6.0\n     * @category Object\n     * @param {Object} object The object to modify.\n     * @param {Array|string} path The path of the property to set.\n     * @param {Function} updater The function to produce the updated value.\n     * @param {Function} [customizer] The function to customize assigned values.\n     * @returns {Object} Returns `object`.\n     * @example\n     *\n     * var object = {};\n     *\n     * _.updateWith(object, '[0][1]', _.constant('a'), Object);\n     * // => { '0': { '1': 'a' } }\n     */\n    function updateWith(object, path, updater, customizer) {\n      customizer = typeof customizer == 'function' ? customizer : undefined;\n      return object == null ? object : baseUpdate(object, path, castFunction(updater), customizer);\n    }\n\n    /**\n     * Creates an array of the own enumerable string keyed property values of `object`.\n     *\n     * **Note:** Non-object values are coerced to objects.\n     *\n     * @static\n     * @since 0.1.0\n     * @memberOf _\n     * @category Object\n     * @param {Object} object The object to query.\n     * @returns {Array} Returns the array of property values.\n     * @example\n     *\n     * function Foo() {\n     *   this.a = 1;\n     *   this.b = 2;\n     * }\n     *\n     * Foo.prototype.c = 3;\n     *\n     * _.values(new Foo);\n     * // => [1, 2] (iteration order is not guaranteed)\n     *\n     * _.values('hi');\n     * // => ['h', 'i']\n     */\n    function values(object) {\n      return object == null ? [] : baseValues(object, keys(object));\n    }\n\n    /**\n     * Creates an array of the own and inherited enumerable string keyed property\n     * values of `object`.\n     *\n     * **Note:** Non-object values are coerced to objects.\n     *\n     * @static\n     * @memberOf _\n     * @since 3.0.0\n     * @category Object\n     * @param {Object} object The object to query.\n     * @returns {Array} Returns the array of property values.\n     * @example\n     *\n     * function Foo() {\n     *   this.a = 1;\n     *   this.b = 2;\n     * }\n     *\n     * Foo.prototype.c = 3;\n     *\n     * _.valuesIn(new Foo);\n     * // => [1, 2, 3] (iteration order is not guaranteed)\n     */\n    function valuesIn(object) {\n      return object == null ? [] : baseValues(object, keysIn(object));\n    }\n\n    /*------------------------------------------------------------------------*/\n\n    /**\n     * Clamps `number` within the inclusive `lower` and `upper` bounds.\n     *\n     * @static\n     * @memberOf _\n     * @since 4.0.0\n     * @category Number\n     * @param {number} number The number to clamp.\n     * @param {number} [lower] The lower bound.\n     * @param {number} upper The upper bound.\n     * @returns {number} Returns the clamped number.\n     * @example\n     *\n     * _.clamp(-10, -5, 5);\n     * // => -5\n     *\n     * _.clamp(10, -5, 5);\n     * // => 5\n     */\n    function clamp(number, lower, upper) {\n      if (upper === undefined) {\n        upper = lower;\n        lower = undefined;\n      }\n      if (upper !== undefined) {\n        upper = toNumber(upper);\n        upper = upper === upper ? upper : 0;\n      }\n      if (lower !== undefined) {\n        lower = toNumber(lower);\n        lower = lower === lower ? lower : 0;\n      }\n      return baseClamp(toNumber(number), lower, upper);\n    }\n\n    /**\n     * Checks if `n` is between `start` and up to, but not including, `end`. If\n     * `end` is not specified, it's set to `start` with `start` then set to `0`.\n     * If `start` is greater than `end` the params are swapped to support\n     * negative ranges.\n     *\n     * @static\n     * @memberOf _\n     * @since 3.3.0\n     * @category Number\n     * @param {number} number The number to check.\n     * @param {number} [start=0] The start of the range.\n     * @param {number} end The end of the range.\n     * @returns {boolean} Returns `true` if `number` is in the range, else `false`.\n     * @see _.range, _.rangeRight\n     * @example\n     *\n     * _.inRange(3, 2, 4);\n     * // => true\n     *\n     * _.inRange(4, 8);\n     * // => true\n     *\n     * _.inRange(4, 2);\n     * // => false\n     *\n     * _.inRange(2, 2);\n     * // => false\n     *\n     * _.inRange(1.2, 2);\n     * // => true\n     *\n     * _.inRange(5.2, 4);\n     * // => false\n     *\n     * _.inRange(-3, -2, -6);\n     * // => true\n     */\n    function inRange(number, start, end) {\n      start = toFinite(start);\n      if (end === undefined) {\n        end = start;\n        start = 0;\n      } else {\n        end = toFinite(end);\n      }\n      number = toNumber(number);\n      return baseInRange(number, start, end);\n    }\n\n    /**\n     * Produces a random number between the inclusive `lower` and `upper` bounds.\n     * If only one argument is provided a number between `0` and the given number\n     * is returned. If `floating` is `true`, or either `lower` or `upper` are\n     * floats, a floating-point number is returned instead of an integer.\n     *\n     * **Note:** JavaScript follows the IEEE-754 standard for resolving\n     * floating-point values which can produce unexpected results.\n     *\n     * @static\n     * @memberOf _\n     * @since 0.7.0\n     * @category Number\n     * @param {number} [lower=0] The lower bound.\n     * @param {number} [upper=1] The upper bound.\n     * @param {boolean} [floating] Specify returning a floating-point number.\n     * @returns {number} Returns the random number.\n     * @example\n     *\n     * _.random(0, 5);\n     * // => an integer between 0 and 5\n     *\n     * _.random(5);\n     * // => also an integer between 0 and 5\n     *\n     * _.random(5, true);\n     * // => a floating-point number between 0 and 5\n     *\n     * _.random(1.2, 5.2);\n     * // => a floating-point number between 1.2 and 5.2\n     */\n    function random(lower, upper, floating) {\n      if (floating && typeof floating != 'boolean' && isIterateeCall(lower, upper, floating)) {\n        upper = floating = undefined;\n      }\n      if (floating === undefined) {\n        if (typeof upper == 'boolean') {\n          floating = upper;\n          upper = undefined;\n        }\n        else if (typeof lower == 'boolean') {\n          floating = lower;\n          lower = undefined;\n        }\n      }\n      if (lower === undefined && upper === undefined) {\n        lower = 0;\n        upper = 1;\n      }\n      else {\n        lower = toFinite(lower);\n        if (upper === undefined) {\n          upper = lower;\n          lower = 0;\n        } else {\n          upper = toFinite(upper);\n        }\n      }\n      if (lower > upper) {\n        var temp = lower;\n        lower = upper;\n        upper = temp;\n      }\n      if (floating || lower % 1 || upper % 1) {\n        var rand = nativeRandom();\n        return nativeMin(lower + (rand * (upper - lower + freeParseFloat('1e-' + ((rand + '').length - 1)))), upper);\n      }\n      return baseRandom(lower, upper);\n    }\n\n    /*------------------------------------------------------------------------*/\n\n    /**\n     * Converts `string` to [camel case](https://en.wikipedia.org/wiki/CamelCase).\n     *\n     * @static\n     * @memberOf _\n     * @since 3.0.0\n     * @category String\n     * @param {string} [string=''] The string to convert.\n     * @returns {string} Returns the camel cased string.\n     * @example\n     *\n     * _.camelCase('Foo Bar');\n     * // => 'fooBar'\n     *\n     * _.camelCase('--foo-bar--');\n     * // => 'fooBar'\n     *\n     * _.camelCase('__FOO_BAR__');\n     * // => 'fooBar'\n     */\n    var camelCase = createCompounder(function(result, word, index) {\n      word = word.toLowerCase();\n      return result + (index ? capitalize(word) : word);\n    });\n\n    /**\n     * Converts the first character of `string` to upper case and the remaining\n     * to lower case.\n     *\n     * @static\n     * @memberOf _\n     * @since 3.0.0\n     * @category String\n     * @param {string} [string=''] The string to capitalize.\n     * @returns {string} Returns the capitalized string.\n     * @example\n     *\n     * _.capitalize('FRED');\n     * // => 'Fred'\n     */\n    function capitalize(string) {\n      return upperFirst(toString(string).toLowerCase());\n    }\n\n    /**\n     * Deburrs `string` by converting\n     * [Latin-1 Supplement](https://en.wikipedia.org/wiki/Latin-1_Supplement_(Unicode_block)#Character_table)\n     * and [Latin Extended-A](https://en.wikipedia.org/wiki/Latin_Extended-A)\n     * letters to basic Latin letters and removing\n     * [combining diacritical marks](https://en.wikipedia.org/wiki/Combining_Diacritical_Marks).\n     *\n     * @static\n     * @memberOf _\n     * @since 3.0.0\n     * @category String\n     * @param {string} [string=''] The string to deburr.\n     * @returns {string} Returns the deburred string.\n     * @example\n     *\n     * _.deburr('déjà vu');\n     * // => 'deja vu'\n     */\n    function deburr(string) {\n      string = toString(string);\n      return string && string.replace(reLatin, deburrLetter).replace(reComboMark, '');\n    }\n\n    /**\n     * Checks if `string` ends with the given target string.\n     *\n     * @static\n     * @memberOf _\n     * @since 3.0.0\n     * @category String\n     * @param {string} [string=''] The string to inspect.\n     * @param {string} [target] The string to search for.\n     * @param {number} [position=string.length] The position to search up to.\n     * @returns {boolean} Returns `true` if `string` ends with `target`,\n     *  else `false`.\n     * @example\n     *\n     * _.endsWith('abc', 'c');\n     * // => true\n     *\n     * _.endsWith('abc', 'b');\n     * // => false\n     *\n     * _.endsWith('abc', 'b', 2);\n     * // => true\n     */\n    function endsWith(string, target, position) {\n      string = toString(string);\n      target = baseToString(target);\n\n      var length = string.length;\n      position = position === undefined\n        ? length\n        : baseClamp(toInteger(position), 0, length);\n\n      var end = position;\n      position -= target.length;\n      return position >= 0 && string.slice(position, end) == target;\n    }\n\n    /**\n     * Converts the characters \"&\", \"<\", \">\", '\"', and \"'\" in `string` to their\n     * corresponding HTML entities.\n     *\n     * **Note:** No other characters are escaped. To escape additional\n     * characters use a third-party library like [_he_](https://mths.be/he).\n     *\n     * Though the \">\" character is escaped for symmetry, characters like\n     * \">\" and \"/\" don't need escaping in HTML and have no special meaning\n     * unless they're part of a tag or unquoted attribute value. See\n     * [Mathias Bynens's article](https://mathiasbynens.be/notes/ambiguous-ampersands)\n     * (under \"semi-related fun fact\") for more details.\n     *\n     * When working with HTML you should always\n     * [quote attribute values](http://wonko.com/post/html-escaping) to reduce\n     * XSS vectors.\n     *\n     * @static\n     * @since 0.1.0\n     * @memberOf _\n     * @category String\n     * @param {string} [string=''] The string to escape.\n     * @returns {string} Returns the escaped string.\n     * @example\n     *\n     * _.escape('fred, barney, & pebbles');\n     * // => 'fred, barney, &amp; pebbles'\n     */\n    function escape(string) {\n      string = toString(string);\n      return (string && reHasUnescapedHtml.test(string))\n        ? string.replace(reUnescapedHtml, escapeHtmlChar)\n        : string;\n    }\n\n    /**\n     * Escapes the `RegExp` special characters \"^\", \"$\", \"\\\", \".\", \"*\", \"+\",\n     * \"?\", \"(\", \")\", \"[\", \"]\", \"{\", \"}\", and \"|\" in `string`.\n     *\n     * @static\n     * @memberOf _\n     * @since 3.0.0\n     * @category String\n     * @param {string} [string=''] The string to escape.\n     * @returns {string} Returns the escaped string.\n     * @example\n     *\n     * _.escapeRegExp('[lodash](https://lodash.com/)');\n     * // => '\\[lodash\\]\\(https://lodash\\.com/\\)'\n     */\n    function escapeRegExp(string) {\n      string = toString(string);\n      return (string && reHasRegExpChar.test(string))\n        ? string.replace(reRegExpChar, '\\\\$&')\n        : string;\n    }\n\n    /**\n     * Converts `string` to\n     * [kebab case](https://en.wikipedia.org/wiki/Letter_case#Special_case_styles).\n     *\n     * @static\n     * @memberOf _\n     * @since 3.0.0\n     * @category String\n     * @param {string} [string=''] The string to convert.\n     * @returns {string} Returns the kebab cased string.\n     * @example\n     *\n     * _.kebabCase('Foo Bar');\n     * // => 'foo-bar'\n     *\n     * _.kebabCase('fooBar');\n     * // => 'foo-bar'\n     *\n     * _.kebabCase('__FOO_BAR__');\n     * // => 'foo-bar'\n     */\n    var kebabCase = createCompounder(function(result, word, index) {\n      return result + (index ? '-' : '') + word.toLowerCase();\n    });\n\n    /**\n     * Converts `string`, as space separated words, to lower case.\n     *\n     * @static\n     * @memberOf _\n     * @since 4.0.0\n     * @category String\n     * @param {string} [string=''] The string to convert.\n     * @returns {string} Returns the lower cased string.\n     * @example\n     *\n     * _.lowerCase('--Foo-Bar--');\n     * // => 'foo bar'\n     *\n     * _.lowerCase('fooBar');\n     * // => 'foo bar'\n     *\n     * _.lowerCase('__FOO_BAR__');\n     * // => 'foo bar'\n     */\n    var lowerCase = createCompounder(function(result, word, index) {\n      return result + (index ? ' ' : '') + word.toLowerCase();\n    });\n\n    /**\n     * Converts the first character of `string` to lower case.\n     *\n     * @static\n     * @memberOf _\n     * @since 4.0.0\n     * @category String\n     * @param {string} [string=''] The string to convert.\n     * @returns {string} Returns the converted string.\n     * @example\n     *\n     * _.lowerFirst('Fred');\n     * // => 'fred'\n     *\n     * _.lowerFirst('FRED');\n     * // => 'fRED'\n     */\n    var lowerFirst = createCaseFirst('toLowerCase');\n\n    /**\n     * Pads `string` on the left and right sides if it's shorter than `length`.\n     * Padding characters are truncated if they can't be evenly divided by `length`.\n     *\n     * @static\n     * @memberOf _\n     * @since 3.0.0\n     * @category String\n     * @param {string} [string=''] The string to pad.\n     * @param {number} [length=0] The padding length.\n     * @param {string} [chars=' '] The string used as padding.\n     * @returns {string} Returns the padded string.\n     * @example\n     *\n     * _.pad('abc', 8);\n     * // => '  abc   '\n     *\n     * _.pad('abc', 8, '_-');\n     * // => '_-abc_-_'\n     *\n     * _.pad('abc', 3);\n     * // => 'abc'\n     */\n    function pad(string, length, chars) {\n      string = toString(string);\n      length = toInteger(length);\n\n      var strLength = length ? stringSize(string) : 0;\n      if (!length || strLength >= length) {\n        return string;\n      }\n      var mid = (length - strLength) / 2;\n      return (\n        createPadding(nativeFloor(mid), chars) +\n        string +\n        createPadding(nativeCeil(mid), chars)\n      );\n    }\n\n    /**\n     * Pads `string` on the right side if it's shorter than `length`. Padding\n     * characters are truncated if they exceed `length`.\n     *\n     * @static\n     * @memberOf _\n     * @since 4.0.0\n     * @category String\n     * @param {string} [string=''] The string to pad.\n     * @param {number} [length=0] The padding length.\n     * @param {string} [chars=' '] The string used as padding.\n     * @returns {string} Returns the padded string.\n     * @example\n     *\n     * _.padEnd('abc', 6);\n     * // => 'abc   '\n     *\n     * _.padEnd('abc', 6, '_-');\n     * // => 'abc_-_'\n     *\n     * _.padEnd('abc', 3);\n     * // => 'abc'\n     */\n    function padEnd(string, length, chars) {\n      string = toString(string);\n      length = toInteger(length);\n\n      var strLength = length ? stringSize(string) : 0;\n      return (length && strLength < length)\n        ? (string + createPadding(length - strLength, chars))\n        : string;\n    }\n\n    /**\n     * Pads `string` on the left side if it's shorter than `length`. Padding\n     * characters are truncated if they exceed `length`.\n     *\n     * @static\n     * @memberOf _\n     * @since 4.0.0\n     * @category String\n     * @param {string} [string=''] The string to pad.\n     * @param {number} [length=0] The padding length.\n     * @param {string} [chars=' '] The string used as padding.\n     * @returns {string} Returns the padded string.\n     * @example\n     *\n     * _.padStart('abc', 6);\n     * // => '   abc'\n     *\n     * _.padStart('abc', 6, '_-');\n     * // => '_-_abc'\n     *\n     * _.padStart('abc', 3);\n     * // => 'abc'\n     */\n    function padStart(string, length, chars) {\n      string = toString(string);\n      length = toInteger(length);\n\n      var strLength = length ? stringSize(string) : 0;\n      return (length && strLength < length)\n        ? (createPadding(length - strLength, chars) + string)\n        : string;\n    }\n\n    /**\n     * Converts `string` to an integer of the specified radix. If `radix` is\n     * `undefined` or `0`, a `radix` of `10` is used unless `value` is a\n     * hexadecimal, in which case a `radix` of `16` is used.\n     *\n     * **Note:** This method aligns with the\n     * [ES5 implementation](https://es5.github.io/#x15.1.2.2) of `parseInt`.\n     *\n     * @static\n     * @memberOf _\n     * @since 1.1.0\n     * @category String\n     * @param {string} string The string to convert.\n     * @param {number} [radix=10] The radix to interpret `value` by.\n     * @param- {Object} [guard] Enables use as an iteratee for methods like `_.map`.\n     * @returns {number} Returns the converted integer.\n     * @example\n     *\n     * _.parseInt('08');\n     * // => 8\n     *\n     * _.map(['6', '08', '10'], _.parseInt);\n     * // => [6, 8, 10]\n     */\n    function parseInt(string, radix, guard) {\n      if (guard || radix == null) {\n        radix = 0;\n      } else if (radix) {\n        radix = +radix;\n      }\n      return nativeParseInt(toString(string).replace(reTrimStart, ''), radix || 0);\n    }\n\n    /**\n     * Repeats the given string `n` times.\n     *\n     * @static\n     * @memberOf _\n     * @since 3.0.0\n     * @category String\n     * @param {string} [string=''] The string to repeat.\n     * @param {number} [n=1] The number of times to repeat the string.\n     * @param- {Object} [guard] Enables use as an iteratee for methods like `_.map`.\n     * @returns {string} Returns the repeated string.\n     * @example\n     *\n     * _.repeat('*', 3);\n     * // => '***'\n     *\n     * _.repeat('abc', 2);\n     * // => 'abcabc'\n     *\n     * _.repeat('abc', 0);\n     * // => ''\n     */\n    function repeat(string, n, guard) {\n      if ((guard ? isIterateeCall(string, n, guard) : n === undefined)) {\n        n = 1;\n      } else {\n        n = toInteger(n);\n      }\n      return baseRepeat(toString(string), n);\n    }\n\n    /**\n     * Replaces matches for `pattern` in `string` with `replacement`.\n     *\n     * **Note:** This method is based on\n     * [`String#replace`](https://mdn.io/String/replace).\n     *\n     * @static\n     * @memberOf _\n     * @since 4.0.0\n     * @category String\n     * @param {string} [string=''] The string to modify.\n     * @param {RegExp|string} pattern The pattern to replace.\n     * @param {Function|string} replacement The match replacement.\n     * @returns {string} Returns the modified string.\n     * @example\n     *\n     * _.replace('Hi Fred', 'Fred', 'Barney');\n     * // => 'Hi Barney'\n     */\n    function replace() {\n      var args = arguments,\n          string = toString(args[0]);\n\n      return args.length < 3 ? string : string.replace(args[1], args[2]);\n    }\n\n    /**\n     * Converts `string` to\n     * [snake case](https://en.wikipedia.org/wiki/Snake_case).\n     *\n     * @static\n     * @memberOf _\n     * @since 3.0.0\n     * @category String\n     * @param {string} [string=''] The string to convert.\n     * @returns {string} Returns the snake cased string.\n     * @example\n     *\n     * _.snakeCase('Foo Bar');\n     * // => 'foo_bar'\n     *\n     * _.snakeCase('fooBar');\n     * // => 'foo_bar'\n     *\n     * _.snakeCase('--FOO-BAR--');\n     * // => 'foo_bar'\n     */\n    var snakeCase = createCompounder(function(result, word, index) {\n      return result + (index ? '_' : '') + word.toLowerCase();\n    });\n\n    /**\n     * Splits `string` by `separator`.\n     *\n     * **Note:** This method is based on\n     * [`String#split`](https://mdn.io/String/split).\n     *\n     * @static\n     * @memberOf _\n     * @since 4.0.0\n     * @category String\n     * @param {string} [string=''] The string to split.\n     * @param {RegExp|string} separator The separator pattern to split by.\n     * @param {number} [limit] The length to truncate results to.\n     * @returns {Array} Returns the string segments.\n     * @example\n     *\n     * _.split('a-b-c', '-', 2);\n     * // => ['a', 'b']\n     */\n    function split(string, separator, limit) {\n      if (limit && typeof limit != 'number' && isIterateeCall(string, separator, limit)) {\n        separator = limit = undefined;\n      }\n      limit = limit === undefined ? MAX_ARRAY_LENGTH : limit >>> 0;\n      if (!limit) {\n        return [];\n      }\n      string = toString(string);\n      if (string && (\n            typeof separator == 'string' ||\n            (separator != null && !isRegExp(separator))\n          )) {\n        separator = baseToString(separator);\n        if (!separator && hasUnicode(string)) {\n          return castSlice(stringToArray(string), 0, limit);\n        }\n      }\n      return string.split(separator, limit);\n    }\n\n    /**\n     * Converts `string` to\n     * [start case](https://en.wikipedia.org/wiki/Letter_case#Stylistic_or_specialised_usage).\n     *\n     * @static\n     * @memberOf _\n     * @since 3.1.0\n     * @category String\n     * @param {string} [string=''] The string to convert.\n     * @returns {string} Returns the start cased string.\n     * @example\n     *\n     * _.startCase('--foo-bar--');\n     * // => 'Foo Bar'\n     *\n     * _.startCase('fooBar');\n     * // => 'Foo Bar'\n     *\n     * _.startCase('__FOO_BAR__');\n     * // => 'FOO BAR'\n     */\n    var startCase = createCompounder(function(result, word, index) {\n      return result + (index ? ' ' : '') + upperFirst(word);\n    });\n\n    /**\n     * Checks if `string` starts with the given target string.\n     *\n     * @static\n     * @memberOf _\n     * @since 3.0.0\n     * @category String\n     * @param {string} [string=''] The string to inspect.\n     * @param {string} [target] The string to search for.\n     * @param {number} [position=0] The position to search from.\n     * @returns {boolean} Returns `true` if `string` starts with `target`,\n     *  else `false`.\n     * @example\n     *\n     * _.startsWith('abc', 'a');\n     * // => true\n     *\n     * _.startsWith('abc', 'b');\n     * // => false\n     *\n     * _.startsWith('abc', 'b', 1);\n     * // => true\n     */\n    function startsWith(string, target, position) {\n      string = toString(string);\n      position = position == null\n        ? 0\n        : baseClamp(toInteger(position), 0, string.length);\n\n      target = baseToString(target);\n      return string.slice(position, position + target.length) == target;\n    }\n\n    /**\n     * Creates a compiled template function that can interpolate data properties\n     * in \"interpolate\" delimiters, HTML-escape interpolated data properties in\n     * \"escape\" delimiters, and execute JavaScript in \"evaluate\" delimiters. Data\n     * properties may be accessed as free variables in the template. If a setting\n     * object is given, it takes precedence over `_.templateSettings` values.\n     *\n     * **Note:** In the development build `_.template` utilizes\n     * [sourceURLs](http://www.html5rocks.com/en/tutorials/developertools/sourcemaps/#toc-sourceurl)\n     * for easier debugging.\n     *\n     * For more information on precompiling templates see\n     * [lodash's custom builds documentation](https://lodash.com/custom-builds).\n     *\n     * For more information on Chrome extension sandboxes see\n     * [Chrome's extensions documentation](https://developer.chrome.com/extensions/sandboxingEval).\n     *\n     * @static\n     * @since 0.1.0\n     * @memberOf _\n     * @category String\n     * @param {string} [string=''] The template string.\n     * @param {Object} [options={}] The options object.\n     * @param {RegExp} [options.escape=_.templateSettings.escape]\n     *  The HTML \"escape\" delimiter.\n     * @param {RegExp} [options.evaluate=_.templateSettings.evaluate]\n     *  The \"evaluate\" delimiter.\n     * @param {Object} [options.imports=_.templateSettings.imports]\n     *  An object to import into the template as free variables.\n     * @param {RegExp} [options.interpolate=_.templateSettings.interpolate]\n     *  The \"interpolate\" delimiter.\n     * @param {string} [options.sourceURL='lodash.templateSources[n]']\n     *  The sourceURL of the compiled template.\n     * @param {string} [options.variable='obj']\n     *  The data object variable name.\n     * @param- {Object} [guard] Enables use as an iteratee for methods like `_.map`.\n     * @returns {Function} Returns the compiled template function.\n     * @example\n     *\n     * // Use the \"interpolate\" delimiter to create a compiled template.\n     * var compiled = _.template('hello <%= user %>!');\n     * compiled({ 'user': 'fred' });\n     * // => 'hello fred!'\n     *\n     * // Use the HTML \"escape\" delimiter to escape data property values.\n     * var compiled = _.template('<b><%- value %></b>');\n     * compiled({ 'value': '<script>' });\n     * // => '<b>&lt;script&gt;</b>'\n     *\n     * // Use the \"evaluate\" delimiter to execute JavaScript and generate HTML.\n     * var compiled = _.template('<% _.forEach(users, function(user) { %><li><%- user %></li><% }); %>');\n     * compiled({ 'users': ['fred', 'barney'] });\n     * // => '<li>fred</li><li>barney</li>'\n     *\n     * // Use the internal `print` function in \"evaluate\" delimiters.\n     * var compiled = _.template('<% print(\"hello \" + user); %>!');\n     * compiled({ 'user': 'barney' });\n     * // => 'hello barney!'\n     *\n     * // Use the ES template literal delimiter as an \"interpolate\" delimiter.\n     * // Disable support by replacing the \"interpolate\" delimiter.\n     * var compiled = _.template('hello ${ user }!');\n     * compiled({ 'user': 'pebbles' });\n     * // => 'hello pebbles!'\n     *\n     * // Use backslashes to treat delimiters as plain text.\n     * var compiled = _.template('<%= \"\\\\<%- value %\\\\>\" %>');\n     * compiled({ 'value': 'ignored' });\n     * // => '<%- value %>'\n     *\n     * // Use the `imports` option to import `jQuery` as `jq`.\n     * var text = '<% jq.each(users, function(user) { %><li><%- user %></li><% }); %>';\n     * var compiled = _.template(text, { 'imports': { 'jq': jQuery } });\n     * compiled({ 'users': ['fred', 'barney'] });\n     * // => '<li>fred</li><li>barney</li>'\n     *\n     * // Use the `sourceURL` option to specify a custom sourceURL for the template.\n     * var compiled = _.template('hello <%= user %>!', { 'sourceURL': '/basic/greeting.jst' });\n     * compiled(data);\n     * // => Find the source of \"greeting.jst\" under the Sources tab or Resources panel of the web inspector.\n     *\n     * // Use the `variable` option to ensure a with-statement isn't used in the compiled template.\n     * var compiled = _.template('hi <%= data.user %>!', { 'variable': 'data' });\n     * compiled.source;\n     * // => function(data) {\n     * //   var __t, __p = '';\n     * //   __p += 'hi ' + ((__t = ( data.user )) == null ? '' : __t) + '!';\n     * //   return __p;\n     * // }\n     *\n     * // Use custom template delimiters.\n     * _.templateSettings.interpolate = /{{([\\s\\S]+?)}}/g;\n     * var compiled = _.template('hello {{ user }}!');\n     * compiled({ 'user': 'mustache' });\n     * // => 'hello mustache!'\n     *\n     * // Use the `source` property to inline compiled templates for meaningful\n     * // line numbers in error messages and stack traces.\n     * fs.writeFileSync(path.join(process.cwd(), 'jst.js'), '\\\n     *   var JST = {\\\n     *     \"main\": ' + _.template(mainText).source + '\\\n     *   };\\\n     * ');\n     */\n    function template(string, options, guard) {\n      // Based on John Resig's `tmpl` implementation\n      // (http://ejohn.org/blog/javascript-micro-templating/)\n      // and Laura Doktorova's doT.js (https://github.com/olado/doT).\n      var settings = lodash.templateSettings;\n\n      if (guard && isIterateeCall(string, options, guard)) {\n        options = undefined;\n      }\n      string = toString(string);\n      options = assignInWith({}, options, settings, customDefaultsAssignIn);\n\n      var imports = assignInWith({}, options.imports, settings.imports, customDefaultsAssignIn),\n          importsKeys = keys(imports),\n          importsValues = baseValues(imports, importsKeys);\n\n      var isEscaping,\n          isEvaluating,\n          index = 0,\n          interpolate = options.interpolate || reNoMatch,\n          source = \"__p += '\";\n\n      // Compile the regexp to match each delimiter.\n      var reDelimiters = RegExp(\n        (options.escape || reNoMatch).source + '|' +\n        interpolate.source + '|' +\n        (interpolate === reInterpolate ? reEsTemplate : reNoMatch).source + '|' +\n        (options.evaluate || reNoMatch).source + '|$'\n      , 'g');\n\n      // Use a sourceURL for easier debugging.\n      var sourceURL = '//# sourceURL=' +\n        ('sourceURL' in options\n          ? options.sourceURL\n          : ('lodash.templateSources[' + (++templateCounter) + ']')\n        ) + '\\n';\n\n      string.replace(reDelimiters, function(match, escapeValue, interpolateValue, esTemplateValue, evaluateValue, offset) {\n        interpolateValue || (interpolateValue = esTemplateValue);\n\n        // Escape characters that can't be included in string literals.\n        source += string.slice(index, offset).replace(reUnescapedString, escapeStringChar);\n\n        // Replace delimiters with snippets.\n        if (escapeValue) {\n          isEscaping = true;\n          source += \"' +\\n__e(\" + escapeValue + \") +\\n'\";\n        }\n        if (evaluateValue) {\n          isEvaluating = true;\n          source += \"';\\n\" + evaluateValue + \";\\n__p += '\";\n        }\n        if (interpolateValue) {\n          source += \"' +\\n((__t = (\" + interpolateValue + \")) == null ? '' : __t) +\\n'\";\n        }\n        index = offset + match.length;\n\n        // The JS engine embedded in Adobe products needs `match` returned in\n        // order to produce the correct `offset` value.\n        return match;\n      });\n\n      source += \"';\\n\";\n\n      // If `variable` is not specified wrap a with-statement around the generated\n      // code to add the data object to the top of the scope chain.\n      var variable = options.variable;\n      if (!variable) {\n        source = 'with (obj) {\\n' + source + '\\n}\\n';\n      }\n      // Cleanup code by stripping empty strings.\n      source = (isEvaluating ? source.replace(reEmptyStringLeading, '') : source)\n        .replace(reEmptyStringMiddle, '$1')\n        .replace(reEmptyStringTrailing, '$1;');\n\n      // Frame code as the function body.\n      source = 'function(' + (variable || 'obj') + ') {\\n' +\n        (variable\n          ? ''\n          : 'obj || (obj = {});\\n'\n        ) +\n        \"var __t, __p = ''\" +\n        (isEscaping\n           ? ', __e = _.escape'\n           : ''\n        ) +\n        (isEvaluating\n          ? ', __j = Array.prototype.join;\\n' +\n            \"function print() { __p += __j.call(arguments, '') }\\n\"\n          : ';\\n'\n        ) +\n        source +\n        'return __p\\n}';\n\n      var result = attempt(function() {\n        return Function(importsKeys, sourceURL + 'return ' + source)\n          .apply(undefined, importsValues);\n      });\n\n      // Provide the compiled function's source by its `toString` method or\n      // the `source` property as a convenience for inlining compiled templates.\n      result.source = source;\n      if (isError(result)) {\n        throw result;\n      }\n      return result;\n    }\n\n    /**\n     * Converts `string`, as a whole, to lower case just like\n     * [String#toLowerCase](https://mdn.io/toLowerCase).\n     *\n     * @static\n     * @memberOf _\n     * @since 4.0.0\n     * @category String\n     * @param {string} [string=''] The string to convert.\n     * @returns {string} Returns the lower cased string.\n     * @example\n     *\n     * _.toLower('--Foo-Bar--');\n     * // => '--foo-bar--'\n     *\n     * _.toLower('fooBar');\n     * // => 'foobar'\n     *\n     * _.toLower('__FOO_BAR__');\n     * // => '__foo_bar__'\n     */\n    function toLower(value) {\n      return toString(value).toLowerCase();\n    }\n\n    /**\n     * Converts `string`, as a whole, to upper case just like\n     * [String#toUpperCase](https://mdn.io/toUpperCase).\n     *\n     * @static\n     * @memberOf _\n     * @since 4.0.0\n     * @category String\n     * @param {string} [string=''] The string to convert.\n     * @returns {string} Returns the upper cased string.\n     * @example\n     *\n     * _.toUpper('--foo-bar--');\n     * // => '--FOO-BAR--'\n     *\n     * _.toUpper('fooBar');\n     * // => 'FOOBAR'\n     *\n     * _.toUpper('__foo_bar__');\n     * // => '__FOO_BAR__'\n     */\n    function toUpper(value) {\n      return toString(value).toUpperCase();\n    }\n\n    /**\n     * Removes leading and trailing whitespace or specified characters from `string`.\n     *\n     * @static\n     * @memberOf _\n     * @since 3.0.0\n     * @category String\n     * @param {string} [string=''] The string to trim.\n     * @param {string} [chars=whitespace] The characters to trim.\n     * @param- {Object} [guard] Enables use as an iteratee for methods like `_.map`.\n     * @returns {string} Returns the trimmed string.\n     * @example\n     *\n     * _.trim('  abc  ');\n     * // => 'abc'\n     *\n     * _.trim('-_-abc-_-', '_-');\n     * // => 'abc'\n     *\n     * _.map(['  foo  ', '  bar  '], _.trim);\n     * // => ['foo', 'bar']\n     */\n    function trim(string, chars, guard) {\n      string = toString(string);\n      if (string && (guard || chars === undefined)) {\n        return string.replace(reTrim, '');\n      }\n      if (!string || !(chars = baseToString(chars))) {\n        return string;\n      }\n      var strSymbols = stringToArray(string),\n          chrSymbols = stringToArray(chars),\n          start = charsStartIndex(strSymbols, chrSymbols),\n          end = charsEndIndex(strSymbols, chrSymbols) + 1;\n\n      return castSlice(strSymbols, start, end).join('');\n    }\n\n    /**\n     * Removes trailing whitespace or specified characters from `string`.\n     *\n     * @static\n     * @memberOf _\n     * @since 4.0.0\n     * @category String\n     * @param {string} [string=''] The string to trim.\n     * @param {string} [chars=whitespace] The characters to trim.\n     * @param- {Object} [guard] Enables use as an iteratee for methods like `_.map`.\n     * @returns {string} Returns the trimmed string.\n     * @example\n     *\n     * _.trimEnd('  abc  ');\n     * // => '  abc'\n     *\n     * _.trimEnd('-_-abc-_-', '_-');\n     * // => '-_-abc'\n     */\n    function trimEnd(string, chars, guard) {\n      string = toString(string);\n      if (string && (guard || chars === undefined)) {\n        return string.replace(reTrimEnd, '');\n      }\n      if (!string || !(chars = baseToString(chars))) {\n        return string;\n      }\n      var strSymbols = stringToArray(string),\n          end = charsEndIndex(strSymbols, stringToArray(chars)) + 1;\n\n      return castSlice(strSymbols, 0, end).join('');\n    }\n\n    /**\n     * Removes leading whitespace or specified characters from `string`.\n     *\n     * @static\n     * @memberOf _\n     * @since 4.0.0\n     * @category String\n     * @param {string} [string=''] The string to trim.\n     * @param {string} [chars=whitespace] The characters to trim.\n     * @param- {Object} [guard] Enables use as an iteratee for methods like `_.map`.\n     * @returns {string} Returns the trimmed string.\n     * @example\n     *\n     * _.trimStart('  abc  ');\n     * // => 'abc  '\n     *\n     * _.trimStart('-_-abc-_-', '_-');\n     * // => 'abc-_-'\n     */\n    function trimStart(string, chars, guard) {\n      string = toString(string);\n      if (string && (guard || chars === undefined)) {\n        return string.replace(reTrimStart, '');\n      }\n      if (!string || !(chars = baseToString(chars))) {\n        return string;\n      }\n      var strSymbols = stringToArray(string),\n          start = charsStartIndex(strSymbols, stringToArray(chars));\n\n      return castSlice(strSymbols, start).join('');\n    }\n\n    /**\n     * Truncates `string` if it's longer than the given maximum string length.\n     * The last characters of the truncated string are replaced with the omission\n     * string which defaults to \"...\".\n     *\n     * @static\n     * @memberOf _\n     * @since 4.0.0\n     * @category String\n     * @param {string} [string=''] The string to truncate.\n     * @param {Object} [options={}] The options object.\n     * @param {number} [options.length=30] The maximum string length.\n     * @param {string} [options.omission='...'] The string to indicate text is omitted.\n     * @param {RegExp|string} [options.separator] The separator pattern to truncate to.\n     * @returns {string} Returns the truncated string.\n     * @example\n     *\n     * _.truncate('hi-diddly-ho there, neighborino');\n     * // => 'hi-diddly-ho there, neighbo...'\n     *\n     * _.truncate('hi-diddly-ho there, neighborino', {\n     *   'length': 24,\n     *   'separator': ' '\n     * });\n     * // => 'hi-diddly-ho there,...'\n     *\n     * _.truncate('hi-diddly-ho there, neighborino', {\n     *   'length': 24,\n     *   'separator': /,? +/\n     * });\n     * // => 'hi-diddly-ho there...'\n     *\n     * _.truncate('hi-diddly-ho there, neighborino', {\n     *   'omission': ' [...]'\n     * });\n     * // => 'hi-diddly-ho there, neig [...]'\n     */\n    function truncate(string, options) {\n      var length = DEFAULT_TRUNC_LENGTH,\n          omission = DEFAULT_TRUNC_OMISSION;\n\n      if (isObject(options)) {\n        var separator = 'separator' in options ? options.separator : separator;\n        length = 'length' in options ? toInteger(options.length) : length;\n        omission = 'omission' in options ? baseToString(options.omission) : omission;\n      }\n      string = toString(string);\n\n      var strLength = string.length;\n      if (hasUnicode(string)) {\n        var strSymbols = stringToArray(string);\n        strLength = strSymbols.length;\n      }\n      if (length >= strLength) {\n        return string;\n      }\n      var end = length - stringSize(omission);\n      if (end < 1) {\n        return omission;\n      }\n      var result = strSymbols\n        ? castSlice(strSymbols, 0, end).join('')\n        : string.slice(0, end);\n\n      if (separator === undefined) {\n        return result + omission;\n      }\n      if (strSymbols) {\n        end += (result.length - end);\n      }\n      if (isRegExp(separator)) {\n        if (string.slice(end).search(separator)) {\n          var match,\n              substring = result;\n\n          if (!separator.global) {\n            separator = RegExp(separator.source, toString(reFlags.exec(separator)) + 'g');\n          }\n          separator.lastIndex = 0;\n          while ((match = separator.exec(substring))) {\n            var newEnd = match.index;\n          }\n          result = result.slice(0, newEnd === undefined ? end : newEnd);\n        }\n      } else if (string.indexOf(baseToString(separator), end) != end) {\n        var index = result.lastIndexOf(separator);\n        if (index > -1) {\n          result = result.slice(0, index);\n        }\n      }\n      return result + omission;\n    }\n\n    /**\n     * The inverse of `_.escape`; this method converts the HTML entities\n     * `&amp;`, `&lt;`, `&gt;`, `&quot;`, and `&#39;` in `string` to\n     * their corresponding characters.\n     *\n     * **Note:** No other HTML entities are unescaped. To unescape additional\n     * HTML entities use a third-party library like [_he_](https://mths.be/he).\n     *\n     * @static\n     * @memberOf _\n     * @since 0.6.0\n     * @category String\n     * @param {string} [string=''] The string to unescape.\n     * @returns {string} Returns the unescaped string.\n     * @example\n     *\n     * _.unescape('fred, barney, &amp; pebbles');\n     * // => 'fred, barney, & pebbles'\n     */\n    function unescape(string) {\n      string = toString(string);\n      return (string && reHasEscapedHtml.test(string))\n        ? string.replace(reEscapedHtml, unescapeHtmlChar)\n        : string;\n    }\n\n    /**\n     * Converts `string`, as space separated words, to upper case.\n     *\n     * @static\n     * @memberOf _\n     * @since 4.0.0\n     * @category String\n     * @param {string} [string=''] The string to convert.\n     * @returns {string} Returns the upper cased string.\n     * @example\n     *\n     * _.upperCase('--foo-bar');\n     * // => 'FOO BAR'\n     *\n     * _.upperCase('fooBar');\n     * // => 'FOO BAR'\n     *\n     * _.upperCase('__foo_bar__');\n     * // => 'FOO BAR'\n     */\n    var upperCase = createCompounder(function(result, word, index) {\n      return result + (index ? ' ' : '') + word.toUpperCase();\n    });\n\n    /**\n     * Converts the first character of `string` to upper case.\n     *\n     * @static\n     * @memberOf _\n     * @since 4.0.0\n     * @category String\n     * @param {string} [string=''] The string to convert.\n     * @returns {string} Returns the converted string.\n     * @example\n     *\n     * _.upperFirst('fred');\n     * // => 'Fred'\n     *\n     * _.upperFirst('FRED');\n     * // => 'FRED'\n     */\n    var upperFirst = createCaseFirst('toUpperCase');\n\n    /**\n     * Splits `string` into an array of its words.\n     *\n     * @static\n     * @memberOf _\n     * @since 3.0.0\n     * @category String\n     * @param {string} [string=''] The string to inspect.\n     * @param {RegExp|string} [pattern] The pattern to match words.\n     * @param- {Object} [guard] Enables use as an iteratee for methods like `_.map`.\n     * @returns {Array} Returns the words of `string`.\n     * @example\n     *\n     * _.words('fred, barney, & pebbles');\n     * // => ['fred', 'barney', 'pebbles']\n     *\n     * _.words('fred, barney, & pebbles', /[^, ]+/g);\n     * // => ['fred', 'barney', '&', 'pebbles']\n     */\n    function words(string, pattern, guard) {\n      string = toString(string);\n      pattern = guard ? undefined : pattern;\n\n      if (pattern === undefined) {\n        return hasUnicodeWord(string) ? unicodeWords(string) : asciiWords(string);\n      }\n      return string.match(pattern) || [];\n    }\n\n    /*------------------------------------------------------------------------*/\n\n    /**\n     * Attempts to invoke `func`, returning either the result or the caught error\n     * object. Any additional arguments are provided to `func` when it's invoked.\n     *\n     * @static\n     * @memberOf _\n     * @since 3.0.0\n     * @category Util\n     * @param {Function} func The function to attempt.\n     * @param {...*} [args] The arguments to invoke `func` with.\n     * @returns {*} Returns the `func` result or error object.\n     * @example\n     *\n     * // Avoid throwing errors for invalid selectors.\n     * var elements = _.attempt(function(selector) {\n     *   return document.querySelectorAll(selector);\n     * }, '>_>');\n     *\n     * if (_.isError(elements)) {\n     *   elements = [];\n     * }\n     */\n    var attempt = baseRest(function(func, args) {\n      try {\n        return apply(func, undefined, args);\n      } catch (e) {\n        return isError(e) ? e : new Error(e);\n      }\n    });\n\n    /**\n     * Binds methods of an object to the object itself, overwriting the existing\n     * method.\n     *\n     * **Note:** This method doesn't set the \"length\" property of bound functions.\n     *\n     * @static\n     * @since 0.1.0\n     * @memberOf _\n     * @category Util\n     * @param {Object} object The object to bind and assign the bound methods to.\n     * @param {...(string|string[])} methodNames The object method names to bind.\n     * @returns {Object} Returns `object`.\n     * @example\n     *\n     * var view = {\n     *   'label': 'docs',\n     *   'click': function() {\n     *     console.log('clicked ' + this.label);\n     *   }\n     * };\n     *\n     * _.bindAll(view, ['click']);\n     * jQuery(element).on('click', view.click);\n     * // => Logs 'clicked docs' when clicked.\n     */\n    var bindAll = flatRest(function(object, methodNames) {\n      arrayEach(methodNames, function(key) {\n        key = toKey(key);\n        baseAssignValue(object, key, bind(object[key], object));\n      });\n      return object;\n    });\n\n    /**\n     * Creates a function that iterates over `pairs` and invokes the corresponding\n     * function of the first predicate to return truthy. The predicate-function\n     * pairs are invoked with the `this` binding and arguments of the created\n     * function.\n     *\n     * @static\n     * @memberOf _\n     * @since 4.0.0\n     * @category Util\n     * @param {Array} pairs The predicate-function pairs.\n     * @returns {Function} Returns the new composite function.\n     * @example\n     *\n     * var func = _.cond([\n     *   [_.matches({ 'a': 1 }),           _.constant('matches A')],\n     *   [_.conforms({ 'b': _.isNumber }), _.constant('matches B')],\n     *   [_.stubTrue,                      _.constant('no match')]\n     * ]);\n     *\n     * func({ 'a': 1, 'b': 2 });\n     * // => 'matches A'\n     *\n     * func({ 'a': 0, 'b': 1 });\n     * // => 'matches B'\n     *\n     * func({ 'a': '1', 'b': '2' });\n     * // => 'no match'\n     */\n    function cond(pairs) {\n      var length = pairs == null ? 0 : pairs.length,\n          toIteratee = getIteratee();\n\n      pairs = !length ? [] : arrayMap(pairs, function(pair) {\n        if (typeof pair[1] != 'function') {\n          throw new TypeError(FUNC_ERROR_TEXT);\n        }\n        return [toIteratee(pair[0]), pair[1]];\n      });\n\n      return baseRest(function(args) {\n        var index = -1;\n        while (++index < length) {\n          var pair = pairs[index];\n          if (apply(pair[0], this, args)) {\n            return apply(pair[1], this, args);\n          }\n        }\n      });\n    }\n\n    /**\n     * Creates a function that invokes the predicate properties of `source` with\n     * the corresponding property values of a given object, returning `true` if\n     * all predicates return truthy, else `false`.\n     *\n     * **Note:** The created function is equivalent to `_.conformsTo` with\n     * `source` partially applied.\n     *\n     * @static\n     * @memberOf _\n     * @since 4.0.0\n     * @category Util\n     * @param {Object} source The object of property predicates to conform to.\n     * @returns {Function} Returns the new spec function.\n     * @example\n     *\n     * var objects = [\n     *   { 'a': 2, 'b': 1 },\n     *   { 'a': 1, 'b': 2 }\n     * ];\n     *\n     * _.filter(objects, _.conforms({ 'b': function(n) { return n > 1; } }));\n     * // => [{ 'a': 1, 'b': 2 }]\n     */\n    function conforms(source) {\n      return baseConforms(baseClone(source, CLONE_DEEP_FLAG));\n    }\n\n    /**\n     * Creates a function that returns `value`.\n     *\n     * @static\n     * @memberOf _\n     * @since 2.4.0\n     * @category Util\n     * @param {*} value The value to return from the new function.\n     * @returns {Function} Returns the new constant function.\n     * @example\n     *\n     * var objects = _.times(2, _.constant({ 'a': 1 }));\n     *\n     * console.log(objects);\n     * // => [{ 'a': 1 }, { 'a': 1 }]\n     *\n     * console.log(objects[0] === objects[1]);\n     * // => true\n     */\n    function constant(value) {\n      return function() {\n        return value;\n      };\n    }\n\n    /**\n     * Checks `value` to determine whether a default value should be returned in\n     * its place. The `defaultValue` is returned if `value` is `NaN`, `null`,\n     * or `undefined`.\n     *\n     * @static\n     * @memberOf _\n     * @since 4.14.0\n     * @category Util\n     * @param {*} value The value to check.\n     * @param {*} defaultValue The default value.\n     * @returns {*} Returns the resolved value.\n     * @example\n     *\n     * _.defaultTo(1, 10);\n     * // => 1\n     *\n     * _.defaultTo(undefined, 10);\n     * // => 10\n     */\n    function defaultTo(value, defaultValue) {\n      return (value == null || value !== value) ? defaultValue : value;\n    }\n\n    /**\n     * Creates a function that returns the result of invoking the given functions\n     * with the `this` binding of the created function, where each successive\n     * invocation is supplied the return value of the previous.\n     *\n     * @static\n     * @memberOf _\n     * @since 3.0.0\n     * @category Util\n     * @param {...(Function|Function[])} [funcs] The functions to invoke.\n     * @returns {Function} Returns the new composite function.\n     * @see _.flowRight\n     * @example\n     *\n     * function square(n) {\n     *   return n * n;\n     * }\n     *\n     * var addSquare = _.flow([_.add, square]);\n     * addSquare(1, 2);\n     * // => 9\n     */\n    var flow = createFlow();\n\n    /**\n     * This method is like `_.flow` except that it creates a function that\n     * invokes the given functions from right to left.\n     *\n     * @static\n     * @since 3.0.0\n     * @memberOf _\n     * @category Util\n     * @param {...(Function|Function[])} [funcs] The functions to invoke.\n     * @returns {Function} Returns the new composite function.\n     * @see _.flow\n     * @example\n     *\n     * function square(n) {\n     *   return n * n;\n     * }\n     *\n     * var addSquare = _.flowRight([square, _.add]);\n     * addSquare(1, 2);\n     * // => 9\n     */\n    var flowRight = createFlow(true);\n\n    /**\n     * This method returns the first argument it receives.\n     *\n     * @static\n     * @since 0.1.0\n     * @memberOf _\n     * @category Util\n     * @param {*} value Any value.\n     * @returns {*} Returns `value`.\n     * @example\n     *\n     * var object = { 'a': 1 };\n     *\n     * console.log(_.identity(object) === object);\n     * // => true\n     */\n    function identity(value) {\n      return value;\n    }\n\n    /**\n     * Creates a function that invokes `func` with the arguments of the created\n     * function. If `func` is a property name, the created function returns the\n     * property value for a given element. If `func` is an array or object, the\n     * created function returns `true` for elements that contain the equivalent\n     * source properties, otherwise it returns `false`.\n     *\n     * @static\n     * @since 4.0.0\n     * @memberOf _\n     * @category Util\n     * @param {*} [func=_.identity] The value to convert to a callback.\n     * @returns {Function} Returns the callback.\n     * @example\n     *\n     * var users = [\n     *   { 'user': 'barney', 'age': 36, 'active': true },\n     *   { 'user': 'fred',   'age': 40, 'active': false }\n     * ];\n     *\n     * // The `_.matches` iteratee shorthand.\n     * _.filter(users, _.iteratee({ 'user': 'barney', 'active': true }));\n     * // => [{ 'user': 'barney', 'age': 36, 'active': true }]\n     *\n     * // The `_.matchesProperty` iteratee shorthand.\n     * _.filter(users, _.iteratee(['user', 'fred']));\n     * // => [{ 'user': 'fred', 'age': 40 }]\n     *\n     * // The `_.property` iteratee shorthand.\n     * _.map(users, _.iteratee('user'));\n     * // => ['barney', 'fred']\n     *\n     * // Create custom iteratee shorthands.\n     * _.iteratee = _.wrap(_.iteratee, function(iteratee, func) {\n     *   return !_.isRegExp(func) ? iteratee(func) : function(string) {\n     *     return func.test(string);\n     *   };\n     * });\n     *\n     * _.filter(['abc', 'def'], /ef/);\n     * // => ['def']\n     */\n    function iteratee(func) {\n      return baseIteratee(typeof func == 'function' ? func : baseClone(func, CLONE_DEEP_FLAG));\n    }\n\n    /**\n     * Creates a function that performs a partial deep comparison between a given\n     * object and `source`, returning `true` if the given object has equivalent\n     * property values, else `false`.\n     *\n     * **Note:** The created function is equivalent to `_.isMatch` with `source`\n     * partially applied.\n     *\n     * Partial comparisons will match empty array and empty object `source`\n     * values against any array or object value, respectively. See `_.isEqual`\n     * for a list of supported value comparisons.\n     *\n     * @static\n     * @memberOf _\n     * @since 3.0.0\n     * @category Util\n     * @param {Object} source The object of property values to match.\n     * @returns {Function} Returns the new spec function.\n     * @example\n     *\n     * var objects = [\n     *   { 'a': 1, 'b': 2, 'c': 3 },\n     *   { 'a': 4, 'b': 5, 'c': 6 }\n     * ];\n     *\n     * _.filter(objects, _.matches({ 'a': 4, 'c': 6 }));\n     * // => [{ 'a': 4, 'b': 5, 'c': 6 }]\n     */\n    function matches(source) {\n      return baseMatches(baseClone(source, CLONE_DEEP_FLAG));\n    }\n\n    /**\n     * Creates a function that performs a partial deep comparison between the\n     * value at `path` of a given object to `srcValue`, returning `true` if the\n     * object value is equivalent, else `false`.\n     *\n     * **Note:** Partial comparisons will match empty array and empty object\n     * `srcValue` values against any array or object value, respectively. See\n     * `_.isEqual` for a list of supported value comparisons.\n     *\n     * @static\n     * @memberOf _\n     * @since 3.2.0\n     * @category Util\n     * @param {Array|string} path The path of the property to get.\n     * @param {*} srcValue The value to match.\n     * @returns {Function} Returns the new spec function.\n     * @example\n     *\n     * var objects = [\n     *   { 'a': 1, 'b': 2, 'c': 3 },\n     *   { 'a': 4, 'b': 5, 'c': 6 }\n     * ];\n     *\n     * _.find(objects, _.matchesProperty('a', 4));\n     * // => { 'a': 4, 'b': 5, 'c': 6 }\n     */\n    function matchesProperty(path, srcValue) {\n      return baseMatchesProperty(path, baseClone(srcValue, CLONE_DEEP_FLAG));\n    }\n\n    /**\n     * Creates a function that invokes the method at `path` of a given object.\n     * Any additional arguments are provided to the invoked method.\n     *\n     * @static\n     * @memberOf _\n     * @since 3.7.0\n     * @category Util\n     * @param {Array|string} path The path of the method to invoke.\n     * @param {...*} [args] The arguments to invoke the method with.\n     * @returns {Function} Returns the new invoker function.\n     * @example\n     *\n     * var objects = [\n     *   { 'a': { 'b': _.constant(2) } },\n     *   { 'a': { 'b': _.constant(1) } }\n     * ];\n     *\n     * _.map(objects, _.method('a.b'));\n     * // => [2, 1]\n     *\n     * _.map(objects, _.method(['a', 'b']));\n     * // => [2, 1]\n     */\n    var method = baseRest(function(path, args) {\n      return function(object) {\n        return baseInvoke(object, path, args);\n      };\n    });\n\n    /**\n     * The opposite of `_.method`; this method creates a function that invokes\n     * the method at a given path of `object`. Any additional arguments are\n     * provided to the invoked method.\n     *\n     * @static\n     * @memberOf _\n     * @since 3.7.0\n     * @category Util\n     * @param {Object} object The object to query.\n     * @param {...*} [args] The arguments to invoke the method with.\n     * @returns {Function} Returns the new invoker function.\n     * @example\n     *\n     * var array = _.times(3, _.constant),\n     *     object = { 'a': array, 'b': array, 'c': array };\n     *\n     * _.map(['a[2]', 'c[0]'], _.methodOf(object));\n     * // => [2, 0]\n     *\n     * _.map([['a', '2'], ['c', '0']], _.methodOf(object));\n     * // => [2, 0]\n     */\n    var methodOf = baseRest(function(object, args) {\n      return function(path) {\n        return baseInvoke(object, path, args);\n      };\n    });\n\n    /**\n     * Adds all own enumerable string keyed function properties of a source\n     * object to the destination object. If `object` is a function, then methods\n     * are added to its prototype as well.\n     *\n     * **Note:** Use `_.runInContext` to create a pristine `lodash` function to\n     * avoid conflicts caused by modifying the original.\n     *\n     * @static\n     * @since 0.1.0\n     * @memberOf _\n     * @category Util\n     * @param {Function|Object} [object=lodash] The destination object.\n     * @param {Object} source The object of functions to add.\n     * @param {Object} [options={}] The options object.\n     * @param {boolean} [options.chain=true] Specify whether mixins are chainable.\n     * @returns {Function|Object} Returns `object`.\n     * @example\n     *\n     * function vowels(string) {\n     *   return _.filter(string, function(v) {\n     *     return /[aeiou]/i.test(v);\n     *   });\n     * }\n     *\n     * _.mixin({ 'vowels': vowels });\n     * _.vowels('fred');\n     * // => ['e']\n     *\n     * _('fred').vowels().value();\n     * // => ['e']\n     *\n     * _.mixin({ 'vowels': vowels }, { 'chain': false });\n     * _('fred').vowels();\n     * // => ['e']\n     */\n    function mixin(object, source, options) {\n      var props = keys(source),\n          methodNames = baseFunctions(source, props);\n\n      if (options == null &&\n          !(isObject(source) && (methodNames.length || !props.length))) {\n        options = source;\n        source = object;\n        object = this;\n        methodNames = baseFunctions(source, keys(source));\n      }\n      var chain = !(isObject(options) && 'chain' in options) || !!options.chain,\n          isFunc = isFunction(object);\n\n      arrayEach(methodNames, function(methodName) {\n        var func = source[methodName];\n        object[methodName] = func;\n        if (isFunc) {\n          object.prototype[methodName] = function() {\n            var chainAll = this.__chain__;\n            if (chain || chainAll) {\n              var result = object(this.__wrapped__),\n                  actions = result.__actions__ = copyArray(this.__actions__);\n\n              actions.push({ 'func': func, 'args': arguments, 'thisArg': object });\n              result.__chain__ = chainAll;\n              return result;\n            }\n            return func.apply(object, arrayPush([this.value()], arguments));\n          };\n        }\n      });\n\n      return object;\n    }\n\n    /**\n     * Reverts the `_` variable to its previous value and returns a reference to\n     * the `lodash` function.\n     *\n     * @static\n     * @since 0.1.0\n     * @memberOf _\n     * @category Util\n     * @returns {Function} Returns the `lodash` function.\n     * @example\n     *\n     * var lodash = _.noConflict();\n     */\n    function noConflict() {\n      if (root._ === this) {\n        root._ = oldDash;\n      }\n      return this;\n    }\n\n    /**\n     * This method returns `undefined`.\n     *\n     * @static\n     * @memberOf _\n     * @since 2.3.0\n     * @category Util\n     * @example\n     *\n     * _.times(2, _.noop);\n     * // => [undefined, undefined]\n     */\n    function noop() {\n      // No operation performed.\n    }\n\n    /**\n     * Creates a function that gets the argument at index `n`. If `n` is negative,\n     * the nth argument from the end is returned.\n     *\n     * @static\n     * @memberOf _\n     * @since 4.0.0\n     * @category Util\n     * @param {number} [n=0] The index of the argument to return.\n     * @returns {Function} Returns the new pass-thru function.\n     * @example\n     *\n     * var func = _.nthArg(1);\n     * func('a', 'b', 'c', 'd');\n     * // => 'b'\n     *\n     * var func = _.nthArg(-2);\n     * func('a', 'b', 'c', 'd');\n     * // => 'c'\n     */\n    function nthArg(n) {\n      n = toInteger(n);\n      return baseRest(function(args) {\n        return baseNth(args, n);\n      });\n    }\n\n    /**\n     * Creates a function that invokes `iteratees` with the arguments it receives\n     * and returns their results.\n     *\n     * @static\n     * @memberOf _\n     * @since 4.0.0\n     * @category Util\n     * @param {...(Function|Function[])} [iteratees=[_.identity]]\n     *  The iteratees to invoke.\n     * @returns {Function} Returns the new function.\n     * @example\n     *\n     * var func = _.over([Math.max, Math.min]);\n     *\n     * func(1, 2, 3, 4);\n     * // => [4, 1]\n     */\n    var over = createOver(arrayMap);\n\n    /**\n     * Creates a function that checks if **all** of the `predicates` return\n     * truthy when invoked with the arguments it receives.\n     *\n     * @static\n     * @memberOf _\n     * @since 4.0.0\n     * @category Util\n     * @param {...(Function|Function[])} [predicates=[_.identity]]\n     *  The predicates to check.\n     * @returns {Function} Returns the new function.\n     * @example\n     *\n     * var func = _.overEvery([Boolean, isFinite]);\n     *\n     * func('1');\n     * // => true\n     *\n     * func(null);\n     * // => false\n     *\n     * func(NaN);\n     * // => false\n     */\n    var overEvery = createOver(arrayEvery);\n\n    /**\n     * Creates a function that checks if **any** of the `predicates` return\n     * truthy when invoked with the arguments it receives.\n     *\n     * @static\n     * @memberOf _\n     * @since 4.0.0\n     * @category Util\n     * @param {...(Function|Function[])} [predicates=[_.identity]]\n     *  The predicates to check.\n     * @returns {Function} Returns the new function.\n     * @example\n     *\n     * var func = _.overSome([Boolean, isFinite]);\n     *\n     * func('1');\n     * // => true\n     *\n     * func(null);\n     * // => true\n     *\n     * func(NaN);\n     * // => false\n     */\n    var overSome = createOver(arraySome);\n\n    /**\n     * Creates a function that returns the value at `path` of a given object.\n     *\n     * @static\n     * @memberOf _\n     * @since 2.4.0\n     * @category Util\n     * @param {Array|string} path The path of the property to get.\n     * @returns {Function} Returns the new accessor function.\n     * @example\n     *\n     * var objects = [\n     *   { 'a': { 'b': 2 } },\n     *   { 'a': { 'b': 1 } }\n     * ];\n     *\n     * _.map(objects, _.property('a.b'));\n     * // => [2, 1]\n     *\n     * _.map(_.sortBy(objects, _.property(['a', 'b'])), 'a.b');\n     * // => [1, 2]\n     */\n    function property(path) {\n      return isKey(path) ? baseProperty(toKey(path)) : basePropertyDeep(path);\n    }\n\n    /**\n     * The opposite of `_.property`; this method creates a function that returns\n     * the value at a given path of `object`.\n     *\n     * @static\n     * @memberOf _\n     * @since 3.0.0\n     * @category Util\n     * @param {Object} object The object to query.\n     * @returns {Function} Returns the new accessor function.\n     * @example\n     *\n     * var array = [0, 1, 2],\n     *     object = { 'a': array, 'b': array, 'c': array };\n     *\n     * _.map(['a[2]', 'c[0]'], _.propertyOf(object));\n     * // => [2, 0]\n     *\n     * _.map([['a', '2'], ['c', '0']], _.propertyOf(object));\n     * // => [2, 0]\n     */\n    function propertyOf(object) {\n      return function(path) {\n        return object == null ? undefined : baseGet(object, path);\n      };\n    }\n\n    /**\n     * Creates an array of numbers (positive and/or negative) progressing from\n     * `start` up to, but not including, `end`. A step of `-1` is used if a negative\n     * `start` is specified without an `end` or `step`. If `end` is not specified,\n     * it's set to `start` with `start` then set to `0`.\n     *\n     * **Note:** JavaScript follows the IEEE-754 standard for resolving\n     * floating-point values which can produce unexpected results.\n     *\n     * @static\n     * @since 0.1.0\n     * @memberOf _\n     * @category Util\n     * @param {number} [start=0] The start of the range.\n     * @param {number} end The end of the range.\n     * @param {number} [step=1] The value to increment or decrement by.\n     * @returns {Array} Returns the range of numbers.\n     * @see _.inRange, _.rangeRight\n     * @example\n     *\n     * _.range(4);\n     * // => [0, 1, 2, 3]\n     *\n     * _.range(-4);\n     * // => [0, -1, -2, -3]\n     *\n     * _.range(1, 5);\n     * // => [1, 2, 3, 4]\n     *\n     * _.range(0, 20, 5);\n     * // => [0, 5, 10, 15]\n     *\n     * _.range(0, -4, -1);\n     * // => [0, -1, -2, -3]\n     *\n     * _.range(1, 4, 0);\n     * // => [1, 1, 1]\n     *\n     * _.range(0);\n     * // => []\n     */\n    var range = createRange();\n\n    /**\n     * This method is like `_.range` except that it populates values in\n     * descending order.\n     *\n     * @static\n     * @memberOf _\n     * @since 4.0.0\n     * @category Util\n     * @param {number} [start=0] The start of the range.\n     * @param {number} end The end of the range.\n     * @param {number} [step=1] The value to increment or decrement by.\n     * @returns {Array} Returns the range of numbers.\n     * @see _.inRange, _.range\n     * @example\n     *\n     * _.rangeRight(4);\n     * // => [3, 2, 1, 0]\n     *\n     * _.rangeRight(-4);\n     * // => [-3, -2, -1, 0]\n     *\n     * _.rangeRight(1, 5);\n     * // => [4, 3, 2, 1]\n     *\n     * _.rangeRight(0, 20, 5);\n     * // => [15, 10, 5, 0]\n     *\n     * _.rangeRight(0, -4, -1);\n     * // => [-3, -2, -1, 0]\n     *\n     * _.rangeRight(1, 4, 0);\n     * // => [1, 1, 1]\n     *\n     * _.rangeRight(0);\n     * // => []\n     */\n    var rangeRight = createRange(true);\n\n    /**\n     * This method returns a new empty array.\n     *\n     * @static\n     * @memberOf _\n     * @since 4.13.0\n     * @category Util\n     * @returns {Array} Returns the new empty array.\n     * @example\n     *\n     * var arrays = _.times(2, _.stubArray);\n     *\n     * console.log(arrays);\n     * // => [[], []]\n     *\n     * console.log(arrays[0] === arrays[1]);\n     * // => false\n     */\n    function stubArray() {\n      return [];\n    }\n\n    /**\n     * This method returns `false`.\n     *\n     * @static\n     * @memberOf _\n     * @since 4.13.0\n     * @category Util\n     * @returns {boolean} Returns `false`.\n     * @example\n     *\n     * _.times(2, _.stubFalse);\n     * // => [false, false]\n     */\n    function stubFalse() {\n      return false;\n    }\n\n    /**\n     * This method returns a new empty object.\n     *\n     * @static\n     * @memberOf _\n     * @since 4.13.0\n     * @category Util\n     * @returns {Object} Returns the new empty object.\n     * @example\n     *\n     * var objects = _.times(2, _.stubObject);\n     *\n     * console.log(objects);\n     * // => [{}, {}]\n     *\n     * console.log(objects[0] === objects[1]);\n     * // => false\n     */\n    function stubObject() {\n      return {};\n    }\n\n    /**\n     * This method returns an empty string.\n     *\n     * @static\n     * @memberOf _\n     * @since 4.13.0\n     * @category Util\n     * @returns {string} Returns the empty string.\n     * @example\n     *\n     * _.times(2, _.stubString);\n     * // => ['', '']\n     */\n    function stubString() {\n      return '';\n    }\n\n    /**\n     * This method returns `true`.\n     *\n     * @static\n     * @memberOf _\n     * @since 4.13.0\n     * @category Util\n     * @returns {boolean} Returns `true`.\n     * @example\n     *\n     * _.times(2, _.stubTrue);\n     * // => [true, true]\n     */\n    function stubTrue() {\n      return true;\n    }\n\n    /**\n     * Invokes the iteratee `n` times, returning an array of the results of\n     * each invocation. The iteratee is invoked with one argument; (index).\n     *\n     * @static\n     * @since 0.1.0\n     * @memberOf _\n     * @category Util\n     * @param {number} n The number of times to invoke `iteratee`.\n     * @param {Function} [iteratee=_.identity] The function invoked per iteration.\n     * @returns {Array} Returns the array of results.\n     * @example\n     *\n     * _.times(3, String);\n     * // => ['0', '1', '2']\n     *\n     *  _.times(4, _.constant(0));\n     * // => [0, 0, 0, 0]\n     */\n    function times(n, iteratee) {\n      n = toInteger(n);\n      if (n < 1 || n > MAX_SAFE_INTEGER) {\n        return [];\n      }\n      var index = MAX_ARRAY_LENGTH,\n          length = nativeMin(n, MAX_ARRAY_LENGTH);\n\n      iteratee = getIteratee(iteratee);\n      n -= MAX_ARRAY_LENGTH;\n\n      var result = baseTimes(length, iteratee);\n      while (++index < n) {\n        iteratee(index);\n      }\n      return result;\n    }\n\n    /**\n     * Converts `value` to a property path array.\n     *\n     * @static\n     * @memberOf _\n     * @since 4.0.0\n     * @category Util\n     * @param {*} value The value to convert.\n     * @returns {Array} Returns the new property path array.\n     * @example\n     *\n     * _.toPath('a.b.c');\n     * // => ['a', 'b', 'c']\n     *\n     * _.toPath('a[0].b.c');\n     * // => ['a', '0', 'b', 'c']\n     */\n    function toPath(value) {\n      if (isArray(value)) {\n        return arrayMap(value, toKey);\n      }\n      return isSymbol(value) ? [value] : copyArray(stringToPath(toString(value)));\n    }\n\n    /**\n     * Generates a unique ID. If `prefix` is given, the ID is appended to it.\n     *\n     * @static\n     * @since 0.1.0\n     * @memberOf _\n     * @category Util\n     * @param {string} [prefix=''] The value to prefix the ID with.\n     * @returns {string} Returns the unique ID.\n     * @example\n     *\n     * _.uniqueId('contact_');\n     * // => 'contact_104'\n     *\n     * _.uniqueId();\n     * // => '105'\n     */\n    function uniqueId(prefix) {\n      var id = ++idCounter;\n      return toString(prefix) + id;\n    }\n\n    /*------------------------------------------------------------------------*/\n\n    /**\n     * Adds two numbers.\n     *\n     * @static\n     * @memberOf _\n     * @since 3.4.0\n     * @category Math\n     * @param {number} augend The first number in an addition.\n     * @param {number} addend The second number in an addition.\n     * @returns {number} Returns the total.\n     * @example\n     *\n     * _.add(6, 4);\n     * // => 10\n     */\n    var add = createMathOperation(function(augend, addend) {\n      return augend + addend;\n    }, 0);\n\n    /**\n     * Computes `number` rounded up to `precision`.\n     *\n     * @static\n     * @memberOf _\n     * @since 3.10.0\n     * @category Math\n     * @param {number} number The number to round up.\n     * @param {number} [precision=0] The precision to round up to.\n     * @returns {number} Returns the rounded up number.\n     * @example\n     *\n     * _.ceil(4.006);\n     * // => 5\n     *\n     * _.ceil(6.004, 2);\n     * // => 6.01\n     *\n     * _.ceil(6040, -2);\n     * // => 6100\n     */\n    var ceil = createRound('ceil');\n\n    /**\n     * Divide two numbers.\n     *\n     * @static\n     * @memberOf _\n     * @since 4.7.0\n     * @category Math\n     * @param {number} dividend The first number in a division.\n     * @param {number} divisor The second number in a division.\n     * @returns {number} Returns the quotient.\n     * @example\n     *\n     * _.divide(6, 4);\n     * // => 1.5\n     */\n    var divide = createMathOperation(function(dividend, divisor) {\n      return dividend / divisor;\n    }, 1);\n\n    /**\n     * Computes `number` rounded down to `precision`.\n     *\n     * @static\n     * @memberOf _\n     * @since 3.10.0\n     * @category Math\n     * @param {number} number The number to round down.\n     * @param {number} [precision=0] The precision to round down to.\n     * @returns {number} Returns the rounded down number.\n     * @example\n     *\n     * _.floor(4.006);\n     * // => 4\n     *\n     * _.floor(0.046, 2);\n     * // => 0.04\n     *\n     * _.floor(4060, -2);\n     * // => 4000\n     */\n    var floor = createRound('floor');\n\n    /**\n     * Computes the maximum value of `array`. If `array` is empty or falsey,\n     * `undefined` is returned.\n     *\n     * @static\n     * @since 0.1.0\n     * @memberOf _\n     * @category Math\n     * @param {Array} array The array to iterate over.\n     * @returns {*} Returns the maximum value.\n     * @example\n     *\n     * _.max([4, 2, 8, 6]);\n     * // => 8\n     *\n     * _.max([]);\n     * // => undefined\n     */\n    function max(array) {\n      return (array && array.length)\n        ? baseExtremum(array, identity, baseGt)\n        : undefined;\n    }\n\n    /**\n     * This method is like `_.max` except that it accepts `iteratee` which is\n     * invoked for each element in `array` to generate the criterion by which\n     * the value is ranked. The iteratee is invoked with one argument: (value).\n     *\n     * @static\n     * @memberOf _\n     * @since 4.0.0\n     * @category Math\n     * @param {Array} array The array to iterate over.\n     * @param {Function} [iteratee=_.identity] The iteratee invoked per element.\n     * @returns {*} Returns the maximum value.\n     * @example\n     *\n     * var objects = [{ 'n': 1 }, { 'n': 2 }];\n     *\n     * _.maxBy(objects, function(o) { return o.n; });\n     * // => { 'n': 2 }\n     *\n     * // The `_.property` iteratee shorthand.\n     * _.maxBy(objects, 'n');\n     * // => { 'n': 2 }\n     */\n    function maxBy(array, iteratee) {\n      return (array && array.length)\n        ? baseExtremum(array, getIteratee(iteratee, 2), baseGt)\n        : undefined;\n    }\n\n    /**\n     * Computes the mean of the values in `array`.\n     *\n     * @static\n     * @memberOf _\n     * @since 4.0.0\n     * @category Math\n     * @param {Array} array The array to iterate over.\n     * @returns {number} Returns the mean.\n     * @example\n     *\n     * _.mean([4, 2, 8, 6]);\n     * // => 5\n     */\n    function mean(array) {\n      return baseMean(array, identity);\n    }\n\n    /**\n     * This method is like `_.mean` except that it accepts `iteratee` which is\n     * invoked for each element in `array` to generate the value to be averaged.\n     * The iteratee is invoked with one argument: (value).\n     *\n     * @static\n     * @memberOf _\n     * @since 4.7.0\n     * @category Math\n     * @param {Array} array The array to iterate over.\n     * @param {Function} [iteratee=_.identity] The iteratee invoked per element.\n     * @returns {number} Returns the mean.\n     * @example\n     *\n     * var objects = [{ 'n': 4 }, { 'n': 2 }, { 'n': 8 }, { 'n': 6 }];\n     *\n     * _.meanBy(objects, function(o) { return o.n; });\n     * // => 5\n     *\n     * // The `_.property` iteratee shorthand.\n     * _.meanBy(objects, 'n');\n     * // => 5\n     */\n    function meanBy(array, iteratee) {\n      return baseMean(array, getIteratee(iteratee, 2));\n    }\n\n    /**\n     * Computes the minimum value of `array`. If `array` is empty or falsey,\n     * `undefined` is returned.\n     *\n     * @static\n     * @since 0.1.0\n     * @memberOf _\n     * @category Math\n     * @param {Array} array The array to iterate over.\n     * @returns {*} Returns the minimum value.\n     * @example\n     *\n     * _.min([4, 2, 8, 6]);\n     * // => 2\n     *\n     * _.min([]);\n     * // => undefined\n     */\n    function min(array) {\n      return (array && array.length)\n        ? baseExtremum(array, identity, baseLt)\n        : undefined;\n    }\n\n    /**\n     * This method is like `_.min` except that it accepts `iteratee` which is\n     * invoked for each element in `array` to generate the criterion by which\n     * the value is ranked. The iteratee is invoked with one argument: (value).\n     *\n     * @static\n     * @memberOf _\n     * @since 4.0.0\n     * @category Math\n     * @param {Array} array The array to iterate over.\n     * @param {Function} [iteratee=_.identity] The iteratee invoked per element.\n     * @returns {*} Returns the minimum value.\n     * @example\n     *\n     * var objects = [{ 'n': 1 }, { 'n': 2 }];\n     *\n     * _.minBy(objects, function(o) { return o.n; });\n     * // => { 'n': 1 }\n     *\n     * // The `_.property` iteratee shorthand.\n     * _.minBy(objects, 'n');\n     * // => { 'n': 1 }\n     */\n    function minBy(array, iteratee) {\n      return (array && array.length)\n        ? baseExtremum(array, getIteratee(iteratee, 2), baseLt)\n        : undefined;\n    }\n\n    /**\n     * Multiply two numbers.\n     *\n     * @static\n     * @memberOf _\n     * @since 4.7.0\n     * @category Math\n     * @param {number} multiplier The first number in a multiplication.\n     * @param {number} multiplicand The second number in a multiplication.\n     * @returns {number} Returns the product.\n     * @example\n     *\n     * _.multiply(6, 4);\n     * // => 24\n     */\n    var multiply = createMathOperation(function(multiplier, multiplicand) {\n      return multiplier * multiplicand;\n    }, 1);\n\n    /**\n     * Computes `number` rounded to `precision`.\n     *\n     * @static\n     * @memberOf _\n     * @since 3.10.0\n     * @category Math\n     * @param {number} number The number to round.\n     * @param {number} [precision=0] The precision to round to.\n     * @returns {number} Returns the rounded number.\n     * @example\n     *\n     * _.round(4.006);\n     * // => 4\n     *\n     * _.round(4.006, 2);\n     * // => 4.01\n     *\n     * _.round(4060, -2);\n     * // => 4100\n     */\n    var round = createRound('round');\n\n    /**\n     * Subtract two numbers.\n     *\n     * @static\n     * @memberOf _\n     * @since 4.0.0\n     * @category Math\n     * @param {number} minuend The first number in a subtraction.\n     * @param {number} subtrahend The second number in a subtraction.\n     * @returns {number} Returns the difference.\n     * @example\n     *\n     * _.subtract(6, 4);\n     * // => 2\n     */\n    var subtract = createMathOperation(function(minuend, subtrahend) {\n      return minuend - subtrahend;\n    }, 0);\n\n    /**\n     * Computes the sum of the values in `array`.\n     *\n     * @static\n     * @memberOf _\n     * @since 3.4.0\n     * @category Math\n     * @param {Array} array The array to iterate over.\n     * @returns {number} Returns the sum.\n     * @example\n     *\n     * _.sum([4, 2, 8, 6]);\n     * // => 20\n     */\n    function sum(array) {\n      return (array && array.length)\n        ? baseSum(array, identity)\n        : 0;\n    }\n\n    /**\n     * This method is like `_.sum` except that it accepts `iteratee` which is\n     * invoked for each element in `array` to generate the value to be summed.\n     * The iteratee is invoked with one argument: (value).\n     *\n     * @static\n     * @memberOf _\n     * @since 4.0.0\n     * @category Math\n     * @param {Array} array The array to iterate over.\n     * @param {Function} [iteratee=_.identity] The iteratee invoked per element.\n     * @returns {number} Returns the sum.\n     * @example\n     *\n     * var objects = [{ 'n': 4 }, { 'n': 2 }, { 'n': 8 }, { 'n': 6 }];\n     *\n     * _.sumBy(objects, function(o) { return o.n; });\n     * // => 20\n     *\n     * // The `_.property` iteratee shorthand.\n     * _.sumBy(objects, 'n');\n     * // => 20\n     */\n    function sumBy(array, iteratee) {\n      return (array && array.length)\n        ? baseSum(array, getIteratee(iteratee, 2))\n        : 0;\n    }\n\n    /*------------------------------------------------------------------------*/\n\n    // Add methods that return wrapped values in chain sequences.\n    lodash.after = after;\n    lodash.ary = ary;\n    lodash.assign = assign;\n    lodash.assignIn = assignIn;\n    lodash.assignInWith = assignInWith;\n    lodash.assignWith = assignWith;\n    lodash.at = at;\n    lodash.before = before;\n    lodash.bind = bind;\n    lodash.bindAll = bindAll;\n    lodash.bindKey = bindKey;\n    lodash.castArray = castArray;\n    lodash.chain = chain;\n    lodash.chunk = chunk;\n    lodash.compact = compact;\n    lodash.concat = concat;\n    lodash.cond = cond;\n    lodash.conforms = conforms;\n    lodash.constant = constant;\n    lodash.countBy = countBy;\n    lodash.create = create;\n    lodash.curry = curry;\n    lodash.curryRight = curryRight;\n    lodash.debounce = debounce;\n    lodash.defaults = defaults;\n    lodash.defaultsDeep = defaultsDeep;\n    lodash.defer = defer;\n    lodash.delay = delay;\n    lodash.difference = difference;\n    lodash.differenceBy = differenceBy;\n    lodash.differenceWith = differenceWith;\n    lodash.drop = drop;\n    lodash.dropRight = dropRight;\n    lodash.dropRightWhile = dropRightWhile;\n    lodash.dropWhile = dropWhile;\n    lodash.fill = fill;\n    lodash.filter = filter;\n    lodash.flatMap = flatMap;\n    lodash.flatMapDeep = flatMapDeep;\n    lodash.flatMapDepth = flatMapDepth;\n    lodash.flatten = flatten;\n    lodash.flattenDeep = flattenDeep;\n    lodash.flattenDepth = flattenDepth;\n    lodash.flip = flip;\n    lodash.flow = flow;\n    lodash.flowRight = flowRight;\n    lodash.fromPairs = fromPairs;\n    lodash.functions = functions;\n    lodash.functionsIn = functionsIn;\n    lodash.groupBy = groupBy;\n    lodash.initial = initial;\n    lodash.intersection = intersection;\n    lodash.intersectionBy = intersectionBy;\n    lodash.intersectionWith = intersectionWith;\n    lodash.invert = invert;\n    lodash.invertBy = invertBy;\n    lodash.invokeMap = invokeMap;\n    lodash.iteratee = iteratee;\n    lodash.keyBy = keyBy;\n    lodash.keys = keys;\n    lodash.keysIn = keysIn;\n    lodash.map = map;\n    lodash.mapKeys = mapKeys;\n    lodash.mapValues = mapValues;\n    lodash.matches = matches;\n    lodash.matchesProperty = matchesProperty;\n    lodash.memoize = memoize;\n    lodash.merge = merge;\n    lodash.mergeWith = mergeWith;\n    lodash.method = method;\n    lodash.methodOf = methodOf;\n    lodash.mixin = mixin;\n    lodash.negate = negate;\n    lodash.nthArg = nthArg;\n    lodash.omit = omit;\n    lodash.omitBy = omitBy;\n    lodash.once = once;\n    lodash.orderBy = orderBy;\n    lodash.over = over;\n    lodash.overArgs = overArgs;\n    lodash.overEvery = overEvery;\n    lodash.overSome = overSome;\n    lodash.partial = partial;\n    lodash.partialRight = partialRight;\n    lodash.partition = partition;\n    lodash.pick = pick;\n    lodash.pickBy = pickBy;\n    lodash.property = property;\n    lodash.propertyOf = propertyOf;\n    lodash.pull = pull;\n    lodash.pullAll = pullAll;\n    lodash.pullAllBy = pullAllBy;\n    lodash.pullAllWith = pullAllWith;\n    lodash.pullAt = pullAt;\n    lodash.range = range;\n    lodash.rangeRight = rangeRight;\n    lodash.rearg = rearg;\n    lodash.reject = reject;\n    lodash.remove = remove;\n    lodash.rest = rest;\n    lodash.reverse = reverse;\n    lodash.sampleSize = sampleSize;\n    lodash.set = set;\n    lodash.setWith = setWith;\n    lodash.shuffle = shuffle;\n    lodash.slice = slice;\n    lodash.sortBy = sortBy;\n    lodash.sortedUniq = sortedUniq;\n    lodash.sortedUniqBy = sortedUniqBy;\n    lodash.split = split;\n    lodash.spread = spread;\n    lodash.tail = tail;\n    lodash.take = take;\n    lodash.takeRight = takeRight;\n    lodash.takeRightWhile = takeRightWhile;\n    lodash.takeWhile = takeWhile;\n    lodash.tap = tap;\n    lodash.throttle = throttle;\n    lodash.thru = thru;\n    lodash.toArray = toArray;\n    lodash.toPairs = toPairs;\n    lodash.toPairsIn = toPairsIn;\n    lodash.toPath = toPath;\n    lodash.toPlainObject = toPlainObject;\n    lodash.transform = transform;\n    lodash.unary = unary;\n    lodash.union = union;\n    lodash.unionBy = unionBy;\n    lodash.unionWith = unionWith;\n    lodash.uniq = uniq;\n    lodash.uniqBy = uniqBy;\n    lodash.uniqWith = uniqWith;\n    lodash.unset = unset;\n    lodash.unzip = unzip;\n    lodash.unzipWith = unzipWith;\n    lodash.update = update;\n    lodash.updateWith = updateWith;\n    lodash.values = values;\n    lodash.valuesIn = valuesIn;\n    lodash.without = without;\n    lodash.words = words;\n    lodash.wrap = wrap;\n    lodash.xor = xor;\n    lodash.xorBy = xorBy;\n    lodash.xorWith = xorWith;\n    lodash.zip = zip;\n    lodash.zipObject = zipObject;\n    lodash.zipObjectDeep = zipObjectDeep;\n    lodash.zipWith = zipWith;\n\n    // Add aliases.\n    lodash.entries = toPairs;\n    lodash.entriesIn = toPairsIn;\n    lodash.extend = assignIn;\n    lodash.extendWith = assignInWith;\n\n    // Add methods to `lodash.prototype`.\n    mixin(lodash, lodash);\n\n    /*------------------------------------------------------------------------*/\n\n    // Add methods that return unwrapped values in chain sequences.\n    lodash.add = add;\n    lodash.attempt = attempt;\n    lodash.camelCase = camelCase;\n    lodash.capitalize = capitalize;\n    lodash.ceil = ceil;\n    lodash.clamp = clamp;\n    lodash.clone = clone;\n    lodash.cloneDeep = cloneDeep;\n    lodash.cloneDeepWith = cloneDeepWith;\n    lodash.cloneWith = cloneWith;\n    lodash.conformsTo = conformsTo;\n    lodash.deburr = deburr;\n    lodash.defaultTo = defaultTo;\n    lodash.divide = divide;\n    lodash.endsWith = endsWith;\n    lodash.eq = eq;\n    lodash.escape = escape;\n    lodash.escapeRegExp = escapeRegExp;\n    lodash.every = every;\n    lodash.find = find;\n    lodash.findIndex = findIndex;\n    lodash.findKey = findKey;\n    lodash.findLast = findLast;\n    lodash.findLastIndex = findLastIndex;\n    lodash.findLastKey = findLastKey;\n    lodash.floor = floor;\n    lodash.forEach = forEach;\n    lodash.forEachRight = forEachRight;\n    lodash.forIn = forIn;\n    lodash.forInRight = forInRight;\n    lodash.forOwn = forOwn;\n    lodash.forOwnRight = forOwnRight;\n    lodash.get = get;\n    lodash.gt = gt;\n    lodash.gte = gte;\n    lodash.has = has;\n    lodash.hasIn = hasIn;\n    lodash.head = head;\n    lodash.identity = identity;\n    lodash.includes = includes;\n    lodash.indexOf = indexOf;\n    lodash.inRange = inRange;\n    lodash.invoke = invoke;\n    lodash.isArguments = isArguments;\n    lodash.isArray = isArray;\n    lodash.isArrayBuffer = isArrayBuffer;\n    lodash.isArrayLike = isArrayLike;\n    lodash.isArrayLikeObject = isArrayLikeObject;\n    lodash.isBoolean = isBoolean;\n    lodash.isBuffer = isBuffer;\n    lodash.isDate = isDate;\n    lodash.isElement = isElement;\n    lodash.isEmpty = isEmpty;\n    lodash.isEqual = isEqual;\n    lodash.isEqualWith = isEqualWith;\n    lodash.isError = isError;\n    lodash.isFinite = isFinite;\n    lodash.isFunction = isFunction;\n    lodash.isInteger = isInteger;\n    lodash.isLength = isLength;\n    lodash.isMap = isMap;\n    lodash.isMatch = isMatch;\n    lodash.isMatchWith = isMatchWith;\n    lodash.isNaN = isNaN;\n    lodash.isNative = isNative;\n    lodash.isNil = isNil;\n    lodash.isNull = isNull;\n    lodash.isNumber = isNumber;\n    lodash.isObject = isObject;\n    lodash.isObjectLike = isObjectLike;\n    lodash.isPlainObject = isPlainObject;\n    lodash.isRegExp = isRegExp;\n    lodash.isSafeInteger = isSafeInteger;\n    lodash.isSet = isSet;\n    lodash.isString = isString;\n    lodash.isSymbol = isSymbol;\n    lodash.isTypedArray = isTypedArray;\n    lodash.isUndefined = isUndefined;\n    lodash.isWeakMap = isWeakMap;\n    lodash.isWeakSet = isWeakSet;\n    lodash.join = join;\n    lodash.kebabCase = kebabCase;\n    lodash.last = last;\n    lodash.lastIndexOf = lastIndexOf;\n    lodash.lowerCase = lowerCase;\n    lodash.lowerFirst = lowerFirst;\n    lodash.lt = lt;\n    lodash.lte = lte;\n    lodash.max = max;\n    lodash.maxBy = maxBy;\n    lodash.mean = mean;\n    lodash.meanBy = meanBy;\n    lodash.min = min;\n    lodash.minBy = minBy;\n    lodash.stubArray = stubArray;\n    lodash.stubFalse = stubFalse;\n    lodash.stubObject = stubObject;\n    lodash.stubString = stubString;\n    lodash.stubTrue = stubTrue;\n    lodash.multiply = multiply;\n    lodash.nth = nth;\n    lodash.noConflict = noConflict;\n    lodash.noop = noop;\n    lodash.now = now;\n    lodash.pad = pad;\n    lodash.padEnd = padEnd;\n    lodash.padStart = padStart;\n    lodash.parseInt = parseInt;\n    lodash.random = random;\n    lodash.reduce = reduce;\n    lodash.reduceRight = reduceRight;\n    lodash.repeat = repeat;\n    lodash.replace = replace;\n    lodash.result = result;\n    lodash.round = round;\n    lodash.runInContext = runInContext;\n    lodash.sample = sample;\n    lodash.size = size;\n    lodash.snakeCase = snakeCase;\n    lodash.some = some;\n    lodash.sortedIndex = sortedIndex;\n    lodash.sortedIndexBy = sortedIndexBy;\n    lodash.sortedIndexOf = sortedIndexOf;\n    lodash.sortedLastIndex = sortedLastIndex;\n    lodash.sortedLastIndexBy = sortedLastIndexBy;\n    lodash.sortedLastIndexOf = sortedLastIndexOf;\n    lodash.startCase = startCase;\n    lodash.startsWith = startsWith;\n    lodash.subtract = subtract;\n    lodash.sum = sum;\n    lodash.sumBy = sumBy;\n    lodash.template = template;\n    lodash.times = times;\n    lodash.toFinite = toFinite;\n    lodash.toInteger = toInteger;\n    lodash.toLength = toLength;\n    lodash.toLower = toLower;\n    lodash.toNumber = toNumber;\n    lodash.toSafeInteger = toSafeInteger;\n    lodash.toString = toString;\n    lodash.toUpper = toUpper;\n    lodash.trim = trim;\n    lodash.trimEnd = trimEnd;\n    lodash.trimStart = trimStart;\n    lodash.truncate = truncate;\n    lodash.unescape = unescape;\n    lodash.uniqueId = uniqueId;\n    lodash.upperCase = upperCase;\n    lodash.upperFirst = upperFirst;\n\n    // Add aliases.\n    lodash.each = forEach;\n    lodash.eachRight = forEachRight;\n    lodash.first = head;\n\n    mixin(lodash, (function() {\n      var source = {};\n      baseForOwn(lodash, function(func, methodName) {\n        if (!hasOwnProperty.call(lodash.prototype, methodName)) {\n          source[methodName] = func;\n        }\n      });\n      return source;\n    }()), { 'chain': false });\n\n    /*------------------------------------------------------------------------*/\n\n    /**\n     * The semantic version number.\n     *\n     * @static\n     * @memberOf _\n     * @type {string}\n     */\n    lodash.VERSION = VERSION;\n\n    // Assign default placeholders.\n    arrayEach(['bind', 'bindKey', 'curry', 'curryRight', 'partial', 'partialRight'], function(methodName) {\n      lodash[methodName].placeholder = lodash;\n    });\n\n    // Add `LazyWrapper` methods for `_.drop` and `_.take` variants.\n    arrayEach(['drop', 'take'], function(methodName, index) {\n      LazyWrapper.prototype[methodName] = function(n) {\n        n = n === undefined ? 1 : nativeMax(toInteger(n), 0);\n\n        var result = (this.__filtered__ && !index)\n          ? new LazyWrapper(this)\n          : this.clone();\n\n        if (result.__filtered__) {\n          result.__takeCount__ = nativeMin(n, result.__takeCount__);\n        } else {\n          result.__views__.push({\n            'size': nativeMin(n, MAX_ARRAY_LENGTH),\n            'type': methodName + (result.__dir__ < 0 ? 'Right' : '')\n          });\n        }\n        return result;\n      };\n\n      LazyWrapper.prototype[methodName + 'Right'] = function(n) {\n        return this.reverse()[methodName](n).reverse();\n      };\n    });\n\n    // Add `LazyWrapper` methods that accept an `iteratee` value.\n    arrayEach(['filter', 'map', 'takeWhile'], function(methodName, index) {\n      var type = index + 1,\n          isFilter = type == LAZY_FILTER_FLAG || type == LAZY_WHILE_FLAG;\n\n      LazyWrapper.prototype[methodName] = function(iteratee) {\n        var result = this.clone();\n        result.__iteratees__.push({\n          'iteratee': getIteratee(iteratee, 3),\n          'type': type\n        });\n        result.__filtered__ = result.__filtered__ || isFilter;\n        return result;\n      };\n    });\n\n    // Add `LazyWrapper` methods for `_.head` and `_.last`.\n    arrayEach(['head', 'last'], function(methodName, index) {\n      var takeName = 'take' + (index ? 'Right' : '');\n\n      LazyWrapper.prototype[methodName] = function() {\n        return this[takeName](1).value()[0];\n      };\n    });\n\n    // Add `LazyWrapper` methods for `_.initial` and `_.tail`.\n    arrayEach(['initial', 'tail'], function(methodName, index) {\n      var dropName = 'drop' + (index ? '' : 'Right');\n\n      LazyWrapper.prototype[methodName] = function() {\n        return this.__filtered__ ? new LazyWrapper(this) : this[dropName](1);\n      };\n    });\n\n    LazyWrapper.prototype.compact = function() {\n      return this.filter(identity);\n    };\n\n    LazyWrapper.prototype.find = function(predicate) {\n      return this.filter(predicate).head();\n    };\n\n    LazyWrapper.prototype.findLast = function(predicate) {\n      return this.reverse().find(predicate);\n    };\n\n    LazyWrapper.prototype.invokeMap = baseRest(function(path, args) {\n      if (typeof path == 'function') {\n        return new LazyWrapper(this);\n      }\n      return this.map(function(value) {\n        return baseInvoke(value, path, args);\n      });\n    });\n\n    LazyWrapper.prototype.reject = function(predicate) {\n      return this.filter(negate(getIteratee(predicate)));\n    };\n\n    LazyWrapper.prototype.slice = function(start, end) {\n      start = toInteger(start);\n\n      var result = this;\n      if (result.__filtered__ && (start > 0 || end < 0)) {\n        return new LazyWrapper(result);\n      }\n      if (start < 0) {\n        result = result.takeRight(-start);\n      } else if (start) {\n        result = result.drop(start);\n      }\n      if (end !== undefined) {\n        end = toInteger(end);\n        result = end < 0 ? result.dropRight(-end) : result.take(end - start);\n      }\n      return result;\n    };\n\n    LazyWrapper.prototype.takeRightWhile = function(predicate) {\n      return this.reverse().takeWhile(predicate).reverse();\n    };\n\n    LazyWrapper.prototype.toArray = function() {\n      return this.take(MAX_ARRAY_LENGTH);\n    };\n\n    // Add `LazyWrapper` methods to `lodash.prototype`.\n    baseForOwn(LazyWrapper.prototype, function(func, methodName) {\n      var checkIteratee = /^(?:filter|find|map|reject)|While$/.test(methodName),\n          isTaker = /^(?:head|last)$/.test(methodName),\n          lodashFunc = lodash[isTaker ? ('take' + (methodName == 'last' ? 'Right' : '')) : methodName],\n          retUnwrapped = isTaker || /^find/.test(methodName);\n\n      if (!lodashFunc) {\n        return;\n      }\n      lodash.prototype[methodName] = function() {\n        var value = this.__wrapped__,\n            args = isTaker ? [1] : arguments,\n            isLazy = value instanceof LazyWrapper,\n            iteratee = args[0],\n            useLazy = isLazy || isArray(value);\n\n        var interceptor = function(value) {\n          var result = lodashFunc.apply(lodash, arrayPush([value], args));\n          return (isTaker && chainAll) ? result[0] : result;\n        };\n\n        if (useLazy && checkIteratee && typeof iteratee == 'function' && iteratee.length != 1) {\n          // Avoid lazy use if the iteratee has a \"length\" value other than `1`.\n          isLazy = useLazy = false;\n        }\n        var chainAll = this.__chain__,\n            isHybrid = !!this.__actions__.length,\n            isUnwrapped = retUnwrapped && !chainAll,\n            onlyLazy = isLazy && !isHybrid;\n\n        if (!retUnwrapped && useLazy) {\n          value = onlyLazy ? value : new LazyWrapper(this);\n          var result = func.apply(value, args);\n          result.__actions__.push({ 'func': thru, 'args': [interceptor], 'thisArg': undefined });\n          return new LodashWrapper(result, chainAll);\n        }\n        if (isUnwrapped && onlyLazy) {\n          return func.apply(this, args);\n        }\n        result = this.thru(interceptor);\n        return isUnwrapped ? (isTaker ? result.value()[0] : result.value()) : result;\n      };\n    });\n\n    // Add `Array` methods to `lodash.prototype`.\n    arrayEach(['pop', 'push', 'shift', 'sort', 'splice', 'unshift'], function(methodName) {\n      var func = arrayProto[methodName],\n          chainName = /^(?:push|sort|unshift)$/.test(methodName) ? 'tap' : 'thru',\n          retUnwrapped = /^(?:pop|shift)$/.test(methodName);\n\n      lodash.prototype[methodName] = function() {\n        var args = arguments;\n        if (retUnwrapped && !this.__chain__) {\n          var value = this.value();\n          return func.apply(isArray(value) ? value : [], args);\n        }\n        return this[chainName](function(value) {\n          return func.apply(isArray(value) ? value : [], args);\n        });\n      };\n    });\n\n    // Map minified method names to their real names.\n    baseForOwn(LazyWrapper.prototype, function(func, methodName) {\n      var lodashFunc = lodash[methodName];\n      if (lodashFunc) {\n        var key = (lodashFunc.name + ''),\n            names = realNames[key] || (realNames[key] = []);\n\n        names.push({ 'name': methodName, 'func': lodashFunc });\n      }\n    });\n\n    realNames[createHybrid(undefined, WRAP_BIND_KEY_FLAG).name] = [{\n      'name': 'wrapper',\n      'func': undefined\n    }];\n\n    // Add methods to `LazyWrapper`.\n    LazyWrapper.prototype.clone = lazyClone;\n    LazyWrapper.prototype.reverse = lazyReverse;\n    LazyWrapper.prototype.value = lazyValue;\n\n    // Add chain sequence methods to the `lodash` wrapper.\n    lodash.prototype.at = wrapperAt;\n    lodash.prototype.chain = wrapperChain;\n    lodash.prototype.commit = wrapperCommit;\n    lodash.prototype.next = wrapperNext;\n    lodash.prototype.plant = wrapperPlant;\n    lodash.prototype.reverse = wrapperReverse;\n    lodash.prototype.toJSON = lodash.prototype.valueOf = lodash.prototype.value = wrapperValue;\n\n    // Add lazy aliases.\n    lodash.prototype.first = lodash.prototype.head;\n\n    if (symIterator) {\n      lodash.prototype[symIterator] = wrapperToIterator;\n    }\n    return lodash;\n  });\n\n  /*--------------------------------------------------------------------------*/\n\n  // Export lodash.\n  var _ = runInContext();\n\n  // Some AMD build optimizers, like r.js, check for condition patterns like:\n  if (true) {\n    // Expose Lodash on the global object to prevent errors when Lodash is\n    // loaded by a script tag in the presence of an AMD loader.\n    // See http://requirejs.org/docs/errors.html#mismatch for more details.\n    // Use `_.noConflict` to remove Lodash from the global object.\n    root._ = _;\n\n    // Define as an anonymous module so, through path mapping, it can be\n    // referenced as the \"underscore\" module.\n    !(__WEBPACK_AMD_DEFINE_RESULT__ = function() {\n      return _;\n    }.call(exports, __webpack_require__, exports, module),\n\t\t\t\t__WEBPACK_AMD_DEFINE_RESULT__ !== undefined && (module.exports = __WEBPACK_AMD_DEFINE_RESULT__));\n  }\n  // Check for `exports` after `define` in case a build optimizer adds it.\n  else if (freeModule) {\n    // Export for Node.js.\n    (freeModule.exports = _)._ = _;\n    // Export for CommonJS support.\n    freeExports._ = _;\n  }\n  else {\n    // Export to the global object.\n    root._ = _;\n  }\n}.call(this));\n\n/* WEBPACK VAR INJECTION */}.call(exports, __webpack_require__(35), __webpack_require__(268)(module)))\n\n/***/ }),\n\n/***/ 268:\n/***/ (function(module, exports) {\n\nmodule.exports = function(module) {\r\n\tif(!module.webpackPolyfill) {\r\n\t\tmodule.deprecate = function() {};\r\n\t\tmodule.paths = [];\r\n\t\t// module.parent = undefined by default\r\n\t\tif(!module.children) module.children = [];\r\n\t\tObject.defineProperty(module, \"loaded\", {\r\n\t\t\tenumerable: true,\r\n\t\t\tget: function() {\r\n\t\t\t\treturn module.l;\r\n\t\t\t}\r\n\t\t});\r\n\t\tObject.defineProperty(module, \"id\", {\r\n\t\t\tenumerable: true,\r\n\t\t\tget: function() {\r\n\t\t\t\treturn module.i;\r\n\t\t\t}\r\n\t\t});\r\n\t\tmodule.webpackPolyfill = 1;\r\n\t}\r\n\treturn module;\r\n};\r\n\n\n/***/ }),\n\n/***/ 337:\n/***/ (function(module, exports) {\n\nmodule.exports = [{\"id\":\"18U.S.C.§3551\",\"content\":\"<p><strong>§ 3551. Authorized sentences</strong></p><p><strong>(a) In general.</strong>—Except as otherwise specifically provided, a defendant who has been found guilty of an offense described in any Federal statute, including sections 13 and 1153 of this title, other than an Act of Congress applicable exclusively in the District of Columbia or the Uniform Code of Military Justice, shall be sentenced in accordance with the provisions of this chapter so as to achieve the purposes set forth in subparagraphs (A) through (D) of section 3553(a)(2) to the extent that they are applicable in light of all the circumstances of the case.</p><p><strong>(b) Individuals.</strong>—An individual found guilty of an offense shall be sentenced, in accordance with the provisions of section 3553, to—</p><blockquote><p><strong>(1)</strong> a term of probation as authorized by subchapter B;</p><p><strong>(2)</strong> a fine as authorized by subchapter C; or</p><p><strong>(3)</strong> a term of imprisonment as authorized by subchapter D.</p></blockquote><p>A sentence to pay a fine may be imposed in addition to any other sentence. A sanction authorized by section 3554, 3555, or 3556 may be imposed in addition to the sentence required by this subsection.</p><p><strong>(c) Organizations.</strong>—An organization found guilty of an offense shall be sentenced, in accordance with the provisions of section 3553, to—</p><blockquote><p><strong>(1)</strong> a term of probation as authorized by subchapter B; or</p><p><strong>(2)</strong> a fine as authorized by subchapter C.</p></blockquote><p>A sentence to pay a fine may be imposed in addition to a sentence to probation. A sanction authorized by section 3554, 3555, or 3556 may be imposed in addition to the sentence required by this subsection.</p><p>(Added Pub.L. 98–473, Title II, § 212(a)(2), Oct. 12, 1984, 98 Stat. 1988, and amended Pub.L. 101–647, Title XVI, § 1602, Nov. 29, 1990, 104 Stat. 4843.)</p><p><strong>EDITORIAL NOTES</strong></p><p><strong>Effective Date and Savings Provisions of Sentencing Reform Act of 1984 (Pub.L. 98–473, Title II, c. II, §§ 211 to 239); Terms of Members of U.S. Sentencing Commission and U.S. Parole Commission; Parole Release Dates; Membership of National Institute of Corrections, Advisory Corrections Council, and U.S. Sentencing Commission.</strong> Section 235 of Pub.L. 98–473, Title II, c. II, Oct. 12, 1984, 98 Stat. 2031, as amended by Pub.L. 99–217, §§ 2, 4, Dec. 26, 1985, 99 Stat. 1728; Pub.L. 99–646, § 35, Nov. 10, 1986, 100 Stat. 3599; Pub.L. 100–182, § 2, Dec. 7, 1987, 101 Stat. 1266; Pub.L. 104–232, § 4, Oct. 2, 1996, 110 Stat. 3056, provided:</p><p>“<strong>(a)(1)</strong> This chapter [chapter II, §§ 211–239, of Title II of Pub.L. 98–473] shall take effect on the first day of the first calendar month beginning 36 months after the date of enactment [Oct. 12, 1984] and shall apply only to offenses committed after the taking effect of this chapter, except that—</p><p><strong>(A)</strong> the repeal of chapter 402 of title 18, United States Code, shall take effect on the date of enactment;</p><p><strong>(B)(i)</strong> chapter 58 of title 28, United States Code, shall take effect on the date of enactment of this Act or October 1, 1983, whichever occurs later, and the United States Sentencing Commission shall submit the initial sentencing guidelines promulgated under section 994(a)(1) of title 28 to the Congress within 30 months of the effective date of such chapter 58; and</p><p><strong>(ii)</strong> the sentencing guidelines promulgated pursuant to section 994(a)(1) shall not go into effect until—</p><blockquote><p><strong>(I)</strong> the United States Sentencing Commission has submitted the initial set of sentencing guidelines to the Congress pursuant to subparagraph (B)(i), along with a report stating the reasons for the Commission’s recommendations;</p><p><strong>(II)</strong> the General Accounting Office has undertaken a study of the guidelines, and their potential impact in comparison with the operation of the existing sentencing and parole release system, and has, within one hundred and fifty days of submission of the guidelines, reported to the Congress the results of its study; and</p><p><strong>(III)</strong> the day after the Congress has had six months after the date described in subclause (I) in which to examine the guidelines and consider the reports; and</p><p><strong>(IV)</strong> section 212(a)(2) [enacting chapter 227, sentences, comprised of sections 3551 to 3559, 3561 to 3566, 3571 to 3574, and 3581 to 3586; and chapter 229, postsentence administration, comprised of sections 3601 to 3607, 3611 to 3615, and 3621 to 3625 of this title; and repealing former chapter 227, sentence, judgment, and execution, comprised of sections 3561 to 3580; former chapter 229, fines, penalties, and forfeitures, comprised of sections 3611 to 3620; and former chapter 231, probation, comprised of sections 3651 to 3656 of this title] takes effect, in the case of the initial sentencing guidelines so promulgated.</p></blockquote><p><strong>(2)</strong> For the purposes of section 992(a) of title 28, the terms of the first members of the United States Sentencing Commission shall not begin to run until the sentencing guidelines go into effect pursuant to paragraph (1)(B)(ii).</p><p><strong>(b)(1)</strong> The following provisions of law in effect on the day before the effective date of this Act shall remain in effect for five years after the effective date as to an individual who committed an offense or an act of juvenile delinquency before the effective date and as to a term of imprisonment during the period described in subsection (a)(1)(B):</p><blockquote><p><strong>(A)</strong> Chapter 311 of title 18, United States Code.</p><p><strong>(B)</strong> Chapter 309 of title 18, United States Code.</p><p><strong>(C)</strong> Sections 4251 through 4255 of title 18, United States Code.</p><p><strong>(D)</strong> Sections 5041 and 5042 of title 18, United States Code.</p><p><strong>(E)</strong> Sections 5017 through 5020 of title 18, United States Code, as to a sentence imposed before the date of enactment.</p><p><strong>(F)</strong> The maximum term of imprisonment in effect on the effective date for an offense committed before the effective date.</p><p><strong>(G)</strong> Any other law relating to a violation of a condition of release or to arrest authority with regard to a person who violates a condition of release.</p></blockquote><p><strong>[(2)</strong> Repealed. Pub.L. 104–232, § 4, Oct. 2, 1996, 110 Stat. 3056.<strong>]</strong></p><p><strong>(3)</strong> The United States Parole Commission shall set a release date, for an individual who will be in its jurisdiction the day before the expiration of five years after the effective date of this Act, pursuant to section 4206 of title 18, United States Code. A release date set pursuant to this paragraph shall be set early enough to permit consideration of an appeal of the release date, in accordance with Parole Commission procedures, before the expiration of five years following the effective date of this Act.</p><p><strong>(4)</strong> Notwithstanding the other provisions of this subsection, all laws in effect on the day before the effective date of this Act pertaining to an individual who is—</p><blockquote><p><strong>(A)</strong> released pursuant to a provision listed in paragraph (1); and</p><p><strong>(B)(i)</strong> subject to supervision on the day before the expiration of the five‑year period following the effective date of this Act; or</p><p><strong>(ii)</strong> released on a date set pursuant to paragraph (3);</p></blockquote><p>including laws pertaining to terms and conditions of release, revocation of release, provision of counsel, and payment of transportation costs, shall remain in effect as to the individual until the expiration of his sentence, except that the district court shall determine, in accord with the Federal Rules of Criminal Procedure, whether release should be revoked or the conditions of release amended for violation of a condition of release.</p><p><strong>(5)</strong> Notwithstanding the provisions of section 991 of title 28, United States Code, and sections 4351 and 5002 of title 18, United States Code, the Chairman of the United States Parole Commission or his designee shall be a member of the National Institute of Corrections, and the Chairman of the United States Parole Commission shall be a member of the Advisory Corrections Council and a nonvoting member of the United States Sentencing Commission, ex officio, until the expiration of the five‑year period following the effective date of this Act. Notwithstanding the provisions of section 4351 of title 18, during the five‑year period the National Institute of Corrections shall have seventeen members, including seven ex officio members. Notwithstanding the provisions of section 991 of title 28, during the five‑year period the United States Sentencing Commission shall consist of nine members, including two ex officio, nonvoting members.”</p><p>[Pub.L. 113–47, § 2, Oct. 31, 2013, 127 Stat. 572, provided that: “For purposes of section 235(b) of the Sentencing Reform Act of 1984 (18 U.S.C. 3551 note; Public Law 98–473; 98 Stat. 2032), as such section relates to chapter 311 of title 18, United States Code, and the United States Parole Commission, each reference in such section to ‘26 years’ or ‘26‑year period’ shall be deemed a reference to ‘31 years’ or ‘31‑year period’, respectively.”]</p><p>[Pub.L. 112–44, § 2, Oct. 21, 2011, 125 Stat. 532, provided that: “For purposes of section 235(b) of the Sentencing Reform Act of 1984 (18 U.S.C. 3551 note; Public Law 98–473; 98 Stat. 2032), as such section relates to chapter 311 of title 18, United States Code, and the United States Parole Commission, each reference in such section to ‘24 years’ or ‘24‑year period’ shall be deemed a reference to ‘26 years’ or ‘26‑year period’, respectively.”]</p><p>[Pub.L. 110–312, § 2, Aug. 12, 2008, 122 Stat. 3013, provided that: “For purposes of section 235(b) of the Sentencing Reform Act of 1984 (18 U.S.C. 3551 note; Public Law 98–473; 98 Stat. 2032) [set out in an Effective and Applicability Provisions note under this section], as such section relates to chapter 311 of title 18, United States Code [18 U.S.C.A. § 4201 et seq.], and the United States Parole Commission, each reference in such section to ‘21 years’ or ‘21‑year period’ shall be deemed a reference to ‘24 years’ or ‘24‑year period’, respectively.”]</p><p>[Pub.L. 109–76, § 2, Sept. 29, 2005, 119 Stat. 2035, provided that: “For purposes of section 235(b) of the Sentencing Reform Act of 1984 (98 Stat. 2032) [Pub.L. 98–473, Title II, § 235, Oct. 12, 1984, 98 Stat. 2032, as amended, set out as a note under this section] as such section relates to chapter 311 of title 18, United States Code, [18 U.S.C.A. § 4201 et seq.] and the United States Parole Commission, each reference in such section to ‘eighteen years’ or ‘eighteen‑year period’ shall be deemed a reference to ‘21 years’ or ‘21‑year period’, respectively.”]</p><p>[Pub.L. 107–273, Div. C, Title I, § 11017(a), Nov. 2, 2002, 116 Stat. 1824, provided that: “For purposes of section 235(b) of the Sentencing Reform Act of 1984 (98 Stat. 2032) [section 235(b) of Pub.L. 98–473, set out as a note under this section], as such section relates to chapter 311 of title 18, United States Code [18 U.S.C.A. § 4201 et seq. (repealed)], and the Parole Commission, each reference in such section to ‘fifteen years’ or ‘fifteen‑year period’ shall be deemed to be a reference to ‘eighteen years’ or ‘eighteen‑year period’, respectively.” See also section 11017(b) and (c) of Pub.L. 107–273, set out as a note under 18 U.S.C.A. § 4202]</p><p>[Pub.L. 104–232, § 3(b)(2), Oct. 2, 1996, 110 Stat. 3056, provided that: “Effective on the date such plan [an alternative plan by the Attorney General for the transfer of the United States Parole Commission’s functions to another entity within the Department of Justice pursuant to section 3 of Pub.L. 104–232, set out as a note under section 4201 of this title] takes effect, paragraphs (3) and (4) of section 235(b) of the Sentencing Reform Act of 1984 (98 Stat. 2032) [section 235(b)(3) and (4) of Pub.L. 98–473, set out above] are repealed.”]</p><p>[Pub.L. 104–232, § 2(a), Oct. 2, 1996, 110 Stat. 3055, provided that: “For purposes of section 235(b) of the Sentencing Reform Act of 1984 (98 Stat. 2032) [section 235(b) of Pub.L. 98–473, set out as a note under this section], as it related to chapter 311 of title 18, United States Code [section 4201 et seq. of this title], and the Parole Commission, each reference in such section to ‘ten years’ or ‘ten-year period’ shall be deemed to be a reference to ‘fifteen years’ or ‘fifteen-year period’, respectively.”]</p><p>[Pub.L. 101–650, Title III, § 316, Dec. 1, 1990, 104 Stat. 5115, provided that: “For the purposes of section 235(b) of Public Law 98–473 [set out as a note under this section] as it relates to chapter 311 of title 18, United States Code [section 4201 et seq. of this title], and the United States Parole Commission, each reference in such section to ‘five years’ or a ‘five-year period’ shall be deemed a reference to ‘ten years’ or a ‘ten-year period’, respectively.”]</p><p><strong>Sentencing Considerations Prior to Enactment of Guidelines.</strong> Section 239 of Pub.L. 98–473, Title II, c. II, Oct. 12, 1984, 98 Stat. 2039, provided:</p><p>“Since, due to an impending crisis in prison over‑crowding, available Federal prison space must be treated as a scarce resource in the sentencing of criminal defendants;</p><p>“Since, sentencing decisions should be designed to ensure that prison resources are, first and foremost, reserved for those violent and serious criminal offenders who pose the most dangerous threat to society;</p><p>“Since, in cases of nonviolent and nonserious offenders, the interests of society as a whole as well as individual victims of crime can continue to be served through the imposition of alternative sentences, such as restitution and community service;</p><p>“Since, in the two years preceding the enactment of sentencing guidelines, Federal sentencing practice should ensure that scarce prison resources are available to house violent and serious criminal offenders by the increased use of restitution, community service, and other alternative sentences in cases of nonviolent and nonserious offenders: Now, therefore, be it</p><p>“Declared, That it is the sense of the Senate that in the two years preceding the enactment of the sentencing guidelines, Federal judges, in determining the particular sentence to be imposed, consider—</p><blockquote><p><strong>(1)</strong> the nature and circumstances of the offense and the history and characteristics of the defendant;</p><p><strong>(2)</strong> the general appropriateness of imposing a sentence other than imprisonment in cases in which the defendant has not been convicted of a crime of violence or otherwise serious offense; and</p><p><strong>(3)</strong> the general appropriateness of imposing a sentence of imprisonment in cases in which the defendant has been convicted of a crime of violence or otherwise serious offense.”</p></blockquote>\"},{\"id\":\"18U.S.C.§3552\",\"content\":\"<p><strong>§ 3552. Presentence reports</strong></p><p><strong>(a) Presentence investigation and report by probation officer.</strong>—A United States probation officer shall make a presentence investigation of a defendant that is required pursuant to the provisions of Rule 32(c) of the Federal Rules of Criminal Procedure, and shall, before the imposition of sentence, report the results of the investigation to the court.</p><p><strong>(b) Presentence study and report by bureau of prisons.</strong>—If the court, before or after its receipt of a report specified in subsection (a) or (c), desires more information than is otherwise available to it as a basis for determining the sentence to be imposed on a defendant found guilty of a misdemeanor or felony, it may order a study of the defendant. The study shall be conducted in the local community by qualified consultants unless the sentencing judge finds that there is a compelling reason for the study to be done by the Bureau of Prisons or there are no adequate professional resources available in the local community to perform the study. The period of the study shall be no more than sixty days. The order shall specify the additional information that the court needs before determining the sentence to be imposed. Such an order shall be treated for administrative purposes as a provisional sentence of imprisonment for the maximum term authorized by section 3581(b) for the offense committed. The study shall inquire into such matters as are specified by the court and any other matters that the Bureau of Prisons or the professional consultants believe are pertinent to the factors set forth in section 3553(a). The period of the study may, in the discretion of the court, be extended for an additional period of not more than sixty days. By the expiration of the period of the study, or by the expiration of any extension granted by the court, the United States marshal shall, if the defendant is in custody, return the defendant to the court for final sentencing. The Bureau of Prisons or the professional consultants shall provide the court with a written report of the pertinent results of the study and make to the court whatever recommendations the Bureau or the consultants believe will be helpful to a proper resolution of the case. The report shall include recommendations of the Bureau or the consultants concerning the guidelines and policy statements, promulgated by the Sentencing Commission pursuant to 28 U.S.C. 994(a), that they believe are applicable to the defendant’s case. After receiving the report and the recommendations, the court shall proceed finally to sentence the defendant in accordance with the sentencing alternatives and procedures available under this chapter.</p><p><strong>(c) Presentence examination and report by psychiatric or psychological examiners.</strong>—If the court, before or after its receipt of a report specified in subsection (a) or (b) desires more information than is otherwise available to it as a basis for determining the mental condition of the defendant, the court may order the same psychiatric or psychological examination and report thereon as may be ordered under section 4244(b) of this title.</p><p><strong>(d) Disclosure of presentence reports.</strong>—The court shall assure that a report filed pursuant to this section is disclosed to the defendant, the counsel for the defendant, and the attorney for the Government at least ten days prior to the date set for sentencing, unless this minimum period is waived by the defendant. The court shall provide a copy of the presentence report to the attorney for the Government to use in collecting an assessment, criminal fine, forfeiture or restitution imposed.</p><p>(Added Pub.L. 98–473, Title II, § 212(a)(2), Oct. 12, 1984, 98 Stat. 1988, and amended Pub.L. 99–646, § 7(a), Nov. 10, 1986, 100 Stat. 3593; Pub.L. 101–647, Title XXXVI, § 3625, Nov. 29, 1990, 104 Stat. 4965).</p><p><strong>EDITORIAL NOTES</strong></p><p><strong>Use of Certain Technology to Facilitate Criminal Conduct.</strong> Pub.L. 104–294, Title V, § 501, Oct. 11, 1996, 110 Stat. 3497, provided that:</p><p>“<strong>(a) Information.—</strong>The Administrative Office of the United States courts shall establish policies and procedures for the inclusion in all presentence reports of information that specifically identifies and describes any use of encryption or scrambling technology that would be relevant to an enhancement under section 3C1.1 (dealing with Obstructing or Impeding the Administration of Justice) of the Sentencing Guidelines [set out in this title] or to offense conduct under the Sentencing Guidelines.</p><p><strong>(b) Compiling and report.—</strong>The United States Sentencing Commission shall—</p><blockquote><p><strong>(1)</strong> compile and analyze any information contained in documentation described in subsection (a) relating to the use of encryption or scrambling technology to facilitate or conceal criminal conduct; and</p><p><strong>(2)</strong> based on the information compiled and analyzed under paragraph (1), annually report to the Congress on the nature and extent of the use of encryption or scrambling technology to facilitate or conceal criminal conduct.”</p></blockquote>\"},{\"id\":\"18U.S.C.§3553\",\"content\":\"<p><strong>§ 3553. Imposition of a sentence</strong></p><p><strong>(a) Factors to be considered in imposing a sentence.</strong>—The court shall impose a sentence sufficient, but not greater than necessary, to comply with the purposes set forth in paragraph (2) of this subsection. The court, in determining the particular sentence to be imposed, shall consider—</p><blockquote><p><strong>(1)</strong> the nature and circumstances of the offense and the history and characteristics of the defendant;</p><p><strong>(2)</strong> the need for the sentence imposed—</p><p><strong>(A)</strong> to reflect the seriousness of the offense, to promote respect for the law, and to provide just punishment for the offense;</p><p><strong>(B)</strong> to afford adequate deterrence to criminal conduct;</p><p><strong>(C)</strong> to protect the public from further crimes of the defendant; and</p><p><strong>(D)</strong> to provide the defendant with needed educational or vocational training, medical care, or other correctional treatment in the most effective manner;</p><p><strong>(3)</strong> the kinds of sentences available;</p><p><strong>(4)</strong> the kinds of sentence and the sentencing range established for—</p><p><strong>(A)</strong> the applicable category of offense committed by the applicable category of defendant as set forth in the guidelines—</p><p><strong>(i)</strong> issued by the Sentencing Commission pursuant to section 994(a)(1) of title 28, United States Code, subject to any amendments made to such guidelines by act of Congress (regardless of whether such amendments have yet to be incorporated by the Sentencing Commission into amendments issued under section 994(p) of title 28); and</p><p><strong>(ii)</strong> that, except as provided in section 3742(g), are in effect on the date the defendant is sentenced; or</p><p><strong>(B)</strong> in the case of a violation of probation or supervised release, the applicable guidelines or policy statements issued by the Sentencing Commission pursuant to section 994(a)(3) of title 28, United States Code, taking into account any amendments made to such guidelines or policy statements by act of Congress (regardless of whether such amendments have yet to be incorporated by the Sentencing Commission into amendments issued under section 994(p) of title 28);</p><p><strong>(5)</strong> any pertinent policy statement—</p><p><strong>(A)</strong> issued by the Sentencing Commission pursuant to section 994(a)(2) of title 28, United States Code , subject to any amendments made to such policy statement by act of Congress (regardless of whether such amendments have yet to be incorporated by the Sentencing Commission into amendments issued under section 994(p) of title 28); and</p><p><strong>(B)</strong> that, except as provided in section 3742(g), is in effect on the date the defendant is sentenced.</p><p><strong>(6)</strong> the need to avoid unwarranted sentence disparities among defendants with similar records who have been found guilty of similar conduct; and</p><p><strong>(7)</strong> the need to provide restitution to any victims of the offense.</p></blockquote><p><strong>(b) Application of guidelines in imposing a sentence.</strong>—<strong>(1) In general.—</strong>Except as provided in paragraph (2), the court shall impose a sentence of the kind, and within the range, referred to in subsection (a)(4) unless the court finds that there exists an aggravating or mitigating circumstance of a kind, or to a degree, not adequately taken into consideration by the Sentencing Commission in formulating the guidelines that should result in a sentence different from that described. In determining whether a circumstance was adequately taken into consideration, the court shall consider only the sentencing guidelines, policy statements, and official commentary of the Sentencing Commission. In the absence of an applicable sentencing guideline, the court shall impose an appropriate sentence, having due regard for the purposes set forth in subsection (a)(2). In the absence of an applicable sentencing guideline in the case of an offense other than a petty offense, the court shall also have due regard for the relationship of the sentence imposed to sentences prescribed by guidelines applicable to similar offenses and offenders, and to the applicable policy statements of the Sentencing Commission.</p><blockquote><p><strong>(2) Child crimes and sexual offenses.—</strong></p><p><strong>(A) Sentencing.—</strong>In sentencing a defendant convicted of an offense under section 1201 involving a minor victim, an offense under section 1591, or an offense under chapter 71, 109A, 110, or 117, the court shall impose a sentence of the kind, and within the range, referred to in subsection (a)(4) unless—</p><p><strong>(i)</strong> the court finds that there exists an aggravating circumstance of a kind, or to a degree, not adequately taken into consideration by the Sentencing Commission in formulating the guidelines that should result in a sentence greater than that described;</p><p><strong>(ii)</strong> the court finds that there exists a mitigating circumstance of a kind or to a degree, that—</p><p><strong>(I)</strong> has been affirmatively and specifically identified as a permissible ground of downward departure in the sentencing guidelines or policy statements issued under section 994(a) of title 28, taking account of any amendments to such sentencing guidelines or policy statements by Congress;</p><p><strong>(II)</strong> has not been taken into consideration by the Sentencing Commission in formulating the guidelines; and</p><p><strong>(III)</strong> should result in a sentence different from that described; or</p><p><strong>(iii)</strong> the court finds, on motion of the Government, that the defendant has provided substantial assistance in the investigation or prosecution of another person who has committed an offense and that this assistance established a mitigating circumstance of a kind, or to a degree, not adequately taken into consideration by the Sentencing Commission in formulating the guidelines that should result in a sentence lower than that described.</p></blockquote><p>In determining whether a circumstance was adequately taken into consideration, the court shall consider only the sentencing guidelines, policy statements, and official commentary of the Sentencing Commission, together with any amendments thereto by act of Congress. In the absence of an applicable sentencing guideline, the court shall impose an appropriate sentence, having due regard for the purposes set forth in subsection (a)(2). In the absence of an applicable sentencing guideline in the case of an offense other than a petty offense, the court shall also have due regard for the relationship of the sentence imposed to sentences prescribed by guidelines applicable to similar offenses and offenders, and to the applicable policy statements of the Sentencing Commission, together with any amendments to such guidelines or policy statements by act of Congress.</p><p><strong>(c) Statement of reasons for imposing a sentence.</strong>—The court, at the time of sentencing, shall state in open court the reasons for its imposition of the particular sentence, and, if the sentence—</p><blockquote><p><strong>(1)</strong> is of the kind, and within the range, described in subsection (a)(4), and that range exceeds 24 months, the reason for imposing a sentence at a particular point within the range; or</p><p><strong>(2)</strong> is not of the kind, or is outside the range, described in subsection (a)(4), the specific reason for the imposition of a sentence different from that described, which reasons must also be stated with specificity in a statement of reasons form issued under section 994(w)(1)(B) of title 28, except to the extent that the court relies upon statements received in camera in accordance with Federal Rule of Criminal Procedure 32. In the event that the court relies upon statements received in camera in accordance with Federal Rule of Criminal Procedure 32 the court shall state that such statement were so received and that it relied upon the content of such statements.</p></blockquote><p>If the court does not order restitution, or orders only partial restitution, the court shall include in the statement the reason therefor. The court shall provide a transcription or other appropriate public record of the court’s statement of reasons, together with the order of judgement and commitment, to the Probation System and to the Sentencing Commission,<a href='#fn1' class='footnoteRef' id='fnref1'><sup>1</sup></a> and, if the sentence includes a term of imprisonment, to the Bureau of Prisons.</p><p><strong>(d) Presentence procedure for an order of notice.</strong>—Prior to imposing an order of notice pursuant to section 3555, the court shall give notice to the defendant and the Government that it is considering imposing such an order. Upon motion of the defendant or the Government, or on its own motion, the court shall—</p><blockquote><p><strong>(1)</strong> permit the defendant and the Government to submit affidavits and written memoranda addressing matters relevant to the imposition of such an order;</p><p><strong>(2)</strong> afford counsel an opportunity in open court to address orally the appropriateness of the imposition of such an order; and</p><p><strong>(3)</strong> include in its statement of reasons pursuant to subsection (c) specific reasons underlying its determinations regarding the nature of such an order.</p></blockquote><p>Upon motion of the defendant or the Government, or on its own motion, the court may in its discretion employ any additional procedures that it concludes will not unduly complicate or prolong the sentencing process.</p><p><strong>(e) Limited authority to impose a sentence below a statutory minimum.</strong>—Upon motion of the Government, the court shall have the authority to impose a sentence below a level established by statute as a minimum sentence so as to reflect a defendant’s substantial assistance in the investigation or prosecution of another person who has committed an offense. Such sentence shall be imposed in accordance with the guidelines and policy statements issued by the Sentencing Commission pursuant to section 994 of title 28, United States Code.</p><p><strong>(f) Limitation on applicability of statutory minimums in certain cases.</strong>—Notwithstanding any other provision of law, in the case of an offense under section 401, 404, or 406 of the Controlled Substances Act (21 U.S.C. 841, 844, 846) or section 1010 or 1013 of the Controlled Substances Import and Export Act (21 U.S.C. 960, 963), the court shall impose a sentence pursuant to guidelines promulgated by the United States Sentencing Commission under section 994 of title 28 without regard to any statutory minimum sentence, if the court finds at sentencing, after the Government has been afforded the opportunity to make a recommendation, that—</p><blockquote><p><strong>(1)</strong> the defendant does not have more than 1 criminal history point, as determined under the sentencing guidelines;</p><p><strong>(2)</strong> the defendant did not use violence or credible threats of violence or possess a firearm or other dangerous weapon (or induce another participant to do so) in connection with the offense;</p><p><strong>(3)</strong> the offense did not result in death or serious bodily injury to any person;</p><p><strong>(4)</strong> the defendant was not an organizer, leader, manager, or supervisor of others in the offense, as determined under the sentencing guidelines and was not engaged in a continuing criminal enterprise, as defined in section 408 of the Controlled Substances Act; and</p><p><strong>(5)</strong> not later than the time of the sentencing hearing, the defendant has truthfully provided to the Government all information and evidence the defendant has concerning the offense or offenses that were part of the same course of conduct or of a common scheme or plan, but the fact that the defendant has no relevant or useful other information to provide or that the Government is already aware of the information shall not preclude a determination by the court that the defendant has complied with this requirement.</p></blockquote><p>(Added Pub.L. 98–473, Title II, § 212(a)(2), Oct. 12, 1984, 98 Stat. 1989, and amended Pub.L. 99–570, Title I, § 1007(b), Oct. 27, 1986, 100 Stat. 3707–7; Pub.L. 99–646, §§ 8(a), 9(a), 80(a), 81(a), Nov. 10, 1986, 100 Stat. 3593, 3619; Pub.L. 100–182, §§ 3, 16(a), (17), Dec. 7, 1987, 101 Stat. 1266, 1269, 1270; Pub.L. 100–690, Title VII, § 7102, Nov. 18, 1988, 102 Stat. 4416; Pub.L. 103–322, Title VIII, § 80001(a), Title XXVIII, § 280001, Sept. 13, 1994, 108 Stat. 1985, 2095; Pub.L. 104–294, Title VI, § 601(b)(5), (6), (h), Oct. 11, 1996, 110 Stat. 3499, 3500; Pub.L. 107–273, Div. B, Title IV, §4002(a)(8), Nov. 2, 2002, 116 Stat. 1807; Pub.L. 107–273, Div. B, Title IV, § 4002(a)(8), Nov. 2, 2002, 116 Stat. 1807; Pub.L. 108–21, Title IV, § 401(a), (c), (j)(5), Apr. 30, 2003, 117 Stat. 667, 669, 673; Pub.L. 111–174, § 4, May 27, 2010, 124 Stat. 1216.)</p><p><strong>EDITORIAL NOTES</strong></p><p><strong>Unconstitutionality of Subsection (b).</strong> Mandatory aspect of subsection (b) of this section held unconstitutional by <em>United States v. Booker</em>, 543 U.S. 220, 125 S. Ct. 738 (2005).</p><p><strong>Authority to Lower Sentences Below Statutory Minimum for Old Offenses.</strong> Section 24 of Pub.L. 100–182 provided that: “Notwithstanding section 235 of the Comprehensive Crime Control Act of 1984 [section 235 of Pub.L. 98–473, set out as a note under section 3551 of this title]—</p><blockquote><p><strong>(1)</strong> section 3553(e) of title 18, United States Code [subsec. (e) of this section];</p><p><strong>(2)</strong> rule 35(b) of the Federal Rules of Criminal Procedure as amended by section 215(b) of such Act; and</p><p><strong>(3)</strong> rule 35(b) as in effect before the taking effect of the initial set of guidelines promulgated by the United States Sentencing Commission pursuant to chapter 58 of title 28, United States Code [sections 991 et seq. of Title 28, Judiciary and Judicial Procedure],</p></blockquote><p>shall apply in the case of an offense committed before the taking effect of such guidelines.”</p>\"},{\"id\":\"18U.S.C.§3554\",\"content\":\"<p><strong>§ 3554. Order of criminal forfeiture</strong></p><p>The court, in imposing a sentence on a defendant who has been found guilty of an offense described in section 1962 of this title or in title II or III of the Comprehensive Drug Abuse Prevention and Control Act of 1970 shall order, in addition to the sentence that is imposed pursuant to the provisions of section 3551, that the defendant forfeit property to the United States in accordance with the provisions of section 1963 of this title or section 413 of the Comprehensive Drug Abuse and Control Act of 1970.</p><p>(Added Pub.L. 98–473, Title II, § 212(a)(2), Oct. 12, 1984, 98 Stat. 1990.)</p><p><strong>EDITORIAL NOTES</strong></p><p><strong>References in Text.</strong> Title II or III of the Comprehensive Drug Abuse Prevention and Control Act of 1970, referred to in text, are Titles II and III of Pub.L. 91–513, Oct. 27, 1970, 84 Stat. 1242, which are principally classified to subchapters I and II of chapter 13 of Title 21, Food and Drugs.</p><p>Section 413 of such Act, referred to in text, is section 413 of Pub.L. 91–513, added Pub.L. 98–473, Title II, c. III, part B, § 303, Oct. 12, 1984, 98 Stat. 2044, which is classified to section 853 of Title 21.</p>\"},{\"id\":\"18U.S.C.§3555\",\"content\":\"<p><strong>§ 3555. Order of notice to victims</strong></p><p>The court, in imposing a sentence on a defendant who has been found guilty of an offense involving fraud or other intentionally deceptive practices, may order, in addition to the sentence that is imposed pursuant to the provisions of section 3551, that the defendant give reasonable notice and explanation of the conviction, in such form as the court may approve, to the victims of the offense. The notice may be ordered to be given by mail, by advertising in designated areas or through designated media, or by other appropriate means. In determining whether to require the defendant to give such notice, the court shall consider the factors set forth in section 3553(a) to the extent that they are applicable and shall consider the cost involved in giving the notice as it relates to the loss caused by the offense, and shall not require the defendant to bear the costs of notice in excess of $20,000.</p><p>(Added Pub.L. 98–473, Title II, § 212(a)(2), Oct. 12, 1984, 98 Stat. 1991.)</p>\"},{\"id\":\"18U.S.C.§3556\",\"content\":\"<p><strong>§ 3556. Order of restitution</strong></p><p>The court, in imposing a sentence on a defendant who has been found guilty of an offense shall order restitution in accordance with section 3663A, and may order restitution in accordance with section 3663. The procedures under section 3664 shall apply to all orders of restitution under this section.</p><p>(Added Pub.L. 98–473, Title II, § 212(a)(2), Oct. 12, 1984, 98 Stat. 1991, and amended Pub.L. 99–646, § 20(b), Nov. 10, 1986, 100 Stat. 3596; Pub.L. 104–132, Title II, § 202, Apr. 24, 1996, 110 Stat. 1227.)</p>\"},{\"id\":\"18U.S.C.§3557\",\"content\":\"<p><strong>§ 3557. Review of a sentence</strong></p><p>The review of a sentence imposed pursuant to section 3551 is governed by the provisions of section 3742.</p><p>(Added Pub.L. 98–473, Title II, § 212(a)(2), Oct. 12, 1984, 98 Stat. 1991.)</p>\"},{\"id\":\"18U.S.C.§3558\",\"content\":\"<p><strong>§ 3558. Implementation of a sentence</strong></p><p>The implementation of a sentence imposed pursuant to section 3551 is governed by the provisions of chapter 229.</p><p>(Added Pub.L. 98–473, Title II, § 212(a)(2), Oct. 12, 1984, 98 Stat. 1991.)</p>\"},{\"id\":\"18U.S.C.§3559\",\"content\":\"<p><strong>§ 3559. Sentencing classification of offenses</strong></p><p><strong>(a) Classification.</strong>—An offense that is not specifically classified by a letter grade in the section defining it, is classified if the maximum term of imprisonment authorized is—</p><blockquote><p><strong>(1)</strong> life imprisonment, or if the maximum penalty is death, as a Class A felony;</p><p><strong>(2)</strong> twenty‑five years or more, as a Class B felony;</p><p><strong>(3)</strong> less than twenty‑five years but ten or more years, as a Class C felony;</p><p><strong>(4)</strong> less than ten years but five or more years, as a Class D felony;</p><p><strong>(5)</strong> less than five years but more than one year, as a Class E felony;</p><p><strong>(6)</strong> one year or less but more than six months, as a Class A misdemeanor;</p><p><strong>(7)</strong> six months or less but more than thirty days, as a Class B misdemeanor;</p><p><strong>(8)</strong> thirty days or less but more than five days, as a Class C misdemeanor; or</p><p><strong>(9)</strong> five days or less, or if no imprisonment is authorized, as an infraction.</p></blockquote><p><strong>(b) Effect of classification.</strong>—Except as provided in subsection (c), an offense classified under subsection (a) carries all the incidents assigned to the applicable letter designation, except that the maximum term of imprisonment is the term authorized by the law describing the offense.</p><p><strong>(c) Imprisonment of certain violent felons.</strong>—</p><blockquote><p><strong>(1) Mandatory life imprisonment.</strong>—Notwithstanding any other provision of law, a person who is convicted in a court of the United States of a serious violent felony shall be sentenced to life imprisonment if—</p><p><strong>(A)</strong> the person has been convicted (and those convictions have become final) on separate prior occasions in a court of the United States or of a State of—</p><p><strong>(i)</strong> 2 or more serious violent felonies; or</p><p><strong>(ii)</strong> one or more serious violent felonies and one or more serious drug offenses; and</p><p><strong>(B)</strong> each serious violent felony or serious drug offense used as a basis for sentencing under this subsection, other than the first, was committed after the defendant’s conviction of the preceding serious violent felony or serious drug offense.</p><p><strong>(2) Definitions.</strong>—For purposes of this subsection—</p><p><strong>(A)</strong> the term “assault with the intent to commit rape” means an offense that has as its elements engaging in physical contact with another person or using or brandishing a weapon against another person with intent to commit aggravated sexual abuse or sexual abuse (as described in sections 2241 and 2242);</p><p><strong>(B)</strong> the term “arson” means an offense that has as its elements maliciously damaging or destroying any building, inhabited structure, vehicle, vessel, or real property by means of fire or an explosive;</p><p><strong>(C)</strong> the term “extortion” means an offense that has as its elements the extraction of anything of value from another person by threatening or placing that person in fear of injury to any person or kidnapping of any person;</p><p><strong>(D)</strong> the term “firearms use” means an offense that has as its elements those described in section 924(c) or 929(a), if the firearm was brandished, discharged, or otherwise used as a weapon and the crime of violence or drug trafficking crime during and relation<a href='#fn2' class='footnoteRef' id='fnref2'><sup>2</sup></a> to which the firearm was used was subject to prosecution in a court of the United States or a court of a State, or both;</p><p><strong>(E)</strong> the term “kidnapping” means an offense that has as its elements the abduction, restraining, confining, or carrying away of another person by force or threat of force;</p><p><strong>(F)</strong> the term “serious violent felony” means—</p><p><strong>(i)</strong> a Federal or State offense, by whatever designation and wherever committed, consisting of murder (as described in section 1111); manslaughter other than involuntary manslaughter (as described in section 1112); assault with intent to commit murder (as described in section 113(a)); assault with intent to commit rape; aggravated sexual abuse and sexual abuse (as described in sections 2241 and 2242); abusive sexual contact (as described in sections 2244 (a)(1) and (a)(2)); kidnapping; aircraft piracy (as described in section 46502 of Title 49); robbery (as described in section 2111, 2113, or 2118); carjacking (as described in section 2119); extortion; arson; firearms use; firearms possession (as described in section 924(c)); or attempt, conspiracy, or solicitation to commit any of the above offenses; and</p><p><strong>(ii)</strong> any other offense punishable by a maximum term of imprisonment of 10 years or more that has as an element the use, attempted use, or threatened use of physical force against the person of another or that, by its nature, involves a substantial risk that physical force against the person of another may be used in the course of committing the offense;</p><p><strong>(G)</strong> the term “State” means a State of the United States, the District of Columbia, and a commonwealth, territory, or possession of the United States; and</p><p><strong>(H)</strong> the term “serious drug offense” means—</p><p><strong>(i)</strong> an offense that is punishable under section 401(b)(1)(A) or 408 of the Controlled Substances Act (21 U.S.C. 841(b)(1)(A), 848) or section 1010(b)(1)(A) of the Controlled Substances Import and Export Act (21 U.S.C. § 960(b)(1)(A)); or</p><p><strong>(ii)</strong> an offense under State law that, had the offense been prosecuted in a court of the United States, would have been punishable under section 401(b)(1)(A) or 408 of the Controlled Substances Act (21 U.S.C. 841(b)(1)(A), 848) or section 1010(b)(1)(A) of the Controlled Substances Import and Export Act (21 U.S.C. 960(b)(1)(A)).</p><p><strong>(3)</strong> <strong>Nonqualifying</strong> <strong>felonies.</strong>—</p><p><strong>(A) Robbery in certain cases.—</strong>Robbery, an attempt, conspiracy, or solicitation to commit robbery; or an offense described in paragraph (2)(F)(ii) shall not serve as a basis for sentencing under this subsection if the defendant establishes by clear and convincing evidence that—</p><p><strong>(i)</strong> no firearm or other dangerous weapon was used in the offense and no threat of use of a firearm or other dangerous weapon was involved in the offense; and</p><p><strong>(ii)</strong> the offense did not result in death or serious bodily injury (as defined in section 1365) to any person.</p><p><strong>(B) Arson in certain cases.—</strong>Arson shall not serve as a basis for sentencing under this subsection if the defendant establishes by clear and convincing evidence that—</p><p><strong>(i)</strong> the offense posed no threat to human life; and</p><p><strong>(ii)</strong> the defendant reasonably believed the offense posed no threat to human life.</p><p><strong>(4) Information filed by United States Attorney.—</strong>The provisions of section 411(a) of the Controlled Substances Act (21 U.S.C. § 851(a)) shall apply to the imposition of sentence under this subsection.</p><p><strong>(5) Rule of construction.—</strong>This subsection shall not be construed to preclude imposition of the death penalty.</p><p><strong>(6) Special provision for Indian country.—</strong>No person subject to the criminal jurisdiction of an Indian tribal government shall be subject to this subsection for any offense for which Federal jurisdiction is solely predicated on Indian country (as defined in section 1151) and which occurs within the boundaries of such Indian country unless the governing body of the tribe has elected that this subsection have effect over land and persons subject to the criminal jurisdiction of the tribe.</p><p><strong>(7) Resentencing upon overturning of prior conviction.—</strong>If the conviction for a serous violent felony or serious drug offense that was a basis for sentencing under this subsection is found, pursuant to any appropriate State or Federal procedure, to be unconstitutional or is vitiated on the explicit basis of innocence, or if the convicted person is pardoned on the explicit basis of innocence, the person serving a sentence imposed under this subsection shall be resentenced to any sentence that was available at the time of the original sentencing.</p></blockquote><p><strong>(d)</strong> <strong>Death or imprisonment for crimes against children.— </strong></p><blockquote><p><strong>(1) In general.—</strong> Subject to paragraph (2) and notwithstanding any other provision of law, a person who is convicted of a federal offense that is a serious violent felony (as defined in subsection (c)) or a violation of section 2422, 2423, or 2251 shall, unless the sentence of death is imposed, be sentenced to imprisonment for life, if—</p><p><strong>(A)</strong> the victim of the offense has not attained the age of 14 years;</p><p><strong>(B)</strong> the victim dies as a result of the offense; and</p><p><strong>(C)</strong> the defendant, in the course of the offense, engages in conduct described in section 3591(a)(2).</p><p><strong>(2) Exception.—</strong>With respect to a person convicted of a federal offense described in paragraph (1), the court may impose any lesser sentence that is authorized by law to take into account any substantial assistance provided by the defendant in the investigation or prosecution of another person who has committed an offense, in accordance with the federal sentencing guidelines and the policy statements of the federal sentencing commission pursuant to section 994(p) of title 28, or for other good cause.</p></blockquote><p><strong>(e) Mandatory life imprisonment for repeated sex offenses against children.—</strong></p><blockquote><p><strong>(1) In general.—</strong>A person who is convicted of a Federal sex offense in which a minor is the victim shall be sentenced to life imprisonment if the person has a prior sex conviction in which a minor was the victim, unless the sentence of death is imposed.</p><p><strong>(2) Definitions.—</strong>For the purposes of this subsection—</p><p><strong>(A)</strong> the term “Federal sex offense” means an offense under section 1591 (relating to sex trafficking of children), 2241 (relating to aggravated sexual abuse), 2242 (relating to sexual abuse), 2244(a)(1) (relating to abusive sexual contact), 2245 (relating to sexual abuse resulting in death), 2251 (relating to sexual exploitation of children), 2251A (relating to selling or buying of children), 2422(b) (relating to coercion and enticement of a minor into prostitution), or 2423(a) (relating to transportation of minors);</p><p><strong>(B)</strong> the term “State sex offense” means an offense under State law that is punishable by more than one year in prison and consists of conduct that would be a Federal sex offense if, to the extent or in the manner specified in the applicable provision of this title—</p><p><strong>(i)</strong> the offense involved interstate or foreign commerce, or the use of the mails; or</p><p><strong>(ii)</strong> the conduct occurred in any commonwealth, territory, or possession of the United States, within the special maritime and territorial jurisdiction of the United States, in a Federal prison, on any land or building owned by, leased to, or otherwise used by or under the control of the Government of the United States, or in the Indian country (as defined in section 1151);</p><p><strong>(C)</strong> the term “prior sex conviction” means a conviction for which the sentence was imposed before the conduct occurred constituting the subsequent Federal sex offense, and which was for a Federal sex offense or a State sex offense;</p><p><strong>(D)</strong> the term “minor” means an individual who has not attained the age of 17 years; and</p><p><strong>(E)</strong> the term “state” has the meaning given that term in subsection (c)(2).</p><p><strong>(3) Nonqualifying felonies.—</strong>An offense described in section 2422(b) or 2423(a) shall not serve as a basis for sentencing under this subsection if the defendant establishes by clear and convincing evidence that—</p><p><strong>(A)</strong> the sexual act or activity was consensual and not for the purpose of commercial or pecuniary gain;</p><p><strong>(B)</strong> the sexual act or activity would not be punishable by more than one year in prison under the law of the State in which it occurred; or</p><p><strong>(C)</strong> no sexual act or activity occurred.</p></blockquote><p><strong>(f) Mandatory Minimum Terms of Imprisonment for Violent Crimes Against Children.—</strong>A person who is convicted of a Federal offense that is a crime of violence against the person of an individual who has not attained the age of 18 years shall, unless a greater mandatory minimum sentence of imprisonment is otherwise provided by law and regardless of any maximum term of imprisonment otherwise provided for the offense—</p><blockquote><p><strong>(1)</strong> if the crime of violence is murder, be imprisoned for life or for any term of years not less than 30, except that such person shall be punished by death or life imprisonment if the circumstances satisfy any of subparagraphs (A) through (D) of section 3591(a)(2) of this title;</p><p><strong>(2)</strong> if the crime of violence is kidnapping (as defined in section 1201) or maiming (as defined in section 114), be imprisoned for life or any term of years not less than 25; and</p><p><strong>(3)</strong> if the crime of violence results in serious bodily injury (as defined in section 1365), or if a dangerous weapon was used during and in relation to the crime of violence, be imprisoned for life or for any term of years not less than 10.</p></blockquote><p><strong>(g)(1)</strong> If a defendant who is convicted of a felony offense (other than offense of which an element is the false registration of a domain name) knowingly falsely registered a domain name and knowingly used that domain name in the course of that offense, the maximum imprisonment otherwise provided by law for that offense shall be doubled or increased by 7 years, whichever is less.</p><p><strong>(2)</strong> As used in this section—</p><blockquote><p><strong>(A)</strong> the term “falsely registers” means registers in a manner that prevents the effective identification of or contact with the person who registers; and</p><p><strong>(B)</strong> the term “domain name” has the meaning given that term is section 45 of the Act entitled “An Act to provide for the registration and protection of trademarks used in commerce, to carry out the provisions of certain international conventions, and for other purposes” approved July 5, 1946 (commonly referred to as the “Trademark Act of 1946”) (15 U.S.C. 1127).</p></blockquote><p>(Added Pub.L. 98–473, Title II, § 212(a)(2), Oct. 12, 1984, 98 Stat. 1991, and amended Pub.L. 100–185, § 5, Dec. 11, 1987, 101 Stat. 1279; Pub.L. 100–690, Title VII, § 7041, Nov. 18, 1988, 102 Stat. 4399); Pub.L. 103–322, Title VII § 70001, Sept. 13, 1994, 108 Stat. 1982; Pub.L. 105–314, Title V, § 501, Oct. 30, 1998, 112 Stat. 2980; Pub.L. 105–386, § 1(b), Nov. 13, 1998, 112 Stat. 3470; Pub.L. 108–21, Title I, § 106(a), Apr. 30, 2003, 117 Stat. 654; Pub.L. 108–482, Title II, § 204(a), Dec. 23, 2004, 118 Stat. 3917; Pub.L. 109–248, Title II, §§ 202, 206(c), July 27, 2006, 120 Stat. 612, 614.)</p>\"},{\"id\":\"18U.S.C.§3561\",\"content\":\"<p><strong>§ 3561. Sentence of probation</strong></p><p><strong>(a) In general.</strong>—A defendant who has been found guilty of an offense may be sentenced to a term of probation unless—</p><blockquote><p><strong>(1)</strong> the offense is a Class A or Class B felony and the defendant is an individual;</p><p><strong>(2)</strong> the offense is an offense for which probation has been expressly precluded; or</p><p><strong>(3)</strong> the defendant is sentenced at the same time to a term of imprisonment for the same or a different offense that is not a petty offense.</p></blockquote><p><strong>(b) Domestic violence offenders.</strong>—A defendant who has been convicted for the first time of a domestic violence crime shall be sentenced to a term of probation if not sentenced to a term of imprisonment. The term “domestic violence crime” means a crime of violence for which the defendant may be prosecuted in a court of the United States in which the victim or intended victim is the spouse, former spouse, intimate partner, former intimate partner, child, or former child of the defendant, or any other relative of the defendant.</p><p><strong>(c) Authorized terms.</strong>—The authorized terms of probation are—</p><blockquote><p><strong>(1)</strong> for a felony, not less than one nor more than five years;</p><p><strong>(2)</strong> for a misdemeanor, not more than five years; and</p><p><strong>(3)</strong> for an infraction, not more than one year.</p></blockquote><p>(Added Pub.L. 98–473, Title II, § 212(a)(2), Oct. 12, 1984, 98 Stat. 1992, and amended Pub.L. 99–646, § 10(a), Nov. 10, 1986, 100 Stat. 3593; Pub.L. 100–182, § 7, Dec. 7, 1987, 101 Stat. 1267; Pub.L. 103–322, Title XXVIII, § 280004, Title XXXII, § 320921(a), Sept. 13, 1994, 108 Stat. 2096, 2130; Pub.L. 104–294, Title VI, § 604(c)(1), Oct. 11, 1996, 110 Stat. 3509.)</p>\"},{\"id\":\"18U.S.C.§3562\",\"content\":\"<p><strong>§ 3562. Imposition of a sentence of probation</strong></p><p><strong>(a) Factors to be considered in imposing a term of probation.</strong>—The court, in determining whether to impose a term of probation, and, if a term of probation is to be imposed, in determining the length of the term and the conditions of probation, shall consider the factors set forth in section 3553(a) to the extent that they are applicable.</p><p><strong>(b) Effect of finality of judgment.</strong>—Notwithstanding the fact that a sentence of probation can subsequently be—</p><blockquote><p><strong>(1)</strong> modified or revoked pursuant to the provisions of section 3564 or 3565;</p><p><strong>(2)</strong> corrected pursuant to the provisions of rule 35 of the Federal Rules of Criminal Procedure and section 3742; or</p><p><strong>(3)</strong> appealed and modified, if outside the guideline range, pursuant to the provisions of section 3742;</p></blockquote><p>a judgment of conviction that includes such a sentence constitutes a final judgment for all other purposes.</p><p>(Added Pub.L. 98–473, Title II, § 212(a)(2), Oct. 12, 1984, 98 Stat. 1992, and amended Pub.L. 101–647, Title XXXV, § 3583, Nov. 29, 1990, 104 Stat. 4930.)</p>\"},{\"id\":\"18U.S.C.§3563\",\"content\":\"<p><strong>§ 3563. Conditions of probation</strong></p><p><strong>(a) Mandatory conditions.</strong>—The court shall provide, as an explicit condition of a sentence of probation—</p><blockquote><p><strong>(1)</strong> for a felony, a misdemeanor, or an infraction, that the defendant not commit another Federal, State, or local crime during the term of probation;</p><p><strong>(2)</strong> for a felony, that the defendant also abide by at least one condition set forth in subsection (b)(2) or (b)(12), unless the court has imposed a fine under this chapter, or unless the court finds on the record that extraordinary circumstances exist that would make such a condition plainly unreasonable, in which event the court shall impose one or more of the other conditions set forth under subsection (b);</p><p><strong>(3)</strong> for a felony, a misdemeanor, or an infraction, that the defendant not unlawfully possess a controlled substance;</p><p><strong>(4)</strong> for a domestic violence crime as defined in section 3561(b) by a defendant convicted of such an offense for the first time that the defendant attend a public, private, or private non-profit offender rehabilitation program that has been approved by the court, in consultation with a State Coalition Against Domestic Violence or other appropriate experts, if an approved program is readily available within a 50-mile radius of the legal residence of the defendant; and</p><p><strong>(5)</strong> for a felony, a misdemeanor, or an infraction, that the defendant refrain from any unlawful use of a controlled substance and submit to one drug test within 15 days of release on probation and at least 2 periodic drug tests thereafter (as determined by the court) for use of a controlled substance, but the condition stated in this paragraph may be ameliorated or suspended by the court for any individual defendant if the defendant’s presentence report or other reliable sentencing information indicates a low risk of future substance abuse by the defendant;</p><p><strong>(6)</strong> that the defendant—</p><p><strong>(A)</strong> make restitution in accordance with sections 2248, 2259, 2264, 2327, 3663, 3663A, and 3664; and</p><p><strong>(B)</strong> pay the assessment imposed in accordance with section 3013; and</p><p><strong>(7)</strong> that the defendant will notify the court of any material change in the defendant’s economic circumstances that might affect the defendant’s ability to pay restitution, fines, or special assessments;</p><p><strong>(8)</strong> for a person required to register under the Sex Offender Registration and Notification Act, that the person comply with the requirements of that Act; and</p><p><strong>(9)</strong> that the defendant cooperate in the collection of a DNA sample from the defendant if the collection of such a sample is authorized pursuant to section 3 of the DNA Analysis Backlog Elimination Act of 2000.</p></blockquote><p>If the court has imposed and ordered execution of a fine and placed the defendant on probation, payment of the fine or adherence to the court‑established installment schedule shall be a condition of the probation.</p><p><strong>(b) Discretionary conditions.</strong>—The court may provide, as further conditions of a sentence of probation, to the extent that such conditions are reasonably related to the factors set forth in section 3553(a)(1) and (a)(2) and to the extent that such conditions involve only such deprivations of liberty or property as are reasonably necessary for the purposes indicated in section 3553(a)(2), that the defendant—</p><blockquote><p><strong>(1)</strong> support his dependents and meet other family responsibilities;</p><p><strong>(2)</strong> make restitution to a victim of the offense under section 3556 (but not subject to the limitation of section 3663(a) or 3663A(c)(1)(A));</p><p><strong>(3)</strong> give to the victims of the offense the notice ordered pursuant to the provisions of section 3555;</p><p><strong>(4)</strong> work conscientiously at suitable employment or pursue conscientiously a course of study or vocational training that will equip him for suitable employment;</p><p><strong>(5)</strong> refrain, in the case of an individual, from engaging in a specified occupation, business, or profession bearing a reasonably direct relationship to the conduct constituting the offense, or engage in such a specified occupation, business, or profession only to a stated degree or under stated circumstances;</p><p><strong>(6)</strong> refrain from frequenting specified kinds of places or from associating unnecessarily with specified persons;</p><p><strong>(7)</strong> refrain from excessive use of alcohol, or any use of a narcotic drug or other controlled substance, as defined in section 102 of the Controlled Substances Act (21 U.S.C. 802), without a prescription by a licensed medical practitioner;</p><p><strong>(8)</strong> refrain from possessing a firearm, destructive device, or other dangerous weapon;</p><p><strong>(9)</strong> undergo available medical, psychiatric, or psychological treatment, including treatment for drug or alcohol dependency, as specified by the court, and remain in a specified institution if required for that purpose;</p><p><strong>(10)</strong> remain in the custody of the Bureau of Prisons during nights, weekends, or other intervals of time, totaling no more than the lesser of one year or the term of imprisonment authorized for the offense, during the first year of the term of probation or supervised release;</p><p><strong>(11)</strong> reside at, or participate in the program of, a community corrections facility (including a facility maintained or under contract to the Bureau of Prisons) for all or part of the term of probation;</p><p><strong>(12)</strong> work in community service as directed by the court;</p><p><strong>(13)</strong> reside in a specified place or area, or refrain from residing in a specified place or area;</p><p><strong>(14)</strong> remain within the jurisdiction of the court, unless granted permission to leave by the court or a probation officer;</p><p><strong>(15)</strong> report to a probation officer as directed by the court or the probation officer;</p><p><strong>(16)</strong> permit a probation officer to visit him at his home or elsewhere as specified by the court;</p><p><strong>(17)</strong> answer inquiries by a probation officer and notify the probation officer promptly of any change in address or employment;</p><p><strong>(18)</strong> notify the probation officer promptly if arrested or questioned by a law enforcement officer;</p><p><strong>(19)</strong> remain at his place of residence during nonworking hours and, if the court finds it appropriate, that compliance with this condition be monitored by telephonic or electronic signaling devices, except that a condition under this paragraph may be imposed only as an alternative to incarceration;</p><p><strong>(20)</strong> comply with the terms of any court order or order of an administrative process pursuant to the law of a State, the District of Columbia, or any other possession or territory of the United States, requiring payments by the defendant for the support and maintenance of a child or of a child and the parent with whom the child is living;</p><p><strong>(21)</strong> be ordered deported by a United States district court, or United States magistrate judge, pursuant to a stipulation entered into by the defendant and the United States under section 238(d)(5) of the Immigration and Nationality Act, except that, in the absence of a stipulation, the United States district court or a United States magistrate judge, may order deportation as a condition of probation, if, after notice and hearing pursuant to such section, the Attorney General demonstrates by clear and convincing evidence that the alien is deportable;</p><p><strong>(22)</strong> satisfy such other conditions as the court may impose; or</p><p><strong>(23)</strong> if required to register under the Sex Offender Registration and Notification Act, submit his person, and any property, house, residence, vehicle, papers, computer, other electronic communication or data storage devices or media, and effects to search at any time, with or without a warrant, by any law enforcement or probation officer with reasonable suspicion concerning a violation of a condition of probation or unlawful conduct by the person, and by any probation officer in the lawful discharge of the officer’s supervision functions.</p></blockquote><p><strong>(c) Modifications of conditions.</strong>—The court may modify, reduce, or enlarge the conditions of a sentence of probation at any time prior to the expiration or termination of the term of probation, pursuant to the provisions of the Federal Rules of Criminal Procedure relating to the modification of probation and the provisions applicable to the initial setting of the conditions of probation.</p><p><strong>(d) Written statement of conditions.</strong>—The court shall direct that the probation officer provide the defendant with a written statement that sets forth all the conditions to which the sentence is subject, and that is sufficiently clear and specific to serve as a guide for the defendant’s conduct and for such supervision as is required.</p><p><strong>(e) Results of Drug Testing.—</strong>The results of a drug test administered in accordance with subsection (a)(5) shall be subject to confirmation only if the results are positive, the defendant is subject to possible imprisonment for such failure, and either the defendant denies the accuracy of such test or there is some other reason to question the results of the test. A defendant who tests positive may be detained pending verification of a positive drug test result. A drug test confirmation shall be a urine drug test confirmed using gas chromatography/mass spectrometry techniques or such test as the Director of the Administrative Office of the United States Courts after consultation with the Secretary of Health and Human Services may determine to be of equivalent accuracy. The court shall consider whether the availability of appropriate substance abuse treatment programs, or an individual’s current or past participation in such programs, warrants an exception in accordance with United States Sentencing Commission guidelines from the rule of section 3565(b), when considering any action against a defendant who fails a drug test administered in accordance with subsection (a)(5).</p><p>(Added Pub.L. 98–473, Title II, § 212(a)(2), Oct. 12, 1984, 98 Stat. 1993, and amended Pub.L. 99–646, §§ 11(a), 12(a), Nov. 10, 1986, 100 Stat. 3594; Pub.L. 100–182, §§ 10, 18, Dec. 7, 1987, 101 Stat. 1267, 1270; Pub.L. 100–690, Title VII, §§ 7086, 7110, 7303(a)(1), 7305(a), Nov. 18, 1988, 102 Stat. 4408, 4419, 4464, 4465; Pub.L. 101–647, Title XXXV, § 3584, Nov. 29, 1990, 104 Stat. 4430; Pub.L. 102–521, § 3, Oct. 25, 1992, 106 Stat. 3404; Pub.L. 103–322, Title II, § 20414(b), Title XXVIII, § 280002, Title XXXII, § 320921(b), Sept. 13, 1994, 108 Stat. 1830, 2096, 2130; Pub.L. 104–132, Title II, § 203, Apr. 24, 1996, 110 Stat. 1227; Pub.L. 104–208, Div. C, Title III, §§ 308(g)(10)(E), 374(b), Sept 30, 1996, 110 Stat. 3009–625, 3009–647; Pub.L. 104–294, Title VI, § 601(k), Oct. 11, 1996, 110 Stat. 3501; Pub.L. 105–119, Title I, § 115(a)(8)(B), Nov. 26, 1997, 111 Stat. 2465; Pub.L. 106–546, § 7 (a), Dec. 19, 2000, 114 Stat. 2734; Pub. L. 107–273, Div. B, Title IV, § 4002(c)(1), (e)(12), Nov. 2, 2002, 116 Stat. 1802, 1811; Pub.L. 109–248, Title I, § 141(d), Title II, § 210(a), July 27, 2006, 120 Stat. 603, 615; Pub.L. 110–406, § 14(a), (c), Oct. 13, 2008, 122 Stat. 4294.)</p>\"},{\"id\":\"18U.S.C.§3564\",\"content\":\"<p><strong>§ 3564. Running of a term of probation</strong></p><p><strong>(a) Commencement.</strong>—A term of probation commences on the day that the sentence of probation is imposed, unless otherwise ordered by the court.</p><p><strong>(b) Concurrence with other sentences.</strong>—Multiple terms of probation, whether imposed at the same time or at different times, run concurrently with each other. A term of probation runs concurrently with any Federal, State, or local term of probation, supervised release, or parole for another offense to which the defendant is subject or becomes subject during the term of probation. A term of probation does not run while the defendant is imprisoned in connection with a conviction for a Federal, State, or local crime unless the imprisonment is for a period of less than thirty consecutive days.</p><p><strong>(c) Early termination.</strong>—The court, after considering the factors set forth in section 3553(a) to the extent that they are applicable, may, pursuant to the provisions of the Federal Rules of Criminal Procedure relating to the modification of probation, terminate a term of probation previously ordered and discharge the defendant at any time in the case of a misdemeanor or an infraction or at any time after the expiration of one year of probation in the case of a felony, if it is satisfied that such action is warranted by the conduct of the defendant and the interest of justice.</p><p><strong>(d) Extension.</strong>—The court may, after a hearing, extend a term of probation, if less than the maximum authorized term was previously imposed, at any time prior to the expiration or termination of the term of probation, pursuant to the provisions applicable to the initial setting of the term of probation.</p><p><strong>(e) Subject to revocation.</strong>—A sentence of probation remains conditional and subject to revocation until its expiration or termination.</p><p>(Added Pub.L. 98–473, Title II, § 212(a)(2), Oct. 12, 1984, 98 Stat. 1994, and amended Pub.L. 99–646, § 13(a), Nov. 10, 1986, 100 Stat. 3594; Pub.L. 100–182, § 11, Dec. 7, 1987, 101 Stat. 1268.)</p>\"},{\"id\":\"18U.S.C.§3565\",\"content\":\"<p><strong>§ 3565. Revocation of probation</strong></p><p><strong>(a) Continuation or revocation.</strong>—If the defendant violates a condition of probation at any time prior to the expiration or termination of the term of probation, the court may, after a hearing pursuant to Rule 32.1 of the Federal Rules of Criminal Procedure, and after considering the factors set forth in section 3553(a) to the extent that they are applicable—</p><blockquote><p><strong>(1)</strong> continue him on probation, with or without extending the term or modifying or enlarging the conditions; or</p><p><strong>(2)</strong> revoke the sentence of probation and resentence the defendant under subchapter A.</p></blockquote><p><strong>(b) Mandatory revocation for possession of controlled substance or firearm or refusal to comply with drug testing.</strong>—If the defendant—</p><blockquote><p><strong>(1)</strong> possesses a controlled substance in violation of the condition set forth in section 3563(a)(3);</p><p><strong>(2)</strong> possesses a firearm, as such term is defined in section 921 of this title, in violation of Federal law, or otherwise violates a condition of probation prohibiting the defendant from possessing a firearm;</p><p><strong>(3)</strong> refuses to comply with drug testing, thereby violating the condition imposed by section 3563(a)(4); or</p><p><strong>(4)</strong> as a part of drug testing, tests positive for illegal controlled substances more than 3 times over the course of 1 year;</p></blockquote><p>the court shall revoke the sentence of probation and resentence the defendant under subchapter A to a sentence that includes a term of imprisonment.</p><p><strong>(c) Delayed revocation.</strong>—The power of the court to revoke a sentence of probation for violation of a condition of probation, and to impose another sentence, extends beyond the expiration of the term of probation for any period reasonably necessary for the adjudication of matters arising before its expiration if, prior to its expiration, a warrant or summons has been issued on the basis of an allegation of such a violation.</p><p>(Added Pub.L. 98–473, Title II, § 212(a)(2), Oct. 12, 1984, 98 Stat. 1995, amended Pub.L. 100–690, Title VI, § 6214, Title VII, § 7303(a)(2), Nov. 18, 1988, 102 Stat. 4361, 4464; Pub.L. 101–647, Title XXXV, § 3585, Nov. 29, 1990, 104 Stat. 4930; Pub.L. 103–322, Title XI § 110506, Sept. 13, 1994, 108 Stat. 2017; Pub.L. 107–273, Div. B, Title II, § 2103(a), Nov. 2, 2002, 116 Stat. 1793.)</p>\"},{\"id\":\"18U.S.C.§3566\",\"content\":\"<p><strong>§ 3566. Implementation of a sentence of probation</strong></p><p>The implementation of a sentence of probation is governed by the provisions of subchapter A of chapter 229.</p><p>(Added Pub.L. 98–473, Title II, § 212(a)(2), Oct. 12, 1984, 98 Stat. 1995.)</p>\"},{\"id\":\"18U.S.C.§3571\",\"content\":\"<p><strong>§ 3571. Sentence of fine</strong></p><p><strong>(a) In general.</strong>—A defendant who has been found guilty of an offense may be sentenced to pay a fine.</p><p><strong>(b) Fines for individuals.</strong>—Except as provided in subsection (e) of this section, an individual who has been found guilty of an offense may be fined not more than the greatest of—</p><blockquote><p><strong>(1)</strong> the amount specified in the law setting forth the offense;</p><p><strong>(2)</strong> the applicable amount under subsection (d) of this section;</p><p><strong>(3)</strong> for a felony, not more than $250,000;</p><p><strong>(4)</strong> for a misdemeanor resulting in death, not more than $250,000;</p><p><strong>(5)</strong> for a Class A misdemeanor that does not result in death, not more than $100,000;</p><p><strong>(6)</strong> for a Class B or C misdemeanor that does not result in death, not more than $5,000; or</p><p><strong>(7)</strong> for an infraction, not more than $5,000.</p></blockquote><p><strong>(c) Fines for organizations.</strong>—Except as provided in subsection (e) of this section, an organization that has been found guilty of an offense may be fined not more than the greatest of—</p><blockquote><p><strong>(1)</strong> the amount specified in the law setting forth the offense;</p><p><strong>(2)</strong> the applicable amount under subsection (d) of this section;</p><p><strong>(3)</strong> for a felony, not more than $500,000;</p><p><strong>(4)</strong> for a misdemeanor resulting in death, not more than $500,000;</p><p><strong>(5)</strong> for a Class A misdemeanor that does not result in death, not more than $200,000;</p><p><strong>(6)</strong> for a Class B or C misdemeanor that does not result in death, not more than $10,000; and</p><p><strong>(7)</strong> for an infraction, not more than $10,000.</p></blockquote><p><strong>(d) Alternative fine based on gain or loss.</strong>—If any person derives pecuniary gain from the offense, or if the offense results in pecuniary loss to a person other than the defendant, the defendant may be fined not more than the greater of twice the gross gain or twice the gross loss, unless imposition of a fine under this subsection would unduly complicate or prolong the sentencing process.</p><p><strong>(e) Special rule for lower fine specified in substantive provision.</strong>—If a law setting forth an offense specifies no fine or a fine that is lower than the fine otherwise applicable under this section and such law, by specific reference, exempts the offense from the applicability of the fine otherwise applicable under this section, the defendant may not be fined more than the amount specified in the law setting forth the offense.</p><p>(Added Pub.L. 98–473, Title II, § 212(a)(2), Oct. 12, 1984, 98 Stat. 1995, and amended Pub.L. 100–185, § 6, Dec. 11, 1987, 101 Stat. 1280.)</p>\"},{\"id\":\"18U.S.C.§3572\",\"content\":\"<p><strong>§ 3572. Imposition of a sentence of fine and related matters</strong></p><p><strong>(a) Factors to be considered.</strong>—In determining whether to impose a fine, and the amount, time for payment, and method of payment of a fine, the court shall consider, in addition to the factors set forth in section 3553(a)—</p><blockquote><p><strong>(1)</strong> the defendant’s income, earning capacity, and financial resources;</p><p><strong>(2)</strong> the burden that the fine will impose upon the defendant, any person who is financially dependent on the defendant, or any other person (including a government) that would be responsible for the welfare of any person financially dependent on the defendant, relative to the burden that alternative punishments would impose;</p><p><strong>(3)</strong> any pecuniary loss inflicted upon others as a result of the offense;</p><p><strong>(4)</strong> whether restitution is ordered or made and the amount of such restitution;</p><p><strong>(5)</strong> the need to deprive the defendant of illegally obtained gains from the offense;</p><p><strong>(6)</strong> the expected costs to the government of any imprisonment, supervised release, or probation component of the sentence;</p><p><strong>(7)</strong> whether the defendant can pass on to consumers or other persons the expense of the fine; and</p><p><strong>(8)</strong> if the defendant is an organization, the size of the organization and any measure taken by the organization to discipline any officer, director, employee, or agent of the organization responsible for the offense and to prevent a recurrence of such an offense.</p></blockquote><p><strong>(b) Fine not to impair ability to make restitution.</strong>—If, as a result of a conviction, the defendant has the obligation to make restitution to a victim of the offense, other than the United States, the court shall impose a fine or other monetary penalty only to the extent that such fine or penalty will not impair the ability of the defendant to make restitution.</p><p><strong>(c) Effect of finality of judgment.</strong>—Notwithstanding the fact that a sentence to pay a fine can subsequently be—</p><blockquote><p><strong>(1)</strong> modified or remitted under section 3573;</p><p><strong>(2)</strong> corrected under rule 35 of the Federal Rules of Criminal Procedure and section 3742; or</p><p><strong>(3)</strong> appealed and modified under section 3742;</p></blockquote><p>a judgment that includes such a sentence is a final judgment for all other purposes.</p><p><strong>(d) Time, method of payment, and related items.</strong>—<strong>(1)</strong> A person sentenced to pay a fine or other monetary penalty, including restitution, shall make such payment immediately, unless, in the interest of justice, the court provides for payment on a date certain or in installments. If the court provides for payment in installments, the installments shall be in equal monthly payments over the period provided by the court, unless the court establishes another schedule.</p><p><strong>(2)</strong> If the judgment, or, in the case of a restitution order, the order, permits other than immediate payment, the length of time over which scheduled payments will be made shall be set by the court, but shall be the shortest time in which full payment can reasonably be made.</p><p><strong>(3)</strong> A judgment for a fine which permits payments in installments shall include a requirement that the defendant will notify the court of any material change in the defendant’s economic circumstances that might affect the defendant’s ability to pay the fine. Upon receipt of such notice the court may, on its own motion or the motion of any party, adjust the payment schedule, or require immediate payment in full, as the interests of justice require.</p><p><strong>(e) Alternative sentence precluded.</strong>—At the time a defendant is sentenced to pay a fine, the court may not impose an alternative sentence to be carried out if the fine is not paid.</p><p><strong>(f) Responsibility for payment of monetary obligation relating to organization.</strong>—If a sentence includes a fine, special assessment, restitution or other monetary obligation (including interest) with respect to an organization, each individual authorized to make disbursements for the organization has a duty to pay the obligation from assets of the organization. If such an obligation is imposed on a director, officer, shareholder, employee, or agent of an organization, payments may not be made, directly or indirectly, from assets of the organization, unless the court finds that such payment is expressly permissible under applicable State law.</p><p><strong>(g) Security for stayed fine.</strong>—If a sentence imposing a fine is stayed, the court shall, absent exceptional circumstances (as determined by the court)—</p><blockquote><p><strong>(1)</strong> require the defendant to deposit, in the registry of the district court, any amount of the fine that is due;</p><p><strong>(2)</strong> require the defendant to provide a bond or other security to ensure payment of the fine; or</p><p><strong>(3)</strong> restrain the defendant from transferring or dissipating assets.</p></blockquote><p><strong>(h) Delinquency.</strong>—A fine or payment of restitution is delinquent if a payment is more than 30 days late.</p><p><strong>(i) Default.</strong>—A fine or payment of restitution is in default if a payment is delinquent for more than 90 days. Notwithstanding any installment schedule, when a fine or payment of restitution is in default, the entire amount of the fine or restitution is due within 30 days after notification of the default, subject to the provisions of section 3613A.</p><p>(Added Pub.L. 98–473, Title II, § 212(a)(2), Oct. 12, 1984, 98 Stat. 1995, and amended Pub.L. 100–185, § 7, Dec. 11, 1987, 101 Stat. 1280; Pub.L. 101–647, Title XXXV, § 3587, Nov. 29, 1990, 104 Stat. 4930; Pub.L. 103–322, Title II, § 20403(a), Sept. 13, 1994, 108 Stat. 1825; Pub.L. 104–132, Title II, § 207(b), Apr. 24, 1996, 110 Stat. 1236.)</p>\"},{\"id\":\"18U.S.C.§3573\",\"content\":\"<p><strong>§ 3573. Petition of the Government for modification or remission</strong></p><p>Upon petition of the Government showing that reasonable efforts to collect a fine or assessment are not likely to be effective, the court may, in the interest of justice—</p><blockquote><p><strong>(1)</strong> remit all or part of the unpaid portion of the fine or special assessment, including interest and penalties;</p><p><strong>(2)</strong> defer payment of the fine or special assessment to a date certain or pursuant to an installment schedule; or</p><p><strong>(3)</strong> extend a date certain or an installment schedule previously ordered.</p></blockquote><p>A petition under this subsection shall be filed in the court in which sentence was originally imposed, unless the court transfers jurisdiction to another court. This section shall apply to all fines and assessments irrespective of the date of imposition.</p><p>(Added Pub.L. 98–473, Title II, § 212(a)(2), Oct. 12, 1984, 98 Stat. 1997, and amended Pub.L. 100–185, § 8(a), Dec. 11, 1987, 101 Stat. 1282; Pub.L. 100–690, Title VII, § 7082(a), Nov. 18, 1988, 102 Stat. 4407.)</p>\"},{\"id\":\"18U.S.C.§3574\",\"content\":\"<p><strong>§ 3574. Implementation of a sentence of fine</strong></p><p>The implementation of a sentence to pay a fine is governed by the provisions of subchapter B of chapter 229.</p><p>(Added Pub.L. 98–473, Title II, § 212(a)(2), Oct. 12, 1984, 98 Stat. 1997.)</p>\"},{\"id\":\"18U.S.C.§3581\",\"content\":\"<p><strong>§ 3581. Sentence of imprisonment</strong></p><p><strong>(a) In general.</strong>—A defendant who has been found guilty of an offense may be sentenced to a term of imprisonment.</p><p><strong>(b) Authorized terms.</strong>—The authorized terms of imprisonment are—</p><blockquote><p><strong>(1)</strong> for a Class A felony, the duration of the defendant’s life or any period of time;</p><p><strong>(2)</strong> for a Class B felony, not more than twenty‑five years;</p><p><strong>(3)</strong> for a Class C felony, not more than twelve years;</p><p><strong>(4)</strong> for a Class D felony, not more than six years;</p><p><strong>(5)</strong> for a Class E felony, not more than three years;</p><p><strong>(6)</strong> for a Class A misdemeanor, not more than one year;</p><p><strong>(7)</strong> for a Class B misdemeanor, not more than six months;</p><p><strong>(8)</strong> for a Class C misdemeanor, not more than thirty days; and</p><p><strong>(9)</strong> for an infraction, not more than five days.</p></blockquote><p>(Added Pub.L. 98–473, Title II, § 212(a)(2), Oct. 12, 1984, 98 Stat. 1998.)</p>\"},{\"id\":\"18U.S.C.§3582\",\"content\":\"<p><strong>§ 3582. Imposition of a sentence of imprisonment</strong></p><p><strong>(a) Factors to be considered in imposing a term of imprisonment.</strong>—The court, in determining whether to impose a term of imprisonment, and, if a term of imprisonment is to be imposed, in determining the length of the term, shall consider the factors set forth in section 3553(a) to the extent that they are applicable, recognizing that imprisonment is not an appropriate means of promoting correction and rehabilitation. In determining whether to make a recommendation concerning the type of prison facility appropriate for the defendant, the court shall consider any pertinent policy statements issued by the Sentencing Commission pursuant to 28 U.S.C. 994(a)(2).</p><p><strong>(b) Effect of finality of judgment.</strong>—Notwithstanding the fact that a sentence to imprisonment can subsequently be—</p><blockquote><p><strong>(1)</strong> modified pursuant to the provisions of subsection (c);</p><p><strong>(2)</strong> corrected pursuant to the provisions of rule 35 of the Federal Rules of Criminal Procedure and section 3742; or</p><p><strong>(3)</strong> appealed and modified, if outside the guideline range, pursuant to the provisions of section 3742;</p></blockquote><p>a judgment of conviction that includes such a sentence constitutes a final judgment for all other purposes.</p><p><strong>(c) Modification of an imposed term of imprisonment.</strong>—The court may not modify a term of imprisonment once it has been imposed except that—</p><blockquote><p><strong>(1)</strong> in any case—</p><p><strong>(A)</strong> the court, upon motion of the Director of the Bureau of Prisons, may reduce the term of imprisonment (and may impose a term of probation or supervised release with or without conditions that does not exceed the unserved portion of the original term of imprisonment), after considering the factors set forth in section 3553(a) to the extent that they are applicable, if it finds that—</p><p><strong>(i)</strong> extraordinary and compelling reasons warrant such a reduction; or</p><p><strong>(ii)</strong> the defendant is at least 70 years of age, has served at least 30 year in prison, pursuant to a sentence imposed under section 3559(c), for the offense or offenses for which the defendant is currently imprisoned, and a determination has been made by the Director of the Bureau of Prisons that the defendant is not a danger to the safety of any other person or the community, as provided under section 3142(g);</p><p>and that such a reduction is consistent with applicable policy statements issued by the Sentencing Commission; and</p><p><strong>(B)</strong> the court may modify an imposed term of imprisonment to the extent otherwise expressly permitted by statute or by Rule 35 of the Federal Rules of Criminal Procedure; and</p><p><strong>(2)</strong> in the case of a defendant who has been sentenced to a term of imprisonment based on a sentencing range that has subsequently been lowered by the Sentencing Commission pursuant to 28 U.S.C. 994(o), upon motion of the defendant or the Director of the Bureau of Prisons, or on its own motion, the court may reduce the term of imprisonment, after considering the factors set forth in section 3553(a) to the extent that they are applicable, if such a reduction is consistent with applicable policy statements issued by the Sentencing Commission.</p></blockquote><p><strong>(d) Inclusion of an order to limit criminal association of organized crime and drug offenders.</strong>—The court, in imposing a sentence to a term of imprisonment upon a defendant convicted of a felony set forth in chapter 95 (racketeering) or 96 (racketeer influenced and corrupt organizations) of this title or in the Comprehensive Drug Abuse Prevention and Control Act of 1970 (21 U.S.C. 801 et seq.), or at any time thereafter upon motion by the Director of the Bureau of Prisons or a United States attorney, may include as a part of the sentence an order that requires that the defendant not associate or communicate with a specified person, other than his attorney, upon a showing of probable cause to believe that association or communication with such person is for the purpose of enabling the defendant to control, manage, direct, finance, or otherwise participate in an illegal enterprise.</p><p>(Added Pub.L. 98–473, Title II, § 212(a)(2), Oct. 12, 1984, 98 Stat. 1998, amended Pub.L. 100–690, Title VII, § 7107, Nov. 18, 1988, 102 Stat. 4418; Pub.L. 101–647, Title XXXV, § 3588, Nov. 29, 1990, 104 Stat. 4930; Pub.L. 103–322, Title VII, § 70002, Sept. 13, 1994, 108 Stat. 1984; Pub.L. 104–294, Title VI, § 604(b)(3), Oct. 11, 1996, 110 Stat. 3506; Pub.L. 107–273, Div. B, Title III, § 3006, Nov. 2, 2002, 116 Stat. 1806.)</p>\"},{\"id\":\"18U.S.C.§3583\",\"content\":\"<p><strong>§ 3583. Inclusion of a term of supervised release after imprisonment</strong></p><p><strong>(a) In general.</strong>—The court, in imposing a sentence to a term of imprisonment for a felony or a misdemeanor, may include as a part of the sentence a requirement that the defendant be placed on a term of supervised release after imprisonment, except that the court shall include as a part of the sentence a requirement that the defendant be placed on a term of supervised release if such a term is required by statute or if the defendant has been convicted for the first time of a domestic violence crime as defined in section 3561(b).</p><p><strong>(b) Authorized terms of supervised release.</strong>—Except as otherwise provided, the authorized terms of supervised release are—</p><blockquote><p><strong>(1)</strong> for a Class A or Class B felony, not more than five years;</p><p><strong>(2)</strong> for a Class C or Class D felony, not more than three years; and</p><p><strong>(3)</strong> for a Class E felony, or for a misdemeanor (other than a petty offense), not more than one year.</p></blockquote><p><strong>(c) Factors to be considered in including a term of supervised release.</strong>—The court, in determining whether to include a term of supervised release, and, if a term of supervised release is to be included, in determining the length of the term and the conditions of supervised release, shall consider the factors set forth in section 3553(a)(1), (a)(2)(B), (a)(2)(C), (a)(2)(D), (a)(4), (a)(5), (a)(6), and (a)(7).</p><p><strong>(d) Conditions of supervised release.</strong>—The court shall order, as an explicit condition of supervised release, that the defendant not commit another Federal, State, or local crime during the term of supervision and that the defendant not unlawfully possess a controlled substance. The court shall order as an explicit condition of supervised release for a defendant convicted for the first time of a domestic violence crime as defined in section 3561(b) that the defendant attend a public, private, or private nonprofit offender rehabilitation program that has been approved by the court, in consultation with a State Coalition Against Domestic Violence or other appropriate experts, if an approved program is readily available within a 50-mile radius of the legal residence of the defendant. The court shall order, as an explicit condition of supervised release for a person required to register under the Sex Offender Registration and Notification Act, that the person comply with the requirements of that Act. The court shall order, as an explicit condition of supervised release, that the defendant cooperate in the collection of a DNA sample from the defendant, if the collection of such a sample is authorized pursuant to section 3 of the DNA Analysis Backlog Elimination Act of 2000. The court shall also order, as an explicit condition of supervised release, that the defendant refrain from any unlawful use of a controlled substance and submit to a drug test within 15 days of release on supervised release and at least 2 periodic drug tests thereafter (as determined by the court) for use of a controlled substance. The condition stated in the preceding sentence may be ameliorated or suspended by the court as provided in section 3563(a)(4). The results of a drug test administered in accordance with the preceding subsection shall be subject to confirmation only if the results are positive, the defendant is subject to possible imprisonment for such failure, and either the defendant denies the accuracy of such test or there is some other reason to question the results of the test. A drug test confirmation shall be a urine drug test confirmed using gas chromatography/mass spectrometry techniques or such test as the Director of the Administrative Office of the United States Courts after consultation with the Secretary of Health and Human Services may determine to be of equivalent accuracy. The court shall consider whether the availability of appropriate substance abuse treatment programs, or an individual’s current or past participation in such programs, warrants an exception in accordance with United States Sentencing Commission guidelines from the rule of section 3583(g) when considering any action against a defendant who fails a drug test. The court may order, as a further condition of supervised release, to the extent that such condition—</p><blockquote><p><strong>(1)</strong> is reasonably related to the factors set forth in section 3553(a)(1), (a)(2)(B), (a)(2)(C), and (a)(2)(D);</p><p><strong>(2)</strong> involves no greater deprivation of liberty than is reasonably necessary for the purposes set forth in section 3553(a)(2)(B), (a)(2)(C), and (a)(2)(D); and</p><p><strong>(3)</strong> is consistent with any pertinent policy statements issued by the Sentencing Commission pursuant to 28 U.S.C. 994(a);</p></blockquote><p>any condition set forth as a discretionary condition of probation in section 3563(b) and any other condition it considers to be appropriate, provided, however that a condition set forth in subsection 3563(b)(10) shall be imposed only for a violation of a condition of supervised release in accordance with section 3583(e)(2) and only when facilities are available. If an alien defendant is subject to deportation, the court may provide, as a condition of supervised release, that he be deported and remain outside the United States, and may order that he be delivered to a duly authorized immigration official for such deportation. The court may order, as an explicit condition of supervised release for a person who is a felon and required to register under the Sex Offender Registration and Notification Act, that the person submit his person, and any property, house, residence, vehicle, papers, computer, other electronic communications or data storage devices or media, and effects to search at any time, with or without a warrant, by any law enforcement or probation officer with reasonable suspicion concerning a violation of a condition of supervised release or unlawful conduct by the person, and by any probation officer in the lawful discharge of the officer’s supervision functions.</p><p><strong>(e) Modification of conditions or revocation.</strong>—The court may, after considering the factors set forth in section 3553(a)(1), (a)(2)(B), (a)(2)(C), (a)(2)(D), (a)(4), (a)(5), (a)(6), and (a)(7)—</p><blockquote><p><strong>(1)</strong> terminate a term of supervised release and discharge the defendant released<a href='#fn3' class='footnoteRef' id='fnref3'><sup>3</sup></a> at any time after the expiration of one year of supervised release, pursuant to the provisions of the Federal Rules of Criminal Procedure relating to the modification of probation, if it is satisfied that such action is warranted by the conduct of the defendant released<sup>1</sup> and the interest of justice;</p><p><strong>(2)</strong> extend a term of supervised release if less than the maximum authorized term was previously imposed, and may modify, reduce, or enlarge the conditions of supervised release, at any time prior to the expiration or termination of the term of supervised release, pursuant to the provisions of the Federal Rules of Criminal Procedure relating to the modification of probation and the provisions applicable to the initial setting of the terms and conditions of post‑release supervision;</p><p><strong>(3)</strong> revoke a term of supervised release, and require the defendant to serve in prison all or part of the term of supervised release authorized by statute for the offense that resulted in such term of supervised release without credit for time previously served on postrelease supervision, if the court, pursuant to the Federal Rules of Criminal Procedure applicable to revocation of probation or supervised release, finds by a preponderance of the evidence that the defendant violated a condition of supervised release, except that a defendant whose term is revoked under this paragraph may not be required to serve on any such revocation more than 5 years in prison if the offense that resulted in the term of supervised release is a class A felony, more than 3 years in prison if such offense is a class B felony, more than 2 years in prison if such offense is a class C or D felony, or more than one year in any other case; or</p><p><strong>(4)</strong> order the defendant to remain at his place of residence during nonworking hours and, if the court so directs, to have compliance monitored by telephone or electronic signaling devices, except that an order under this paragraph may be imposed only as an alternative to incarceration.</p></blockquote><p><strong>(f) Written statement of conditions.</strong>—The court shall direct that the probation officer provide the defendant with a written statement that sets forth all the conditions to which the term of supervised release is subject, and that is sufficiently clear and specific to serve as a guide for the defendant’s conduct and for such supervision as is required.</p><p><strong>(g) Mandatory revocation for possession of controlled substance or firearm or for refusal to comply with drug testing.</strong>—If the defendant—</p><blockquote><p><strong>(1)</strong> possesses a controlled substance in violation of the condition set forth in subsection (d);</p><p><strong>(2)</strong> possesses a firearm, as such term is defined in section 921 of this title, in violation of Federal law, or otherwise violates a condition of supervised release prohibiting the defendant from possessing a firearm;</p><p><strong>(3)</strong> refuses to comply with drug testing imposed as a condition of supervised release; or</p><p><strong>(4)</strong> as a part of drug testing, tests positive for illegal controlled substances more than 3 times over the course of 1 year;</p></blockquote><p>the court shall revoke the term of supervised release and require the defendant to serve a term of imprisonment not to exceed the maximum term of imprisonment authorized under subsection (e)(3).</p><p><strong>(h) Supervised release following revocation.</strong>—When a term of supervise release is revoked and the defendant is required to serve a term of imprisonment, the court may include a requirement that the defendant be placed on a term of supervised release after imprisonment. The length of such a term of supervised release shall not exceed the term of supervised release authorized by statute for the offense that resulted in the original term of supervised release, less any term of imprisonment that was imposed upon revocation of supervised release.</p><p><strong>(i) Delayed revocation.</strong>—The power of the court to revoke a term of supervised release for violation for a condition of supervised release, and to order the defendant to serve a term of imprisonment and, subject to the limitations in subsection (h), a further term of supervised release, extends beyond the expiration of the term of supervised release for any period reasonably necessary for the adjudication of matters arising before its expiration if, before its expiration, a warrant or summons has been issued on the basis of an allegation of such a violation.</p><p><strong>(j)</strong> <strong>Supervised Release Terms for Terrorism Predicates.</strong>—Notwithstanding subsection (b), the authorized term of supervised release for any offense listed in section 2332b(g)(5)(B), is any term of years or life.</p><p><strong>(k)</strong> Notwithstanding subsection (b), the authorized term of supervised release for any offense under section 1201 involving a minor victim, and for any offense under section 1591, 1594(c), 2241, 2242, 2243, 2244, 2245, 2250, 2251, 2251A, 2252, 2252A, 2260, 2421, 2422, 2423, or 2425, is any term of years not less than 5, or life. If a defendant required to register under the Sex Offender Registration and Notification Act commits any criminal offense under chapter 109A, 110, or 117, or section 1201 or 1591, for which imprisonment for a term longer than 1 year can be imposed, the court shall revoke the term of supervised release and require the defendant to serve a term of imprisonment under subsection (e)(3) without regard to the exception contained therein. Such term shall be not less than 5 years.</p><p>(Added Pub.L. 98–473, Title II, § 212(a)(2), Oct. 12, 1984, 98 Stat. 1999, and amended Pub.L. 99–570, Title I, § 1006(a), Oct. 27, 1986, 100 Stat. 3207–6, 3207–7; Pub.L. 99–646, § 14(a), Nov. 10, 1986, 100 Stat. 3594; Pub.L. 100–182, §§ 8, 9, 12, 25, Dec. 7, 1987, 101 Stat. 1267, 1268, 1272; Pub.L. 100–690, Title VII, §§ 7108, 7303(b), 7305(b), Nov. 18, 1988, 102 Stat. 4418, 4419, 4464–4466; Pub.L. 101–647, Title XXXV, § 3589, Nov. 29, 1990, 104 Stat. 4930; Pub.L. 103–322, Title II, § 20414(c), Title XI, § 110505, Title XXXII, § 320921(c), Sept. 13, 1994, 108 Stat. 1831, 2016, 2130; Pub.L. 105–119, Title I, § 115(a)(8)(B), Nov. 26, 1997, 111 Stat. 2465; Pub.L. 106–546, § 7(b), Dec. 19, 2000, 114 Stat. 2734; Pub.L. 107–56, Title VIII, § 812, Oct. 26, 2001, 115 Stat. 382; Pub.L. 107–273, Div. B, Title II, § 2103(b), Title III, § 3007, Nov. 2, 2002, 116 Stat. 1793, 1806; Pub.L. 108–21, Title I, § 101, Apr. 30, 2003, 117 Stat. 651; Pub.L. 109–177, Title II, § 212, Mar. 9, 2006, 120 Stat. 230; Pub.L. 109–248, Title I, § 141(e), Title II, § 201(b), July 27, 2006, 120 Stat. 603, 615; Pub.L. 110–406, § 14(b), Oct. 13, 2008, 122 Stat. 4294; Pub.L. 114–22, title I, §114(d), May 29, 2015, 129 Stat. 242.)</p><p><strong>EDITORIAL NOTES</strong></p><p><strong>Codification.</strong> Amendment by section 7108(a)(2) of Pub.L. 100–690 to subsec. (d)(2), which directed that “(a)(2)(C),” be inserted after “(a)(2)(B),”, was executed by inserting “(a)(2)(C),” after “(a)(2)(B)” since no comma appeared after “(a)(2)(B)”.</p><p>Amendment by section 7305(b)(2) of Pub.L. 100–690 to subsec. (e) which struck out “or” at the end of par. (3), struck out the period at the end of par. (4) and inserted “; or”, and added par. (5) could not be completely executed in view of prior amendment to such provision by section 7108(b) of Pub.L. 100–690 which redesignated former par. (4) as (3) thereby resulting in no par. (4) amended.</p><p>Amendment by section 14(a)(1) of Pub.L. 99–646 to subsec. (e) catchline duplicates amendment to such subsection catchline made by Pub.L. 99–570, § 1006(a)(3)(A).</p>\"},{\"id\":\"18U.S.C.§3584\",\"content\":\"<p><strong>§ 3584. Multiple sentences of imprisonment</strong></p><p><strong>(a) Imposition of concurrent or consecutive terms.</strong>—If multiple terms of imprisonment are imposed on a defendant at the same time, or if a term of imprisonment is imposed on a defendant who is already subject to an undischarged term of imprisonment, the terms may run concurrently or consecutively, except that the terms may not run consecutively for an attempt and for another offense that was the sole objective of the attempt. Multiple terms of imprisonment imposed at the same time run concurrently unless the court orders or the statute mandates that the terms are to run consecutively. Multiple terms of imprisonment imposed at different times run consecutively unless the court orders that the terms are to run concurrently.</p><p><strong>(b) Factors to be considered in imposing concurrent or consecutive terms.</strong>—The court, in determining whether the terms imposed are to be ordered to run concurrently or consecutively, shall consider, as to each offense for which a term of imprisonment is being imposed, the factors set forth in section 3553(a).</p><p><strong>(c) Treatment of multiple sentence as an aggregate.</strong>—Multiple terms of imprisonment ordered to run consecutively or concurrently shall be treated for administrative purposes as a single, aggregate term of imprisonment.</p><p>(Added Pub.L. 98–473, Title II, § 212(a)(2), Oct. 12, 1984, 98 Stat. 2000.)</p>\"},{\"id\":\"18U.S.C.§3585\",\"content\":\"<p><strong>§ 3585. Calculation of a term of imprisonment</strong></p><p><strong>(a) Commencement of sentence.</strong>—A sentence to a term of imprisonment commences on the date the defendant is received in custody awaiting transportation to, or arrives voluntarily to commence service of sentence at, the official detention facility at which the sentence is to be served.</p><p><strong>(b) Credit for prior custody.</strong>—A defendant shall be given credit toward the service of a term of imprisonment for any time he has spent in official detention prior to the date the sentence commences—</p><blockquote><p><strong>(1)</strong> as a result of the offense for which the sentence was imposed; or</p><p><strong>(2)</strong> as a result of any other charge for which the defendant was arrested after the commission of the offense for which the sentence was imposed;</p></blockquote><p>that has not been credited against another sentence.</p><p>(Added Pub.L. 98–473, Title II, § 212(a)(2), Oct. 12, 1984, 98 Stat. 2001.)</p>\"},{\"id\":\"18U.S.C.§3586\",\"content\":\"<p><strong>§ 3586. Implementation of a sentence of imprisonment</strong></p><p>The implementation of a sentence of imprisonment is governed by the provisions of subchapter C of chapter 229 and, if the sentence includes a term of supervised release, by the provisions of subchapter A of chapter 229.</p><p>(Added Pub.L. 98–473, Title II, § 212(a)(2), Oct. 12, 1984, 98 Stat. 2001.)</p><p>* * *</p>\"},{\"id\":\"18U.S.C.§3621\",\"content\":\"<p><strong>§ 3621. Imprisonment of a convicted person</strong></p><p><strong>(a) Commitment to custody of Bureau of Prisons.</strong>—A person who has been sentenced to a term of imprisonment pursuant to the provisions of subchapter D of chapter 227 shall be committed to the custody of the Bureau of Prisons until the expiration of the term imposed, or until earlier released for satisfactory behavior pursuant to the provisions of section 3624.</p><p><strong>(b) Place of imprisonment.</strong>—The Bureau of Prisons shall designate the place of the prisoner’s imprisonment. The Bureau may designate any available penal or correctional facility that meets minimum standards of health and habitability established by the Bureau, whether maintained by the Federal Government or otherwise and whether within or without the judicial district in which the person was convicted, that the Bureau determines to be appropriate and suitable, considering—</p><blockquote><p><strong>(1)</strong> the resources of the facility contemplated;</p><p><strong>(2)</strong> the nature and circumstances of the offense;</p><p><strong>(3)</strong> the history and characteristics of the prisoner;</p><p><strong>(4)</strong> any statement by the court that imposed the sentence—</p><p><strong>(A)</strong> concerning the purposes for which the sentence to imprisonment was determined to be warranted; or</p><p><strong>(B)</strong> recommending a type of penal or correctional facility as appropriate; and</p><p><strong>(5)</strong> any pertinent policy statement issued by the Sentencing Commission pursuant to section 994(a)(2) of title 28.</p></blockquote><p>In designating the place of imprisonment or making transfers under this subsection, there shall be no favoritism given to prisoners of high social or economic status. The Bureau may at any time, having regard for the same matters, direct the transfer of a prisoner from one penal or correctional facility to another. The Bureau shall make available appropriate substance abuse treatment for each prisoner the Bureau determines has a treatable condition of substance addiction or abuse. Any order, recommendation, or request by a sentencing court that a convicted person serve a term of imprisonment in a community corrections facility shall have no binding effect on the authority of the Bureau under this section to determine or change the place of imprisonment of that person.</p><p><strong>(c) Delivery of order of commitment.</strong>—When a prisoner, pursuant to a court order, is placed in the custody of a person in charge of a penal or correctional facility, a copy of the order shall be delivered to such person as evidence of this authority to hold the prisoner, and the original order, with the return endorsed thereon, shall be returned to the court that issued it.</p><p><strong>(d) Delivery of prisoner for court appearances.</strong>—The United States marshal shall, without charge, bring a prisoner into court or return him to a prison facility on order of a court of the United States or on written request of an attorney for the Government.</p><p><strong>(e) Substance abuse treatment.</strong>—</p><blockquote><p><strong>(1) Phase-in.</strong>—In order to carry out the requirement of the last sentence of subsection (b) of this section, that every prisoner with a substance abuse problem have the opportunity to participate in appropriate substance abuse treatment, the Bureau of Prisons shall, subject to the availability of appropriations, provide residential substance abuse treatment (and make arrangements for appropriate aftercare)—</p><p><strong>(A)</strong> for not less than 50 percent of eligible prisoners by the end of fiscal year 1995, with priority for such treatment accorded based on an eligible prisoner’s proximity to release date;</p><p><strong>(B)</strong> for not less than 75 percent of eligible prisoners by the end of fiscal year 1996, with priority for such treatment accorded based on an eligible prisoner’s proximity to release date; and</p><p><strong>(C)</strong> for all eligible prisoners by the end of fiscal year 1997 and thereafter, with priority for such treatment accorded based on an eligible prisoner’s proximity to release date.</p><p><strong>(2) Incentive for prisoners’ successful completion of treatment program.</strong>—</p><p><strong>(A) Generally.</strong>—Any prisoner who, in the judgment of the Director of the Bureau of Prisons, has successfully completed a program of residential substance abuse treatment provided under paragraph (1) of this subsection, shall remain in the custody of the Bureau under such conditions as the Bureau deems appropriate. If the conditions of confinement are different from those the prisoner would have experienced absent the successful completion of the treatment, the Bureau shall periodically test the prisoner for substance abuse and discontinue such conditions on determining that substance abuse has recurred.</p><p><strong>(B) Period of custody.</strong>—The period a prisoner convicted of a nonviolent offense remains in custody after successfully completing a treatment program may be reduced by the Bureau of Prisons, but such reduction may not be more than one year from the term the prisoner must otherwise serve.</p><p><strong>(3) Report.</strong>—The Bureau of Prisons shall transmit to the Committees on the Judiciary of the Senate and the House of Representatives on January 1, 1995, and on January 1 of each year thereafter, a report. Such report shall contain—</p><p><strong>(A)</strong> a detailed quantitative and qualitative description of each substance abuse treatment program, residential or not, operated by the Bureau;</p><p><strong>(B)</strong> a full explanation of how eligibility for such programs is determined, with complete information on what proportion of prisoners with substance abuse problems are eligible; and</p><p><strong>(C)</strong> a complete statement of to what extent the Bureau has achieved compliance with the requirements of this title.</p><p><strong>(4) Authorization of Appropriations.</strong>—There are authorized to carry out this subsection such sums as may be necessary for each of fiscal years 2007 through 2011.</p><p><strong>(5) Definitions.</strong>—As used in this subsection—</p><p><strong>(A)</strong> the term “residential substance abuse treatment” means a course of individual and group activities and treatment, lasting at least 6 months, in residential treatment facilities set apart from the general prison population (which may include the use of pharmocotherapies, where appropriate, that may extend beyond the 6-month period);</p><p><strong>(B)</strong> the term “eligible prisoner” means a prisoner who is—</p><p><strong>(i)</strong> determined by the Bureau of Prisons to have a substance abuse problem; and</p><p><strong>(ii)</strong> willing to participate in a residential substance abuse treatment program; and</p><p><strong>(C)</strong> the term “aftercare” means placement, case management and monitoring of the participants in a community-based substance abuse treatment program when the participant leaves the custody of the Bureau of Prisons.</p><p><strong>(6) Coordination of Federal assistance.</strong>—The Bureau of Prisons shall consult with the Department of Health and Human Services concerning substance abuse treatment and related services and the incorporation of applicable components existing comprehensive approaches including relapse prevention and aftercare services.</p></blockquote><p><strong>(f) Sex Offender Management.—</strong></p><blockquote><p><strong>(1) In General.—</strong>The Bureau of Prisons shall make available appropriate treatment to sex offenders who are in need of and suitable for treatment, as follows:</p><p><strong>(A) Sex Offender Management Programs.—</strong>The Bureau of Prisons shall establish non-residential sex offender management programs to provide appropriate treatment, monitoring, and supervision of sex offenders and to provide aftercare during pre-release custody.</p><p><strong>(B)</strong> <strong>Residential Sex Offender Treatment Programs.—</strong>The Bureau of Prisons shall establish residential sex offender treatment programs to provide treatment to sex offenders who volunteer for such programs and are deemed by the Bureau of Prisons to be in need of and suitable for residential treatment.</p><p><strong>(2)</strong> <strong>Regions.—</strong>At least 1 sex offender management program under paragraph (1)(A), and at least one residential sex offender treatment program under paragraph (1)(B), shall be established in each region within the Bureau of Prisons.</p><p><strong>(3)</strong> <strong>Authorization of Appropriations.—</strong>There are authorized to be appropriated to the Bureau of Prisons for each fiscal year such sums as may be necessary to carry out this subsection.</p></blockquote><p><strong>(g) Continued access to medical care.—</strong></p><blockquote><p><strong>(1) In general.—</strong>In order to ensure a minimum standard of health and habitability, the Bureau of Prisons should ensure that each prisoner in a community confinement facility has access to necessary medical care, mental health care, and medicine through partnerships with local health service providers and transition planning.</p><p><strong>(2) Definition.—</strong>In this subsection, the term “community confinement” has the meaning given that term in the application notes under section 5F1.1 of the Federal Sentencing Guidelines Manual, as in effect on the date of the enactment of the Second Chance Act of 2007.</p></blockquote><p>(Added Pub.L. 98–473, Title II, § 212(a)(2), Oct. 12, 1984, 98 Stat. 2007, and amended Pub.L. 101–647, Title XXIX, § 2903, Nov. 29, 1990, 104 Stat. 4913; Pub.L. 103–322, Title II, § 20401, Title III § 32001, Sept. 13, 1994,108 Stat. 1824, 1896; Pub.L. 109–162, Title XI, § 1146, Jan. 5, 2006, 119 Stat. 3112; Pub.L. 109–248, Title VI, § 622, July 7, 2006, 120 Stat. 634; Pub.L. 110–199, Title II, §§ 231(f), 251(b), 252, Apr. 9, 2008, 122 Stat. 687, 693.)</p><p><strong>EDITORIAL NOTES</strong></p><p><strong>References in Text.</strong> The date of the enactment of the Second Chance Act of 2007, referred to in subsec. (g)(2), is April 9, 2008, the approval date of Pub.L. 110–199, 122 Stat. 657.</p>\"},{\"id\":\"18U.S.C.§3622\",\"content\":\"<p><strong>§ 3622. Temporary release of a prisoner</strong></p><p>The Bureau of Prisons may release a prisoner from the place of his imprisonment for a limited period if such release appears to be consistent with the purpose for which the sentence was imposed and any pertinent policy statement issued by the Sentencing Commission pursuant to 28 U.S.C. 994(a)(2), if such release otherwise appears to be consistent with the public interest and if there is reasonable cause to believe that a prisoner will honor the trust to be imposed in him, by authorizing him, under prescribed conditions, to—</p><blockquote><p><strong>(a)</strong> visit a designated place for a period not to exceed thirty days, and then return to the same or another facility, for the purpose of—</p><p><strong>(1)</strong> visiting a relative who is dying;</p><p><strong>(2)</strong> attending a funeral of a relative;</p><p><strong>(3)</strong> obtaining medical treatment not otherwise available;</p><p><strong>(4)</strong> contacting a prospective employer;</p><p><strong>(5)</strong> establishing or reestablishing family or community ties; or</p><p><strong>(6)</strong> engaging in any other significant activity consistent with the public interest;</p><p><strong>(b)</strong> participate in a training or educational program in the community while continuing in official detention at the prison facility; or</p><p><strong>(c)</strong> work at paid employment in the community while continuing in official detention at the penal or correctional facility if—</p><p><strong>(1)</strong> the rates of pay and other conditions of employment will not be less than those paid or provided for work of a similar nature in the community; and</p><p><strong>(2)</strong> the prisoner agrees to pay to the Bureau such costs incident to official detention as the Bureau finds appropriate and reasonable under all the circumstances, such costs to be collected by the Bureau and deposited in the Treasury to the credit of the appropriation available for such costs at the time such collections are made.</p></blockquote><p>(Added Pub.L. 98–473, Title II, § 212(a)(2), Oct. 12, 1984, 98 Stat. 2007.)</p>\"},{\"id\":\"18U.S.C.§3623\",\"content\":\"<p><strong>§ 3623. Transfer of a prisoner to State authority</strong></p><p>The Director of the Bureau of Prisons shall order that a prisoner who has been charged in an indictment or information with, or convicted of, a State felony, be transferred to an official detention facility within such State prior to his release from a Federal prison facility if—</p><blockquote><p><strong>(1)</strong> the transfer has been requested by the Governor or other executive authority of the State;</p><p><strong>(2)</strong> the State has presented to the Director a certified copy of the indictment, information, or judgment of conviction; and</p><p><strong>(3)</strong> the Director finds that the transfer would be in the public interest.</p></blockquote><p>If more than one request is presented with respect to a prisoner, the Director shall determine which request should receive preference. The expenses of such transfer shall be borne by the State requesting the transfer.</p><p>(Added Pub.L. 98–473, Title II, § 212(a)(2), Oct. 12, 1984, 98 Stat. 2008.)</p>\"},{\"id\":\"18U.S.C.§3624\",\"content\":\"<p><strong>§ 3624. Release of a prisoner</strong></p><p><strong>(a) Date of release.</strong>—A prisoner shall be released by the Bureau of Prisons on the date of the expiration of the prisoner’s term of imprisonment, less any time credited toward the service of the prisoner’s sentence as provided in subsection (b). If the date for a prisoner’s release falls on a Saturday, a Sunday, or a legal holiday at the place of confinement, the prisoner may be released by the Bureau on the last preceding weekday.</p><p><strong>(b) Credit toward service of sentence for satisfactory behavior.</strong>—<strong>(1)</strong> Subject to paragraph (2), a prisoner who is serving a term of imprisonment of more than 1 year, other than a term of imprisonment for the duration of the prisoner’s life, may receive credit toward the service of the prisoner’s sentence, beyond the time served, of up to 54 days at the end of each year of the prisoner’s term of imprisonment, beginning at the end of the first year of the term, subject to determination by the Bureau of Prisons that, during that year, the prisoner has displayed exemplary compliance with institutional disciplinary regulations. Subject to paragraph (2), if the Bureau determines that, during that year, the prisoner has not satisfactorily complied with such institutional regulations, the prisoner shall receive no such credit toward service of the prisoner’s sentence or shall receive such lesser credit as the Bureau determines to be appropriate. In awarding credit under this section, the Bureau shall consider whether the prisoner, during the relevant period, has earned, or is making satisfactory progress toward earning, a high school diploma or an equivalent degree. Credit that has not been earned may not later be granted. Subject to paragraph (2), credit for the last year or portion of a year of the term of imprisonment shall be prorated and credited within the last six weeks of the sentence.</p><p><strong>(2)</strong> Notwithstanding any other law, credit awarded under this subsection after the date of enactment of the Prison Litigation Reform Act shall vest on the date the prisoner is released from custody.</p><p><strong>(3)</strong> The Attorney General shall ensure that the Bureau of Prisons has in effect an optional General Educational Development program for inmates who have not earned a high school diploma or its equivalent.</p><p><strong>(4)</strong> Exemptions to the General Educational Development requirement may be made as deemed appropriate by the Director of the Federal Bureau of Prisons.</p><p><strong>(c) Pre‑release custody.</strong>—<strong>(1) In general.—</strong>The Director of the Bureau of Prisons shall, to the extent practicable, ensure that a prisoner serving a term of imprisonment spends a portion of the final months of that term (not to exceed 12 months), under conditions that will afford that prisoner a reasonable opportunity to adjust to and prepare for the reentry of that prisoner into the community. Such conditions may include a community correctional facility.</p><p><strong>(2) Home confinement authority.—</strong>The authority under this subsection may be used to place a prisoner in home confinement for the shorter of 10 percent of the term of imprisonment of that prisoner or 6 months.</p><p><strong>(3) Assistance.—</strong>The United States Probation System shall, to the extent practicable, offer assistance to a prisoner during prerelease custody under this subsection.</p><p><strong>(4) No limitations.—</strong>Nothing in this subsection shall be construed to limit or restrict the authority of the Director of the Bureau of Prisons under section 3621.</p><p><strong>(5) Reporting.—</strong>Not later than 1 year after the date of the enactment of the Second Chance Act of 2007 (and every year thereafter), the Director of the Bureau of Prisons shall transmit to the Committee on the Judiciary of the Senate and the Committee on the Judiciary of the House of Representatives a report describing the Bureau’s utilization of community corrections facilities. Each report under this paragraph shall set forth the number and percentage of Federal prisoners placed in community corrections facilities during the preceding year, the average length of such placements, trends in such utilization, the reasons some prisoners are not placed in community corrections facilities, and any other information that may be useful to the committees in determining if the Bureau is utilizing community corrections facilities in an effective manner.</p><p><strong>(6) Issuance of regulations.—</strong>The Director of the Bureau of Prisons shall issue regulations pursuant to this subsection not later than 90 days after the date of the enactment of the Second Chance Act of 2007, which shall ensure that placement in a community correctional facility by the Bureau of Prisons is—</p><blockquote><p><strong>(A)</strong> conducted in a manner consistent with section 3621(b) of this title;</p><p><strong>(B)</strong> determined on an individual basis; and</p><p><strong>(C)</strong> of sufficient duration to provide the greatest likelihood of successful reintegration into the community.</p></blockquote><p><strong>(d) Allotment of clothing, funds, and transportation.</strong>—Upon the release of a prisoner on the expiration of the prisoner’s term of imprisonment, the Bureau of Prisons shall furnish the prisoner with—</p><blockquote><p><strong>(1)</strong> suitable clothing;</p><p><strong>(2)</strong> an amount of money, not more than $500, determined by the Director to be consistent with the needs of the offender and the public interest, unless the Director determines that the financial position of the offender is such that no sum should be furnished; and</p><p><strong>(3)</strong> transportation to the place of the prisoner’s conviction, to the prisoner’s bona fide residence within the United States, or to such other place within the United States as may be authorized by the Director.</p></blockquote><p><strong>(e) Supervision after release.</strong>—A prisoner whose sentence includes a term of supervised release after imprisonment shall be released by the Bureau of Prisons to the supervision of a probation officer who shall, during the term imposed, supervise the person released to the degree warranted by the conditions specified by the sentencing court. The term of supervised release commences on the day the person is released from imprisonment and runs concurrently with any Federal, State, or local term of probation or supervised release or parole for another offense to which the person is subject or becomes subject during the term of supervised release. A term of supervised release does not run during any period in which the person is imprisoned in connection with a conviction for a Federal, State, or local crime unless the imprisonment is for a period of less than 30 consecutive days. Upon the release of a prisoner by the Bureau of Prisons to supervised release, the Bureau of Prisons shall notify such prisoner, verbally and in writing, of the requirement that the prisoner adhere to an installment schedule, not to exceed 2 years except in special circumstances, to pay for any fine imposed for the offense committed by such prisoner, and of the consequences of failure to pay such fines under sections 3611 through 3614 of this title.</p><blockquote><p><strong>(f) Mandatory functional literacy requirement.</strong>—</p><p><strong>(1)</strong> The Attorney General shall direct the Bureau of Prisons to have in effect a mandatory functional literacy program for all mentally capable inmates who are not functionally literate in each Federal correctional institution within 6 months from the date of the enactment of this Act.</p><p><strong>(2)</strong> Each mandatory functional literacy program shall include a requirement that each inmate participate in such program for a mandatory period sufficient to provide the inmate with an adequate opportunity to achieve functional literacy, and appropriate incentives which lead to successful completion of such programs shall be developed and implemented.</p><p><strong>(3)</strong> As used in this section, the term “functional literacy” means–</p><p><strong>(A)</strong> an eighth grade equivalence in reading and mathematics on a nationally recognized standardized test;</p><p><strong>(B)</strong> functional competency or literacy on a nationally recognized criterion–referenced test; or</p><p><strong>(C)</strong> a combination of subparagraphs (A) and (B).</p><p><strong>(4)</strong> Non-English speaking inmates shall be required to participate in an English-As-A-Second-Language program until they function at the equivalence of the eighth grade on a nationally recognized educational achievement test.</p><p><strong>(5)</strong> The Chief Executive Officer of each institution shall have authority to grant waivers for good cause as determined and documented on an individual basis.</p><p>[<strong>(6) Repealed.</strong> Pub.L. 104–66, Title I, § 1091(c), Dec. 21, 1995, 109 Stat. 722.]</p></blockquote><p>(Added Pub.L. 98–473, Title II, § 212(a)(2), Oct. 12, 1984, 98 Stat. 2008, and amended Pub.L. 99–646, §§ 16(a), 17(a), Nov. 10, 1986, 100 Stat. 3595; Pub.L. 101–647, Title XXIX, §§ 2902(a), 2904, Nov. 29, 1990, 104 Stat. 4913; Pub.L. 103–322, Title II, §§ 20405, 20412, Sept. 13, 1994, 108 Stat. 1825, 1828; Pub.L. 104–66, Title I, § 1091(c), Dec. 21, 1995, 109 Stat. 722; Pub.L. 104–134, Title I, § 101[(a)] [Title VIII § 809(c)], Apr. 26, 1996, 110 Stat. 1321–76, renumbered Title I, Pub.L. 104–140, § 1(a), May 2, 1996, 110 Stat. 1327; Pub.L. 110–177, Title V, § 505, Jan. 7, 2008, 121 Stat. 2542; Pub.L. 110–199, Title II, § 251(a), Apr. 9, 2008, 122 Stat. 692.)</p><p><strong>EDITORIAL NOTES</strong></p><p><strong>References in Text.</strong> The date of enactment of the Prison Litigation Reform Act, referred to in subsec. (b)(2), is the date of enactment of Title VIII of Pub.L. 104–134, which was approved Apr. 26, 1996.</p><p>The date of the enactment of the Second Chance Act of 2007, referred to in subsec. (c)(5), (6), is April 9, 2008, the approval date of Pub.L. 110–199, 122 Stat. 657.</p><p>The date of enactment of this Act, referred to in subsec. (f)(1), probably means the date of enactment of Pub.L. 101–647, Nov. 29, 1990, 104 Stat. 4789, which was approved Nov. 29, 1990.</p><p>* * *</p>\"},{\"id\":\"18U.S.C.§3661\",\"content\":\"<p><strong>§ 3661. Use of information for sentencing</strong></p><p>No limitation shall be placed on the information concerning the background, character, and conduct of a person convicted of an offense which a court of the United States may receive and consider for the purpose of imposing an appropriate sentence.</p><p>(Added Pub.L. 91–452, Title X, § 1001(a), Oct. 15, 1970, 84 Stat. 951, § 3577, and renumbered Pub.L.98–473, Title II, § 212(a)(1), Oct. 12, 1984, 98 Stat. 1987.)</p><p>* * *</p>\"},{\"id\":\"18U.S.C.§3663\",\"content\":\"<p><strong>§ 3663. Order of restitution</strong></p><p><strong>(a)(1)(A)</strong> The court, when sentencing a defendant convicted of an offense under this title, section 401, 408(a), 409, 416, 420, or 422(a) of the Controlled Substances Act (21 U.S.C. 841, 848(a), 849, 856, 861, 863) (but in no case shall a participant in an offense under such sections be considered a victim of such offense under this section), or section 5124, 46312, 46502, or 46504 of title 49, other than an offense described in section 3663A(c), may order, in addition to or, in the case of a misdemeanor, in lieu of any other penalty authorized by law, that the defendant make restitution to any victim of such offense, or if the victim is deceased, to the victim’s estate. The court may also order, if agreed to by the parties in a plea agreement, restitution to persons other than the victim of the offense.</p><p><strong>(B)(i)</strong> The court, in determining whether to order restitution under this section, shall consider—</p><p><strong>(I)</strong> the amount of the loss sustained by each victim as a result of the offense; and</p><blockquote><p><strong>(II)</strong> the financial resources of the defendant, the financial needs and earning ability of the defendant and the defendant’s dependents, and such other factors as the court deems appropriate.</p></blockquote><p><strong>(ii)</strong> To the extent that the court determines that the complication and prolongation of the sentencing process resulting from the fashioning of an order of restitution under this section outweighs the need to provide restitution to any victims, the court may decline to make such an order.</p><p><strong>(2)</strong> For the purposes of this section, the term “victim” means a person directly and proximately harmed as a result of the commission of an offense for which restitution may be ordered including, in the case of an offense that involves as an element a scheme, conspiracy, or pattern of criminal activity, any person directly harmed by the defendant’s criminal conduct in the course of the scheme, conspiracy, or pattern. In the case of a victim who is under 18 years of age, incompetent, incapacitated, or deceased, the legal guardian of the victim or representative of the victim’s estate, another family member, or any other person appointed as suitable by the court, may assume the victim’s rights under this section, but in no event shall the defendant be named as such representative or guardian.</p><p><strong>(3)</strong> The court may also order restitution in any criminal case to the extent agreed to by the parties in a plea agreement.</p><p><strong>(b)</strong> The order may require that such defendant—</p><blockquote><p><strong>(1)</strong> in the case of an offense resulting in damage to or loss or destruction of property of a victim of the offense—</p><p><strong>(A)</strong> return the property to the owner of the property or someone designated by the owner; or</p><p><strong>(B)</strong> if return of the property under subparagraph (A) is impossible, impractical, or inadequate, pay an amount equal to the greater of—</p><p><strong>(i)</strong> the value of the property on the date of the damage, loss, or destruction, or</p><p><strong>(ii)</strong> the value of the property on the date of sentencing,</p><p>less the value (as of the date the property is returned) of any part of the property that is returned;</p><p><strong>(2)</strong> in the case of an offense resulting in bodily injury to a victim including an offense under chapter 109A or chapter 110—</p><p><strong>(A)</strong> pay an amount equal to the cost of necessary medical and related professional services and devices relating to physical, psychiatric, and psychological care, including nonmedical care and treatment rendered in accordance with a method of healing recognized by the law of the place of treatment;</p><p><strong>(B)</strong> pay an amount equal to the cost of necessary physical and occupational therapy and rehabilitation; and</p><p><strong>(C)</strong> reimburse the victim for income lost by such victim as a result of such offense;</p><p><strong>(3)</strong> in the case of an offense resulting in bodily injury also results in the death of a victim, pay an amount equal to the cost of necessary funeral and related services;</p><p><strong>(4)</strong> in any case, reimburse the victim for lost income and necessary child care, transportation, and other expenses related to participation in the investigation or prosecution of the offense or attendance at proceedings related to the offense;</p><p><strong>(5)</strong> in any case, if the victim (or if the victim is deceased, the victim’s estate) consents, make restitution in services in lieu of money, or make restitution to a person or organization designated by the victim or the estate; and</p><p><strong>(6)</strong> in the case of an offense under sections 1028(a)(7) or 1028A(a) of this title, pay an amount equal to the value of the time reasonably spent by the victim in an attempt to remediate the intended or actual harm incurred by the victim from the offense.</p></blockquote><p><strong>(c)(1)</strong> Notwithstanding any other provision of law (but subject to the provisions of subsections (a)(1)(B) (i)(II) and (ii), when sentencing a defendant convicted of an offense described in section 401, 408(a), 409, 416, 420, or 422(a) of the Controlled Substances Act (21 U.S.C. 841, 848(a), 849, 856, 861, 863), in which there is no identifiable victim, the court may order that the defendant make restitution in accordance with this subsection.</p><p><strong>(2)(A)</strong> An order of restitution under this subsection shall be based on the amount of public harm caused by the offense, as determined by the court in accordance with guidelines promulgated by the United States Sentencing Commission.</p><p><strong>(B)</strong> In no case shall the amount of restitution ordered under this subsection exceed the amount of the fine which may be ordered for the offense charged in the case.</p><p><strong>(3)</strong> Restitution under this subsection shall be distributed as follows:</p><blockquote><p><strong>(A)</strong> 65 percent of the total amount of restitution shall be paid to the State entity designated to administer crime victim assistance in the State in which the crime occurred.</p><p><strong>(B)</strong> 35 percent of the total amount of restitution shall be paid to the State entity designated to receive Federal substance abuse block grant funds.</p></blockquote><p><strong>(4)</strong> The court shall not make an award under this subsection if it appears likely that such award would interfere with a forfeiture under chapter 46 or chapter 96 of this title or under the Controlled Substances Act (21 U.S.C. 801 et seq.).</p><p><strong>(5)</strong> Notwithstanding section 3612(c) or any other provision of law, a penalty assessment under section 3013 or a fine under subchapter C of chapter 227 shall take precedence over an order of restitution under this subsection.</p><p><strong>(6)</strong> Requests for community restitution under this subsection may be considered in all plea agreements negotiated by the United States.</p><p><strong>(7)(A)</strong> The United States Sentencing Commission shall promulgate guidelines to assist courts in determining the amount of restitution that may be ordered under this subsection.</p><p><strong>(B)</strong> No restitution shall be ordered under this subsection until such time as the Sentencing Commission promulgates guidelines pursuant to this paragraph.</p><p><strong>(d)</strong> An order of restitution made pursuant to this section shall be issued and enforced in accordance with section 3664.</p><p>(Added Pub.L. 97–291, § 5(a), Oct. 12, 1982, 96 Stat. 1253, § 3579 renumbered and amended Pub.L. 98–473, Title II, § 212(a)(1), (3), Oct. 12, 1984, 98 Stat. 1987, 2010; Pub.L. 98–596, § 9, Oct. 30, 1984, 98 Stat. 3138; Nov. 10, 1986, Pub.L. 99–646, §§ 8(b), 20(a), 77(a), 78(a), 79(a), 100 Stat. 3593, 3596, 3618, 3619; Pub.L. 100–182, § 13, Dec. 7, 1987, 101 Stat. 1268; Pub.L. 100–185, § 12, Dec. 11, 1987, 101 Stat. 1285; Pub.L. 100–690, Title VII, § 7042, Nov. 18, 1988, 102 Stat. 4399; Pub.L. 101–647, Title XXV, § 2509, Title XXXV, § 3595, Nov. 29, 1990, 104 Stat. 4863, 4931; Pub.L. 103–272, § 5(e)(12), July 5, 1994, 108 Stat. 1374; Pub.L. 103–322, Title IV, §§ 40504, 40505, Sept. 13, 1994, 108 Stat. 1947; Pub.L. 104–132, Title II, § 205(a), Apr. 24, 1996, 110 Stat. 1229; Pub.L. 104–294, Title VI, §§ 601(r)(1)(2), 605(l), Oct. 11, 1996, 110 Stat. 3502, 3510; Pub.L. 106–310, Div. B, Title XXXVI, § 3613(c), Oct. 17, 2000, 114 Stat. 1230; Pub.L. 109–59, Title VII, § 7128(b), Aug. 10, 2005, 109 Stat. 1910; Sept. 26, 2008, Pub.L. 110–326, Title II, § 202, 122 Stat. 3561.)</p><p><strong>§ 3663A. Mandatory restitution to victims of certain crimes</strong></p><p><strong>(a)(1)</strong> Notwithstanding any other provision of law, when sentencing a defendant convicted of an offense described in subsection (c), the court shall order, in addition to, or in the case of a misdemeanor, in addition to or in lieu of, any other penalty authorized by law, that the defendant make restitution to the victim of the offense or, if the victim is deceased, to the victim’s estate.</p><p><strong>(2)</strong> For the purposes of this section, the term “victim” means a person directly and proximately harmed as a result of the commission of an offense for which restitution may be ordered including, in the case of an offense that involves as an element a scheme, conspiracy, or pattern of criminal activity, any person directly harmed by the defendant’s criminal conduct in the course of the scheme, conspiracy, or pattern. In the case of a victim who is under 18 years of age, incompetent, incapacitated, or deceased, the legal guardian of the victim or representative of the victim’s estate, another family member, or any other person appointed as suitable by the court, may assume the victim’s rights under this section, but in no event shall the defendant be named as such representative or guardian.</p><p><strong>(3)</strong> The court shall also order, if agreed to by the parties in a plea agreement, restitution to persons other than the victim of the offense.</p><p><strong>(b)</strong> The order of restitution shall require that such defendant—</p><blockquote><p><strong>(1)</strong> in the case of an offense resulting in damage to or loss or destruction of property of a victim of the offense—</p><p><strong>(A)</strong> return the property to the owner of the property or someone designated by the owner; or</p><p><strong>(B)</strong> if return of the property under subparagraph (A) is impossible, impracticable, or inadequate, pay an amount equal to—</p><p><strong>(i)</strong> the greater of—</p><p><strong>(I)</strong> the value of the property on the date of the damage, loss, or destruction; or</p><p><strong>(II)</strong> the value of the property on the date of sentencing, less</p><p><strong>(ii)</strong> the value (as of the date the property is returned) of any part of the property that is returned;</p><p><strong>(2)</strong> in the case of an offense resulting in bodily injury to a victim—</p><p><strong>(A)</strong> pay an amount equal to the cost of necessary medical and related professional services and devices relating to physical, psychiatric, and psychological care, including nonmedical care and treatment rendered in accordance with a method of healing recognized by the law of the place of treatment;</p><p><strong>(B)</strong> pay an amount equal to the cost of necessary physical and occupational therapy and rehabilitation; and</p><p><strong>(C)</strong> reimburse the victim for income lost by such victim as a result of such offense;</p><p><strong>(3)</strong> in the case of an offense resulting in bodily injury that results in the death of the victim, pay an amount equal to the cost of necessary funeral and related services; and</p><p><strong>(4)</strong> in any case, reimburse the victim for lost income and necessary child care, transportation, and other expenses incurred during participation in the investigation or prosecution of the offense or attendance at proceedings related to the offense.</p></blockquote><p><strong>(c)(1)</strong> This section shall apply in all sentencing proceedings for convictions of, or plea agreements relating to charges for, any offense—</p><blockquote><p><strong>(A)</strong> that is—</p><p><strong>(i)</strong> a crime of violence, as defined in section 16;</p><p><strong>(ii)</strong> an offense against property under this title, or under section 416(a) of the Controlled Substance Act (21 U.S.C. 856(a)), including any offense committed by fraud or deceit;</p><p><strong>(iii)</strong> an offense described in section 1365 (relating to tampering with consumer products); or</p><p><strong>(iv)</strong> an offense under section 670 (relating to theft of medical products); and</p><p><strong>(B)</strong> in which an identifiable victim or victims has suffered a physical injury or pecuniary loss.</p></blockquote><p><strong>(2)</strong> In the case of a plea agreement that does not result in a conviction for an offense described in paragraph (1), this section shall apply only if the plea specifically states that an offense listed under such paragraph gave rise to the plea agreement.</p><p><strong>(3)</strong> This section shall not apply in the case of an offense described in paragraph (1)(A)(ii) if the court finds, from facts on the record, that—</p><blockquote><p><strong>(A)</strong> the number of identifiable victims is so large as to make restitution impracticable; or</p><p><strong>(B)</strong> determining complex issues of fact related to the cause or amount of the victim’s losses would complicate or prolong the sentencing process to a degree that the need to provide restitution to any victim is outweighed by the burden on the sentencing process.</p></blockquote><p><strong>(d)</strong> An order of restitution under this section shall be issued and enforced in accordance with section 3664.</p><p>(Added Pub.L. 104–132, Title II, § 204(a), Apr. 24, 1996, 110 Stat. 1227; amended Pub.L. 106–310, Div. B, Title XXXVI, § 3613(d), Oct. 17, 2000, 114 Stat. 1230; Pub.L. 112–186, § 6, Oct. 5, 2012, 126 Stat. 1430.)</p>\"},{\"id\":\"18U.S.C.§3664\",\"content\":\"<p><strong>§ 3664. Procedure for issuance and enforcement of order of restitution</strong></p><p><strong>(a)</strong> For orders of restitution under this title, the court shall order the probation officer to obtain and include in its presentence report, or in a separate report, as the court may direct, information sufficient for the court to exercise its discretion in fashioning a restitution order. The report shall include, to the extent practicable, a complete accounting of the losses to each victim, any restitution owed pursuant to a plea agreement, and information relating to the economic circumstances of each defendant. If the number or identity of victims cannot be reasonably ascertained, or other circumstances exist that make this requirement clearly impracticable, the probation officer shall so inform the court.</p><p><strong>(b)</strong> The court shall disclose to both the defendant and the attorney for the Government all portions of the presentence or other report pertaining to the matters described in subsection (a) of this section.</p><p><strong>(c)</strong> The provisions of this chapter, chapter 227, and Rule 32(c) of the Federal Rules of Criminal Procedure shall be the only rules applicable to proceedings under this section.</p><p><strong>(d)(1)</strong> Upon the request of the probation officer, but not later than 60 days prior to the date initially set for sentencing, the attorney for the Government, after consulting, to the extent practicable, with all identified victims, shall promptly provide the probation officer with a listing of the amounts subject to restitution.</p><p><strong>(2)</strong> The probation officer shall, prior to submitting the presentence report under subsection (a), to the extent practicable—</p><blockquote><p><strong>(A)</strong> provide notice to all identified victims of—</p><p><strong>(i)</strong> the offense or offenses of which the defendant was convicted;</p><p><strong>(ii)</strong> the amounts subject to restitution submitted to the probation officer;</p><p><strong>(iii)</strong> the opportunity of the victim to submit information to the probation officer concerning the amount of the victim’s losses;</p><p><strong>(iv)</strong> the scheduled date, time, and place of the sentencing hearing;</p><p><strong>(v)</strong> the availability of a lien in favor of the victim pursuant to subsection (m)(1)(B); and</p><p><strong>(vi)</strong> the opportunity of the victim to file with the probation officer a separate affidavit relating to the amount of the victim’s losses subject to restitution; and</p><p><strong>(B)</strong> provide the victim with an affidavit form to submit pursuant to subparagraph (A)(vi).</p></blockquote><p><strong>(3)</strong> Each defendant shall prepare and file with the probation officer an affidavit fully describing the financial resources of the defendant, including a complete listing of all assets owned or controlled by the defendant as of the date on which the defendant was arrested, the financial needs and earning ability of the defendant and the defendant’s dependents, and such other information that the court requires relating to such other factors as the court deems appropriate.</p><p><strong>(4)</strong> After reviewing the report of the probation officer, the court may require additional documentation or hear testimony. The privacy of any records filed, or testimony heard, pursuant to this section shall be maintained to the greatest extent possible, and such records may be filed or testimony heard in camera.</p><p><strong>(5)</strong> If the victim’s losses are not ascertainable by the date that is 10 days prior to sentencing, the attorney for the Government or the probation officer shall so inform the court, and the court shall set a date for the final determination of the victim’s losses, not to exceed 90 days after sentencing. If the victim subsequently discovers further losses, the victim shall have 60 days after discovery of those losses in which to petition the court for an amended restitution order. Such order may be granted only upon a showing of good cause for the failure to include such losses in the initial claim for restitutionary relief.</p><p><strong>(6)</strong> The court may refer any issue arising in connection with a proposed order of restitution to a magistrate judge or special master for proposed findings of fact and recommendations as to disposition, subject to a de novo determination of the issue by the court.</p><p><strong>(e)</strong> Any dispute as to the proper amount or type of restitution shall be resolved by the court by the preponderance of the evidence. The burden of demonstrating the amount of the loss sustained by a victim as a result of the offense shall be on the attorney for the Government. The burden of demonstrating the financial resources of the defendant and the financial needs of the defendant’s dependents, shall be on the defendant. The burden of demonstrating such other matters as the court deems appropriate shall be upon the party designated by the court as justice requires.</p><p><strong>(f)(1)(A)</strong> In each order of restitution, the court shall order restitution to each victim in the full amount of each victim’s losses as determined by the court and without consideration of the economic circumstances of the defendant.</p><p><strong>(B)</strong> In no case shall the fact that a victim has received or is entitled to receive compensation with respect to a loss from insurance or any other source be considered in determining the amount of restitution.</p><p><strong>(2)</strong> Upon determination of the amount of restitution owed to each victim, the court shall, pursuant to section 3572, specify in the restitution order the manner in which, and the schedule according to which, the restitution is to be paid, in consideration of—</p><blockquote><p><strong>(A)</strong> the financial resources and other assets of the defendant, including whether any of these assets are jointly controlled;</p><p><strong>(B)</strong> projected earnings and other income of the defendant; and</p><p><strong>(C)</strong> any financial obligations of the defendant; including obligations to dependents.</p></blockquote><p><strong>(3)(A)</strong> A restitution order may direct the defendant to make a single, lump‑sum payment, partial payments at specified intervals, in‑kind payments, or a combination of payments at specified intervals and in‑kind payments.</p><p><strong>(B)</strong> A restitution order may direct the defendant to make nominal periodic payments if the court finds from facts on the record that the economic circumstances of the defendant do not allow the payment of any amount of a restitution order, and do not allow for the payment of the full amount of a restitution order in the foreseeable future under any reasonable schedule of payments.</p><p><strong>(4)</strong> An in‑kind payment described in paragraph (3) may be in the form of—</p><blockquote><p><strong>(A)</strong> return of property;</p><p><strong>(B)</strong> replacement of property; or</p><p><strong>(C)</strong> if the victim agrees, services rendered to the victim or a person or organization other than the victim.</p></blockquote><p><strong>(g)(1)</strong> No victim shall be required to participate in any phase of a restitution order.</p><p><strong>(2)</strong> A victim may at any time assign the victim’s interest in restitution payments to the Crime Victims Fund in the Treasury without in any way impairing the obligation of the defendant to make such payments.</p><p><strong>(h)</strong> If the court finds that more than 1 defendant has contributed to the loss of a victim, the court may make each defendant liable for payment of the full amount of restitution or may apportion liability among the defendants to reflect the level of contribution to the victim’s loss and economic circumstances of each defendant.</p><p><strong>(i)</strong> If the court finds that more than 1 victim has sustained a loss requiring restitution by a defendant, the court may provide for a different payment schedule for each victim based on the type and amount of each victim’s loss and accounting for the economic circumstances of each victim. In any case in which the United States is a victim, the court shall ensure that all other victims receive full restitution before the United States receives any restitution.</p><p><strong>(j)(1)</strong> If a victim has received compensation from insurance or any other source with respect to a loss, the court shall order that restitution be paid to the person who provided or is obligated to provide the compensation, but the restitution order shall provide that all restitution of victims required by the order be paid to the victims before any restitution is paid to such a provider of compensation.</p><p><strong>(2)</strong> Any amount paid to a victim under an order of restitution shall be reduced by any amount later recovered as compensatory damages for the same loss by the victim in—</p><blockquote><p><strong>(A)</strong> any Federal civil proceeding; and</p><p><strong>(B)</strong> any State civil proceeding, to the extent provided by the law of the State.</p></blockquote><p><strong>(k)</strong> A restitution order shall provide that the defendant shall notify the court and the Attorney General of any material change in the defendant’s economic circumstances that might affect the defendant’s ability to pay restitution. The court may also accept notification of a material change in the defendant’s economic circumstances from the United States or from the victim. The Attorney General shall certify to the court that the victim or victims owed restitution by the defendant have been notified of the change in circumstances. Upon receipt of the notification, the court may, on its own motion, or the motion of any party, including the victim, adjust the payment schedule, or require immediate payment in full, as the interests of justice require.</p><p><strong>(l)</strong> A conviction of a defendant for an offense involving the act giving rise to an order of restitution shall estop the defendant from denying the essential allegations of that offense in any subsequent Federal civil proceeding or State civil proceeding, to the extent consistent with State law, brought by the victim.</p><p><strong>(m)(1)(A)(i)</strong> An order of restitution may be enforced by the United States in the manner provided for in subchapter C of chapter 227 and subchapter B of chapter 229 of this title; or</p><p><strong>(ii)</strong> by all other available and reasonable means.</p><p><strong>(B)</strong> At the request of a victim named in a restitution order, the clerk of the court shall issue an abstract of judgment certifying that a judgment has been entered in favor of such victim in the amount specified in the restitution order. Upon registering, recording, docketing, or indexing such abstract in accordance with the rules and requirements relating to judgments of the court of the State where the district court is located, the abstract of judgment shall be a lien on the property of the defendant located in such State in the same manner and to the same extent and under the same conditions as a judgment of a court of general jurisdiction in that State.</p><p><strong>(2)</strong> An order of in‑kind restitution in the form of services shall be enforced by the probation officer.</p><p><strong>(n)</strong> If a person obligated to provide restitution, or pay a fine, receives substantial resources from any source, including inheritance, settlement, or other judgment, during a period of incarceration, such person shall be required to apply the value of such resources to any restitution or fine still owed.</p><p><strong>(o)</strong> A sentence that imposes an order of restitution is a final judgment notwithstanding the fact that—</p><blockquote><p><strong>(1)</strong> such a sentence can subsequently be—</p><p><strong>(A)</strong> corrected under Rule 35 of the Federal Rules of Criminal Procedure and section 3742 of chapter 235 of this title;</p><p><strong>(B)</strong> appealed and modified under section 3742;</p><p><strong>(C)</strong> amended under subsection (d)(5); or</p><p><strong>(D)</strong> adjusted under section 3664(k), 3572, or 3613A; or</p><p><strong>(2)</strong> the defendant may be resentenced under section 3565 or 3614.</p></blockquote><p><strong>(p)</strong> Nothing in this section or sections 2248, 2259, 2264, 2327, 3663, and 3663A and arising out of the application of such sections, shall be construed to create a cause of action not otherwise authorized in favor of any person against the United States or any officer or employee of the United States.</p><p>(Added Pub.L. 97–291, § 5(a), Oct. 12, 1982, 96 Stat. 1255, § 3580, renumbered Pub.L. 98–473, Title II, § 212(a)(1), Oct. 12, 1984; 98 Stat. 1987; Pub.L. 101–647, Title XXXV, § 3596, Nov. 29, 1990, 104 Stat. 4931; Pub.L. 104–132, Title II, § 206(a), Apr. 24, 1996, 110 Stat. 1232; Pub.L. 107–273, Div. B, Title IV, § 4002(e)(1), Nov. 2, 2002, 116 Stat. 1810.)</p><p>* * *</p>\"},{\"id\":\"18U.S.C.§3742\",\"content\":\"<p><strong>§ 3742. Review of a sentence</strong></p><p><strong>(a) Appeal by a defendant.</strong>—A defendant may file a notice of appeal in the district court for review of an otherwise final sentence if the sentence—</p><blockquote><p><strong>(1)</strong> was imposed in violation of law;</p><p><strong>(2)</strong> was imposed as a result of an incorrect application of the sentencing guidelines; or</p><p><strong>(3)</strong> is greater than the sentence specified in the applicable guideline range to the extent that the sentence includes a greater fine or term of imprisonment, probation, or supervised release than the maximum established in the guideline range, or includes a more limiting condition of probation or supervised release under section 3563(b)(6) or (b)(11) than the maximum established in the guideline range; or</p><p><strong>(4)</strong> was imposed for an offense for which there is no sentencing guideline and is plainly unreasonable.</p></blockquote><p><strong>(b) Appeal by the Government.</strong>—The Government may file a notice of appeal in the district court for review of an otherwise final sentence if the sentence—</p><blockquote><p><strong>(1)</strong> was imposed in violation of law;</p><p><strong>(2)</strong> was imposed as a result of an incorrect application of the sentencing guidelines;</p><p><strong>(3)</strong> is less than the sentence specified in the applicable guideline range to the extent that the sentence includes a lesser fine or term of imprisonment, probation, or supervised release than the minimum established in the guideline range, or includes a less limiting condition of probation or supervised release under section 3563(b)(6) or (b)(11) than the minimum established in the guideline range; or</p><p><strong>(4)</strong> was imposed for an offense for which there is no sentencing guideline and is plainly unreasonable.</p></blockquote><p>The Government may not further prosecute such appeal without the personal approval of the Attorney General, the Solicitor General, or a deputy solicitor general designated by the Solicitor General.</p><p><strong>(c) Plea agreements.</strong>—In the case of a plea agreement that includes a specific sentence under rule 11(e)(1)(C) of the Federal Rules of Criminal Procedure—</p><blockquote><p><strong>(1)</strong> a defendant may not file a notice of appeal under paragraph (3) or (4) of subsection (a) unless the sentence imposed is greater than the sentence set forth in such agreement; and</p><p><strong>(2)</strong> the Government may not file a notice of appeal under paragraph (3) or (4) of subsection (b) unless the sentence imposed is less than the sentence set forth in such agreement.</p></blockquote><p><strong>(d) Record on review.</strong>—If a notice of appeal is filed in the district court pursuant to subsection (a) or (b), the clerk shall certify to the court of appeals—</p><blockquote><p><strong>(1)</strong> that portion of the record in the case that is designated as pertinent by either of the parties;</p><p><strong>(2)</strong> the presentence report; and</p><p><strong>(3)</strong> the information submitted during the sentencing proceeding.</p></blockquote><p><strong>(e) Consideration.</strong>—Upon review of the record, the court of appeals shall determine whether the sentence—</p><blockquote><p><strong>(1)</strong> was imposed in violation of law;</p><p><strong>(2)</strong> was imposed as a result of an incorrect application of the sentencing guidelines;</p><p><strong>(3)</strong> is outside the applicable guideline range, and</p><p><strong>(A)</strong> the district court failed to provide the written statement of reasons required by section 3553(c);</p><p><strong>(B)</strong> the sentence departs from the applicable guideline range based on a factor that—</p><p><strong>(i)</strong> does not advance the objectives set forth in section 3553(a)(2); or</p><p><strong>(ii)</strong> is not authorized under section 3553(b); or</p><p><strong>(iii)</strong> is not justified by the facts of the case; or</p><p><strong>(C)</strong> the sentence departs to an unreasonable degree from the applicable guidelines range, having regard for the factors to be considered in imposing a sentence, as set forth in section 3553(a) of this title and the reasons for the imposition of the particular sentence, as stated by the district court pursuant to the provisions of section 3553(c); or</p><p><strong>(4)</strong> was imposed for an offense for which there is no applicable sentencing guideline and is plainly unreasonable.</p></blockquote><p>The court of appeals shall give due regard to the opportunity of the district court to judge the credibility of the witnesses, and shall accept the findings of fact of the district court unless they are clearly erroneous and, except with respect to determinations under subsection (3)(A) or (3)(B), shall give due deference to the district court’s application of the guidelines to the facts. With respect to determinations under subsection (3)(A) or (3)(B), the court of appeals shall review de novo the district court’s application of the guidelines to the facts.</p><p><strong>(f) Decision and disposition.</strong>—If the court of appeals determines that—</p><blockquote><p><strong>(1)</strong> the sentence was imposed in violation of law or imposed as a result of an incorrect application of the sentencing guidelines, the court shall remand the case for further sentencing proceedings with such instructions as the court considers appropriate;</p><p><strong>(2)</strong> the sentence is outside the applicable guideline range and the district court failed to provide the required statement of reasons in the order of judgment and commitment, or the departure is based on an impermissible factor, or is to an unreasonable degree, or the sentence was imposed for an offense for which there is no applicable sentencing guideline and is plainly unreasonable, it shall state specific reasons for its conclusions and—</p><p><strong>(A)</strong> if it determines that the sentence is too high and the appeal has been filed under subsection (a), it shall set aside the sentence and remand the case for further sentencing proceedings with such instructions as the court considers appropriate, subject to subsection (g);</p><p><strong>(B)</strong> if it determines that the sentence is too low and the appeal has been filed under subsection (b), it shall set aside the sentence and remand the case for further sentencing proceedings with such instructions as the court considers appropriate, subject to subsection (g);</p><p><strong>(3)</strong> the sentence is not described in paragraph (1) or (2), it shall affirm the sentence.</p></blockquote><p><strong>(g) Sentencing upon remand.—</strong>A district court to which a case is remanded pursuant to subsection (f)(1) or (f)(2) shall resentence a defendant in accordance with section 3553 and with such instructions as may have been given by the court of appeals, except that—</p><blockquote><p><strong>(1)</strong> In determining the range referred to in subsection 3553(a)(4), the court shall apply the guidelines issued by the Sentencing Commission pursuant to section 994(a)(1) of title 28, United States Code, and that were in effect on the date of the previous sentencing of the defendant prior to the appeal, together with any amendments thereto by any act of Congress that was in effect on such date; and</p><p><strong>(2)</strong> The court shall not impose a sentence outside the applicable guidelines range except upon a ground that—</p><p><strong>(A)</strong> was specifically and affirmatively included in the written statement of reasons required by section 3553(c) in connection with the previous sentencing of the defendant prior to the appeal; and</p><p><strong>(B)</strong> was held by the court of appeals, in remanding the case, to be a permissible ground of departure.</p></blockquote><p><strong>(h) Application to a sentence by a magistrate.</strong>—An appeal of an otherwise final sentence imposed by a United States magistrate may be taken to a judge of the district court, and this section shall apply (except for the requirement of approval by the Attorney General or the Solicitor General in the case of a Government appeal) as though the appeal were to a court of appeals from a sentence imposed by a district court.</p><p><strong>(i) Guideline not expressed as a range.</strong>—For the purpose of this section, the term “guideline range” includes a guideline range having the same upper and lower limits.</p><p><strong>(j) Definitions.—</strong>For purposes of this section—</p><blockquote><p><strong>(1)</strong> a factor is a “permissible” ground of departure if it—</p><p><strong>(A)</strong> advances the objectives set forth in section 3553(a)(2); and</p><p><strong>(B)</strong> is authorized under section 3553(b); and</p><p><strong>(C)</strong> is justified by the facts of the case; and</p><p><strong>(2)</strong> a factor is an “impermissible” ground of departure if it is not a permissible factor within the meaning of subsection (j)(1).</p></blockquote><p>(Added Pub.L. 98–473, Title II, § 213(a), Oct. 12, 1984, 98 Stat. 2011, and amended Pub.L. 99–646, § 73(a), Nov. 10, 1986, 100 Stat. 3617; Pub.L. 100–182, §§ 4–6, Dec. 7, 1987, 101 Stat. 1266, 1267; Pub.L. 100–690, Title VII, § 7103(a), Nov. 18, 1988, 102 Stat. 4416, 4417; Pub.L. 101–647, Title XXXV, §§ 3501, 3503, Nov. 29, 1990, 104 Stat. 4921; Pub.L. 103–322, Title XXXIII, § 330002(k), Sept. 13, 1994, 108 Stat. 2140; Pub.L. 108–21, Title IV, § 401(d)–(f), Apr. 30, 2003, 117 Stat. 670, 671.)</p><p><strong>EDITORIAL NOTES</strong></p><p><strong>Unconstitutionality of Subsection (e).</strong> Mandatory aspect of subsection (e) of this section held unconstitutional by <em>United States v. Booker</em>, 543 U.S. 220, 125 S. Ct. 738 (2005).</p><p><strong>Change of Name of United States Magistrates.</strong> United States magistrates appointed under section 631 of the Title 28, Judiciary and Judicial Procedure, to be known as United States magistrate judge after Dec. 1, 1990, with any reference to any United States magistrate or magistrate contained in Title 28, in any other Federal statute, etc., deemed to refer to a United States magistrate judge appointed under section 631 of Title 28, see section 321 of Pub.L. 101–650.</p><p>* * *</p>\"},{\"id\":\"28U.S.C.§991\",\"content\":\"<p><strong>§ 991. United States Sentencing Commission; establishment and purposes</strong></p><p><strong>(a)</strong> There is established as an independent commission in the judicial branch of the United States a United States Sentencing Commission which shall consist of seven voting members and one nonvoting member. The President, after consultation with representatives of judges, prosecuting attorneys, defense attorneys, law enforcement officials, senior citizens, victims of crime, and others interested in the criminal justice process, shall appoint the voting members of the Commission, by and with the advice and consent of the Senate, one of whom shall be appointed, by and with the advice and consent of the Senate, as the Chair and three of whom shall be designated by the President as Vice Chairs. At least 3 of the members shall be Federal judges selected after considering a list of six judges recommended to the President by the Judicial Conference of the United States. Not more than four of the members of the Commission shall be members of the same political party, and of the three Vice Chairs, no more than two shall be members of the same political party. The Attorney General, or the Attorney General’s designee, shall be an ex officio, nonvoting member of the Commission. The Chair, Vice Chairs, and members of the Commission shall be subject to removal from the Commission by the President only for neglect of duty or malfeasance in office or for other good cause shown.</p><p><strong>(b)</strong> The purposes of the United States Sentencing Commission are to—</p><blockquote><p><strong>(1)</strong> establish sentencing policies and practices for the Federal criminal justice system that—</p><p><strong>(A)</strong> assure the meeting of the purposes of sentencing as set forth in section 3553(a)(2) of title 18, United States Code;</p><p><strong>(B)</strong> provide certainty and fairness in meeting the purposes of sentencing, avoiding unwarranted sentencing disparities among defendants with similar records who have been found guilty of similar criminal conduct while maintaining sufficient flexibility to permit individualized sentences when warranted by mitigating or aggravating factors not taken into account in the establishment of general sentencing practices; and</p><p><strong>(C)</strong> reflect, to the extent practicable, advancement in knowledge of human behavior as it relates to the criminal justice process; and</p><p><strong>(2)</strong> develop means of measuring the degree to which the sentencing, penal, and correctional practices are effective in meeting the purposes of sentencing as set forth in section 3553(a)(2) of title 18, United States Code.</p></blockquote><p>(Added Pub.L. 98–473, Title II, § 217(a), Oct. 12, 1984, 98 Stat. 2017, and amended Pub.L. 99–22, § 1(1), Apr. 15, 1985, 99 Stat. 46; Pub.L. 103–322, Title XXVIII, § 280005(a), (c)(1), (2), Sept. 13, 1994, 108 Stat. 2096, 2097; Pub.L. 104–294, Title VI, § 604(b)(11), Oct. 11, 1996, 110 Stat. 3507; Pub.L. 108–21, Title IV, § 401(n)(1), Apr. 30, 2003, 117 Stat. 676; Pub.L. 110–406, § 16, Oct. 13, 2008, 122 Stat. 4295.)</p>\"},{\"id\":\"28U.S.C.§992\",\"content\":\"<p><strong>§ 992. Terms of office; compensation</strong></p><p><strong>(a)</strong> The voting members of the United States Sentencing Commission shall be appointed for six‑year terms, except that the initial terms of the first members of the Commission shall be staggered so that—</p><blockquote><p><strong>(1)</strong> two members, including the Chair, serve terms of six years;</p><p><strong>(2)</strong> three members serve terms of four years; and</p><p><strong>(3)</strong> two members serve terms of two years.</p></blockquote><p><strong>(b)(1)</strong> Subject to paragraph (2)—</p><p><strong>(A)</strong> no voting member of the Commission may serve more than two full terms; and</p><blockquote><p><strong>(B)</strong> a voting member appointed to fill a vacancy that occurs before the expiration of the term for which a predecessor was appointed shall be appointed only for the remainder of such term.</p></blockquote><p><strong>(2)</strong> A voting member of the Commission whose term has expired may continue to serve until the earlier of—</p><blockquote><p><strong>(A)</strong> the date on which a successor has taken office; or</p><p><strong>(B)</strong> the date on which the Congress adjourns sine die to end the session of Congress that commences after the date on which the member’s term expired.</p></blockquote><p><strong>(c)</strong> The Chair and Vice Chairs of the Commission shall hold full-time positions and shall be compensated during their terms of office at the annual rate at which judges of the United States courts of appeals are compensated. The voting members of the Commission, other than the Chair and Vice Chair, shall hold full‑time positions until the end of the first six years after the sentencing guidelines go into effect pursuant to section 235(a)(1)(B)(ii) of the Sentencing Reform Act of 1984, and shall be compensated at the annual rate at which judges of the United States courts of appeals are compensated. Thereafter, the voting members of the commission, other than the Chair and Vice Chairs, shall hold part‑time positions and shall be paid at the daily rate at which judges of the United States courts of appeals are compensated. A Federal judge may serve as a member of the Commission without resigning the judge’s appointment as a Federal judge.</p><p><strong>(d)</strong> Sections 44(c) and 134(b) of this title (relating to the residence of judges) do not apply to any judge holding a full‑time position on the Commission under subsection (c) of this section.</p><p>(Added Pub.L. 98–473, Title II, § 217(a), Oct. 12, 1984, 98 Stat. 2018, and amended Pub.L. 99–646, §§ 4, 6(a), Nov. 10, 1986; 100 Stat. 3592; Pub.L. 102–349, § 1, Aug. 26, 1992, 106 Stat. 933; Pub.L. 103–322, Tittle XXVIII, § 280005(b), (c)(1), (3), Sept. 13, 1994, 108 Stat. 2096, 2097.)</p><p><strong>EDITORIAL NOTES</strong></p><p><strong>References in Text.</strong> Section 235(a)(1)(B)(ii) of the Sentencing Reform Act of 1984, referred to in subsec. (c), is section 235(a)(1)(B)(ii) of Pub.L. 98–473, which is set out as a note under section 3551 of Title 18, Crimes and Criminal Procedure.</p><p><strong>Commencement of Terms of First Members of Commission.</strong> For provisions directing that, for purposes of subsec. (a) of this section, the terms of the first members of the United States Sentencing Commission shall not begin to run until the sentencing guidelines go into effect pursuant to section 235(a)(1)(B)(ii) of Pub.L. 98–473, set out as a note under section 994 of this title, see section 235(a)(2) of Pub.L. 98–473, set out as a note under section 3551 of Title 18, Crimes and Criminal Procedure.</p>\"},{\"id\":\"28U.S.C.§993\",\"content\":\"<p><strong>§ 993. Powers and duties of Chair</strong></p><p>The Chair shall—</p><blockquote><p><strong>(a)</strong> call and preside at meetings of the Commission, which shall be held for at least two weeks in each quarter after the members of the Commission hold part‑time positions; and</p><p><strong>(b)</strong> direct—</p><p><strong>(1)</strong> the preparation of requests for appropriations for the Commission; and</p><p><strong>(2)</strong> the use of funds made available to the Commission.</p></blockquote><p>(Added Pub.L. 98–473, Title II, § 217(a), Oct. 12, 1984, 98 Stat. 2019, and amended Pub.L. 99–22, § 1(2), Apr. 15, 1985, 99 Stat. 46; Pub.L. 99–646, § 5, Nov. 10, 1986, 100 Stat. 3592; Pub.L. 103–322, Title XXVIII, § 280005(c)(1), Sept. 13, 1994, 108 Stat. 2097.)</p>\"},{\"id\":\"28U.S.C.§994\",\"content\":\"<p><strong>§ 994. Duties of the Commission</strong></p><p><strong>(a)</strong> The Commission, by affirmative vote of at least four members of the Commission, and pursuant to its rules and regulations and consistent with all pertinent provisions of any Federal statute shall promulgate and distribute to all courts of the United States and to the United States Probation System—</p><blockquote><p><strong>(1)</strong> guidelines, as described in this section, for use of a sentencing court in determining the sentence to be imposed in a criminal case, including—</p><p><strong>(A)</strong> a determination whether to impose a sentence to probation, a fine, or a term of imprisonment;</p><p><strong>(B)</strong> a determination as to the appropriate amount of a fine or the appropriate length of a term of probation or a term of imprisonment;</p><p><strong>(C)</strong> a determination whether a sentence to a term of imprisonment should include a requirement that the defendant be placed on a term of supervised release after imprisonment, and, if so, the appropriate length of such a term;</p><p><strong>(D)</strong> a determination whether multiple sentences to terms of imprisonment should be ordered to run concurrently or consecutively; and</p><p><strong>(E)</strong> a determination under paragraphs (6) and (11) of section 3563(b) of title 18;</p><p><strong>(2)</strong> general policy statements regarding application of the guidelines or any other aspect of sentencing or sentence implementation that in the view of the Commission would further the purposes set forth in section 3553(a)(2) of title 18, United States Code, including the appropriate use of—</p><p><strong>(A)</strong> the sanctions set forth in sections 3554, 3555, and 3556 of title 18;</p><p><strong>(B)</strong> the conditions of probation and supervised release set forth in sections 3563(b) and 3583(d) of title 18;</p><p><strong>(C)</strong> the sentence modification provisions set forth in sections 3563(c), 3564, 3573, and 3582(c) of title 18;</p><p><strong>(D)</strong> the fine imposition provisions set forth in section 3572 of title 18;</p><p><strong>(E)</strong> the authority granted under rule 11(e)(2) of the Federal Rules of Criminal Procedure to accept or reject a plea agreement entered into pursuant to rule 11(e)(1); and</p><p><strong>(F)</strong> the temporary release provisions set forth in section 3622 of title 18, and the prerelease custody provisions set forth in section 3624(c) of title 18; and</p><p><strong>(3)</strong> guidelines or general policy statements regarding the appropriate use of the provisions for revocation of probation set forth in section 3565 of title 18, and the provisions for modification of the term or conditions of supervised release and revocation of supervised release set forth in section 3583(e) of title 18.</p></blockquote><p><strong>(b)(1)</strong> The Commission, in the guidelines promulgated pursuant to subsection (a)(1), shall, for each category of offense involving each category of defendant, establish a sentencing range that is consistent with all pertinent provisions of title 18, United States Code.</p><p><strong>(2)</strong> If a sentence specified by the guidelines includes a term of imprisonment, the maximum of the range established for such a term shall not exceed the minimum of that range by more than the greater of 25 percent or 6 months, except that, if the minimum term of the range is 30 years or more, the maximum may be life imprisonment.</p><p><strong>(c)</strong> The Commission, in establishing categories of offenses for use in the guidelines and policy statements governing the imposition of sentences of probation, a fine, or imprisonment, governing the imposition of other authorized sanctions, governing the size of a fine or the length of a term of probation, imprisonment, or supervised release, and governing the conditions of probation, supervised release, or imprisonment, shall consider whether the following matters, among others, have any relevance to the nature, extent, place of service, or other incidents of an appropriate sentence, and shall take them into account only to the extent that they do have relevance—</p><blockquote><p><strong>(1)</strong> the grade of the offense;</p><p><strong>(2)</strong> the circumstances under which the offense was committed which mitigate or aggravate the seriousness of the offense;</p><p><strong>(3)</strong> the nature and degree of the harm caused by the offense, including whether it involved property, irreplaceable property, a person, a number of persons, or a breach of public trust;</p><p><strong>(4)</strong> the community view of the gravity of the offense;</p><p><strong>(5)</strong> the public concern generated by the offense;</p><p><strong>(6)</strong> the deterrent effect a particular sentence may have on the commission of the offense by others; and</p><p><strong>(7)</strong> the current incidence of the offense in the community and in the Nation as a whole.</p></blockquote><p><strong>(d)</strong> The Commission in establishing categories of defendants for use in the guidelines and policy statements governing the imposition of sentences of probation, a fine, or imprisonment, governing the imposition of other authorized sanctions, governing the size of a fine or the length of a term of probation, imprisonment, or supervised release, and governing the conditions of probation, supervised release, or imprisonment, shall consider whether the following matters, among others with respect to a defendant, have any relevance to the nature, extent, place of service, or other incidents of an appropriate sentence, and shall take them into account only to the extent that they do have relevance—</p><blockquote><p><strong>(1)</strong> age;</p><p><strong>(2)</strong> education;</p><p><strong>(3)</strong> vocational skills;</p><p><strong>(4)</strong> mental and emotional condition to the extent that such condition mitigates the defendant’s culpability or to the extent that such condition is otherwise plainly relevant;</p><p><strong>(5)</strong> physical condition, including drug dependence;</p><p><strong>(6)</strong> previous employment record;</p><p><strong>(7)</strong> family ties and responsibilities;</p><p><strong>(8)</strong> community ties;</p><p><strong>(9)</strong> role in the offense;</p><p><strong>(10)</strong> criminal history; and</p><p><strong>(11)</strong> degree of dependence upon criminal activity for a livelihood.</p></blockquote><p>The Commission shall assure that the guidelines and policy statements are entirely neutral as to the race, sex, national origin, creed, and socioeconomic status of offenders.</p><p><strong>(e)</strong> The Commission shall assure that the guidelines and policy statements, in recommending a term of imprisonment or length of a term of imprisonment, reflect the general inappropriateness of considering the education, vocational skills, employment record, family ties and responsibilities, and community ties of the defendant.</p><p><strong>(f)</strong> The Commission, in promulgating guidelines pursuant to subsection (a)(1), shall promote the purposes set forth in section 991(b)(1), with particular attention to the requirements of subsection 991(b)(1)(B) for providing certainty and fairness in sentencing and reducing unwarranted sentence disparities.</p><p><strong>(g)</strong> The Commission, in promulgating guidelines pursuant to subsection (a)(1) to meet the purposes of sentencing as set forth in section 3553(a)(2) of title 18, United States Code, shall take into account the nature and capacity of the penal, correctional, and other facilities and services available, and shall make recommendations concerning any change or expansion in the nature or capacity of such facilities and services that might become necessary as a result of the guidelines promulgated pursuant to the provisions of this chapter. The sentencing guidelines prescribed under this chapter shall be formulated to minimize the likelihood that the Federal prison population will exceed the capacity of the Federal prisons, as determined by the Commission.</p><p><strong>(h)</strong> The Commission shall assure that the guidelines specify a sentence to a term of imprisonment at or near the maximum term authorized for categories of defendants in which the defendant is eighteen years old or older and—</p><blockquote><p><strong>(1)</strong> has been convicted of a felony that is—</p><p><strong>(A)</strong> a crime of violence; or</p><p><strong>(B)</strong> an offense described in section 401 of the Controlled Substances Act (21 U.S.C. 841), sections 1002(a), 1005, and 1009 of the Controlled Substances Import and Export Act (21 U.S.C. 952(a), 955, and 959), and chapter 705 of title 46; and</p><p><strong>(2)</strong> has previously been convicted of two or more prior felonies, each of which is—</p><p><strong>(A)</strong> a crime of violence; or</p><p><strong>(B)</strong> an offense described in section 401 of the Controlled Substances Act (21 U.S.C. 841), sections 1002(a), 1005, and 1009 of the Controlled Substances Import and Export Act (21 U.S.C. 952(a), 955, and 959), and chapter 705 of title 46.</p></blockquote><p><strong>(i)</strong> The Commission shall assure that the guidelines specify a sentence to a substantial term of imprisonment for categories of defendants in which the defendant—</p><blockquote><p><strong>(1)</strong> has a history of two or more prior Federal, State, or local felony convictions for offenses committed on different occasions;</p><p><strong>(2)</strong> committed the offense as part of a pattern of criminal conduct from which the defendant derived a substantial portion of the defendant’s income;</p><p><strong>(3)</strong> committed the offense in furtherance of a conspiracy with three or more persons engaging in a pattern of racketeering activity in which the defendant participated in a managerial or supervisory capacity;</p><p><strong>(4)</strong> committed a crime of violence that constitutes a felony while on release pending trial, sentence, or appeal from a Federal, State, or local felony for which he was ultimately convicted; or</p><p><strong>(5)</strong> committed a felony that is set forth in section 401 or 1010 of the Comprehensive Drug Abuse Prevention and Control Act of 1970 (21 U.S.C. 841 and 960), and that involved trafficking in a substantial quantity of a controlled substance.</p></blockquote><p><strong>(j)</strong> The Commission shall insure that the guidelines reflect the general appropriateness of imposing a sentence other than imprisonment in cases in which the defendant is a first offender who has not been convicted of a crime of violence or an otherwise serious offense, and the general appropriateness of imposing a term of imprisonment on a person convicted of a crime of violence that results in serious bodily injury.</p><p><strong>(k)</strong> The Commission shall insure that the guidelines reflect the inappropriateness of imposing a sentence to a term of imprisonment for the purpose of rehabilitating the defendant or providing the defendant with needed educational or vocational training, medical care, or other correctional treatment.</p><p><strong>(l)</strong> The Commission shall insure that the guidelines promulgated pursuant to subsection (a)(1) reflect—</p><blockquote><p><strong>(1)</strong> the appropriateness of imposing an incremental penalty for each offense in a case in which a defendant is convicted of—</p><p><strong>(A)</strong> multiple offenses committed in the same course of conduct that result in the exercise of ancillary jurisdiction over one or more of the offenses; and</p><p><strong>(B)</strong> multiple offenses committed at different times, including those cases in which the subsequent offense is a violation of section 3146 (penalty for failure to appear) or is committed while the person is released pursuant to the provisions of section 3147 (penalty for an offense committed while on release) of title 18; and</p><p><strong>(2)</strong> the general inappropriateness of imposing consecutive terms of imprisonment for an offense of conspiring to commit an offense or soliciting commission of an offense and for an offense that was the sole object of the conspiracy or solicitation.</p></blockquote><p><strong>(m)</strong> The Commission shall insure that the guidelines reflect the fact that, in many cases, current sentences do not accurately reflect the seriousness of the offense. This will require that, as a starting point in its development of the initial sets of guidelines for particular categories of cases, the Commission ascertain the average sentences imposed in such categories of cases prior to the creation of the Commission, and in cases involving sentences to terms of imprisonment, the length of such terms actually served. The Commission shall not be bound by such average sentences, and shall independently develop a sentencing range that is consistent with the purposes of sentencing described in section 3553(a)(2) of Title 18, United States Code.</p><p><strong>(n)</strong> The Commission shall assure that the guidelines reflect the general appropriateness of imposing a lower sentence than would otherwise be imposed, including a sentence that is lower than that established by statute as a minimum sentence, to take into account a defendant’s substantial assistance in the investigation or prosecution of another person who has committed an offense.</p><p><strong>(o)</strong> The Commission periodically shall review and revise, in consideration of comments and data coming to its attention, the guidelines promulgated pursuant to the provisions of this section. In fulfilling its duties and in exercising its powers, the Commission shall consult with authorities on, and individual and institutional representatives of, various aspects of the Federal criminal justice system. The United States Probation System, the Bureau of Prisons, the Judicial Conference of the United States, the Criminal Division of the United States Department of Justice, and a representative of the Federal Public Defenders shall submit to the Commission any observations, comments, or questions pertinent to the work of the Commission whenever they believe such communication would be useful, and shall, at least annually, submit to the Commission a written report commenting on the operation of the Commission’s guidelines, suggesting changes in the guidelines that appear to be warranted, and otherwise assessing the Commission’s work.</p><p><strong>(p)</strong> The Commission, at or after the beginning of a regular session of Congress, but not later than the first day of May, may promulgate under subsection (a) of this section and submit to Congress amendments to the guidelines and modifications to previously submitted amendments that have not taken effect, including modifications to the effective dates of such amendments. Such an amendment or modification shall be accompanied by a statement of the reasons therefor and shall take effect on a date specified by the Commission, which shall be no earlier than 180 days after being so submitted and no later than the first day of November of the calendar year in which the amendment or modification is submitted, except to the extent that the effective date is revised or the amendment is otherwise modified or disapproved by Act of Congress.</p><p><strong>(q)</strong> The Commission and the Bureau of Prisons shall submit to Congress an analysis and recommendations concerning maximum utilization of resources to deal effectively with the Federal prison population. Such report shall be based upon consideration of a variety of alternatives, including—</p><blockquote><p><strong>(1)</strong> modernization of existing facilities;</p><p><strong>(2)</strong> inmate classification and periodic review of such classification for use in placing inmates in the least restrictive facility necessary to ensure adequate security; and</p><p><strong>(3)</strong> use of existing Federal facilities, such as those currently within military jurisdiction.</p></blockquote><p><strong>(r)</strong> The Commission, not later than two years after the initial set of sentencing guidelines promulgated under subsection (a) goes into effect, and thereafter whenever it finds it advisable, shall recommend to the Congress that it raise or lower the grades, or otherwise modify the maximum penalties, of those offenses for which such an adjustment appears appropriate.</p><p><strong>(s)</strong> The Commission shall give due consideration to any petition filed by a defendant requesting modification of the guidelines utilized in the sentencing of such defendant, on the basis of changed circumstances unrelated to the defendant, including changes in—</p><blockquote><p><strong>(1)</strong> the community view of the gravity of the offense;</p><p><strong>(2)</strong> the public concern generated by the offense; and</p><p><strong>(3)</strong> the deterrent effect particular sentences may have on the commission of the offense by others.</p></blockquote><p><strong>(t)</strong> The Commission, in promulgating general policy statements regarding the sentencing modification provisions in section 3582(c)(1)(A) of title 18, shall describe what should be considered extraordinary and compelling reasons for sentence reduction, including the criteria to be applied and a list of specific examples. Rehabilitation of the defendant alone shall not be considered an extraordinary and compelling reason.</p><p><strong>(u)</strong> If the Commission reduces the term of imprisonment recommended in the guidelines applicable to a particular offense or category of offenses, it shall specify in what circumstances and by what amount the sentences of prisoners serving terms of imprisonment for the offense may be reduced.</p><p><strong>(v)</strong> The Commission shall ensure that the general policy statements promulgated pursuant to subsection (a)(2) include a policy limiting consecutive terms of imprisonment for an offense involving a violation of a general prohibition and for an offense involving a violation of a specific prohibition encompassed within the general prohibition.</p><p><strong>(w)(1)</strong> The Chief Judge of each district court shall ensure that, within 30 days following entry of judgment in every criminal case, the sentencing court submits to the Commission, in a format approved and required by the Commission, a written report of the sentence, the offense for which it is imposed, the age, race, sex of the offender, and information regarding factors made relevant by the guidelines. The report shall also include—</p><blockquote><p><strong>(A)</strong> the judgment and commitment order;</p><p><strong>(B)</strong> the written statement of reasons for the sentence imposed (which shall include the reason for any departure from the otherwise applicable guideline range and which shall be stated on the written statement of reasons form issued by the Judicial Conference and approved by the United States Sentencing Commission);</p><p><strong>(C)</strong> any plea agreement;</p><p><strong>(D)</strong> the indictment or other charging document;</p><p><strong>(E)</strong> the presentence report; and</p><p><strong>(F)</strong> any other information as the Commission finds appropriate.</p></blockquote><p>The information referred to in subparagraphs (A) through (F) shall be submitted by the sentencing court in a format approved and required by the Commission.</p><p><strong>(2)</strong> The Commission shall, upon request, make available to the House and Senate Committees on the Judiciary, the written reports and all underlying records accompanying those reports described in this section, as well as other records received from courts.</p><p><strong>(3)</strong> The Commission shall submit to Congress at least annually an analysis of these documents, any recommendations for legislation that the Commission concludes is warranted by that analysis, and an accounting of those districts that the Commission believes have not submitted the appropriate information and documents required by this section.</p><p><strong>(4)</strong> The Commission shall make available to the Attorney General, upon request, such data files as the Commission itself may assemble or maintain in electronic form as a result of the information submitted under paragraph (1). Such data files shall be made available in electronic form and shall include all data fields requested, including the identity of the sentencing judge.</p><p><strong>(x)</strong> The provisions of section 553 of title 5, relating to publication in the Federal Register and public hearing procedure, shall apply to the promulgation of guidelines pursuant to this section.</p><p><strong>(y)</strong> The Commission, in promulgating guidelines pursuant to subsection (a)(1), may include, as a component of a fine, the expected costs to the Government of any imprisonment, supervised release, or probation sentence that is ordered.</p><p>(Added Pub.L. 98–473, Title II, § 217(a), Oct. 12, 1984, 98 Stat. 2019, and amended Pub.L. 99–217, § 3, Dec. 26, 1985, 99 Stat. 1728; Pub.L. 99–363, § 2, July 11, 1986, 100 Stat. 770; Pub.L. 99–570, Title I, §§ 1006(b), 1008, Oct. 27, 1986, 100 Stat. 3214; Pub.L. 99–646, §§ 6(b), 56, Nov. 10, 1986, 100 Stat. 3592, 3611; Pub.L. 100–182, §§ 16(b), 23, Dec. 7, 1987, 101 Stat. 1269, 1271; Pub.L. 100–690, Title VII, §§ 7083, 7103(b), 7109, Nov. 18, 1988, 102 Stat. 4408, 4418, 4419; Pub.L. 103–322, Title II § 20403(b) Title XXVII, § 280005(c)(4), Title XXXIII, § 330003(f)(1), Sept. 13, 1994, 108 Stat. 1825, 2097, 2141; Pub.L. 108–21, Title IV, § 401(h), (k), Apr. 30, 2003, 117 Stat. 672, 674; Pub.L. 109–177, Title VII, § 735, March 9, 2006, 120 Stat. 192, 271; Pub.L. 109–304, § 17(f)(1), Oct. 6, 2006, 120 Stat. 1708.)</p><p><strong>EDITORIAL NOTES</strong></p><p><strong>Codification.</strong> Amendment by Pub.L. 99–646 to subsec. (t) of this section has been executed to subsec. (u) as the probable intent of Congress in view of redesignation of subsec. (t) as (u) by Pub.L. 99–570.</p><p><strong>Emergency Guidelines Promulgation Authority.</strong> Pub.L. 100–182, § 21, Dec. 7, 1987, 101 Stat. 1271, provided that:</p><p>“<strong>Sec. 21. Emergency Guidelines Promulgation Authority.</strong></p><blockquote><p><strong>(a) In General.</strong>—In the case of—</p><p><strong>(1)</strong> an invalidated sentencing guideline;</p><p><strong>(2)</strong> the creation of a new offense or amendment of an existing offense; or</p><p><strong>(3)</strong> any other reason relating to the application of a previously established sentencing guideline, and determined by the United States Sentencing Commission to be urgent and compelling;</p></blockquote><p>the Commission, by affirmative vote of at least four members of the Commission, and pursuant to its rules and regulations and consistent with all pertinent provisions of title 28 and title 18, United States Code, shall promulgate and distribute to all courts of the United States and to the United States Probation System a temporary guideline or amendment to an existing guideline, to remain in effect until and during the pendency of the next report to Congress under section 994(p) of title 28, United States Code.</p><p><strong>(b) Expiration of Authority.</strong>—The authority of the Commission under paragraphs (1) and (2) of subsection (a) shall expire on November 1, 1989. The authority of the Commission to promulgate and distribute guidelines under paragraph (3) of subsection (a) shall expire on May 1, 1988.”</p><p><strong>Initial Sentencing Guidelines.</strong> For provisions directing that the United States Sentencing Commission submit to Congress within 30 months of Oct. 12, 1984, the initial sentencing guidelines promulgated pursuant to subsec. (a)(1) of this section, see section 235(a)(1)(B)(i) of Pub.L. 98–473, as amended, set out as a note under section 3551 of Title 18, Crimes and Criminal Procedure.</p><p><strong>Effective Date of Sentencing Guidelines.</strong> For provisions directing that the sentencing guidelines promulgated pursuant to subsec. (a)(1) of this section not go into effect until—</p><blockquote><p><strong>(I)</strong> the United States Sentencing Commission has submitted the initial set of sentencing guidelines to the Congress, along with a report stating the reasons for the Commission’s recommendations;</p><p><strong>(II)</strong> the General Accounting Office has undertaken a study of the guidelines, and their potential impact in comparison with the operation of the existing sentencing and parole release system, and has, within one hundred and fifty days of submission of the guidelines, reported to the Congress the results of its study; and</p><p><strong>(III)</strong> the day after the Congress has had six months after the date described in subclause (I) in which to examine the guidelines and consider the reports, and</p><p><strong>(IV)</strong> certain other provisions take effect,</p></blockquote><p>see section 235(a)(1)(B)(ii) of Pub.L. 98–473, as amended, set out as a note under section 3551 of Title 18, Crimes and Criminal Procedure.</p><p><strong>General Accounting Office Study of Impact and Operation of Sentencing Guideline System.</strong> Pub.L. 98–473, Title II, § 236, Oct. 12, 1984, 98 Stat. 2033, provided that:</p><p>“<strong>(a)(1)</strong> Four years after the sentencing guidelines promulgated pursuant to section 994(a)(1), and the provisions of section 3581, 3583, and 3624 of title 18, United States Code, go into effect, the General Accounting Office shall undertake a study of the guidelines in order to determine their impact and compare the guideline system with the operation of the previous sentencing and parole release system, and within six months of the undertaking of such study, report to the Congress the results of its study.</p><p><strong>(2)</strong> Within one month of the start of the study required under subsection (a), the United States Sentencing Commission shall submit a report to the General Accounting Office, all appropriate courts, the Department of Justice, and the Congress detailing the operation of the sentencing guideline system and discussing any problems with the system or reforms needed. The report shall include an evaluation of the impact of the sentencing guidelines on prosecutorial discretion, plea bargaining, disparities in sentencing, and the use of incarceration, and shall be issued by affirmative vote of a majority of the voting members of the Commission.</p><p><strong>(b)</strong> The Congress shall review the study submitted pursuant to subsection (a) in order to determine—</p><blockquote><p><strong>(1)</strong> whether the sentencing guideline system has been effective;</p><p><strong>(2)</strong> whether any changes should be made in the sentencing guideline system; and</p><p><strong>(3)</strong> whether the parole system should be reinstated in some form and the life of the Parole Commission extended.”</p></blockquote>\"},{\"id\":\"28U.S.C.§995\",\"content\":\"<p><strong>§ 995. Powers of the Commission</strong></p><p><strong>(a)</strong> The Commission, by vote of a majority of the members present and voting, shall have the power to—</p><blockquote><p><strong>(1)</strong> establish general policies and promulgate such rules and regulations for the Commission as are necessary to carry out the purposes of this chapter;</p><p><strong>(2)</strong> appoint and fix the salary and duties of the Staff Director of the Sentencing Commission, who shall serve at the discretion of the Commission and who shall be compensated at a rate not to exceed the highest rate now or hereafter prescribed for Level 6 of the Senior Executive Service Schedule (5 U.S.C. 5382);</p><p><strong>(3)</strong> deny, revise, or ratify any request for regular, supplemental, or deficiency appropriations prior to any submission of such request to the Office of Management and Budget by the Chair;</p><p><strong>(4)</strong> procure for the Commission temporary and intermittent services to the same extent as is authorized by section 3109(b) of title 5, United States Code;</p><p><strong>(5)</strong> utilize, with their consent, the services, equipment, personnel, information, and facilities of other Federal, State, local, and private agencies and instrumentalities with or without reimbursement therefor;</p><p><strong>(6)</strong> without regard to 31 U.S.C. 3324, enter into and perform such contracts, leases, cooperative agreements, and other transactions as may be necessary in the conduct of the functions of the Commission, with any public agency, or with any person, firm, association, corporation, educational institution, or nonprofit organization;</p><p><strong>(7)</strong> accept and employ, in carrying out the provisions of this title, voluntary and uncompensated services, notwithstanding the provisions of 31 U.S.C. 1342, however, individuals providing such services shall not be considered Federal employees except for purposes of chapter 81 of title 5, United States Code, with respect to job‑incurred disability and title 28, United States Code, with respect to tort claims;</p><p><strong>(8)</strong> request such information, data, and reports from any Federal agency or judicial officer as the Commission may from time to time require and as may be produced consistent with other law;</p><p><strong>(9)</strong> monitor the performance of probation officers with regard to sentencing recommendations, including application of the Sentencing Commission guidelines and policy statements;</p><p><strong>(10)</strong> issue instructions to probation officers concerning the application of Commission guidelines and policy statements;</p><p><strong>(11)</strong> arrange with the head of any other Federal agency for the performance by such agency of any function of the Commission, with or without reimbursement;</p><p><strong>(12)</strong> establish a research and development program within the Commission for the purpose of—</p><p><strong>(A)</strong> serving as a clearinghouse and information center for the collection, preparation, and dissemination of information on Federal sentencing practices; and</p><p><strong>(B)</strong> assisting and serving in a consulting capacity to Federal courts, departments, and agencies in the development, maintenance, and coordination of sound sentencing practices;</p><p><strong>(13)</strong> collect systematically the data obtained from studies, research, and the empirical experience of public and private agencies concerning the sentencing process;</p><p><strong>(14)</strong> publish data concerning the sentencing process;</p><p><strong>(15)</strong> collect systematically and disseminate information concerning sentences actually imposed, and the relationship of such sentences to the factors set forth in section 3553(a) of title 18, United States Code;</p><p><strong>(16)</strong> collect systematically and disseminate information regarding effectiveness of sentences imposed;</p><p><strong>(17)</strong> devise and conduct, in various geographical locations, seminars and workshops providing continuing studies for persons engaged in the sentencing field;</p><p><strong>(18)</strong> devise and conduct periodic training programs of instruction in sentencing techniques for judicial and probation personnel and other persons connected with the sentencing process;</p><p><strong>(19)</strong> study the feasibility of developing guidelines for the disposition of juvenile delinquents;</p><p><strong>(20)</strong> make recommendations to Congress concerning modification or enactment of statutes relating to sentencing, penal, and correctional matters that the Commission finds to be necessary and advisable to carry out an effective, humane and rational sentencing policy;</p><p><strong>(21)</strong> hold hearings and call witnesses that might assist the Commission in the exercise of its powers or duties;</p><p><strong>(22)</strong> perform such other functions as are required to permit Federal courts to meet their responsibilities under section 3553(a) of title 18, United States Code, and to permit others involved in the Federal criminal justice system to meet their related responsibilities;</p><p><strong>(23)</strong> retain private attorneys to provide legal advice to the Commission in the conduct of its work, or to appear for or represent the Commission in any case in which the Commission is authorized by law to represent itself, or in which the Commission is representing itself with the consent of the Department of Justice; and the Commission may in its discretion pay reasonable attorney’s fees to private attorneys employed by it out of its appropriated funds. When serving as officers or employees of the United States, such private attorneys shall be considered special government employees as defined in section 202(a) of title 18; and</p><p><strong>(24)</strong> grant incentive awards to its employees pursuant to chapter 45 of title 5, United States Code.</p></blockquote><p><strong>(b)</strong> The Commission shall have such other powers and duties and shall perform such other functions as may be necessary to carry out the purposes of this chapter, and may delegate to any member or designated person such powers as may be appropriate other than the power to establish general policy statements and guidelines pursuant to section 994(a)(1) and (2), the issuance of general policies and promulgation of rules and regulations pursuant to subsection (a)(1) of this section, and the decisions as to the factors to be considered in establishment of categories of offenses and offenders pursuant to section 994(b). The Commission shall, with respect to its activities under subsections (a)(9), (a)(10), (a)(11), (a)(12), (a)(13), (a)(14), (a)(15), (a)(16), (a)(17), and (a)(18), to the extent practicable, utilize existing resources of the Administrative Office of the United States Courts and the Federal Judicial Center for the purpose of avoiding unnecessary duplication.</p><p><strong>(c)</strong> Upon the request of the Commission, each Federal agency is authorized and directed to make its services, equipment, personnel, facilities, and information available to the greatest practicable extent to the Commission in the execution of its functions.</p><p><strong>(d)</strong> A simple majority of the membership then serving shall constitute a quorum for the conduct of business. Other than for the promulgation of guidelines and policy statements pursuant to section 994, the Commission may exercise its powers and fulfill its duties by the vote of a simple majority of the members present.</p><p><strong>(e)</strong> Except as otherwise provided by law, the Commission shall maintain and make available for public inspection a record of the final vote of each member on any action taken by it.</p><p><strong>(f)</strong> The Commission may—</p><blockquote><p><strong>(1)</strong> use available funds to enter into contracts for the acquisition of severable services for a period that begins in 1 fiscal year and ends in the next fiscal year, to the same extent as executive agencies may enter into such contracts under the authority of section 303L of the Federal Property and Administrative Services Act of 1949 (41 U.S.C. 253l);</p><p><strong>(2)</strong> enter into multi-year contracts for the acquisition of property or services to the same extent as executive agencies may enter into such contracts under the authority of section 304B of the Federal Property and Administrative Services Act of 1949 (41 U.S.C. 254c); and</p><p><strong>(3)</strong> make advance, partial, progress, or other payments under contracts for property or services to the same extent as executive agencies may make such payments under the authority of section 305 of the Federal Property and Administrative Services Act of 1949 (41 U.S.C. 255).</p></blockquote><p>(Added Pub.L. 98–473, Title II, § 217(a), Oct. 12, 1984, 98 Stat. 2024; amended Pub.L. 100–690, Title VII, §§ 7104, 7105, 7106(b), Nov. 18, 1988, 102 Stat. 4418; Pub.L. 101–650, Title III, § 325(b)(5), Dec. 1, 1990, 104 Stat. 5121; Pub.L. 103–322, Title XXVIII, § 280005(c)(1), Sept. 13, 1994, 108 Stat. 2097; Pub.L. 110–177, Title V, § 501(a), Jan. 7, 2008, 121 Stat. 2541.)</p><p><strong>EDITORIAL NOTES</strong></p><p><strong>References in Text.</strong> The provisions of title 28, United States Code, with respect to tort claims, referred to in subsec. (a)(7), are classified generally to section 1346(b) and chapter 171 (section 2671 et seq.) of this title.</p><p><strong>Sunset Provision.</strong> Pub.L. 110–177, Title V, § 501(b), Jan. 7, 2008, 121 Stat. 2542, provided that: “The amendment made by subsection (a) [enacting subsec. (f) of this section] shall cease to have force and effect on September 30, 2010.”.</p>\"},{\"id\":\"28U.S.C.§996\",\"content\":\"<p><strong>§ 996. Director and staff</strong></p><p><strong>(a)</strong> The Staff Director shall supervise the activities of persons employed by the Commission and perform other duties assigned to the Staff Director by the Commission.</p><p><strong>(b)</strong> The Staff Director shall, subject to the approval of the Commission, appoint such officers and employees as are necessary in the execution of the functions of the Commission. The officers and employees of the Commission shall be exempt from the provisions of part III of title 5 except the following: chapters 45 (Incentive Awards), 63 (Leave), 81 (Compensation for Work Injuries), 83 (Retirement), 85 (Unemployment Compensation), 87 (Life Insurance), and 89 (Health Insurance), and subchapter VI of chapter 55 (Payment for accumulated and accrued leave).</p><p>(Added Pub.L. 98–473, Title II, § 217(a), Oct. 12, 1984, 98 Stat. 2026, and amended Pub.L. 100–690, Title VII, § 7106(c), Nov. 18, 1988, 102 Stat. 4418; Pub.L. 101–650, Title III, § 325(b)(6), Dec. 1, 1990, 104 Stat. 5121; Pub.L. 103–322, Title XXVIII, § 280005(c)(5), Sept. 13, 1994, 108 Stat. 2097; Pub.L. 106–518, Title III, § 302(a), Nov. 13, 2000, 114 Stat. 2416.)</p><p><strong>EDITORIAL NOTES</strong></p><p><strong>Accrued or Accumulated Leave.</strong> Pub. L. 106–518, § 302(b), Nov. 13, 2000, 114 Stat. 2417, provided that: “Any leave that an individual accrued or accumulated (or that otherwise became available to such individual) under the leave system of the United States Sentencing Commission and that remains unused as of the date of the enactment of this Act shall, on and after such date, be treated as leave accrued or accumulated (or that otherwise became available to such individual) under chapter 63 of title 5, United States Code.”</p>\"},{\"id\":\"28U.S.C.§997\",\"content\":\"<p><strong>§ 997. Annual report</strong></p><p>The Commission shall report annually to the Judicial Conference of the United States, the Congress, and the President of the United States on the activities of the Commission.</p><p>(Added Pub.L. 98–473, Title II, § 217(a), Oct. 12, 1984, 98 Stat. 2026.)</p>\"},{\"id\":\"28U.S.C.§998\",\"content\":\"<p><strong>§ 998. Definitions</strong></p><p>As used in this chapter—</p><blockquote><p><strong>(a)</strong> “Commission” means the United States Sentencing Commission;</p><p><strong>(b)</strong> “Commissioner” means a member of the United States Sentencing Commission;</p><p><strong>(c)</strong> “guidelines” means the guidelines promulgated by the Commission pursuant to section 994(a) of this title; and</p><p><strong>(d)</strong> “rules and regulations” means rules and regulations promulgated by the Commission pursuant to section 995 of this title.</p></blockquote><p>(Added Pub.L. 98–473, Title II, § 217(a), Oct. 12, 1984, 98 Stat. 2026.)</p>\"},{\"id\":\"PUB.L.100–690\",\"content\":\"<p><strong>ANTI DRUG ABUSE ACT OF 1988</strong></p><p><strong>(PUB. L. 100–690)</strong></p><p><strong>IMPORTATION OF CONTROLLED SUBSTANCES BY AIRCRAFT AND OTHER VESSELS.</strong> Pub.L. 100–690, Title VI, § 6453, Nov. 18, 1988, 102 Stat. 4371, provided:</p><p>“<strong>Sec. 6453. Penalties for Importation by Aircraft and Other Vessels.</strong></p><p><strong>(a) In General.</strong>—Pursuant to its authority under section 994(p) of title 28, United States Code, and section 21 of the Sentencing Act of 1987 [28 U.S.C. 994 note], the United States Sentencing Commission shall promulgate guidelines, or shall amend existing guidelines, to provide that a defendant convicted of violating section 1010(a) of the Controlled Substances Import and Export Act (21 U.S.C. 960(a)) under circumstances in which—</p><blockquote><p><strong>(1)</strong> an aircraft other than a regularly scheduled commercial air carrier was used to import the controlled substance; or</p><p><strong>(2)</strong> the defendant acted as a pilot, copilot, captain, navigator, flight officer, or any other operation officer aboard any craft of vessel carrying a controlled substance,</p></blockquote><p>shall be assigned an offense level under chapter 2 of the sentencing guidelines that is—</p><blockquote><p><strong>(A)</strong> two levels greater than the level that would have been assigned had the offense not been committed under circumstances set forth in (A) or (B) above; and</p><p><strong>(B)</strong> in no event less than level 26.</p></blockquote><p><strong>(b) Effect of Amendment.</strong>—If the sentencing guidelines are amended after the effective date of this section [probably means date of enactment of this section, Nov. 18, 1988], the Sentencing Commission shall implement the instruction set forth in subsection (a) so as to achieve a comparable result.”</p><p><strong>CONTROLLED SUBSTANCE OFFENSES INVOLVING CHILDREN.</strong> Pub.L. 100–690, Title VI, § 6454, Nov. 18, 1988, 102 Stat. 4372, provided:</p><p>“<strong>Sec. 6454. Enhanced Penalties for Offenses Involving Children.</strong></p><p><strong>(a) In General.</strong>—Pursuant to its authority under section 994(p) of title 28, United States Code, and section 21 of the Sentencing Act of 1987 [28 U.S.C. 994 note], the United States Sentencing Commission shall promulgate guidelines, or shall amend existing guidelines, to provide that a defendant convicted of violating sections 405, 405A, or 405B of the Controlled Substances Act (21 U.S.C. 845, 845a or 845b) [redesignated as sections 418, 419, and 420, respectively (21 U.S.C. §§ 859, 860, and 861) by section 1002 of Pub.L. 101–647] involving a person under 18 years of age shall be assigned an offense level under chapter 2 of the sentencing guidelines that is—</p><blockquote><p><strong>(1)</strong> two levels greater than the level that would have been assigned for the underlying controlled substance offense; and</p><p><strong>(2)</strong> in no event less than level 26.</p></blockquote><p><strong>(b) Effects of Amendment.</strong>—If the sentencing guidelines are amended after the effective date of this section [probably means date of enactment of this section, Nov. 18, 1988], the Sentencing Commission shall implement the instruction set forth in subsection (a) so as to achieve a comparable result.</p><p><strong>(c) Multiple Enhancements.</strong>—The guidelines referred to in subsection (a), as promulgated or amended under such subsection, shall provide that an offense that could be subject to multiple enhancements pursuant to such subsection is subject to not more than one such enhancement.”</p><p><strong>CONTRABAND IN PRISON.</strong> Pub.L. 100–690, Title VI, § 6468(c), (d), Nov. 18, 1988, 102 Stat. 4376, provided:</p><p>“<strong>(c)</strong> Pursuant to its authority under section 994(p) of title 28, United States Code, and section 21 of the Sentencing Act of 1987 [28 U.S.C. 994 note], the United States Sentencing Commission shall promulgate guidelines, or shall amend existing guidelines, to provide that a defendant convicted of violating section 1791(a)(1) of title 18, United States Code, and punishable under section 1791(b)(1) of that title as so redesignated, shall be assigned an offense level under chapter 2 of the sentencing guidelines that is—</p><blockquote><p><strong>(1)</strong> two levels greater than the level that would have been assigned had the offense not been committed in prison; and</p><p><strong>(2)</strong> in no event less than level 26.</p></blockquote><p><strong>(d)</strong> If the sentencing guidelines are amended after the effective date of this section [probably means the date of enactment of this section, Nov. 18, 1988], the Sentencing Commission shall implement the instruction set forth in subsection (c) so as to achieve a comparable result.”</p><p><strong>COMMON CARRIER OPERATION UNDER INFLUENCE OF ALCOHOL OR DRUGS.</strong> Pub.L. 100–690, Title VI, § 6482(c), Nov. 18, 1988, 102 Stat. 4382, provided:</p><p>“<strong>(c) Sentencing Guidelines.—(1)</strong> Pursuant to its authority under section 994(p) of title 28, United States Code, and section 21 of the Sentencing Act of 1987 [28 U.S.C. 994 note], the United States Sentencing Commission shall promulgate guidelines, or shall amend existing guidelines, to provide that—</p><blockquote><p><strong>(A)</strong> a defendant convicted of violating section 342 of title 18, United States Code, under circumstances in which death results, shall be assigned an offense level under chapter 2 of the sentencing guidelines that is not less than level 26; and</p><p><strong>(B)</strong> a defendant convicted of violating section 342 of title 18, United States Code, under circumstances in which serious bodily injury results, shall be assigned an offense level under chapter 2 of the sentencing guidelines that is not less than level 21.</p></blockquote><p><strong>(2)</strong> If the sentencing guidelines are amended after the effective date of this section [probably means date of enactment of this section, Nov. 18, 1988], the Sentencing Commission shall implement the instruction set forth in paragraph (1) so as to achieve a comparable result.”</p><p>* * *</p>\"},{\"id\":\"PUB. L. 100–700\",\"content\":\"<p><strong>MAJOR FRAUD ACT OF 1988</strong></p><p><strong>(PUB. L. 100–700)</strong></p><p><strong>PERSONAL INJURY RESULTING FROM FRAUD.</strong> Pub.L. 100–700, Chapter 47, § 2(b), Nov. 19, 1988, 102 Stat. 4632, provided:</p><p>“<strong>(b) Sentencing Guidelines.—</strong>Pursuant to its authority under section 994(p) of title 28, United States Code and section 21 of the Sentencing Act of 1987 [28 U.S.C. 994 note], the United States Sentencing Commission shall promulgate guidelines, or shall amend existing guidelines, to provide for appropriate penalty enhancements, where conscious or reckless risk of serious personal injury resulting from the fraud has occurred. The Commission shall consider the appropriateness of assigning to such a defendant an offense level under Chapter Two of the sentencing guidelines that is at least two levels greater than the level that would have been assigned had conscious or reckless risk of serious personal injury not resulted from the fraud.”</p><p>* * *</p>\"},{\"id\":\"PUB. L. 101–73\",\"content\":\"<p><strong>FINANCIAL INSTITUTIONS REFORM,</strong></p><p><strong>RECOVERY, AND ENFORCEMENT ACT OF 1989</strong></p><p><strong>(PUB. L. 101–73)</strong></p><p><strong>CRIMES THAT JEOPARDIZE FEDERALLY INSURED FINANCIAL INSTITUTIONS.</strong> Pub.L. 101–73, Title IX, § 961(m), Aug. 9, 1989, 103 Stat. 501, provided:</p><p>“<strong>(m) Sentencing Guidelines.—</strong>Pursuant to section 994 of title 28, United States Code, and section 21 of the Sentencing Act of 1987 [28 U.S.C. 994 note], the United States Sentencing Commission shall promulgate guidelines, or amend existing guidelines, to provide for a substantial period of incarceration for a violation of, or a conspiracy to violate, section 215, 656, 657, 1005, 1006, 1007, 1014, 1341, 1343, or 1344 of title 18, United States Code, that substantially jeopardizes the safety and soundness of a federally insured financial institution.”</p><p>* * *</p>\"},{\"id\":\"PUB.L.101–647\",\"content\":\"<p><strong>CRIME CONTROL ACT OF 1990</strong></p><p><strong>(PUB. L. 101–647)</strong></p><p><strong>SEXUAL CRIMES AGAINST CHILDREN.</strong> Pub.L. 101–647, Title III, § 321, Nov. 29, 1990, 104 Stat. 4817, provided:</p><p>“<strong>Sec. 321. Sentencing Commission Guidelines.</strong></p><p>The United States Sentencing Commission shall amend existing guidelines for sentences involving sexual crimes against children, including offenses contained in chapter 109A of title 18, so that more substantial penalties may be imposed if the Commission determines current penalties are inadequate.”</p><p><strong>KIDNAPPING, ABDUCTION, OR UNLAWFUL RESTRAINT.</strong> Pub.L. 101–647, Title IV, § 401, Nov. 29, 1990, 104 Stat. 4819, amended 18 U.S.C. § 1201by adding the following new subsection:</p><p><strong>“(g) Special Rule for Certain Offenses Involving Children.</strong>—</p><blockquote><p><strong>(1)</strong> <strong>To Whom Applicable.</strong>—If—</p><p><strong>(A)</strong> the victim of an offense under this section has not attained the age of eighteen years; and</p></blockquote><p><strong>(B)</strong> the offender—</p><blockquote><p><strong>(i)</strong> has attained such age; and</p><p><strong>(ii)</strong> is not—</p><p><strong>(I)</strong> a parent;</p><p><strong>(II)</strong> a grandparent;</p><p><strong>(III)</strong> a brother;</p><p><strong>(IV)</strong> a sister;</p><p><strong>(V)</strong> an aunt;</p><p><strong>(VI)</strong> an uncle; or</p><p><strong>(VII)</strong> an individual having legal custody of the victim;</p></blockquote><p>the sentence under this section for such offense shall be subject to paragraph (2) of this subsection.</p><p><strong>(2)</strong> <strong>Guidelines.</strong>—The United States Sentencing Commission is directed to amended the existing guidelines for the offense of ‘kidnapping, abduction, or unlawful restraint,’ by including the following additional specific offense characteristics: If the victim was intentionally maltreated (i.e., denied either food or medical care) to a life-threatening degree, increase by 4 levels; if the victim was sexually exploited (i.e., abused, used involuntarily for pornographic purposes) increase by 3 levels; if the victim was placed in the care or custody of another person who does not have a legal right to such care or custody of the child either in exchange for money or other consideration, increase by 3 levels; if the defendant allowed the child to be subjected to any of the conduct specified in this section by another person, then increase by 2 levels.”</p><p><strong>REPORT ON MANDATORY MINIMUM SENTENCING PROVISIONS.</strong> Pub.L. 101–647, Title XVII, § 1703, Nov. 29, 1990, 104 Stat. 4845, provided:</p><p>“<strong>Sec. 1703. Report on Mandatory Minimum Sentencing Provisions.</strong></p><p><strong>(a) Report.</strong>—Not less than six months after the date of enactment of this Act, the United States Sentencing Commission shall transmit to the respective Judiciary Committees of the Senate and House of Representatives a report on mandatory minimum sentencing provisions in Federal law.</p><p><strong>(b) Components of Report.</strong>—The report mandated by subsection (a) shall included:</p><blockquote><p><strong>(1)</strong> a compilation of all mandatory minimum sentencing provisions in Federal law;</p><p><strong>(2)</strong> an assessment of the effect of mandatory minimum sentencing provisions on the goal of eliminating unwarranted sentencing disparity;</p><p><strong>(3)</strong> a projection of the impact of mandatory minimum sentencing provisions on the Federal prison population;</p><p><strong>(4)</strong> an assessment of the compatibility of mandatory minimum sentencing provisions and the sentencing guidelines system established by the Sentencing Reform Act of 1984;</p><p><strong>(5)</strong> a description of the interaction between mandatory minimum sentencing provisions and plea agreements;</p><p><strong>(6)</strong> a detailed empirical research study of the effect of mandatory minimum penalties in the Federal system;</p><p><strong>(7)</strong> a discussion of mechanisms other than mandatory minimum sentencing laws by which Congress can express itself with respect to sentencing policy, such as:</p><p><strong>(A)</strong> specific statutory instructions to the Sentencing Commission;</p><p><strong>(B)</strong> general statutory instructions to the Sentencing Commission;</p><p><strong>(C)</strong> increasing or decreasing the maximum sentence authorized for particular crimes;</p><p><strong>(D)</strong> Sense of Congress resolutions; and</p><p><strong>(8)</strong> any other information that the Commission would contribute to a thorough assessment of mandatory minimum sentencing provisions.</p></blockquote><p><strong>(c) Amendment of Report.</strong>—The Commission may amend or update the report mandated by subsection (a) at any time after its transmittal.”</p><p><strong>OFFENSES AFFECTING FINANCIAL INSTITUTIONS.</strong> Pub.L. 101–647, Title XXV, § 2507, Nov. 29, 1990, 104 Stat. 4862, provided:</p><p>“<strong>Sec. 2507. Increased Penalties in Major Bank Crime Cases.</strong></p><p><strong>(a) Increased Penalties.</strong>—Pursuant to section 994 of title 28, United States Code, and section 21 of the Sentencing Act of 1987 [28 U.S.C. 994 note] the United States Sentencing Commission shall promulgate guidelines, or amend existing guidelines, to provide that a defendant convicted of violating, or conspiring to violate, section 215, 656, 657, 1005, 1006, 1007, 1014, 1032, or 1344 of title 18, United States Code, or section 1341 or 1343 affecting a financial institution (as defined in section 20 of title 18, United States Code) shall be assigned not less than offense level 24 under chapter 2 of the sentencing guidelines if the defendant derives more than $1,000,000 in gross receipts from the offense.</p><p><strong>(b) Amendments to Sentencing Guidelines.</strong>—If the sentencing guidelines are amended after the effective date of this section, the Sentencing Commission shall implement the instruction set forth in subsection (a) so as to achieve a comparable result.”</p><p><strong>SMOKABLE CRYSTAL METHAMPHETAMINE.</strong> Pub.L. 101–647, Title XXVII, § 2701, Nov. 29, 1990, 104 Stat. 4912, provided:</p><p>“<strong>Sec. 2701. Sentencing Commission Guidelines.</strong></p><p>“The United States Sentencing Commission is instructed to amend the existing guidelines for offenses involving smokable crystal methamphetamine under section 401(b) of the Controlled Substances Act (21 U.S.C. § 841(b)) so that convictions for offenses involving smokable crystal methamphetamine will be assigned an offense level under the guidelines which is two levels above that which would have been assigned to the same offense involving other forms of methamphetamine.”</p><p>* * *</p>\"},{\"id\":\"PUB.L.102–141\",\"content\":\"<p><strong>TREASURY, POSTAL SERVICE AND</strong></p><p><strong>GENERAL GOVERNMENT</strong></p><p><strong>APPROPRIATIONS ACT, 1992</strong></p><p><strong>(PUB. L. 102–141)</strong></p><p><strong>SEXUAL ABUSE AND EXPLOITATION OF MINORS; CHILD PORNOGRAPHY; OBSCENITY.</strong> Pub.L. 102–141, Title VI, § 632, Oct. 28, 1991, 105 Stat. 876, provided:</p><p>“<strong>Sec. 632. (1)</strong> Pursuant to its authority under section 994 of title 28, United States Code, the Sentencing Commission shall promulgate guidelines, or amend existing or proposed guidelines as follows:</p><blockquote><p><strong>(A)</strong> Guideline 2G2.2 to provide a base offense level of not less than 15 and to provide at least a 5 level increase for offenders who have engaged in a pattern of activity involving the sexual abuse or exploitation of a minor.</p><p><strong>(B)</strong> Guideline 2G2.4 to provide that such guideline shall apply only to offense conduct that involves the simple possession of materials proscribed by chapter 110 of title 18, United States Code and guideline 2G2.2 to provide that such guideline shall apply to offense conduct that involves receipt or trafficking (including, but not limited to transportation, distribution, or shipping).</p><p><strong>(C)</strong> Guideline 2G2.4 to provide a base offense level of not less than 13, and to provide at least a 2 level increase for possessing 10 or more books, magazines, periodicals, films, video tapes or other items containing a visual depiction involving the sexual exploitation of a minor.</p><p><strong>(D)</strong> Section 2G3.1 to provide a base offense level of not less than 10.</p></blockquote><p><strong>(2)(A)</strong> Notwithstanding any other provision of law, the Sentencing Commission shall promulgate the amendments mandated in subsection (1) by November 1, 1991, or within 30 days after enactment [probably means date of enactment of Pub.L. 102–141, which was approved Oct. 28, 1991], whichever is later. The amendments to the guidelines promulgated under subsection (1) shall take effect November 1, 1991, or 30 days after enactment, and shall supersede any amendment to the contrary contained in the amendments to the sentencing guidelines submitted to the Congress by the Sentencing Commission on or about May 1, 1991.</p><p><strong>(B)</strong> The provisions of section 944(x) of title 28, United States Code, shall not apply to the promulgation or amendment of guidelines under this section.”</p><p>* * *</p>\"},{\"id\":\"PUB.L.103–322\",\"content\":\"<p><strong>VIOLENT CRIME CONTROL AND</strong></p><p><strong>LAW ENFORCEMENT ACT OF 1994</strong></p><p><strong>(PUB. L. 103–322)</strong></p><p><strong>SEXUAL OFFENSES BY REPEAT OFFENDERS.</strong> Pub.L. 103–322, Title IV, § 40111(b), Sept. 13, 1994, 108 Stat. 1903, provided:</p><p>“<strong>(b) Amendment of Sentencing Guidelines.—</strong>The Sentencing Commission shall implement the amendment made by subsection (a)[of this section (pertaining to repeat sexual offenders)] by promulgating amendments, if appropriate, in the sentencing guidelines applicable to chapter 109A [of title 18] offenses.”</p><p><strong>SEXUAL ABUSE; AGGRAVATED SEXUAL ABUSE.</strong> Pub.L. 103–322, Title IV, § 40112, Sept. 13, 1994, 108 Stat. 1903, provided:</p><p>“<strong>Sec. 40112. Federal Penalties.</strong></p><p><strong>(a)</strong> <strong>Amendment of Sentencing Guidelines.—</strong>Pursuant to its authority under section 994(p) of title 28, United States Code, the United States Sentencing Commission shall review and amend, where necessary, its sentencing guidelines on aggravated sexual abuse under section 2241 of title 18, United States Code, or sexual abuse under section 2242 of title 18 United States Code, as follows:</p><blockquote><p><strong>(1)</strong> The Commission shall review and promulgate amendments to the guidelines, if appropriate, to enhance penalties if more than 1 offender is involved in the offense.</p><p><strong>(2)</strong> The Commission shall review and promulgate amendments to the guidelines, if appropriate, to reduce unwarranted disparities between the sentences for sex offenders who are known to the victim and sentences for sex offenders who are not known to the victim.</p><p><strong>(3)</strong> The Commission shall review and promulgate amendments to the guidelines to enhance penalties, if appropriate, to render Federal penalties on Federal territory commensurate with penalties for similar offenses in the States.</p><p><strong>(4)</strong> The Commission shall review and promulgate amendments to the guidelines, if appropriate, to account for the general problem of recidivism in cases of sex offenses, the severity of the offense, and its devastating effects on survivors.</p></blockquote><p><strong>(b)</strong> <strong>Report.—</strong>Not later than 180 days after the date of enactment of this Act, the United States Sentencing Commission shall review and submit to Congress a report containing an analysis of Federal rape sentencing, accompanied by comment from independent experts in the field, describing—</p><blockquote><p><strong>(1)</strong> comparative Federal sentences for cases in which the rape victim is known to the defendant and cases in which the rape victim is not known to the defendant;</p><p><strong>(2)</strong> comparative Federal sentences for cases on Federal territory and sentences in surrounding States; and</p><p><strong>(3)</strong> an analysis of the effect of rape sentences on populations residing primarily on Federal territory relative to the impact of other Federal offenses in which the existence of Federal jurisdiction depends upon the offense’s being committed on Federal territory.”</p></blockquote><p><strong>INTENTIONAL TRANSMISSION OF HIV.</strong> Pub.L. 103–322, Title IV, § 40503(c), Sept. 13, 1994, 108 Stat. 1947, provided:</p><p>“<strong>(c) Penalties for Intentional Transmission of HIV.—</strong>Not later than 6 months after the date of enactment of this Act, the United States Sentencing Commission shall conduct a study and prepare and submit to the committees on the Judiciary of the Senate and the House of Representatives a report concerning recommendations for the revision of sentencing guidelines that relate to offenses in which an HIV infected individual engages in sexual activity if the individual knows that he or she is infected with HIV and intends, through such sexual activity, to expose another to HIV.”</p><p><strong>LIMITATION ON APPLICABILITY OF MANDATORY MINIMUM PENALTIES IN CERTAIN CASES; SENTENCING COMMISSION AUTHORITY.</strong> Pub.L. 103–322, Title VIII, § 80001, Sept. 13, 1994, 108 Stat. 1986, provided:</p><p>“<strong>(a) [enacted 18 U.S.C. § 3553(f) (Limitation on applicability of statutory minimums in certain cases)]</strong></p><p><strong>(b) Sentencing Commission Authority.—</strong></p><blockquote><p><strong>(1) In general.—(A)</strong> The United States Sentencing Commission (referred to in this subsection as the ‘Commission’), under section 994(a)(1) and (p) of title 28—</p><p><strong>(i)</strong> shall promulgate guidelines, or amendments to guidelines, to carry out the purposes of this section and the amendment made by this section; and</p><p><strong>(ii)</strong> may promulgate policy statements, or amendments to policy statements, to assist in the application of this section and that amendment.</p><p><strong>(B)</strong> In the case of a defendant for whom the statutorily required minimum sentence of 5 years, such guidelines and amendments to guidelines issued under subparagraph (A) shall call for a guideline range in which the lowest term of imprisonment is at least 24 months.</p><p><strong>(2)</strong> <strong>Procedures.—</strong>If the Commission determines that it is necessary to do so in order that the amendments made under paragraph (1) may take effect on the effective date of the amendment made by subsection (a), the Commission may promulgate the amendments made under paragraph (1) in accordance with the procedures set forth in section 21(a) of the Sentencing Act of 1987, as though the authority under that section had not expired.”</p></blockquote><p><strong>DRUG DEALING IN “DRUG-FREE” ZONES.</strong> Pub.L. 103–322, Title IX, § 90102, Sept. 13, 1994, 108 Stat. 1987, provided:</p><p>“<strong>Sec. 90102. Increased Penalties for Drug-Dealing in ‘Drug-Free’ Zones.</strong></p><p>“Pursuant to its authority under section 994 of title 28, United States Code, the United States Sentencing Commission shall amend its sentencing guidelines to provide an appropriate enhancement for a defendant convicted of violating section 419 of the Controlled Substances Act (21 U.S.C. 860).”</p><p><strong>ILLEGAL DRUG USE IN FEDERAL PRISONS; SMUGGLING DRUGS INTO FEDERAL PRISONS.</strong> Pub.L. 103–322, Title IX, § 90103, Sept. 13, 1994, 108 Stat. 1987, provided:</p><p>“<strong>Sec. 90103. Enhanced Penalties for Illegal Drug Use in Federal Prisons and for Smuggling Drugs into Federal Prisons.</strong></p><p><strong>(a)</strong> <strong>Declaration of Policy.—</strong>It is the policy of the Federal Government that the use or distribution of illegal drugs in the Nation’s Federal prisons will not be tolerated and that such crimes shall be prosecuted to the fullest extent of the law.</p><p><strong>(b)</strong> <strong>Sentencing Guidelines.—</strong>Pursuant to its authority under section 994 of title 28, United States Code, the United States Sentencing Commission shall amend its sentencing guidelines to appropriately enhance the penalty for a person convicted of an offense—</p><blockquote><p><strong>(1)</strong> under section 404 of the Controlled Substances Act involving simple possession of a controlled substance within a Federal prison or other Federal detention facility; or</p><p><strong>(2)</strong> under section 401(b) of the Controlled Substances Act involving the smuggling of a controlled substance into a Federal prison or other Federal detention facility or the distribution or intended distribution of a controlled substance within a Federal prison or other Federal detention facility.</p></blockquote><p><strong>(c)</strong> <strong>No Probation.—</strong>Notwithstanding any other law, the court shall not sentence a person convicted of an offense described in subsection (b) to probation.”</p><p><strong>USE OF A SEMIAUTOMATIC FIREARM DURING A CRIME OF VIOLENCE OR A DRUG TRAFFICKING CRIME.</strong> Pub.L. 103–322, Title XI, § 110501, Sept. 13, 1994, 108 Stat. 2015, provided:</p><p>“<strong>Sec. 110501. Enhanced Penalty for Use of a Semiautomatic Firearm During a Crime of Violence or a Drug Trafficking Crime.</strong></p><p><strong>(a)</strong> <strong>Amendment to Sentencing Guidelines.</strong>—Pursuant to its authority under section 994 of title 28, United States Code, the United States Sentencing Commission shall amend its sentencing guidelines to provide an appropriate enhancement of the punishment for a crime of violence (as defined in section 924(c)(3) of title 18, United States Code) or a drug trafficking crime (as defined in section 924(c)(2) of title 18, United States Code) if a semiautomatic firearm is involved.</p><p><strong>(b) Semiautomatic Firearm.</strong>—In subsection (a), ‘semiautomatic firearm’ means any repeating firearm that utilizes a portion of the energy of a firing cartridge to extract the fired cartridge case and chamber the next round and that requires a separate pull of the trigger to fire each cartridge.”</p><p><strong>SECOND OFFENSE OF USING AN EXPLOSIVE TO COMMIT A FELONY.</strong> Pub.L. 103–322, Title XI, § 110502, Sept. 13, 1994, 108 Stat. 2015, provided:</p><p>“<strong>Sec. 110502. Enhanced Penalty for Second Offense of Using an Explosive to Commit a Felony.</strong></p><p>Pursuant to its authority under section 994 of title 28, United States Code, the United States Sentencing Commission shall promulgate amendments to the sentencing guidelines to appropriately enhance penalties in a case in which a defendant convicted under section 844(h) of title 18, United States Code, has previously been convicted under that section.”</p><p><strong>USING A FIREARM IN COUNTERFEITING OR FORGERY.</strong> Pub.L. 103–322, Title XI, § 110512, Sept. 13, 1994, 108 Stat. 2019, provided:</p><p>“<strong>Sec. 110512. Using a Firearm in the Commission of Counterfeiting or Forgery.</strong></p><p>Pursuant to its authority under section 994 of title 28, United States Code, the United States Sentencing Commission shall amend its sentencing guidelines to provide an appropriate enhancement of the punishment for a defendant convicted of a felony under chapter 25 of title 18, United States Code, if the defendant used or carried a firearm (as defined in section 921(a)(3) of title 18, United States Code) during and in relation to the felony.”</p><p><strong>FIREARMS POSSESSION BY VIOLENT FELONS AND SERIOUS DRUG OFFENDERS.</strong> Pub.L. 103–322, Title XI, § 110513, Sept. 13, 1994, 108 Stat. 2019, provided:</p><p>“<strong>Sec. 110513. Enhanced Penalties for Firearms Possession by Violent Felons and Serious Drug Offenders.</strong></p><p>Pursuant to its authority under section 994 of title 28, United States Code, the United States Sentencing Commission shall amend its sentencing guidelines to—</p><blockquote><p><strong>(1)</strong> appropriately enhance penalties in cases in which a defendant convicted under section 922(g) of title 18, United States Code, has 1 prior conviction by any court referred to in section 922(g)(1) of title 18 for a violent felony (as defined in section 924(e)(2)(B) of that title) or a serious drug offense (as defined in section 924(e)(2)(A) of that title); and</p><p><strong>(2)</strong> appropriately enhance penalties in cases in which such a defendant has 2 prior convictions for a violent felony (as so defined) or a serious drug offense (as so defined).”</p></blockquote><p><strong>PROMOTING INTERNATIONAL TERRORISM.</strong> Pub.L. 103–322, Title XII, § 120004, Sept. 13, 1994, 108 Stat. 2022, provided:</p><p>“<strong>Sec. 120004. Sentencing Guidelines Increase for Terrorist Crimes.</strong></p><p>The United States Sentencing Commission is directed to amend its sentencing guidelines to provide an appropriate enhancement for any felony, whether committed within or outside the United States, that involves or is intended to promote international terrorism, unless such involvement or intent is itself an element of the crime.”</p><p><strong>INVOLVING A MINOR IN THE COMMISSION OF THE OFFENSE.</strong> Pub.L. 103–322, Title XIV, § 140008, Sept. 13, 1994, 108 Stat. 2033, provided:</p><p>“<strong>Sec. 140008. Solicitation of Minor to Commit Crime.</strong></p><p><strong>(a) Directive to Sentencing Commission.—(1)</strong> The United States Sentencing Commission shall promulgate guidelines or amend existing guidelines to provide that a defendant 21 years of age or older who has been convicted of an offense shall receive an appropriate sentence enhancement if the defendant involved a minor in the commission of the offense.</p><p><strong>(2)</strong> The Commission shall provide that the guidelines enhancement promulgated pursuant to paragraph (1) shall apply for any offense in relation to which the defendant has solicited, procured, recruited, counseled, encouraged, trained, directed, commanded, intimidated, or otherwise used or attempted to use any person less than 18 years of age with the intent that the minor would commit a Federal offense.</p><p><strong>(b)</strong> <strong>Relevant Considerations.—</strong>In implementing the directive in subsection (a), the Sentencing Commission shall consider—</p><blockquote><p><strong>(1)</strong> the severity of the crime that the defendant intended the minor to commit;</p><p><strong>(2)</strong> the number of minors that the defendant used or attempted to use in relation to the offense;</p><p><strong>(3)</strong> the fact that involving a minor in a crime of violence is frequently of even greater seriousness than involving a minor in a drug trafficking offense, for which the guidelines already provide a two-level enhancement; and</p><p><strong>(4)</strong> the possible relevance of the proximity in age between the offender and the minor(s) involved in the offense.”</p></blockquote><p><strong>DRUG FREE TRUCK STOPS AND SAFETY REST AREAS.</strong> Pub.L. 103–322, Title XVIII, § 180201(c), Sept. 13, 1994, 108 Stat. 2047, provided:</p><p>“<strong>(c) Sentencing Guidelines.—</strong>Pursuant to its authority under section 994 of title 28, United States Code, and section 21 of the Sentencing Act of 1987 (28 U.S.C. 994 note), the United States Sentencing Commission shall promulgate guidelines, or shall amend existing guidelines, to provide an appropriate enhancement of punishment for a defendant convicted of violating section 409 of the Controlled Substances Act [21 U.S.C. § 849], as added by subsection (b) [of this section].”</p><p><strong>CRIMES OF VIOLENCE AGAINST ELDERLY VICTIMS.</strong> Pub.L. 103–322, Title XXIV, § 240002, Sept. 13, 1994, 108 Stat. 2081, provided:</p><p>“<strong>Sec. 240002. Crimes Against the Elderly.</strong></p><p><strong>(a)</strong> <strong>In General.—</strong>Pursuant to its authority under the Sentencing Reform Act of 1984 and section 21 of the Sentencing Act of 1987 (including its authority to amend the sentencing guidelines and policy statements) and its authority to make such amendments on an emergency basis, the United States Sentencing Commission shall ensure that the applicable guideline range for a defendant convicted of a crime of violence against an elderly victim is sufficiently stringent to deter such a crime, to protect the public from additional crimes of such a defendant, and to adequately reflect the heinous nature of such an offense.</p><p><strong>(b) Criteria.—</strong>In carrying out subsection (a), the United States Sentencing Commission shall ensure that—</p><blockquote><p><strong>(1)</strong> the guidelines provide for increasingly severe punishment for a defendant commensurate with the degree of physical harm caused to the elderly victim;</p><p><strong>(2)</strong> the guidelines take appropriate account of the vulnerability of the victim; and</p><p><strong>(3)</strong> the guidelines provide enhanced punishment for a defendant convicted of a crime of violence against an elderly victim who has previously been convicted of a crime of violence against an elderly victim, regardless of whether the conviction occurred in Federal or State court.</p></blockquote><p><strong>(c) Definitions.—</strong>In this section—</p><blockquote><p><strong>(1)</strong> ‘crime of violence’ means an offense under section 113, 114, 1111, 1112, 1113, 1117, 2241, 2242, or 2244 of title 18, United States Code.</p><p><strong>(2)</strong> ‘elderly victim’ means a victim who is 65 years of age or older at the time of an offense.”</p></blockquote><p><strong>FRAUD AGAINST OLDER VICTIMS.</strong> Pub.L. 103–322, Title XXV, § 250003, Sept. 13, 1994, 108 Stat. 2085, provided:</p><p>“<strong>Sec. 250003. Increased Penalties for Fraud Against Older Victims.</strong></p><p><strong>(a)</strong> <strong>Review.—</strong>The United States Sentencing Commission shall review and, if necessary, amend the sentencing guidelines to ensure that victim related adjustments for fraud offenses against older victims over the age of 55 are adequate.</p><p><strong>(b)</strong> <strong>Report.—</strong>Not later than 180 days after the date of enactment of this Act, the Sentencing Commission shall report to Congress the result of its review under subsection (a).”</p><p><strong>HATE CRIMES.</strong> Pub.L. 103–322, Title XXVIII, § 280003, Sept. 13, 1994, 108 Stat. 2096, as amended by Pub. L. 111–84, Div. E, § 4703(a), Oct. 28, 2009, 123 Stat. 2836, provided:</p><p>“<strong>Sec. 280003. Direction to United States Sentencing Commission Regarding Sentencing Enhancements for Hate Crimes.</strong></p><p><strong>(a) Definition.—</strong>In this section, ‘hate crime’ means a crime in which the defendant intentionally selects a victim, or in the case of a property crime, the property that is the object of the crime, because of the actual or perceived race, color, religion, national origin, ethnicity, gender, gender identity, disability, or sexual orientation of any person.</p><p><strong>(b) Sentencing Enhancement.—</strong>Pursuant to section 994 of title 28, United States Code, the United States Sentencing Commission shall promulgate guidelines or amend existing guidelines to provide sentencing enhancements of not less than 3 offense levels for offenses that the finder of fact at trial determines beyond a reasonable doubt are hate crimes. In carrying out this section, the United States Sentencing Commission shall ensure that there is reasonable consistency with other guidelines, avoid duplicative punishments for substantially the same offense, and take into account any mitigating circumstances that might justify exceptions.”</p><p><strong>REPORT ON COCAINE PENALTIES.</strong> Pub.L. 103–322, Title XXVIII, § 280006, Sept. 13, 1994, 108 Stat. 2097, provided:</p><p>“<strong>Sec. 280006. Cocaine Penalty Study.</strong></p><p>Not later than December 31, 1994, the United States Sentencing Commission shall submit a report to Congress on issues relating to sentences applicable to offenses involving the possession or distribution of all forms of cocaine. The report shall address the differences in penalty levels that apply to different forms of cocaine and include any recommendations that the Commission may have for retention or modification of such differences in penalty levels.”</p><p>* * *</p>\"},{\"id\":\"PUB.L.104–38\",\"content\":\"<p><strong>ACT TO DISAPPROVE OF AMENDMENTS TO THE FEDERAL SENTENCING GUIDELINES RELATING TO LOWERING OF CRACK</strong></p><p><strong>SENTENCES AND SENTENCES FOR MONEY LAUNDERING AND TRANSACTIONS IN PROPERTY DERIVED FROM UNLAWFUL ACTIVITY</strong></p><p><strong>(PUB. L. 104–38)</strong></p><p><strong>DISAPPROVAL OF AMENDMENTS; RECOMMENDATIONS ON COCAINE OFFENSES; STUDY AND COMMENTS ON MONEY LAUNDERING.</strong> Pub.L. 104–38, §§ 1–2, Oct. 30, 1995, 109 Stat. 334, provided:</p><p>“<strong>Section 1. Disapproval of Amendments Relating to Lowering of Crack Sentences and Sentences for Money Laundering and Transactions in Property Derived from Unlawful Activity.</strong></p><p>In accordance with section 994(p) of title 28, United States Code, amendments numbered 5 and 18 of the “Amendments to the Sentencing Guidelines, Policy Statements, and Official Commentary”, submitted by the United States Sentencing Commission to Congress on May 1, 1995, are hereby disapproved and shall not take effect.</p><p>“<strong>Sec. 2. Reduction of Sentencing Disparity.</strong></p><p><strong>(a)</strong> <strong>Recommendations.—</strong></p><blockquote><p><strong>(1) In general.—</strong>The United States Sentencing Commission shall submit to Congress recommendations (and an explanation therefor), regarding changes to the statutes and sentencing guidelines governing sentences for unlawful manufacturing, importing, exporting, and trafficking of cocaine, and like offenses, including unlawful possession, possession with intent to commit any of the forgoing offenses, and attempt and conspiracy to commit any of the forgoing offenses. The recommendations shall reflect the following considerations—</p><p><strong>(A)</strong> the sentence imposed for trafficking in a quantity of crack cocaine should generally exceed the sentence imposed for trafficking in a like quantity of powder cocaine;</p><p><strong>(B)</strong> high-level wholesale cocaine traffickers, organizers, and leaders of criminal activities should generally receive longer sentences than low-level retail cocaine traffickers and those who played a minor or minimal role in such criminal activity;</p><p><strong>(C)</strong> if the Government establishes that a defendant who traffics in powder cocaine has knowledge that such cocaine will be converted into crack cocaine prior to its distribution to individual users, the defendant should be treated at sentencing as though the defendant had trafficked in crack cocaine; and</p><p><strong>(D)</strong> an enhanced sentence should generally be imposed on a defendant who, in the course of an offense described in this subsection—</p><p><strong>(i)</strong> murders or causes serious bodily injury to an individual;</p><p><strong>(ii)</strong> uses a dangerous weapon;</p><p><strong>(iii)</strong> uses or possesses a firearm;</p><p><strong>(iv)</strong> involves a juvenile or a woman who the defendant knows or should know to be pregnant;</p><p><strong>(v)</strong> engages in a continuing criminal enterprise or commits other criminal offenses in order to facilitate his drug trafficking activities;</p><p><strong>(vi)</strong> knows, or should know, that he is involving an unusually vulnerable person;</p><p><strong>(vii)</strong> restrains a victim;</p><p><strong>(viii)</strong> traffics in cocaine within 500 feet of a school;</p><p><strong>(ix)</strong> obstructs justice;</p><p><strong>(x)</strong> has a significant prior criminal record; or</p><p><strong>(xi)</strong> is an organizer or leader of drug trafficking activities involving five or more persons.</p><p><strong>(2) Ratio.—</strong>The recommendations described in the preceding subsection shall propose revision of the drug quantity ratio of crack cocaine to powder cocaine under the relevant statutes and guidelines in a manner consistent with the ratios set for other drugs and consistent with the objectives set forth in section 3553(a) of title 28 United States Code.</p></blockquote><p><strong>(b) Study.—</strong>No later than May 1, 1996, the Department of Justice shall submit to the Judiciary Committees of the Senate and House of Representatives a report on the charging and plea practices of Federal prosecutors with respect to the offense of money laundering. Such study shall include an account of the steps taken or to be taken by the Justice Department to ensure consistency and appropriateness in the use of the money laundering statute. The Sentencing Commission shall submit to the Judiciary Committees comments on the study prepared by the Department of Justice.”</p><p>* * *</p>\"},{\"id\":\"PUB.L.104–71\",\"content\":\"<p><strong>SEX CRIMES AGAINST CHILDREN </strong></p><p><strong>PREVENTION ACT OF 1995</strong></p><p><strong>(PUB. L. 104–71)</strong></p><p><strong>SEXUAL EXPLOITATION OF CHILDREN; CHILD PORNOGRAPHY.</strong> Pub.L. 104–71, § 2, Dec. 23, 1995, 109 Stat. 774, provided:</p><p>“<strong>Sec. 2. Increased Penalties for Certain Conduct Involving the Sexual Exploitation of Children.</strong></p><p>The United States Sentencing Commission shall amend the sentencing guidelines to—</p><blockquote><p><strong>(1)</strong> increase the base offense level for an offense under section 2251 of title 18, United States Code, by at least 2 levels; and</p><p><strong>(2)</strong> increase the base offense level for an offense under section 2252 of title 18, United States Code, by at least 2 levels.”</p></blockquote><p><strong>USE OF COMPUTERS IN SEXUAL EXPLOITATION OF CHILDREN.</strong> Pub.L. 104–71, § 3, Dec. 23, 1995, 109 Stat. 774, provided:</p><p>“<strong>Sec. 3. Increased Penalties for Use of Computers in Sexual Exploitation of Children.</strong></p><p>The United States Sentencing Commission shall amend the sentencing guidelines to increase the base offense level by at least 2 levels for an offense committed under section 2251(c)(1)(A) or 2252(a) of title 18, United States Code, if a computer was used to transmit the notice or advertisement to the intended recipient or to transport or ship the visual depiction.”</p><p><strong>TRANSPORTATION OF MINORS WITH INTENT TO ENGAGE IN CRIMINAL SEXUAL ACTIVITY.</strong> Pub.L. 104–71, § 4, Dec. 23, 1995, 109 Stat. 774, provided:</p><p>“<strong>Sec. 4. Increased Penalties for Transportation of Children With Intent to Engage in Criminal Sexual Activity.</strong></p><p>The United States Sentencing Commission shall amend the sentencing guidelines to increase the base offense level for an offense under section 2423(a) of title 18, United States Code, by at least 3 levels.”</p><p><strong>REPORT ON CHILD PORNOGRAPHY AND OTHER SEX OFFENSES AGAINST CHILDREN.</strong> Pub.L. 104–71, § 6, Dec. 23, 1995, 109 Stat. 774, provided:</p><p>“<strong>Sec. 6. Report by the United States Sentencing Commission.</strong></p><p>Not later than 180 days after the date of the enactment of this Act, the United States Sentencing Commission shall submit a report to Congress concerning offenses involving child pornography and other sex offenses against children. The Commission shall include in the report—</p><blockquote><p><strong>(1)</strong> an analysis of the sentences imposed for offenses under sections 2251, 2252, and 2423 of title 18, United States Code, and recommendations regarding any modifications to the sentencing guidelines that may be appropriate with respect to those offenses;</p><p><strong>(2)</strong> an analysis of the sentences imposed for offenses under sections 2241, 2242, and 2243, and 2244 of title 18, United States Code, in cases in which the victim was under the age of 18 years, and recommendations regarding any modifications to the sentencing guidelines that may be appropriate with respect to those offenses;</p><p><strong>(3)</strong> an analysis of the type of substantial assistance that courts have recognized as warranting a downward departure from the sentencing guidelines relating to offenses under section 2251 or 2252 of title 18, United States Code;</p><p><strong>(4)</strong> a survey of the recidivism rate for offenders convicted of committing sex crimes against children, an analysis of the impact on recidivism of sexual abuse treatment provided during or after incarceration or both, and an analysis of whether increased penalties would reduce recidivism for those crimes; and</p><p><strong>(5)</strong> such other recommendations with respect to the offenses described in this section as the Commission deems appropriate.”</p></blockquote><p>* * *</p>\"},{\"id\":\"PUB.L.104–132\",\"content\":\"<p><strong>ANTITERRORISM AND EFFECTIVE DEATH PENALTY ACT OF 1996</strong></p><p><strong>or</strong></p><p><strong>MANDATORY VICTIMS RESTITUTION ACT OF 1996</strong></p><p><strong>(PUB. L. 104–132)</strong></p><p><strong>COMMUNITY RESTITUTION.</strong> Pub.L. 104–132, Title II, § 205(a)(3), Apr. 24, 1996, 110 Stat. 1230, amended 18 U.S.C. § 3663 by adding new subsection (c)(7), which provided:</p><p>“<strong>(7)(A)</strong> The United States Sentencing Commission shall promulgate guidelines to assist courts in determining the amount of restitution that may be ordered under this subsection [subsection (c) of 18 U.S.C. § 3663, pertaining to community restitution].</p><p><strong>(B)</strong> No restitution shall be ordered under this subsection until such time as the Sentencing Commission promulgates guidelines pursuant to this paragraph.”</p><p><strong>MANDATORY VICTIMS RESTITUTION.</strong> Pub.L. 104–132, § 208, April 24, 1996, 110 Stat. 1240, provided:</p><p>“<strong>Sec. 208. Instruction to Sentencing Commission.</strong></p><p>Pursuant to section 994 of title 28, United States Code, the United States Sentencing Commission shall promulgate guidelines or amend existing guidelines to reflect this subtitle [‘Mandatory Victims Restitution Act of 1996’] and the amendments made by this subtitle.”</p><p><strong>INTERNATIONAL TERRORISM.</strong> Pub.L. 104– 132, § 730, April 24, 1996, 110 Stat. 1303, provided:</p><p>“<strong>Sec. 730. Directions to Sentencing Commission.</strong></p><p>The United States Sentencing Commission shall forthwith, in accordance with the procedures set forth in section 21(a) of the Sentencing Act of 1987, as though the authority under that section had not expired, amend the sentencing guidelines so that the chapter 3 adjustment relating to international terrorism only applies to Federal crimes of terrorism, as defined in section 2332b(g) of title 18, United States Code.”</p><p><strong>FRAUD AND DAMAGE INVOLVING PROTECTED COMPUTERS (SECTION 1030 OFFENSES).</strong> Pub.L. 104–132, § 805, April 24, 1996, 110 Stat. 1305, provided:</p><p>“<strong>Sec. 805. Deterrent Against Terrorist Activity Damaging a Federal Interest Computer.</strong></p><p><strong>(a) Review.—</strong>Not later than 60 calendar days after the dates of enactment of this Act, the United States Sentencing Commission shall review the deterrent effect of existing guideline levels as they apply to paragraphs (4) and (5) of section 1030(a) of title 18, United States Code.</p><p><strong>(b)</strong> <strong>Report.—</strong>The United States Sentencing Commission shall prepare and transmit a report to the Congress on the findings under the study conducted under subsection (a).</p><p><strong>(c)</strong> <strong>Amendment of Sentencing Guidelines.—</strong> Pursuant to its authority under section 994(p) of title 28, United States Code, the United States Sentencing Commission shall amend the sentencing guidelines to ensure any individual convicted of a violation of paragraph (4) or (5) of section 1030(a) of title 18, United States Code, is imprisoned for not less than 6 months.”</p><p><strong>INTERNATIONAL COUNTERFEITING (SECTION 470 OFFENSES).</strong> Pub.L. 104–132, § 807(h), April 24, 1996, 110 Stat. 1310, provided:</p><p>“<strong>(h) Enhanced Penalties for International Counterfeiting of United States Currency.—</strong>Pursuant to the authority of the United States Sentencing Commission under section 994 of title 28, United States Code, the Commission shall amend the sentencing guidelines prescribed by the Commission to provide an appropriate enhancement of the punishment for a defendant convicted under section 470 of title 18 of such Code.”</p><p>* * *</p>\"},{\"id\":\"PUB.L.104–201\",\"content\":\"<p><strong>NATIONAL DEFENSE AUTHORIZATION ACT FOR FISCAL YEAR 1997</strong></p><p><strong>(PUB. L. 104–201)</strong></p><p><strong>NUCLEAR, BIOLOGICAL, AND CHEMICAL WEAPONS MATERIALS.</strong> Pub.L. 104–201, Title XIV, § 1423, Sept. 23, 1996, 110 Stat 2725 [which is classified both to 28 U.S.C. § 994 note and to 50 U.S.C. § 2332] provided:</p><p>“<strong>Sec. 1423. Sense of Congress Concerning Criminal Penalties.</strong></p><p><strong>(a) Sense of Congress Concerning Inadequacy of Sentencing Guidelines.—</strong>It is the sense of Congress that the sentencing guidelines prescribed by the United States Sentencing Commission for the offenses of importation, attempted importation, exportation, and attempted exportation of nuclear, biological, and chemical weapons materials constitute inadequate punishment for such offenses.</p><p><strong>(b) Urging of Revision to Guidelines.—</strong>Congress urges the United States Sentencing Commission to revise the relevant sentencing guidelines to provide for increased penalties for offenses relating to importation, attempted importation, exportation, and attempted exportation of nuclear, biological, or chemical weapons or related materials or technologies under the following provisions of law:</p><blockquote><p><strong>(1)</strong> Section 11 of the Export Administration Act of 1979 (50 U.S.C.App. 2410).</p><p><strong>(2)</strong> Sections 38 and 40 of the Arms Export Control Act (22 U.S.C. 2778 and 2780).</p><p><strong>(3)</strong> The International Emergency Economic Powers Act (50 U.S.C. 1701 et seq.).</p><p><strong>(4)</strong> Section 309(c) of the Nuclear Non‑Proliferation Act of 1978 (22 U.S.C. 2156a(c)).”</p></blockquote><p>* * *</p>\"},{\"id\":\"PUB.L.104–208\",\"content\":\"<p><strong>OMNIBUS CONSOLIDATED </strong></p><p><strong>APPROPRIATIONS ACT, 1997</strong></p><p><strong>or</strong></p><p><strong>ILLEGAL IMMIGRATION REFORM AND </strong></p><p><strong>IMMIGRANT RESPONSIBILITY ACT OF 1996</strong></p><p><strong>(PUB. L. 104–208)</strong></p><p><strong>ALIEN SMUGGLING.</strong> Pub.L. 104–208, Div. C, Title II, § 203(e), Sept. 30, 1996, 110 Stat. 3009–566, provided:</p><p>“<strong>(e) Sentencing Guidelines.—</strong></p><blockquote><p><strong>(1) In general.—</strong>Pursuant to its authority under section 994(p) of title 28, United States Code, the United States Sentencing Commission shall promulgate sentencing guidelines or amend existing sentencing guidelines for offenders convicted of offenses related to smuggling, transporting, harboring, or inducing aliens in violation of section 274(a)(1)(A) or (2) of the Immigration and Nationality Act (8 U.S.C. 1324(a)(1)(A), (2)(B)) in accordance with this subsection.</p><p><strong>(2) Requirements.—</strong>In carrying out this subsection, the Commission shall, with respect to the offenses described in paragraph (1)—</p><p><strong>(A)</strong> increase the base offense level for such offenses at least 3 offense levels above the applicable level in effect on the date of the enactment of this Act;</p><p><strong>(B)</strong> review the sentencing enhancement for the number of aliens involved (U.S.S.G. 2L1.1(b)(2)), and increase the sentencing enhancement by at least 50 percent above the applicable enhancement in effect on the date of the enactment of this Act;</p><p><strong>(C)</strong> impose an appropriate sentencing enhancement upon an offender with 1 prior felony conviction arising out of a separate and prior prosecution for an offense that involved the same or similar underlying conduct as the current offense, to be applied in addition to any sentencing enhancement that would otherwise apply pursuant to the calculation of the defendant’s criminal history category;</p><p><strong>(D)</strong> impose an additional appropriate sentencing enhancement upon an offender with 2 or more prior felony convictions arising out of separate and prior prosecutions for offenses that involved the same or similar underling conduct as the current offense, to be applied in addition to any sentencing enhancement that would otherwise apply pursuant to the calculation of the defendant’s criminal history category;</p><p><strong>(E)</strong> impose an appropriate sentencing enhancement on a defendant who, in the course of committing an offense described in this subsection—</p><p><strong>(i)</strong> murders or otherwise causes death, bodily injury, or serious bodily injury to an individual;</p><p><strong>(ii)</strong> uses or brandishes a firearm or other dangerous weapon; or</p><p><strong>(iii)</strong> engages in conduct that consciously or recklessly places another in serious danger of death or serious bodily injury;</p><p><strong>(F)</strong> consider whether a downward adjustment is appropriate if the offense is a first offense and involves the smuggling only of the alien’s spouse or child; and</p><p><strong>(G)</strong> consider whether any other aggravating or mitigating circumstances warrant upward or downward sentencing adjustments.</p><p><strong>(3) Emergency Authority to Sentencing Commission.—</strong>The Commission shall promulgate the guidelines or amendments provided for under this subsection as soon as practicable in accordance with the procedure set forth in section 21(a) of the Sentencing Act of 1987, as though the authority under that Act had not expired.”</p></blockquote><p><strong>FRAUD IN CONNECTION WITH IDENTIFICATION, NATURALIZATION, AND IMMIGRATION DOCUMENTS.</strong> Pub.L. 104–208, Div. C, Title II, § 211(b), Sept. 30, 1996, 110 Stat. 3009–569, provided:</p><p><strong>“(b) Changes to the Sentencing Levels.— </strong></p><blockquote><p><strong>(1) In general.—</strong>Pursuant to the Commission’s authority under section 994(p) of title 28, United States Code, the United States Sentencing Commission shall promulgate sentencing guidelines or amend existing sentencing guidelines for offenders convicted of violating, or conspiring to violate, sections 1028(b)(1), 1425 through 1427, 1541 through 1544, and 1546(a) of title 18, United States Code, in accordance with this subsection.</p><p><strong>(2) Requirements.—</strong>In carrying out this subsection, the Commission shall, with respect to the offenses referred to in paragraph (1)—</p><p><strong>(A)</strong> increase the base offense level for such offenses at least 2 offense levels above the level in effect on the date of the enactment of this Act;</p><p><strong>(B)</strong> review the sentencing enhancement for number of documents or passports involved (U.S.S.G. 2L2.1(b)(2)), and increase the upward adjustment by at least 50 percent above the applicable enhancement in effect on the date of the enactment of this Act;</p><p><strong>(C)</strong> impose an appropriate sentencing enhancement upon an offender with 1 prior felony conviction arising out of a separate and prior prosecution for an offense that involved the same or similar underlying conduct as the current offense, to be applied in addition to any sentencing enhancement that would otherwise apply pursuant to the calculation of the defendant’s criminal history category;</p><p><strong>(D)</strong> impose an additional appropriate sentencing enhancement upon an offender with 2 or more prior felony convictions arising out of separate and prior prosecutions for offenses that involved the same or similar underlying conduct as the current offense, to be applied in addition to any sentencing enhancement that would otherwise apply pursuant to the calculation of the defendant’s criminal history category; and</p><p><strong>(E)</strong> consider whether any other aggravating or mitigating circumstances warrant upward or downward sentencing adjustments.</p><p><strong>(3) Emergency Authority to Sentencing Commission.—</strong>The Commission shall promulgate the guidelines or amendments provided for under this subsection as soon as practicable in accordance with the procedure set forth in section 21(a) of the Sentencing Act of 1987, as though the authority under that Act had not expired.”</p></blockquote><p><strong>PEONAGE, INVOLUNTARY SERVITUDE, AND SLAVE TRADE OFFENSES.</strong> Pub.L. 104–208, Div. C, Title II, § 218(b), (c), Sept. 30, 1996, 110 Stat. 3009–573, provided:</p><p>“<strong>(b) Review of Sentencing Guidelines.—</strong>The United States Sentencing Commission shall ascertain whether there exists an unwarranted disparity—</p><blockquote><p><strong>(1)</strong> between the sentences for peonage, involuntary servitude, and slave trade offenses, and the sentences for kidnapping offenses in effect on the date of the enactment of this Act; and</p><p><strong>(2)</strong> between the sentences for peonage, involuntary servitude, and slave trade offenses, and the sentences for alien smuggling offenses in effect on the date of the enactment of this Act and after the amendment made by subsection (a).</p></blockquote><p><strong>(c) Amendment of Sentencing Guidelines.—</strong></p><blockquote><p><strong>(1) In general.—</strong>Pursuant to its authority under section 994(p) of title 28, United States Code, the United States Sentencing Commission shall review its guidelines on sentencing for peonage, involuntary servitude, and slave trade offenses under sections 1581 through 1588 of title 18, United States Code, and shall amend such guidelines as necessary to—</p><p><strong>(A)</strong> reduce or eliminate any unwarranted disparity found under subsection (b) that exists between the sentences for peonage, involuntary servitude, and slave trade offenses, and the sentences for kidnapping offenses and alien smuggling offenses;</p><p><strong>(B)</strong> ensure that the applicable guidelines for defendants convicted of peonage, involuntary servitude, and slave trade offenses are sufficiently stringent to deter such offenses and adequately reflect the heinous nature of such offenses; and</p><p><strong>(C)</strong> ensure that the guidelines reflect the general appropriateness of enhanced sentences for defendants whose peonage, involuntary servitude, or slave trade offenses involve—</p><p><strong>(i)</strong> a large number of victims;</p><p><strong>(ii)</strong> the use or threatened use of a dangerous weapon; or</p><p><strong>(iii)</strong> a prolonged period of peonage or involuntary servitude.</p><p><strong>(2) Emergency Authority to Sentencing Commission.—</strong>The Commission shall promulgate the guidelines or amendments provided for under this subsection as soon as practicable in accordance with the procedure set forth in section 21(a) of the Sentencing Act of 1987, as though the authority under that Act had not expired.”</p></blockquote><p><strong>CONSPIRING WITH OR ASSISTING AN ALIEN TO COMMIT AN OFFENSE UNDER THE CONTROLLED SUBSTANCES IMPORT AND EXPORT ACT.</strong> Pub.L. 104–208, Div. C, Title III, § 333, Sept. 30, 1996, 110 Stat. 3009–634, provided:</p><p>“<strong>Sec. 333. Penalties for Conspiring with or Assisting an Alien to Commit an Offense Under the Controlled Substances Import and Export Act.</strong></p><p><strong>(a) Review of Guidelines.—</strong>Not later than 6 months after the date of the enactment of this Act, the United States Sentencing Commission shall conduct a review of the guidelines applicable to an offender who conspires with, or aids or abets, a person who is not a citizen or national of the United States in committing any offense under section 1010 of the Controlled Substance Import and Export Act (21 U.S.C. 960).</p><p><strong>(b) Revision of Guidelines.—</strong>Following such review, pursuant to section 994(p) of title 28, United States Code, the Commission shall promulgate sentencing guidelines or amend existing sentencing guidelines to ensure an appropriately stringent sentence for such offenders.”</p><p><strong>FAILURE TO DEPART, ILLEGAL REENTRY, AND PASSPORT AND VISA FRAUD.</strong> Pub. L. 104–208, Div. C, Title III, § 334, Sept. 30, 1996, 110 Stat. 3009–635, provided:</p><p>“<strong>Sec. 334. Enhanced Penalties for Failure to Depart, Illegal Reentry, and Passport and Visa Fraud.</strong></p><p><strong>(a) Failing to Depart.—</strong>The United States Sentencing Commission shall promptly promulgate, pursuant to section 994 of title 28, United States Code, amendments to the sentencing guidelines to make appropriate increases in the base offense level for offenses under section 242(e) and 276(b) of the Immigration and Nationality Act (8 U.S.C. 1252(e) and 1326(b)) to reflect the amendments made by section 130001 of the Violent Crime Control and Law Enforcement Act of 1994.</p><p><strong>(b) Passport and Visa Offenses.—</strong>The United States Sentencing Commission shall promptly promulgate, pursuant to section 994 of title 28, United States Code, amendments to the sentencing guidelines to make appropriate increases in the base offense level for offenses under chapter 75 of title 18, United States Code, to reflect the amendments made by section 130009 of the Violent Crime Control and Law Enforcement Act of 1994.”</p><p>* * *</p>\"},{\"id\":\"PUB.L.104–237\",\"content\":\"<p><strong>COMPREHENSIVE METHAMPHETAMINE CONTROL ACT OF 1996</strong></p><p><strong>(PUB. L. 104–237)</strong></p><p><strong>METHAMPHETAMINE MANUFACTURING.</strong> Pub.L. 104–237, Title II, § 203(b), Oct. 3, 1996, 110 Stat. 3102, provided:</p><p>“<strong>(b) Sentencing Commission.—</strong>The United States Sentencing Commission shall amend the sentencing guidelines to ensure that the manufacture of methamphetamine in violation of section 403(d)(2) of the Controlled Substances Act [21 U.S.C. § 843(d)(2)], as added by subsection (a), is treated as a significant violation.”</p><p><strong>METHAMPHETAMINE OFFENSES.</strong> Pub.L. 104–237, Title II, § 301, Oct. 3, 1996, 110 Stat. 3105, provided:</p><p>“<strong>Sec. 301. Penalty Increases for Trafficking in Methamphetamine.</strong></p><p><strong>(a) Directive to the United States Sentencing Commission.—</strong>Pursuant to its authority under section 994 of title 28, United States Code, the United States Sentencing Commission shall review and amend its guidelines and its policy statements to provide for increased penalties for unlawful manufacturing, importing, exporting, and trafficking of methamphetamine, and other similar offenses, including unlawful possession with intent to commit any of those offenses, and attempt and conspiracy to commit any of those offenses. The Commission shall submit to Congress explanations therefor and any additional policy recommendations for combating methamphetamine offenses.</p><p><strong>(b) In General.—</strong>In carrying out this section, the Commission shall ensure that the sentencing guidelines and policy statements for offenders convicted of offenses described in subsection (a) and any recommendations submitted under such subsection reflect the heinous nature of such offenses, the need for aggressive law enforcement action to fight such offenses, and the extreme dangers associated with unlawful activity involving methamphetamine, including—</p><blockquote><p><strong>(1)</strong> the rapidly growing incidence of methamphetamine abuse and the threat to public safety such abuse poses;</p><p><strong>(2)</strong> the high risk of methamphetamine addiction;</p><p><strong>(3)</strong> the increased risk of violence associated with methamphetamine trafficking and abuse; and</p><p><strong>(4)</strong> the recent increase in the illegal importation of methamphetamine and precursor chemicals.”</p></blockquote><p><strong>LIST I CHEMICAL OFFENSES.</strong> Pub.L. 104–237, Title II, § 302(c), Oct. 3, 1996, 110 Stat. 3105, provided:</p><p>“<strong>(c) Sentencing Guidelines.—</strong></p><blockquote><p><strong>(1) In General.—</strong>The United States Sentencing Commission shall, in accordance with the procedures set forth in section 21(a) of the Sentencing Act of 1987, as though the authority of that section had not expired, amend the sentencing guidelines to increase by at least two levels the offense level for offenses involving list I chemicals under—</p><p><strong>(A)</strong> section 401(d)(1) and (2) of the Controlled Substances Act (21 U.S.C. 841(d)(1) and (2)); and</p><p><strong>(B)</strong> section 1010(d)(1) and (3) of the Controlled Substance Import and Export Act (21 U.S.C. 960(d)(1) and (3)).</p><p><strong>(2) Requirement.—</strong>In carrying out this subsection, the Commission shall ensure that the offense levels for offenses referred to in paragraph (1) are calculated proportionally on the basis of the quantity of controlled substance that reasonably could have been manufactured in a clandestine setting using the quantity of the list I chemical possessed, distributed, imported, or exported.”</p></blockquote><p><strong>DANGEROUS HANDLING OF CONTROLLED SUBSTANCES.</strong> Pub.L. 104–237, Title III, § 303, Oct. 3, 1996, 110 Stat. 3106, provided:</p><p>“<strong>Sec. 303. Enhanced Penalty for Dangerous Handling of Controlled Substances; Amendment of Sentencing Guidelines.</strong></p><p><strong>(a) In General.—</strong>Pursuant to its authority under section 994 of title 28, United States Code, the United States Sentencing Commission shall determine whether the Sentencing Guidelines adequately punish the offenses described in subsection (b) and, if not, promulgate guidelines or amend existing guidelines to provide an appropriate enhancement of the punishment for a defendant convicted of such an offense.</p><p><strong>(b) Offense.—</strong>The offense referred to in subsection (a) is a violation of section 401(d), 401(g)(1), 403(a)(6), or 403(a)(7) of the Controlled Substances Act (21 U.S.C. 841(d), 841(g)(1), 843(a)(6), and 843(a)(7)), in cases in which in the commission of the offense the defendant violated—</p><blockquote><p><strong>(1)</strong> subsection (d) or (e) of section 3008 of the Solid Waste Disposal Act (relating to handling hazardous waste in a manner inconsistent with Federal or applicable State law);</p><p><strong>(2)</strong> section 103(b) of the Comprehensive Environmental Response, Compensation and Liability Act (relating to failure to notify as to the release of a reportable quantity of a hazardous substance into the environment);</p><p><strong>(3)</strong> section 301(a), 307(d), 309(c)(2), 309(c)(3), 311(b)(3), or 311(b)(5) of the Federal Water Pollution Control Act (relating to the unlawful discharge of pollutants or hazardous substances, the operation of a source in violation of a pretreatment standard, and the failure to notify as to the release of a reportable quantity of a hazardous substance into the water); or</p><p><strong>(4)</strong> section 5124 of title 49, United States Code (relating to violations of laws and regulations enforced by the Department of Transportation with respect to the transportation of hazardous material).”</p></blockquote><p>* * *</p>\"},{\"id\":\"PUB.L.104–294\",\"content\":\"<p><strong>ECONOMIC ESPIONAGE ACT OF 1996</strong></p><p><strong>(PUB. L. 104–294)</strong></p><p><strong>ANNUAL REPORT ON USE OF CERTAIN TECHNOLOGY TO FACILITATE CRIMINAL CONDUCT.</strong> Pub.L. 104–294, Title V, § 501, Oct. 11, 1996, 110 Stat. 3497 [also classified to 18 U.S.C. § 3552 note], provided:</p><p>“<strong>Sec. 501. Use of Certain Technology to Facilitate Criminal Conduct.</strong></p><p><strong>(a) Information.—</strong>The Administrative Office of the United States courts shall establish policies and procedures for the inclusion in all presentence reports of information that specifically identifies and describes any use of encryption or scrambling technology that would be relevant to an enhancement under section 3C1.1 (dealing with Obstructing or Impeding the Administration of Justice) of the Sentencing Guidelines or to offense conduct under the Sentencing Guidelines.</p><p><strong>(b) Compiling and Report.—</strong>The United States Sentencing Commission shall—</p><blockquote><p><strong>(1)</strong> compile and analyze any information contained in documentation described in subsection (a) relating to the use of encryption or scrambling technology to facilitate or conceal criminal conduct; and</p><p><strong>(2)</strong> based on the information compiled and analyzed under paragraph (1), annually report to the Congress on the nature and extent of the use of encryption or scrambling technology to facilitate or conceal criminal conduct.”</p></blockquote><p>* * *</p>\"},{\"id\":\"PUB.L.104–305\",\"content\":\"<p><strong>DRUG-INDUCED RAPE PREVENTION AND PUNISHMENT ACT OF 1996</strong></p><p><strong>(PUB. L. 104–305)</strong></p><p><strong>FLUNITRAZEPAM OFFENSES.</strong> Pub. L. 104– 305, § 2(b)(3), Oct. 13, 1996, 110 Stat. 3808, provided:</p><p>“<strong>(3) Sentencing guidelines.—</strong></p><blockquote><p><strong>(A) Amendment of sentencing guidelines.—</strong>Pursuant to its authority under section 994 of title 28, United States Code, the United States Sentencing Commission shall review and amend, as appropriate, the sentencing guidelines for offenses involving flunitrazepam.</p><p><strong>(B) Summary.—</strong>The United States Sentencing Commission shall submit to the Congress—</p><p><strong>(i)</strong> a summary of its review under subparagraph (A); and</p><p><strong>(ii)</strong> an explanation for any amendment to the sentencing guidelines made under subparagraph (A).</p><p><strong>(C) Serious nature of offenses.—</strong>In carrying out this paragraph, the United States Sentencing Commission shall ensure that the sentencing guidelines for offenses involving flunitrazepam reflect the serious nature of such offenses.”</p></blockquote><p>* * *</p>\"},{\"id\":\"PUB.L.105–101\",\"content\":\"<p><strong>VETERANS’ CEMETERY PROTECTION ACT OF 1997</strong></p><p><strong>(PUB. L. 105–101)</strong></p><p><strong>NATIONAL CEMETERY PROPERTY OFFENSES.</strong> Pub.L. 105–101, § 2, November 19, 1997, 111 Stat. 2202, provided:</p><p>“<strong>Sec. 2. Sentencing for Offenses Against Property at National Cemeteries.</strong></p><p><strong>(a) In General.</strong>—Pursuant to its authority under section 994 of title 28, United States Code, the United States Sentencing Commission shall review and amend the Federal sentencing guidelines to provide a sentencing enhancement of not less than 2 levels for any offense against the property of a national cemetery.</p><p><strong>(b) Commission Duties.</strong>—In carrying out subsection (a), the Sentencing Commission shall ensure that the sentences, guidelines, and policy statements for offenders convicted of an offense described in that subsection are—</p><blockquote><p><strong>(1)</strong> appropriately severe; and</p><p><strong>(2)</strong> reasonably consistent with other relevant directives and with other Federal sentencing guidelines.”</p></blockquote><p>* * *</p>\"},{\"id\":\"PUB.L.105–147\",\"content\":\"<p><strong>NO ELECTRONIC THEFT (NET) ACT</strong></p><p><strong>(PUB. L. 105–147)</strong></p><p><strong>INTELLECTUAL PROPERTY OFFENSES.</strong> Pub. L. 105–147, § 2(g), Dec. 16, 1997, 111 Stat. 2678, provided:</p><p>“<strong>(g)</strong> <strong>Directive to Sentencing Commission.—(1)</strong> Under the authority of the Sentencing Reform Act of 1984 (Public Law 98–473; 98 Stat.1987) and section 21 of the Sentencing Act of 1987 (Public Law 100–182; 101 Stat. 1271; 18 U.S.C. 994 note) (including the authority to amend the sentencing guidelines and policy statements), the United States Sentencing Commission shall ensure that the applicable guideline range for a defendant convicted of a crime against intellectual property (including offenses set forth at section 506(a) of title 17, United States Code, and sections 2319, 2319A, and 2320 of title 18, United States Code) is sufficiently stringent to deter such a crime and to adequately reflect the additional considerations set forth in paragraph (2) of this subsection.</p><p><strong>(2)</strong> In implementing paragraph (1), the Sentencing Commission shall ensure that the guidelines provide for consideration of the retail value and quantity of the items with respect to which the crime against intellectual property was committed.”</p><p>* * *</p>\"},{\"id\":\"PUB.L.105–172\",\"content\":\"<p><strong>WIRELESS TELEPHONE PROTECTION ACT</strong></p><p><strong>(PUB. L. 105–172)</strong></p><p><strong>WIRELESS TELEPHONE CLONING.</strong> Pub.L. 105–172, § 2(e), Apr. 24, 1998, 112 Stat. 55, provided:</p><p>“<strong>(e) Amendment of Federal Sentencing Guidelines for Wireless Telephone Cloning.—</strong></p><blockquote><p><strong>(1) In general.</strong>—Pursuant to its authority under section 994 of title 28, United States Code, the United States Sentencing Commission shall review and amend the Federal sentencing guidelines and the policy statements of the Commission, if appropriate, to provide an appropriate penalty for offenses involving the cloning of wireless telephones (including offenses involving an attempt or conspiracy to clone a wireless telephone).</p><p><strong>(2)</strong> <strong>Factors for consideration.—</strong> In carrying out this subsection, the Commission shall consider, with respect to the offenses described in paragraph (1)—</p><p><strong>(A)</strong> the range of conduct covered by the offenses;</p><p><strong>(B)</strong> the existing sentences for the offenses;</p><p><strong>(C)</strong> the extent to which the value of the loss caused by the offenses (as defined in the Federal sentencing guidelines) is an adequate measure for establishing penalties under the Federal sentencing guidelines;</p><p><strong>(D)</strong> the extent to which sentencing enhancements within the Federal sentencing guidelines and the court’s authority to sentence above the applicable guideline range are adequate to ensure punishment at or near the maximum penalty for the most egregious conduct covered by the offenses;</p><p><strong>(E)</strong> the extent to which the Federal sentencing guideline sentences for the offenses have been constrained by statutory maximum penalties;</p><p><strong>(F)</strong> the extent to which Federal sentencing guidelines for the offenses adequately achieve the purposes of sentencing set forth in section 3553(a)(2) of title 18, United States Code;</p><p><strong>(G)</strong> the relationship of Federal sentencing guidelines for the offenses to the Federal sentencing guidelines for other offenses of comparable seriousness; and</p><p><strong>(H)</strong> any other factor that the Commission considers to be appropriate.”</p></blockquote><p>* * *</p>\"},{\"id\":\"PUB.L.105–184\",\"content\":\"<p><strong>TELEMARKETING FRAUD PROTECTION ACT OF 1998</strong></p><p><strong>(PUB. L. 105–184)</strong></p><p><strong>TELEMARKETING FRAUD (SECTION 2326 OFFENSES).</strong> Pub.L. 105–184, § 6, June 23, 1998, 112 Stat. 520, provided:</p><p>“<strong>Sec. 6. Amendment of Federal Sentencing Guidelines.</strong></p><p><strong>(a) Definition of Telemarketing</strong>.—In this section, the term “telemarketing” has the meaning given that term in section 2326 of title 18, United States Code.</p><p><strong>(b) Directive to Sentencing Commission</strong>.—Pursuant to its authority under section 994(p) of title 28, United States Code, and in accordance with this section, the United States Sentencing Commission shall–</p><blockquote><p><strong>(1)</strong> promulgate Federal sentencing guidelines or amend existing sentencing guidelines (and policy statements, if appropriate) to provide for substantially increased penalties for persons convicted of offenses described in section 2326 of title 18, United States Code, as amended by this Act, in connection with the conduct of telemarketing; and</p><p><strong>(2)</strong> submit to Congress an explanation of each action taken under paragraph (1) and any additional policy recommendations for combating the offenses described in that paragraph.</p></blockquote><p><strong>(c) Requirements.</strong>—In carrying out this section, the Commission shall—</p><blockquote><p><strong>(1)</strong> ensure that the guidelines and policy statements promulgated or amended pursuant to subsection (b)(1) and any recommendations submitted thereunder reflect the serious nature of the offenses;</p><p><strong>(2)</strong> provide an additional appropriate sentencing enhancement, if the offense involved sophisticated means, including but not limited to sophisticated concealment efforts, such as perpetrating the offense from outside the United States;</p><p><strong>(3)</strong> provide an additional appropriate sentencing enhancement for cases in which a large number of vulnerable victims, including but not limited to victims described in section 2326(2) of title 18, United States Code, are affected by a fraudulent scheme or schemes;</p><p><strong>(4)</strong> ensure that guidelines and policy statements promulgated or amended pursuant to subsection (b)(1) are reasonably consistent with other relevant statutory directives to the Commission and with other guidelines;</p><p><strong>(5)</strong> account for any aggravating or mitigating circumstances that might justify upward or downward departures;</p><p><strong>(6)</strong> ensure that the guidelines adequately meet the purposes of sentencing as set forth in section 3553(a)(2) of title 18, United States Code; and</p><p><strong>(7)</strong> take any other action the Commission considers necessary to carry out this section.</p></blockquote><p><strong>(d) Emergency Authority</strong>.—The Commission shall promulgate the guidelines or amendments provided for under this subsection as soon as practicable, and in any event not later than 120 days after the date of the enactment of the Telemarketing Fraud Prevention Act of 1998, in accordance with the procedures set forth in section 21(a) of the Sentencing Reform Act of 1987, as though the authority under that authority had not expired, except that the Commission shall submit to Congress the emergency guidelines or amendments promulgated under this section, and shall set an effective date for those guidelines or amendments not earlier than 30 days after their submission to Congress.”</p><p>* * *</p>\"},{\"id\":\"PUB.L.105–314\",\"content\":\"<p><strong>PROTECTION OF CHILDREN FROM SEXUAL PREDATORS ACT OF 1998</strong></p><p><strong>(PUB. L. 105–314)</strong></p><p><strong>SEXUAL OFFENSES AGAINST CHILDREN AND REPEAT SEXUAL OFFENDERS.</strong> Pub.L. 105–314, Title V, Oct. 30, 1998, 112 Stat. 2980 provided:</p><p>“<strong>TITLE V—INCREASED PENALTIES FOR OFFENSES AGAINST CHILDREN</strong></p><p><strong>AND FOR REPEAT OFFENDERS</strong></p><p>“<strong>Sec. 501. Death or Life in Prison for Certain Offenses Whose Victims Are Children.</strong></p><p>[omitted]</p><p>“<strong>Sec. 502. Sentencing Enhancement for Chapter 117 Offenses.</strong></p><p><strong>(a)</strong> <strong>In General</strong>.—Pursuant to its authority under section 994(p) of title 28, United States Code, the United States Sentencing Commission shall review and amend the Federal Sentencing Guidelines to provide a sentencing enhancement for offenses under chapter 117 [18 U.S.C.A. § 2421 et seq.] of title 18, United States Code.</p><p><strong>(b)</strong> <strong>Instruction to Commission</strong>.—In carrying out subsection (a), the United States Sentencing Commission shall ensure that the sentences, guidelines, and policy statements for offenders convicted of offenses described in subsection (a) are appropriately severe and reasonably consistent with other relevant directives and with other Federal Sentencing Guidelines.</p><p>“<strong>Sec. 503. Increased Penalties for Use of a Computer in the Sexual Abuse or Exploitation of a Child.</strong></p><p>Pursuant to its authority under section 994(p) of title 28, United States Code, the United States Sentencing Commission shall—</p><blockquote><p><strong>(1)</strong> review the Federal Sentencing Guidelines for—</p><p><strong>(A)</strong> aggravated sexual abuse under section 2241 of title 18, United States Code;</p><p><strong>(B)</strong> sexual abuse under section 2242 of title 18, United States Code;</p><p><strong>(C)</strong> sexual abuse of a minor or ward under section 2243 of title 18, United States Code; and</p><p><strong>(D)</strong> coercion and enticement of a minor under section 2422(b) of title 18, United States Code, contacting a minor under section 2422(c) of title 18, United States Code, and transportation of minors and travel under section 2423 of title 18, United States Code; and</p><p><strong>(2)</strong> upon completion of the review under paragraph (1), promulgate amendments to the Federal Sentencing Guidelines to provide appropriate enhancement if the defendant used a computer with the intent to persuade, induce, entice, coerce, or facilitate the transport of a child of an age specified in the applicable provision of law referred to in paragraph (1) to engage in any prohibited sexual activity.</p></blockquote><p>“<strong>Sec. 504. Increased Penalties for Knowing Misrepresentation in the Sexual Abuse or Exploitation of a Child.</strong></p><p>Pursuant to its authority under section 994(p) of title 28, United States Code, the United States Sentencing Commission shall—</p><blockquote><p><strong>(1)</strong> review the Federal Sentencing Guidelines on aggravated sexual abuse under section 2241 of title 18, United States Code, sexual abuse under section 2242 of title 18, United States Code, sexual abuse of a minor or ward under section 2243 of title 18, United States Code, coercion and enticement of a minor under section 2422(b) of title 18, United States Code, contacting a minor under section 2422(c) of title 18, United States Code, and transportation of minors and travel under section 2423 of title 18, United States Code; and</p><p><strong>(2)</strong> upon completion of the review under paragraph (1), promulgate amendments to the Federal Sentencing Guidelines to provide appropriate enhancement if the defendant knowingly misrepresented the actual identity of the defendant with the intent to persuade, induce, entice, coerce, or facilitate the transport of a child of an age specified in the applicable provision of law referred to in paragraph (1) to engage in a prohibited sexual activity.</p></blockquote><p>“<strong>Sec. 505. Increased Penalties for Pattern of Activity of Sexual Exploitation of Children.</strong></p><p>Pursuant to its authority under section 994(p) of title 28, United States Code, the United States Sentencing Commission shall—</p><blockquote><p><strong>(1)</strong> review the Federal Sentencing Guidelines on aggravated sexual abuse under section 2241 of title 18, United States Code, sexual abuse under section 2242 of title 18, United States Code, sexual abuse of a minor or ward under section 2243 of title 18, United States Code, coercion and enticement of a minor under section 2422(b) of title 18, United States Code, contacting a minor under section 2422(c) of title 18, United States Code, and transportation of minors and travel under section 2423 of title 18, United States Code; and</p><p><strong>(2)</strong> upon completion of the review under paragraph (1), promulgate amendments to the Federal Sentencing Guidelines to increase penalties applicable to the offenses referred to in paragraph (1) in any case in which the defendant engaged in a pattern of activity involving the sexual abuse or exploitation of a minor.</p></blockquote><p>“<strong>Sec. 506. Clarification of Definition of Distribution of Pornography.</strong></p><p>Pursuant to its authority under section 994(p) of title 28, United States Code, the United States Sentencing Commission shall—</p><blockquote><p><strong>(1)</strong> review the Federal Sentencing Guidelines relating to the distribution of pornography covered under chapter 110 of title 18, United States Code [18 U.S.C.A. § 2251 et seq.], relating to the sexual exploitation and other abuse of children; and</p><p><strong>(2)</strong> upon completion of the review under paragraph (1), promulgate such amendments to the Federal Sentencing Guidelines as are necessary to clarify that the term ‘distribution of pornography’ applies to the distribution of pornography—</p><p><strong>(A)</strong> for monetary remuneration; or</p><p><strong>(B)</strong> for a nonpecuniary interest.</p></blockquote><p>“<strong>Sec. 507. Directive to the United States Sentencing Commission.</strong></p><p>In carrying out this title, the United States Sentencing Commission shall—</p><blockquote><p><strong>(1)</strong> with respect to any action relating to the Federal Sentencing Guidelines subject to this title, ensure reasonable consistency with other guidelines of the Federal Sentencing Guidelines; and</p><p><strong>(2)</strong> with respect to an offense subject to the Federal Sentencing Guidelines, avoid duplicative punishment under the Federal Sentencing Guidelines for substantially the same offense.”</p></blockquote><p>* * *</p>\"},{\"id\":\"PUB.L.105–318\",\"content\":\"<p><strong>IDENTITY THEFT AND ASSUMPTION </strong></p><p><strong>DETERRENCE ACT OF 1998</strong></p><p><strong>(PUB. L. 105–318)</strong></p><p><strong>IDENTITY THEFT AND DOCUMENT FRAUD (SECTION 1028 OFFENSES).</strong> Pub.L. 105–318, § 4, Oct. 30, 1998, 112 Stat. 3009, provided:</p><p>“<strong>Sec. 4. Amendment of Federal Sentencing Guidelines for Offenses Under Section 1028.</strong></p><p><strong>(a) In general.—</strong>Pursuant to its authority under section 994(p) of title 28, United States Code, the United States Sentencing Commission shall review and amend the Federal sentencing guidelines and the policy statements of the Commission, as appropriate, to provide an appropriate penalty for each offense under section 1028 of title 18, United States Code, as amended by this Act.</p><p><strong>(b)</strong> <strong>Factors for consideration.—</strong>In carrying out subsection (a), the United States Sentencing Commission shall consider, with respect to each offense described in subsection (a)—</p><blockquote><p><strong>(1)</strong> the extent to which the number of victims (as defined in section 3663A(a) of title 18, United States Code) involved in the offense, including harm to reputation, inconvenience, and other difficulties resulting from the offense, is an adequate measure for establishing penalties under the Federal sentencing guidelines;</p><p><strong>(2)</strong> the number of means of identification, identification documents, or false identification documents (as those terms are defined in section 1028(d) of title 18, United States Code, as amended by this Act) involved in the offense, is an adequate measure for establishing penalties under the Federal sentencing guidelines;</p><p><strong>(3)</strong> the extent to which the value of the loss to any individual caused by the offense is an adequate measure for establishing penalties under the Federal sentencing guidelines;</p><p><strong>(4)</strong> the range of conduct covered by the offense;</p><p><strong>(5)</strong> the extent to which sentencing enhancements within the Federal sentencing guidelines and the court’s authority to sentence above the applicable guideline range are adequate to ensure punishment at or near the maximum penalty for the most egregious conduct covered by the offense;</p><p><strong>(6)</strong> the extent to which Federal sentencing guidelines sentences for the offense have been constrained by statutory maximum penalties;</p><p><strong>(7)</strong> the extent to which Federal sentencing guidelines for the offense adequately achieve the purposes of sentencing set forth in section 3553(a)(2) of title 18, United States Code; and</p><p><strong>(8)</strong> any other factor that the United States Sentencing Commission considers to be appropriate.”</p></blockquote><p>* * *</p>\"},{\"id\":\"PUB.L.106–160\",\"content\":\"<p><strong>DIGITAL THEFT DETERRENCE AND </strong></p><p><strong>COPYRIGHT DAMAGES IMPROVEMENT ACT OF 1999</strong></p><p><strong>(PUB. L. 106–160)</strong></p><p><strong>INTELLECTUAL PROPERTY OFFENSES.</strong> Pub. L. 106–160, § 3, Dec. 9, 1999, 113 Stat. 1774, provided:</p><p>“<strong>Sec. 3. Sentencing Commission Guidelines.</strong></p><p>Within 120 days after the date of the enactment of this Act [Dec. 9, 1999], or within 120 days after the first date on which there is a sufficient number of voting members of the Sentencing Commission to constitute a quorum, whichever is later, the Commission shall promulgate emergency guideline amendments to implement section 2(g) of the No Electronic Theft (NET) Act (29 U.S.C. 994 note<a href='#fn4' class='footnoteRef' id='fnref4'><sup>4</sup></a>) in accordance with the procedures set forth in section 21(a) of the Sentencing Act of 1987 [28 U.S.C. 994 note], as though the authority under that Act had not expired.”</p><p>* * *</p>\"},{\"id\":\"PUB.L.106–310\",\"content\":\"<p><strong>CHILDREN’S HEALTH ACT OF 2000</strong></p><p><strong>or</strong></p><p><strong>METHAMPHETAMINE ANTI-PROLIFERATION ACT OF 2000</strong></p><p><strong>(PUB. L. 106–310)</strong></p><p><strong>AMPHETAMINE OFFENSES.</strong> Pub. L. 106–310, Div. B, Title XXXVI, § 3611, Oct. 17, 2000, 114 Stat. 1228, provided:</p><p>“<strong>Sec. 3611. Enhanced Punishment of Amphetamine Laboratory Operators.</strong></p><p><strong>(a)</strong> <strong>Amendment to Federal Sentencing Guidelines.</strong>—Pursuant to its authority under section 994(p) of title 28, United States Code, the United States Sentencing Commission shall amend the Federal sentencing guidelines in accordance with this section with respect to any offense relating to the manufacture, importation, exportation, or trafficking in amphetamine (including an attempt or conspiracy to do any of the foregoing) in violation of—</p><blockquote><p><strong>(1)</strong> the Controlled Substances Act (21 U.S.C. 801 et seq.);</p><p><strong>(2)</strong> the Controlled Substances Import and Export Act (21 U.S.C. 951 et seq.); or</p><p><strong>(3)</strong> the Maritime Drug Law Enforcement Act (46 U.S.C. App. 1901 et seq.).</p></blockquote><p><strong>(b)</strong> <strong>General Requirement.</strong>—In carrying out this section, the United States Sentencing Commission shall, with respect to each offense described in subsection (a) relating to amphetamine—</p><blockquote><p><strong>(1)</strong> review and amend its guidelines to provide for increased penalties such that those penalties are comparable to the base offense level for methamphetamine; and</p><p><strong>(2)</strong> take any other action the Commission considers necessary to carry out this subsection.</p></blockquote><p><strong>(c)</strong> <strong>Additional requirements</strong>.—In carrying out this section, the United States Sentencing Commission shall ensure that the sentencing guidelines for offenders convicted of offenses described in subsection (a) reflect the heinous nature of such offenses, the need for aggressive law enforcement action to fight such offenses, and the extreme dangers associated with unlawful activity involving amphetamines, including—</p><blockquote><p><strong>(1)</strong> the rapidly growing incidence of amphetamine abuse and the threat to public safety that such abuse poses;</p><p>(<strong>2)</strong> the high risk of amphetamine addiction;</p><p><strong>(3)</strong> the increased risk of violence associated with amphetamine trafficking and abuse; and</p><p><strong>(4)</strong> the recent increase in the illegal importation of amphetamine and precursor chemicals.</p></blockquote><p><strong>(d)</strong> <strong>Emergency</strong> <strong>Authority</strong> <strong>to Sentencing Commission.</strong>—The United States Sentencing Commission shall promulgate amendments pursuant to this section as soon as practicable after the date of the enactment of this Act in accordance with the procedure set forth in section 21(a) of the Sentencing Act of 1987 (Public Law 100–182), as though the authority under that Act had not expired.”</p><p><strong>MANUFACTURE OF AMPHETAMINE OR METHAMPHETAMINE.</strong> Pub. L. 106–310, Div. B, Title XXXVI, § 3612, Oct. 12, 2000, 114 Stat. 1228, provided:</p><p>“<strong>Sec. 3612. Enhanced Punishment of Amphetamine or Methamphetamine Laboratory Operators.</strong></p><p><strong>(a) Federal Sentencing Guidelines.</strong>—</p><blockquote><p><strong>(1) In General.</strong>—Pursuant to its authority under section 994(p) of title 28, United States Code, the United States Sentencing Commission shall amend the Federal sentencing guidelines in accordance with paragraph (2) with respect to any offense relating to the manufacture, attempt to manufacture, or conspiracy to manufacture amphetamine or methamphetamine in violation of—</p><p><strong>(A)</strong> the Controlled Substances Act (21 U.S.C. 801 et seq.);</p><p><strong>(B)</strong> the Controlled Substances Import and Export Act (21 U.S.C. 951 et seq.); or</p><p>(<strong>C)</strong> the Maritime Drug Law Enforcement Act (46 U.S.C. App. 1901 et seq.).</p><p><strong>(2) Requirements.</strong>—In carrying out this paragraph, the United States Sentencing Commission shall—</p><p><strong>(A)</strong> if the offense created a substantial risk of harm to human life (other than a life described in subparagraph (B)) or the environment, increase the base offense level for the offense—</p><p><strong>(i)</strong> by not less than 3 offense levels above the applicable level in effect on the date of the enactment of this Act; or</p><p><strong>(ii)</strong> if the resulting base offense level after an increase under clause (i) would be less than level 27, to not less than level 27; or</p><p><strong>(B)</strong> if the offense created a substantial risk of harm to the life of a minor or incompetent, increase the base offense level for the offense—</p><p><strong>(i)</strong> by not less than 6 offense levels above the applicable level in effect on the date of the enactment of this Act; or</p><p><strong>(ii)</strong> if the resulting base offense level after an increase under clause (i) would be less than level 30, to not less than level 30.</p><p><strong>(3)</strong> <strong>Emergency</strong> <strong>authority</strong> <strong>to</strong> <strong>Sentencing</strong> <strong>Commission.</strong>—The United States Sentencing Commission shall promulgate amendments pursuant to this subsection as soon as practicable after the date of the enactment of this Act in accordance with the procedure set forth in section 21(a) of the Sentencing Act of 1987 (Public Law 100–182), as though the authority under that Act had not expired.</p></blockquote><p><strong>(b)</strong> <strong>Effective</strong> <strong>date</strong>.—The amendments made pursuant to this section shall apply with respect to any offense occurring on or after the date that is 60 days after the date of the enactment of this Act.”</p><p><strong>TRAFFICKING IN LIST I CHEMICALS.</strong> Pub. L. 106–310, Div. B, Title XXXVI, § 3651, Oct. 17, 2000, 1143 Stat. 1238, provided:</p><p>“<strong>Sec. 3651. Enhanced Punishment for Trafficking in List I Chemicals.</strong></p><p><strong>(a) Amendments to Federal Sentencing Guidelines.</strong>—Pursuant to its authority under section 994(p) of title 28, United States Code, the United States Sentencing Commission shall amend the Federal sentencing guidelines in accordance with this section with respect to any violation of paragraph (1) or (2) of section 401(d) of the Controlled Substances Act (21 U.S.C. 841(d)) involving a list I chemical and any violation of paragraph (1) or (3) of section 1010(d) of the Controlled Substance Import and Export Act (21 U.S.C. 960(d)) involving a list I chemical.</p><p><strong>(b)</strong> <strong>Ephedrine, Phenylpropanolamine, and Pseudoephedrine.</strong>—</p><blockquote><p><strong>(1)</strong> <strong>In general.</strong>—In carrying this section, the United States Sentencing Commission shall, with respect to each offense described in subsection (a) involving ephedrine, phenylpropanolamine, or pseudoephedrine (including their salts, optical isomers, and salts of optical isomers), review and amend its guidelines to provide for increased penalties such that those penalties corresponded to the quantity of controlled substance that could reasonably have been manufactured using the quantity of ephedrine, phenylpropanolamine, or pseudoephedrine possessed or distributed.</p><p><strong>(2) Conversion ratios.</strong>—For the purposes of the amendments made by this subsection, the quantity of controlled substance that could reasonably have been manufactured shall be determined by using a table of manufacturing conversion ratios for ephedrine, phenylpropanolamine, and pseudoephedrine, which table shall be established by the Sentencing Commission based on scientific, law enforcement, and other data the Sentencing Commission considers appropriate.</p></blockquote><p><strong>(c)</strong> <strong>Other List I Chemicals.</strong>—In carrying this section, the United States Sentencing Commission shall, with respect to each offense described in subsection (a) involving any list I chemical other than ephedrine, phenylpropanolamine, or pseudoephedrine, review and amend its guidelines to provide for increased penalties such that those penalties reflect the dangerous nature of such offenses, the need for aggressive law enforcement action to fight such offenses, and the extreme dangers associated with unlawful activity involving methamphetamine and amphetamine, including—</p><blockquote><p><strong>(1)</strong> the rapidly growing incidence of controlled substance manufacturing;</p><p><strong>(2)</strong> the extreme danger inherent in manufacturing controlled substances;</p><p><strong>(3)</strong> the threat to public safety posed by manufacturing controlled substances; and</p><p><strong>(4)</strong> the recent increase in the importation, possession, and distribution of list I chemicals for the purpose of manufacturing controlled substances.</p></blockquote><p><strong>(d) Emergency Authority to Sentencing Commission.</strong>—The United States Sentencing Commission shall promulgate amendments pursuant to this section as soon as practicable after the date of the enactment of this Act in accordance with the procedure set forth in section 21(a) of the Sentencing Act of 1987 (Public Law 100–182), as though the authority under that Act had not expired.”</p><p><strong>ECSTASY OFFENSES.</strong> Pub. L. 106–310, Div. B, Title XXXVI, § 3661, 3663, 3664, Oct. 17, 2000, 114 Stat. 1242, provided:</p><p>“<strong>Subtitle C—Ecstasy Anti-Proliferation Act of 2000</strong></p><p>“<strong>Sec. 3661. Short title.</strong></p><p>This subtitle may be cited as the ‘Ecstasy Anti-Proliferation Act of 2000’.</p><p>“<strong>Sec. 3662. Findings.</strong></p><p>[omitted]</p><p>“<strong>Sec. 3663. Enhanced Punishment of Ecstasy Traffickers.</strong></p><p><strong>(a) Amendment to Federal Sentencing Guidelines.</strong>—Pursuant to its authority under section 994(p) of title 28, United States Code, the United States Sentencing Commission (referred to in this section as the ‘Commission’) shall amend the Federal sentencing guidelines regarding any offense relating to the manufacture, importation, or exportation of, or trafficking in—</p><blockquote><p><strong>(1)</strong> 3,4-methylenedioxy methamphetamine;</p><p><strong>(2)</strong> 3,4-methylenedioxy amphetamine;</p><p><strong>(3)</strong> 3,4-methylenedioxy-N-ethylamphetamine;</p><p><strong>(4)</strong> paramethoxymethamphetamine (PMA); or</p><p><strong>(5)</strong> any other controlled substance, as determined by the Commission in consultation with the Attorney General, that is marketed as Ecstasy and that has either a chemical structure substantially similar to that of 3,4- methylenedioxy methamphetamine or an effect on the central nervous system substantially similar to or greater than that of 3,4-methylenedioxy methamphetamine, including an attempt or conspiracy to commit an offense described in paragraph (1), (2), (3), (4), or (5) in violation of the Controlled Substances Act (21 U.S.C. 801 et seq.), the Controlled Substances Import and Export Act (21 U.S.C. 951 et seq.), or the Maritime Drug Law Enforcement Act (46 U.S.C. 1901 et seq.).</p></blockquote><p><strong>(b) General</strong> <strong>Requirements</strong>.—In carrying out this section, the Commission shall, with respect to each offense described in subsection (a)—</p><blockquote><p><strong>(1)</strong> review and amend the Federal sentencing guidelines to provide for increased penalties such that those penalties reflect the seriousness of these offenses and the need to deter them; and</p><p><strong>(2)</strong> take any other action the Commission considers to be necessary to carry out this section.</p></blockquote><p><strong>(c)</strong> <strong>Additional</strong> <strong>Requirements</strong>.—In carrying out this section, the Commission shall ensure that the Federal sentencing guidelines for offenders convicted of offenses described in subsection (a) reflect—</p><blockquote><p><strong>(1)</strong> the need for aggressive law enforcement action with respect to offenses involving the controlled substances described in subsection (a); and</p><p><strong>(2)</strong> the dangers associated with unlawful activity involving such substances, including—</p><p><strong>(A)</strong> the rapidly growing incidence of abuse of the controlled substances described in subsection (a) and the threat to public safety that such abuse poses;</p><p><strong>(B)</strong> the recent increase in the illegal importation of the controlled substances described in subsection (a);</p><p><strong>(C)</strong> the young age at which children are beginning to use the controlled substances described in subsection (a);</p><p><strong>(D)</strong> the fact that the controlled substances described in subsection (a) are frequently marketed to youth;</p><p><strong>(E)</strong> the large number of doses per gram of the controlled substances described in subsection (a); and</p><p><strong>(F)</strong> any other factor that the Commission determines to be appropriate.</p></blockquote><p><strong>(d)</strong> <strong>Sense of the Congress.</strong>—It is the sense of the Congress that—</p><blockquote><p><strong>(1)</strong> the base offense levels for Ecstasy are too low, particularly for high-level traffickers, and should be increased, such that they are comparable to penalties for other drugs of abuse; and</p><p><strong>(2)</strong> based on the fact that importation of Ecstasy has surged in the past few years, the traffickers are targeting the Nation’s youth, and the use of Ecstasy among youth in the United States is increasing even as other drug use among this population appears to be leveling off, the base offense levels for importing and trafficking the controlled substances described in subsection (a) should be increased.</p></blockquote><p><strong>(e)</strong> <strong>Report</strong>.—Not later than 60 days after the amendments pursuant to this section have been promulgated, the Commission shall—</p><blockquote><p><strong>(1)</strong> prepare a report describing the factors and information considered by the Commission in promulgating amendments pursuant to this section; and</p><p><strong>(2)</strong> submit the report to—</p><p><strong>(A)</strong> the Committee on the Judiciary, the Committee on Health, Education, Labor, and Pensions, and the Committee on Appropriations of the Senate; and</p><p><strong>(B)</strong> the Committee on the Judiciary, the Committee on Commerce, and the Committee on Appropriations of the House of Representatives.</p></blockquote><p>“<strong>Sec. 3664. Emergency Authority to United States Sentencing Commission.</strong></p><p>The United States Sentencing Commission shall promulgate amendments under this subtitle as soon as practicable after the date of the enactment of this Act [Oct. 17, 2000] in accordance with the procedure set forth in section 21(a) of the Sentencing Act of 1987 (Public Law 100–182) [28 U.S.C. 994 note], as though the authority under that Act had not expired.”</p><p>* * *</p>\"},{\"id\":\"PUB.L.106–386\",\"content\":\"<p><strong>VICTIMS OF TRAFFICKING AND VIOLENCE PROTECTION ACT OF 2000</strong></p><p><strong>(PUB. L. 106–386)</strong></p><p><strong>PEONAGE, INVOLUNTARY SERVITUDE, SLAVE TRADE OFFENSES, AND OTHER HUMAN TRAFFICKING OFFENSES.</strong> Pub. L. 106–386, Div. A, § 112(b), Oct. 28, 2000, 114 Stat. 1489, provided:</p><p>“<strong>(b)</strong> <strong>Amendment to the Sentencing Guidelines.</strong>—</p><blockquote><p><strong>(1)</strong> Pursuant to its authority under section 994 of title 28, United States Code, and in accordance with this section, the United States Sentencing Commission shall review and, if appropriate, amend the sentencing guidelines and policy statements applicable to persons convicted of offenses involving the trafficking of persons including component or related crimes of peonage, involuntary servitude, slave trade offenses, and possession, transfer or sale of false immigration documents in furtherance of trafficking, and the Fair Labor Standards Act and the Migrant and Seasonal Agricultural Worker Protection Act.</p><p><strong>(2)</strong> In carrying out this subsection, the Sentencing Commission shall—</p><p><strong>(A)</strong> take all appropriate measures to ensure that these sentencing guidelines and policy statements applicable to the offenses described in paragraph (1) of this subsection are sufficiently stringent to deter and adequately reflect the heinous nature of such offenses;</p><p><strong>(B)</strong> consider conforming the sentencing guidelines applicable to offenses involving trafficking in persons to the guidelines applicable to peonage, involuntary servitude, and slave trade offenses; and</p><p><strong>(C)</strong> consider providing sentencing enhancements for those convicted of the offenses described in paragraph (1) of this subsection that—</p><p><strong>(i)</strong> involve a large number of victims;</p><p><strong>(ii)</strong> involve a pattern of continued and flagrant violations;</p><p><strong>(iii</strong>) involve the use or threatened use of a dangerous weapon; or</p><p><strong>(iv)</strong> result in the death or bodily injury of any person.</p><p><strong>(3)</strong> The Commission may promulgate the guidelines or amendments under this subsection in accordance with the procedures set forth in section 21(a) of the Sentencing Act of 1987, as though the authority under that Act had not expired.”.</p></blockquote><p><strong>INTERSTATE STALKING (SECTION 2261A OFFENSES).</strong> Pub. L. 106–386, Div. B, Title I, § 1107(b), Oct. 28, 2000, 114 Stat. 1498, provided:</p><p>“<strong>(b) Interstate Stalking.—</strong></p><blockquote><p><strong>(1) In general.—</strong>[amended 18 U.S.C. § 2261A (Stalking); omitted]</p><p><strong>(2) Amendment of federal sentencing guidelines.—</strong></p><p><strong>(A)</strong> <strong>In general.</strong>—Pursuant to its authority under section 994 of title 28, United States Code, the United States Sentencing Commission shall amend the Federal Sentencing Guidelines to reflect the amendment made by this subsection.</p><p><strong>(B)</strong> <strong>Factors for consideration.</strong>—In carrying out subparagraph (A), the Commission shall consider—</p><p><strong>(i)</strong> whether the Federal Sentencing Guidelines relating to stalking offenses should be modified in light of the amendment made by this subsection; and</p><p><strong>(ii)</strong> whether any changes the Commission may make to the Federal Sentencing Guidelines pursuant to clause (i) should also be made with respect to offenses under chapter 110A of title 18, United States Code.”</p></blockquote><p>* * *</p>\"},{\"id\":\"PUB.L.106–420\",\"content\":\"<p><strong>COLLEGE SCHOLARSHIP FRAUD </strong></p><p><strong>PREVENTION ACT OF 2000</strong></p><p><strong>(PUB. L. 106–420)</strong></p><p><strong>HIGHER EDUCATION FINANCIAL ASSISTANCE FRAUD.</strong> Pub. L. 106–420, § 3, Nov. 1, 2000, 114 Stat. 1868, provided:</p><p>“<strong>Sec. 3. Sentencing Enhancement for Higher Education Financial Assistance Fraud.</strong></p><p>Pursuant to its authority under section 994(p) of title 28, United States Code, the United States Sentencing Commission shall amend the Federal sentencing guidelines in order to provide for enhanced penalties for any offense involving fraud or misrepresentation in connection with the obtaining or providing of, or the furnishing of information to a consumer on, any scholarship, grant, loan, tuition, discount, award, or other financial assistance for purposes of financing an education at an institution of higher education, such that those penalties are comparable to the base offense level for misrepresentation that the defendant was acting on behalf of a charitable, educational, religious, or political organization, or a government agency.”</p><p>* * *</p>\"},{\"id\":\"PUB.L.107–56\",\"content\":\"<p><strong>UNITING AND STRENGTHENING AMERICA BY PROVIDING APPROPRIATE TOOLS </strong></p><p><strong>REQUIRED TO INTERCEPT AND OBSTRUCT TERRORISM ACT OF 2001</strong></p><p><strong>or</strong></p><p><strong>USA PATRIOT ACT</strong></p><p><strong>(PUB. L. 107–56)</strong></p><p><strong>COMPUTER FRAUD AND ABUSE (SECTION 1030 OFFENSES).</strong> Pub. L. 107–56, Title VIII, § 814(f), Oct. 26, 2001, 115 Stat. 384, provided:</p><p>“<strong>(f) Amendment of Sentencing Guidelines Relating to Certain Computer Fraud and Abuse.—</strong>Pursuant to its authority under section 994(p) of title 28, United States Code, the United States Sentencing Commission shall amend the Federal sentencing guidelines to ensure that any individual convicted of a violation of section 1030 of title 18, United States Code, can be subjected to appropriate penalties, without regard to any mandatory minimum term of imprisonment.”</p><p>* * *</p>\"},{\"id\":\"PUB.L.107–155\",\"content\":\"<p><strong>BIPARTISAN CAMPAIGN REFORM ACT OF 2002</strong></p><p><strong>(PUB. L. 107–155)</strong></p><p><strong>ELECTION LAW VIOLATIONS.</strong> Pub. L. 107–155, § 314, Mar. 27, 2002, 116 Stat. 107, provided:</p><p>“<strong>Sec. 314. Sentencing Guidelines.</strong></p><p><strong>(a) In General.—</strong>The United States Sentencing Commission shall—</p><blockquote><p><strong>(1)</strong> promulgate a guideline, or amend an existing guideline under section 994 of title 28, United States Code, in accordance with paragraph (2), for penalties for violations of the Federal Election Campaign Act of 1971 and related election laws; and</p><p><strong>(2)</strong> submit to Congress an explanation of any guidelines promulgated under paragraph (1) and any legislative or administrative recommendations regarding enforcement of the Federal Election Campaign Act of 1971 and related election laws.</p></blockquote><p><strong>(b) Considerations.—</strong>The Commission shall provide guidelines under subsection (a) taking into account the following considerations:</p><blockquote><p><strong>(1)</strong> Ensure that the sentencing guidelines and policy statements reflect the serious nature of such violations and the need for aggressive and appropriate law enforcement action to prevent such violations.</p><p><strong>(2)</strong> Provide a sentencing enhancement for any person convicted of such violation if such violation involves—</p><p><strong>(A)</strong> a contribution, donation, or expenditure from a foreign source;</p><p><strong>(B)</strong> a large number of illegal transactions;</p><p><strong>(C)</strong> a large aggregate amount of illegal contributions, donations, or expenditures;</p><p><strong>(D)</strong> the receipt or disbursement of governmental funds; and</p><p><strong>(E)</strong> an intent to achieve a benefit from the Federal Government.</p><p><strong>(3)</strong> Assure reasonable consistency with other relevant directives and guidelines of the Commission.</p><p><strong>(4)</strong> Account for aggravating or mitigating circumstances that might justify exceptions, including circumstances for which the sentencing guidelines currently provide sentencing enhancements.</p><p><strong>(5)</strong> Assure the guidelines adequately meet the purposes of sentencing under section 3553(a)(2) of title 18, United States Code.</p></blockquote><p><strong>(c) Effective Date; Emergency Authority to Promulgate Guidelines.—</strong></p><blockquote><p><strong>(1) Effective date.—</strong>Notwithstanding section 402, the United States Sentencing Commission shall promulgate guidelines under this section not later than the later of—</p><p><strong>(A)</strong> 90 days after the effective date of this Act; or</p><p><strong>(B)</strong> 90 days after the date on which at least a majority of the members of the Commission are appointed and holding office.</p><p><strong>(2) Emergency authority to promulgate guidelines.—</strong>The Commission shall promulgate guidelines under this section in accordance with the procedures set forth in section 21(a) of the Sentencing Reform Act of 1987, as though the authority under such Act has not expired.”</p></blockquote><p>* * *</p><p><strong>SARBANES–OXLEY ACT OF 2002</strong></p><p><strong>(PUB. L. 107–204)</strong></p><p><strong>OBSTRUCTION OF JUSTICE; FRAUD; ORGANIZATIONAL GUIDELINES.</strong> Pub. L. 107–204, Title VIII, § 805, July 30, 2002, 116 Stat. 802, provided:</p><p>“<strong>Sec. 805. Review of Federal Sentencing Guidelines for Obstruction of Justice and Extensive Criminal Fraud.</strong></p><p><strong>(a) Enhancement of Fraud and Obstruction of Justice Sentences.—</strong>Pursuant to section 994 of title 28, United States Code, and in accordance with this section, the United States Sentencing Commission shall review and amend, as appropriate, the Federal Sentencing Guidelines and related policy statements to ensure that—</p><blockquote><p><strong>(1)</strong> the base offense level and existing enhancements contained in United States Sentencing Guideline 2J1.2 relating to obstruction of justice are sufficient to deter and punish that activity;</p><p><strong>(2)</strong> the enhancements and specific offense characteristics relating to obstruction of justice are adequate in cases where—</p><p><strong>(A)</strong> the destruction, alteration, or fabrication of evidence involves—</p><p><strong>(i)</strong> a large amount of evidence, a large number of participants, or is otherwise extensive;</p><p>(<strong>ii)</strong> the selection of evidence that is particularly probative or essential to the investigation; or</p><p><strong>(iii</strong>) more than minimal planning; or</p><p><strong>(B)</strong> the offense involved abuse of a special skill or a position of trust;</p><p><strong>(3)</strong> the guideline offense levels and enhancements for violations of section 1519 or 1520 of title 18, United States Code, as added by this title, are sufficient to deter and punish that activity;</p><p><strong>(4)</strong> a specific offense characteristic enhancing sentencing is provided under United States Sentencing Guideline 2B1.1 (as in effect on the date of enactment of this Act) for a fraud offense that endangers the solvency or financial security of a substantial number of victims; and</p><p><strong>(5)</strong> the guidelines that apply to organizations in United States Sentencing Guidelines, chapter 8, are sufficient to deter and punish organizational criminal misconduct.</p></blockquote><p><strong>(b) Emergency Authority and Deadline for Commission Action.—</strong>The United States Sentencing Commission is requested to promulgate the guidelines or amendments provided for under this section as soon as practicable, and in any event not later than 180 days after the date of enactment of this Act, in accordance with the procedures set forth in section 219(a) of the Sentencing Reform Act of 1987, as though the authority under that Act had not expired.”.</p><p><strong>FRAUD AND CERTAIN OTHER WHITE-COLLAR OFFENSES.</strong> Pub. L. 107–204, Title IX, § 905, July 30, 2002, 116 Stat. 805, provided:</p><p>“<strong>Sec. 905. Amendment to Sentencing Guidelines Relating to Certain White-Collar Offenses.</strong></p><p><strong>(a) Directive to the United States Sentencing Commission.—</strong>Pursuant to its authority under section 994(p) of title 18, United States Code, and in accordance with this section, the United States Sentencing Commission shall review and, as appropriate, amend the Federal Sentencing Guidelines and related policy statements to implement the provisions of this Act.</p><p><strong>(b) Requirements.—</strong>In carrying out this section, the Sentencing Commission shall—</p><blockquote><p><strong>(1)</strong> ensure that the sentencing guidelines and policy statements reflect the serious nature of the offenses and the penalties set forth in this Act, the growing incidence of serious fraud offenses which are identified above, and the need to modify the sentencing guidelines and policy statements to deter, prevent, and punish such offenses;</p><p><strong>(2)</strong> consider the extent to which the guidelines and policy statements adequately address whether the guideline offense levels and enhancements for violations of the sections amended by this Act are sufficient to deter and punish such offenses, and specifically, are adequate in view of the statutory increases in penalties contained in this Act;</p><p><strong>(3)</strong> assure reasonable consistency with other relevant directives and sentencing guidelines;</p><p><strong>(4)</strong> account for any additional aggravating or mitigating circumstances that might justify exceptions to the generally applicable sentencing ranges;</p><p><strong>(5)</strong> make any necessary conforming changes to the sentencing guidelines; and</p><p><strong>(6)</strong> assure that the guidelines adequately meet the purposes of sentencing, as set forth in section 3553(a)(2) of title 18, United States Code.</p></blockquote><p><strong>(c) Emergency Authority and Deadline for Commission Action.—</strong>The United States Sentencing Commission is requested to promulgate the guidelines or amendments provided for under this section as soon as practicable, and in any event not later than 180 days after the date of enactment of this Act, in accordance with the procedures set forth in section 219(a) of the Sentencing Reform Act of 1987, as though the authority under that Act had not expired.”.</p><p><strong>SECURITIES, PENSION, AND ACCOUNTING FRAUD; ENHANCEMENT FOR OFFICERS AND DIRECTORS OF PUBLICLY TRADED CORPORATIONS.</strong> Pub. L. 107–204, Title XI, § 1104, July 30, 2002, 116 Stat. 808, provided:</p><p>“<strong>Sec. 1104. Amendment to the Federal Sentencing Guidelines.</strong></p><p><strong>(a) Request for Immediate Consideration by the United States Sentencing Commission.—</strong>Pursuant to its authority under section 994(p) of title 28, United States Code, and in accordance with this section, the United States Sentencing Commission is requested to—</p><blockquote><p><strong>(1)</strong> promptly review the sentencing guidelines applicable to securities and accounting fraud and related offenses;</p><p><strong>(2)</strong> expeditiously consider the promulgation of new sentencing guidelines or amendments to existing sentencing guidelines to provide an enhancement for officers or directors of publicly traded corporations who commit fraud and related offenses; and</p><p><strong>(3)</strong> submit to Congress an explanation of actions taken by the Sentencing Commission pursuant to paragraph (2) and any additional policy recommendations the Sentencing Commission may have for combating offenses described in paragraph (1).</p></blockquote><p><strong>(b) Considerations in Review.—</strong>In carrying out this section, the Sentencing Commission is requested to—</p><blockquote><p><strong>(1)</strong> ensure that the sentencing guidelines and policy statements reflect the serious nature of securities, pension, and accounting fraud and the need for aggressive and appropriate law enforcement action to prevent such offenses;</p><p><strong>(2)</strong> assure reasonable consistency with other relevant directives and with other guidelines;</p><p><strong>(3)</strong> account for any aggravating or mitigating circumstances that might justify exceptions, including circumstances for which the sentencing guidelines currently provide sentencing enhancements;</p><p><strong>(4)</strong> ensure that guideline offense levels and enhancements for an obstruction of justice offense are adequate in cases where documents or other physical evidence are actually destroyed or fabricated;</p><p><strong>(5)</strong> ensure that the guideline offense levels and enhancements under United States Sentencing Guideline 2B1.1 (as in effect on the date of enactment of this Act) are sufficient for a fraud offense when the number of victims adversely involved is significantly greater than 50;</p><p><strong>(6)</strong> make any necessary conforming changes to the sentencing guidelines; and</p><p><strong>(7)</strong> assure that the guidelines adequately meet the purposes of sentencing as set forth in section 3553 (a)(2) of title 18, United States Code.</p></blockquote><p><strong>(c) Emergency Authority and Deadline for Commission Action.—</strong>The United States Sentencing Commission is requested to promulgate the guidelines or amendments provided for under this section as soon as practicable, and in any event not later than the 180 days after the date of enactment of this Act, in accordance with the procedures sent forth in section 21(a) of the Sentencing Reform Act of 1987, as though the authority under that Act had not expired.”</p><p>* * *</p><p><strong>21<sup>ST</sup> CENTURY DEPARTMENT OF JUSTICE APPROPRIATIONS AUTHORIZATION ACT</strong></p><p><strong>(PUB. L. 107–273)</strong></p><p><strong>ASSAULTS, THREATS, AND OTHER OFFENSES AGAINST FEDERAL JUDGES AND OTHER CERTAIN FEDERAL OFFICERS AND EMPLOYEES.</strong> Pub. L. 107–273, Div. C, Title I, § 11008(a), (e), Nov. 2, 2002, 116 Stat. 1819, provided:</p><p>“<strong>(a) Short Title.—This section may be cited as the ‘Federal Judiciary Protection Act of 2002’.</strong></p><p><strong>(b)–(d)</strong> [omitted]</p><p><strong>(e) Amendment of the Sentencing Guidelines for Assaults and Threats Against Federal Judges and Certain Other Federal Officials and Employees.—</strong></p><blockquote><p><strong>(1) In General.—</strong> Pursuant to its authority under section 994 of title 28, United States Code, the United States Sentencing Commission shall review and amend the Federal sentencing guidelines and the policy statements of the commission, if appropriate, to provide an appropriate sentencing enhancement for offenses involving influencing, assaulting, resisting, impeding, retaliating against, or threatening a Federal judge, magistrate judge, or any other official described in section 111 or 115 of title 18, United States Code.</p><p><strong>(2) Factors for Consideration.—</strong>In carrying out this section, the United States Sentencing Commission shall consider, with respect to each offense described in paragraph (1)—</p><p><strong>(A)</strong> any expression of congressional intent regarding the appropriate penalties for the offense;</p><p><strong>(B)</strong> the range of conduct covered by the offense;</p><p><strong>(C)</strong> the existing sentences for the offense;</p><p><strong>(D)</strong> the extent to which sentencing enhancements within the Federal sentencing guidelines and the authority of the court to impose a sentence in excess of the applicable guideline range are adequate to ensure punishment at or near the maximum penalty for the most egregious conduct covered by the offense;</p><p><strong>(E)</strong> the extent to which the Federal sentencing guideline sentences for the offense have been constrained by statutory maximum penalties;</p><p><strong>(F)</strong> the extent to which the Federal sentencing guidelines for the offense adequately achieve the purposes of sentencing as set forth in section 3553(a)(2) of title 18, United States Code;</p><p><strong>(G)</strong> the relationship of the Federal sentencing guidelines for the offense to the Federal sentencing guidelines for other offenses of comparable seriousness; and</p><p><strong>(H)</strong> any other factors that the Commission considers to be appropriate.”.</p></blockquote><p><strong>CRIMES OF VIOLENCE AND DRUG TRAFFICKING CRIMES IN WHICH THE DEFENDANT USED BODY ARMOR.</strong> Pub. L. 107–273, Div. C, Title I, § 11009(a), (d), Nov. 2, 2002, 116 Stat. 1819, provided:</p><p>“<strong>(a) Short Title</strong>.—This section may be cited as the ‘James Guelff and Chris McCurley Body Armor Act of 2002’.</p><p><strong>(b)–(c)</strong> [omitted]</p><p><strong>(d) Amendment of Sentencing Guidelines with Respect to Body Armor.—</strong></p><blockquote><p><strong>(1) In General.—</strong>Pursuant to its authority under section 994(p) of title 28, United States Code, the United States Sentencing Commission shall review and amend the Federal sentencing guidelines and the policy statements of the Commission, as appropriate, to provide an appropriate sentencing enhancement for any crime of violence (as defined in section 16 of title 18, United States Code) or drug trafficking crime (as defined in section 924(c) of title 18, United States Code) (including a crime of violence or drug trafficking crime that provides for an enhanced punishment if committed by the use of a deadly or dangerous weapon or device) in which the defendant used body armor.</p><p><strong>(2) Sense of Congress.—</strong>It is the sense of Congress that any sentencing enhancement under this subsection should be at least 2 levels.”.</p></blockquote><p>* * *</p>\"},{\"id\":\"PUB.L.107–296\",\"content\":\"<p><strong>HOMELAND SECURITY ACT OF 2002</strong></p><p><strong>or</strong></p><p><strong>CYBER SECURITY ENHANCEMENT ACT OF 2002</strong></p><p><strong>(PUB. L. 107–296)</strong></p><p><strong>COMPUTER CRIMES (SECTION 1030 OFFENSES).</strong> Pub. L. 107–296, Title II, § 225(b), (c), Nov. 25, 2002, 116 Stat. 2156, provided:</p><p>“<strong>(b) Amendment of Sentencing Guidelines Relating to Certain Computer Crimes.—</strong></p><blockquote><p><strong>(1) Directive to the United States Sentencing Commission.—</strong>Pursuant to its authority under section 994(p) of title 28, United States Code, and in accordance with this subsection, the United States Sentencing Commission shall review and, if appropriate, amend its guidelines and its policy statements applicable to persons convicted of an offense under section 1030 of title 18, United States Code.</p><p><strong>(2) Requirements.—</strong>In carrying out this subsection, the Sentencing Commission shall—</p><p><strong>(A)</strong> ensure that the sentencing guidelines and policy statements reflect the serious nature of the offenses described in paragraph (1), the growing incidence of such offenses, and the need for an effective deterrent and appropriate punishment to prevent such offenses;</p><p><strong>(B)</strong> consider the following factors and the extent to which the guidelines may or may not account for them—</p><p><strong>(i)</strong> the potential and actual loss resulting from the offense;</p><p><strong>(ii)</strong> the level of sophistication and planning involved in the offense;</p><p><strong>(iii)</strong> whether the offense was committed for purposes of commercial advantage or private financial benefit;</p><p><strong>(iv)</strong> whether the defendant acted with malicious intent to cause harm in committing the offense;</p><p><strong>(v)</strong> the extent to which the offense violated the privacy rights of individuals harmed;</p><p><strong>(vi)</strong> whether the offense involved a computer used by the government in furtherance of national defense, national security, or the administration of justice;</p><p><strong>(vii)</strong> whether the violation was intended to or had the effect of significantly interfering with or disrupting a critical infrastructure; and</p><p><strong>(viii)</strong> whether the violation was intended to or had the effect of creating a threat to public health or safety, or injury to any person;</p><p><strong>(C)</strong> assure reasonable consistency with other relevant directives and with other sentencing guidelines;</p><p><strong>(D)</strong> account for any additional aggravating or mitigating circumstances that might justify exceptions to the generally applicable sentencing ranges;</p><p><strong>(E)</strong> make any necessary conforming changes to the sentencing guidelines; and</p><p><strong>(F)</strong> assure that the guidelines adequately meet the purposes of sentencing as set forth in section 3553(a)(2) of title 18, United States Code.</p></blockquote><p><strong>(c) Study and Report on Computer Crimes.—</strong>Not later than May 1, 2003, the United States Sentencing Commission shall submit a brief report to Congress that explains any actions taken by the Sentencing Commission in response to this section and includes any recommendations the Commission may have regarding statutory penalties for offenses under section 1030 of title 18, United States Code.”</p><p>* * *</p>\"},{\"id\":\"PUB.L.108–21\",\"content\":\"<p><strong>PROSECUTORIAL REMEDIES AND OTHER TOOLS TO END THE EXPLOITATION OF CHILDREN TODAY ACT OF 2003</strong></p><p><strong>or</strong></p><p><strong>THE PROTECT ACT</strong></p><p><strong>(PUB. L. 108–21)</strong></p><p><strong>KIDNAPPING OFFENSES.</strong> Pub. L. 108–21, Title I, § 104(a), Apr. 30, 2003, 117 Stat. 653, provided:</p><p>“<strong>Sec. 104. Stronger Penalties Against Kidnapping.</strong></p><p><strong>(a) Sentencing Guidelines.—</strong>Notwithstanding any other provision of law regarding the amendment of Sentencing Guidelines, the United States Sentencing Commission is directed to amend the Sentencing Guidelines, to take effect on the date that is 30 days after the date of the enactment of this Act—</p><blockquote><p><strong>(1)</strong> so that the base offense level for kidnapping in section 2A4.1(a) is increased from level 24 to level 32;</p><p><strong>(2)</strong> so as to delete section 2A4.1(b)(4)(C); and</p><p><strong>(3)</strong> so that the increase provided by section 2A4.1(b)(5) is 6 levels instead of 3.</p></blockquote><p><strong>(b)</strong> [omitted]”.</p><p><strong>CHILD CRIMES AND SEX OFFENSES; DOWNWARD DEPARTURES; ACCEPTANCE OF RESPONSIBILITY.</strong> Pub. L. 108–21, Title IV, § 401, Apr. 30, 2003, 117 Stat. 668, provided:</p><p>“<strong>Sec. 401. Sentencing Reform.</strong></p><p><strong>(a)</strong> [omitted]</p><p><strong>(b) Conforming Amendments to Guidelines Manual.—</strong>The Federal Sentencing Guidelines are amended—</p><blockquote><p><strong>(1)</strong> in section 5K2.0—</p><p><strong>(A)</strong> by striking ‘Under’ and inserting the following:</p><p>‘(a) DOWNWARD DEPARTURES IN CRIMINAL CASES OTHER THAN CHILD CRIMES AND SEXUAL OFFENSES—Under’; and</p><p><strong>(B)</strong> by adding at the end the following:</p><p>‘(b) DOWNWARD DEPARTURES IN CHILD CRIMES AND SEXUAL OFFENSES—Under 18 U.S.C. Sec. 3553(b)(2), the sentencing court may impose a sentence below the range established by the applicable guidelines only if the court finds that there exists a mitigating circumstance of a kind, or to a degree, that—</p><p>(1) has been affirmatively and specifically identified as a permissible ground of downward departure in the sentencing guidelines or policy statements issued under section 994(a) of title 28, United States Code, taking account of any amendments to such sentencing guidelines or policy statements by act of Congress;</p><p>(2) has not adequately been taken into consideration by the Sentencing Commission in formulating the guidelines; and</p><p>(3) should result in a sentence different from that described.</p><p>‘The grounds enumerated in this Part K of chapter 5 are the sole grounds that have been affirmatively and specifically identified as a permissible ground of downward departure in these sentencing guidelines and policy statements. Thus, notwithstanding any other reference to authority to depart downward elsewhere in this Sentencing Manual, a ground of downward departure has not been affirmatively and specifically identified as a permissible ground of downward departure within the meaning of section 3553(b)(2) unless it is expressly enumerated in this Part K as a ground upon which a downward departure may be granted.’.</p><p><strong>(2)</strong> At the end of part K of chapter 5, add the following:</p><p>‘Sec. 5K2.22 Specific Offender Characteristics as Grounds for Downward Departure in child crimes and sexual offenses (Policy Statement)</p><p>‘In sentencing a defendant convicted of an offense under section 1201 involving a minor victim, an offense under section 1591, or an offense under chapter 71, 109A, 110, or 117 of title 18, United States Code, age may be a reason to impose a sentence below the applicable guideline range only if and to the extent permitted by Sec. 5H1.1.</p><p>‘An extraordinary physical impairment may be a reason to impose a sentence below the applicable guideline range only if and to the extent permitted by Sec. 5H1.4. Drug, alcohol, or gambling dependence or abuse is not a reason for imposing a sentence below the guidelines.’</p><p><strong>(3)</strong> Section 5K2.20 is amended by striking ‘A’ and inserting ‘Except where a defendant is convicted of an offense under section 1201 involving a minor victim, an offense under section 1591, or an offense under chapter 71, 109A, 110, or 117 of title 18, United States Code, a’.</p><p><strong>(4)</strong> Section 5H1.6 is amended by inserting after the first sentence the following: ‘In sentencing a defendant convicted of an offense under section 1201 involving a minor victim, an offense under section 1591, or an offense under chapter 71, 109A, 110, or 117 of title 18, United States Code, family ties and responsibilities and community ties are not relevant in determining whether a sentence should be below the applicable guideline range.’.</p><p><strong>(5)</strong> Section 5K2.13 is amended by—</p><p><strong>(A)</strong> striking ‘or’ before ‘(3)’; and</p><p><strong>(B)</strong> replacing ‘public’ with ‘public; or (4) the defendant has been convicted of an offense under chapter 71, 109A, 110, or 117 of title 18, United States Code.’</p></blockquote><p><strong>(c)–(f)</strong> [omitted]</p><p><strong>(g) Reform of Guidelines Governing Acceptance of Responsibility.—</strong>Subject to subsection (j), the Guidelines Manual promulgated by the Sentencing Commission pursuant to section 994(a) of title 28, United States Code, is amended—</p><blockquote><p><strong>(1)</strong> in section 3E1.1(b)—</p><p><strong>(A)</strong> by inserting ‘upon motion of the government stating that’ immediately before ‘the defendant has assisted authorities’; and</p><p><strong>(B)</strong> by striking ‘taking one or more’ and all that follows through and including ‘additional level’ and insert ‘timely notifying authorities of his intention to enter a plea of guilty, thereby permitting the government to avoid preparing for trial and permitting the government and the court to allocate their resources efficiently, decrease the offense level by 1 additional level’;</p><p><strong>(2)</strong> in the Application Notes to the Commentary to section 3E1.1, by amending Application Note 6—</p><p><strong>(A)</strong> by striking ‘one or both of’; and</p><p><strong>(B)</strong> by adding the following new sentence at the end: ‘Because the Government is in the best position to determine whether the defendant has assisted authorities in a manner that avoids preparing for trial, an adjustment under subsection (b) may only be granted upon a formal motion by the Government at the time of sentencing.’; and</p><p><strong>(3)</strong> in the Background to section 3E1.1, by striking ‘one or more of’.”.</p></blockquote><p><strong>(h)</strong> [omitted]</p><p><strong>(i) Sentencing Guidelines Amendments.—(1)</strong> Subject to subsection (j), the Guidelines Manual promulgated by the Sentencing Commission pursuant to section 994(a) of title 28, United States Code, is amended as follows:</p><blockquote><p><strong>(A)</strong> Application Note 4(b)(i) to section 4B1.5 is amended to read as follows:</p><p>‘(i) IN GENERAL—For purposes of subsection (b), the defendant engaged in a pattern of activity involving prohibited sexual conduct if on at least two separate occasions, the defendant engaged in prohibited sexual conduct with a minor.’.</p><p><strong>(B)</strong> Section 2G2.4(b) is amended by adding at the end the following:</p><p>‘(4) If the offense involved material that portrays sadistic or masochistic conduct or other depictions of violence, increase by 4 levels.</p><p>‘(5) If the offense involved—</p><p>‘(A) at least 10 images, but fewer than 150, increase by 2 levels;</p><p>‘(B) at least 150 images, but fewer than 300, increase by 3 levels;</p><p>‘(C) at least 300 images, but fewer than 600, increase by 4 levels; and</p><p>‘(D) 600 or more images, increase by 5 levels.’.</p><p><strong>(C)</strong> Section 2G2.2(b) is amended by adding at the end the following:</p><p>‘(6) If the offense involved—</p><p>‘(A) at least 10 images, but fewer than 150, increase by 2 levels;</p><p>‘(B) at least 150 images, but fewer than 300, increase by 3 levels;</p><p>‘(C) at least 300 images, but fewer than 600, increase by 4 levels; and</p><p>‘(D) 600 or more images, increase by 5 levels.’.</p></blockquote><p><strong>(2)</strong> The Sentencing Commission shall amend the Sentencing Guidelines to ensure that the Guidelines adequately reflect the seriousness of the offenses under sections 2243(b), 2244(a)(4), and 2244(b) of title 18, United States Code.</p><p><strong>(j) Conforming Amendments.—</strong></p><blockquote><p><strong>(1)</strong>Upon enactment of this Act, the Sentencing Commission shall forthwith distribute to all courts of the United States and to the United States Probation System the amendments made by subsections (b), (g), and (i) of this section to the sentencing guidelines, policy statements, and official commentary of the Sentencing Commission. These amendments shall take effect upon the date of enactment of this Act, in accordance with paragraph (5).</p><p><strong>(2)</strong> On or before May 1, 2005, the Sentencing Commission shall not promulgate any amendment to the sentencing guidelines, policy statements, or official commentary of the Sentencing Commission that is inconsistent with any amendment made by subsection (b) or that adds any new grounds of downward departure to Part K of chapter 5.</p><p><strong>(3)</strong> With respect to cases covered by the amendments made by subsection (i) of this section, the Sentencing Commission may make further amendments to the sentencing guidelines, policy statements, or official commentary of the Sentencing Commission, except that the Commission shall not promulgate any amendments that, with respect to such cases, would result in sentencing ranges that are lower than those that would have applied under such subsection.</p><p><strong>(4)</strong> At no time may the Commission promulgate any amendment that would alter or repeal the amendments made by subsection (g) of this section.</p></blockquote><p><strong>(k)–(l)</strong> [omitted]</p><p><strong>(m) Reform of Existing Permissible Grounds of Downward Departures.—</strong>Not later than 180 days after the enactment of this Act, the United States Sentencing Commission shall—</p><blockquote><p><strong>(1)</strong> review the grounds of downward departure that are authorized by the sentencing guidelines, policy statements, and official commentary of the Sentencing Commission; and</p><p><strong>(2)</strong> promulgate, pursuant to section 994 of title 28, United States Code—</p><p><strong>(A)</strong> appropriate amendments to the sentencing guidelines, policy statements, and official commentary to ensure that the incidence of downward departures are substantially reduced;</p><p><strong>(B)</strong> a policy statement authorizing a downward departure of not more than 4 levels if the Government files a motion for such departure pursuant to an early disposition program authorized by the Attorney General and the United States Attorney; and</p><p><strong>(C)</strong> any other conforming amendments to the sentencing guidelines, policy statements, and official commentary of the Sentencing Commission necessitated by this Act, including a revision of paragraph 4(b) of part A of chapter 1 and a revision of section 5K2.0.”.</p></blockquote><p><strong>OBSCENE VISUAL REPRESENTATIONS OF SEXUAL ABUSE OF CHILDREN. (SECTION 1466A OFFENSES).</strong> Pub. L. 108–21, Title V, § 504(c), Apr. 30, 2003, 117 Stat. 682, provided:</p><p>“<strong>(c) Sentencing Guidelines.—</strong></p><blockquote><p><strong>(1) Category.—</strong>Except as provided in paragraph (2), the applicable category of offense to be used in determining the sentencing range referred to in section 3553(a)(4) of title 18, United States Code, with respect to any person convicted under section 1466A of such title, shall be the category of offenses described in section 2G2.2 of the Sentencing Guidelines.</p><p><strong>(2) Ranges.—</strong>The Sentencing Commission may promulgate guidelines specifically governing offenses under section 1466A of title 18, United States Code, if such guidelines do not result in sentencing ranges that are lower than those that would have applied under paragraph (1).”.</p></blockquote><p><strong>TRANSPORTATION TO ENGAGE IN SEXUAL ACT WITH A MINOR (SECTION 2423 OFFENSES).</strong> Pub. L. 108–21, Title V, § 512, Apr. 30, 2003, 117 Stat. 685, provided:</p><p>“<strong>Sec. 512. Sentencing Enhancements for Interstate Travel to Engage in Sexual Act with a Juvenile.</strong></p><p>Pursuant to its authority under section 994(p) of title 28, United States Code, and in accordance with this section, the United States Sentencing Commission shall review and, as appropriate, amend the Federal Sentencing Guidelines and policy statements to ensure that guideline penalties are adequate in cases that involve interstate travel with the intent to engage in a sexual act with a juvenile in violation of section 2423 of title 18, United States Code, to deter and punish such conduct.”</p><p><strong>DISTRIBUTING MATERIAL CONSTITUTING OR CONTAINING CHILD PORNOGRAPHY (SECTION 2252A OFFENSES).</strong> Pub L. 108–21, Title V, § 513(c), Apr. 30, 2003, 117 Stat. 685, provided:</p><p>“<strong>(c) Sentencing Guidelines.—</strong>Pursuant to its authority under section 994(p) of title 28, United States Code, and in accordance with this section, the United States Sentencing Commission shall review and, as appropriate, amend the Federal Sentencing Guidelines and policy statements to ensure that the guidelines are adequate to deter and punish conduct that involves a violation of paragraph (3)(B) or (6) of section 2252A(a) of title 18, United States Code, as created by this Act. With respect to the guidelines for section 2252A(a)(3)(B), the Commission shall consider the relative culpability of promoting, presenting, describing, or distributing material in violation of that section as compared with solicitation of such material.”.</p><p><strong>GHB (GAMMA HYDROXYBUTYRIC ACID) OFFENSES.</strong> Pub. L. 108–21, Title VI, § 608(e), Apr. 30, 2003, 117 Stat. 691, provided:</p><p>“<strong>(e) Sentencing Commission Guidelines.—</strong>The United States Sentencing Commission shall—</p><blockquote><p><strong>(1)</strong> review the Federal sentencing guidelines with respect to offenses involving gamma hydroxybutyric acid (GHB);</p><p><strong>(2)</strong> consider amending the Federal sentencing guidelines to provide for increased penalties such that those penalties reflect the seriousness of offenses involving GHB and the need to deter them; and</p><p><strong>(3)</strong> take any other action the Commission considers necessary to carry out this section.”</p></blockquote><p>* * *</p>\"},{\"id\":\"PUB.L.108–187\",\"content\":\"<p><strong>CONTROLLING THE ASSAULT OF </strong></p><p><strong>NON-SOLICITED PORNOGRAPHY</strong></p><p><strong>AND MARKETING ACT OF 2003</strong></p><p><strong>or</strong></p><p><strong>CAN-SPAM ACT OF 2003</strong></p><p><strong>(PUB. L. 108–187)</strong></p><p><strong>ELECTRONIC MAIL FRAUD (SECTION 1037 OFFENSES).</strong> Pub. L. 108–187, § 4(b), Dec. 16, 2003, 117 Stat. 2705, provided:</p><p>“<strong>(b) United States Sentencing Commission</strong>.—</p><blockquote><p><strong>(1) Directive.—</strong>Pursuant to its authority under section 994(p) of title 28, United States Code, and in accordance with this section, the United States Sentencing Commission shall review and, as appropriate, amend the sentencing guidelines and policy statements to provide appropriate penalties for violations of section 1037 of title 18, United States Code, as added by this section, and other offenses that may be facilitated by the sending of large quantities of unsolicited electronic mail.</p><p><strong>(2) Requirements.—</strong>In carrying out this subsection, the Sentencing Commission shall consider providing sentencing enhancements for—</p><p><strong>(A)</strong> those convicted under section 1037 of title 18, United States Code, who—</p><p><strong>(i)</strong> obtained electronic mail addresses through improper means, including—</p><p><strong>(I)</strong> harvesting electronic mail addresses of the users of a website, proprietary service, or other online public forum operated by another person, without the authorization of such person; and</p><p><strong>(II)</strong> randomly generating electronic mail addresses by computer; or</p><p><strong>(ii)</strong> knew that the commercial electronic mail messages involved in the offense contained or advertised an Internet domain for which the registrant of the domain had provided false registration information; and</p><p><strong>(B)</strong> those convicted of other offenses, including offenses involving fraud, identity theft, obscenity, child pornography, and the sexual exploitation of children, if such offenses involved the sending of large quantities of electronic mail.”</p></blockquote><p>* * *</p>\"},{\"id\":\"PUB.L.108–275\",\"content\":\"<p><strong>IDENTITY THEFT PENALTY ENHANCEMENT ACT</strong></p><p><strong>(PUB. L. 108–275)</strong></p><p><strong>IDENTITY THEFT OFFENSES INVOLVING AN ABUSE OF POSITION.</strong> Pub. L. 108–275, § 5, July 15, 2004, 118 Stat. 833, provided:</p><p>“<strong>Sec. 5. Directive to the United States Sentencing Commission.</strong></p><p><strong>(a) In General.—</strong>Pursuant to its authority under section 994(p) of title 28, United States Code, and in accordance with this section, the United States Sentencing Commission shall review and amend its guidelines and its policy statements to ensure that the guideline offense levels and enhancements appropriately punish identity theft offenses involving an abuse of position.</p><p><strong>(b) Requirements.—</strong>In carrying out this section, the United States Sentencing Commission shall do the following:</p><blockquote><p><strong>(1)</strong> Amend U.S.S.G. section 3B1.3 (Abuse of Position of Trust of Use of Special Skill) to apply to and punish offenses in which the defendant exceeds or abuses the authority of his or her position in order to obtain unlawfully or use without authority any means of identification, as defined section 1028(d)(4) of title 18, United States Code.</p><p><strong>(2)</strong> Ensure reasonable consistency with other relevant directives, other sentencing guidelines, and statutory provisions.</p><p><strong>(3)</strong> Make any necessary and conforming changes to the sentencing guidelines.</p><p><strong>(4)</strong> Ensure that the guidelines adequately meet the purposes of sentencing set forth in section 3553(a)(2) of title 18, United States Code.”</p></blockquote><p>* * *</p>\"},{\"id\":\"PUB.L.108–358\",\"content\":\"<p><strong>ANABOLIC STEROID CONTROL ACT OF 2004</strong></p><p><strong>(PUB. L. 108–358)</strong></p><p><strong>ANABOLIC STEROID OFFENSES.</strong> Pub. L. 108–358, § 3, Oct. 22, 2004, 118 Stat. 1664, provided:</p><p>“<strong>Sec. 3. Sentencing Commission Guidelines.</strong></p><p>The United States Sentencing Commission shall—</p><blockquote><p><strong>(1)</strong> review the Federal sentencing guidelines with respect to offenses involving anabolic steroids;</p><p><strong>(2)</strong> consider amending the Federal sentencing guidelines to provide for increased penalties with respect to offenses involving anabolic steroids in a manner that reflects the seriousness of such offenses and the need to deter anabolic steroid trafficking and use; and</p><p><strong>(3)</strong> take such other action that the Commission considers necessary to carry out this section.”</p></blockquote><p>* * *</p>\"},{\"id\":\"PUB.L.108–458\",\"content\":\"<p><strong>INTELLIGENCE REFORM AND TERRORISM PREVENTION ACT OF 2004</strong></p><p><strong>or</strong></p><p><strong>STOP TERRORIST AND MILITARY HOAXES ACT OF 2004</strong></p><p><strong>(PUB. L. 108–458)</strong></p><p><strong>OFFENSES INVOLVING INTERNATIONAL OR DOMESTIC TERRORISM.</strong> Pub. L. 108–458, Title VI, § 6703(b), Dec. 17, 2004, 118 Stat. 3766, provided:</p><p>“<strong>(b) Sentencing Guidelines.—</strong>Not later than 30 days of the enactment of this section, the United States Sentencing Commission shall amend the Sentencing Guidelines to provide for an increased offense level for an offense under sections 1001(a) and 1505 of title 18, United States Code, if the offense involves international or domestic terrorism, as defined in section 2331 of such title.”</p><p>* * *</p>\"},{\"id\":\"PUB.L.108–482\",\"content\":\"<p><strong>INTELLECTUAL PROPERTY PROTECTION AND COURTS AMENDMENTS ACT OF 2004</strong></p><p><strong>or</strong></p><p><strong>FRAUDULENT ONLINE IDENTITY </strong></p><p><strong>SANCTIONS ACT</strong></p><p><strong>(PUB. L. 108–482)</strong></p><p><strong>FELONY OFFENSES COMMITTED ONLINE INVOLVING FALSE DOMAIN NAMES.</strong> Pub. L. 108–482, Title II, § 204(b), Dec. 23, 2004, 118 Stat. 3917, provided:</p><p>“<strong>(b) United States Sentencing Commission</strong>.—</p><blockquote><p><strong>(1) Directive.—</strong>Pursuant to its authority under section 994(p) of title 28, United States Code, and in accordance with this section, the United States Sentencing Commission shall review and amend the sentencing guidelines and policy statements to ensure that the applicable guideline range for a defendant convicted of any felony offense carried out online that may be facilitated through the use of a domain name registered with materially false contact information is sufficiently stringent to deter commission of such acts.</p><p><strong>(2) Requirements.—</strong>In carrying out this subsection, the Sentencing Commission shall provide sentencing enhancements for anyone convicted of any felony offense furthered through knowingly providing or knowingly causing to be provided materially false contact information to a domain name registrar, domain name registry, or other domain name registration authority in registering, maintaining, or renewing a domain name used in connection with the violation.</p><p><strong>(3) Definition.—</strong>For purposes of this subsection, the term ‘domain name’ has the meaning given that term in section 45 of the Act entitled ‘An Act to provide for the registration and protection of trademarks used in commerce, to carry out the provisions of certain international conventions, and for other purposes’, approved July 5, 1946 (commonly referred to as the ‘Trademark Act of 1946’; 15 U.S.C. 1127).”</p></blockquote><p>* * *</p>\"},{\"id\":\"PUB.L.109–9\",\"content\":\"<p><strong>FAMILY ENTERTAINMENT AND </strong></p><p><strong>COPYRIGHT ACT OF 2005</strong></p><p><strong>or</strong></p><p><strong>ARTISTS’ RIGHTS AND THEFT PREVENTION ACT OF 2005 (ART ACT)</strong></p><p><strong>(PUB. L. 109–9)</strong></p><p><strong>INTELLECTUAL PROPERTY OFFENSES.</strong> Pub. L. 109–9, Title I, § 105, Apr. 27, 2005, 119 Stat. 218, provided:</p><p>“<strong>Sec. 105. Federal Sentencing Guidelines.</strong></p><p><strong>(a) Review and Amendment.—</strong>Not later than 180 days after the date of enactment of this Act, the United States Sentencing Commission, pursuant to its authority under section 994 of title 28, United States Code, and in accordance with this section, shall review and, if appropriate, amend the Federal sentencing guidelines and policy statements applicable to persons convicted of intellectual property rights crimes, including any offense under—</p><blockquote><p><strong>(1)</strong> section 506, 1201, or 1202 of title 17, United States Code; or</p><p><strong>(2)</strong> section 2318, 2319, 2319A, 2319B, or 2320 of title 18, United States Code.</p></blockquote><p><strong>(b) Authorization.—</strong>The United States Sentencing Commission may amend the Federal sentencing guidelines in accordance with the procedures set forth in section 21(a) of the Sentencing Act of 1987 (28 U.S.C. 994 note) as though the authority under that section had not expired.</p><blockquote><p><strong>(c) Responsibilities of United States Sentencing Commission.—</strong>In carrying out this section, the United States Sentencing Commission shall—</p><p><strong>(1)</strong> take all appropriate measures to ensure that the Federal sentencing guidelines and policy statements described in subsection (a) are sufficiently stringent to deter, and adequately reflect the nature of, intellectual property rights crimes;</p><p><strong>(2)</strong> determine whether to provide a sentencing enhancement for those convicted of the offenses described in subsection (a), if the conduct involves the display, performance, publication, reproduction, or distribution of a copyrighted work before it has been authorized by the copyright owner, whether in the media format used by the infringing party or in any other media format;</p><p><strong>(3)</strong> determine whether the scope of “uploading” set forth in application note 3 of section 2B5.3 of the Federal sentencing guidelines is adequate to address the loss attributable to people who, without authorization, broadly distribute copyrighted works over the Internet; and</p><p><strong>(4)</strong> determine whether the sentencing guidelines and policy statements applicable to the offenses described in subsection (a) adequately reflect any harm to victims from copyright infringement if law enforcement authorities cannot determine how many times copyrighted material has been reproduced or distributed.”</p></blockquote><p>* * *</p>\"},{\"id\":\"PUB.L.109–76\",\"content\":\"<p><strong>UNITED STATES PAROLE COMMISSION </strong></p><p><strong>EXTENSION AND SENTENCING </strong></p><p><strong>COMMISSION AUTHORITY ACT OF 2005</strong></p><p><strong>(PUB. L. 109–76)</strong></p><p><strong>EMERGENCY AMENDMENT AUTHORITY PERTAINING TO THE INTELLIGENCE REFORM AND TERRORISM PREVENTION ACT OF 2004 AND THE ANABOLIC STEROID CONTROL ACT OF 2004.</strong> Pub. L. 109–76, § 3, Sept. 29, 2005, 119 Stat. 2035, provided:</p><p>“<strong>Sec. 3. Provision of Emergency Amendment Authority for Sentencing Commission.</strong></p><p>In accordance with the procedure set forth in section 21(a) of the Sentencing Act of 1987 (Public Law 100–182), as though the authority under that Act had not expired, the United States Sentencing Commission shall—</p><blockquote><p><strong>(1)</strong> not later than 60 days after the date of the enactment of this Act, amend the Federal sentencing guidelines, commentary, and policy statements to implement section 6703 of the Intelligence Reform and Terrorism Prevention Act of 2004 (Public Law 108–458); and</p><p><strong>(2)</strong> not later than 180 days after the date of the enactment of this Act, amend the Federal sentencing guidelines, commentary, and policy statements to implement section 3 of the Anabolic Steroid Control Act of 2004 (Public Law 108–358).”</p></blockquote><p>* * *</p>\"},{\"id\":\"PUB.L.109–162\",\"content\":\"<p><strong>VIOLENCE AGAINST WOMEN AND </strong></p><p><strong>DEPARTMENT OF JUSTICE </strong></p><p><strong>REAUTHORIZATION ACT OF 2005 </strong></p><p><strong>(PUB. L. 109–162)</strong></p><p><strong>PUBLIC EMPLOYEE UNIFORMS (SECTION 716 OFFENSES).</strong> Pub. L. 109–162, § 1191(c), Jan. 5, 2006, 119 Stat. 2960, provided:</p><p>“<strong>(c) Direction to Sentencing Commission.—</strong>The United States Sentencing Commission is directed to make appropriate amendments to sentencing guidelines, policy statements, and official commentary to assure that the sentence imposed on a defendant who is convicted of a Federal offense while wearing or displaying insignia and uniform received in violation of section 716 of title 18, United States Code, reflects the gravity of this aggravating factor.”</p><p>* * *</p>\"},{\"id\":\"PUB.L.109–177\",\"content\":\"<p><strong>USA PATRIOT IMPROVEMENT AND REAUTHORIZATION ACT OF 2005</strong></p><p><strong>(PUB. L. 109–177)</strong></p><p><strong>THEFT OF INTERSTATE OR FOREIGN SHIPMENTS OR VESSELS (SECTION 659 OR 2311 OFFENSES).</strong> Pub. L. 109–177, § 307(c), March 9, 2006, 120 Stat. 192, provided:</p><p>“<strong>(c) Review of Sentencing Guidelines.—</strong>Pursuant to section 994 of title 28, United States Code, the United States Sentencing Commission shall review the Federal Sentencing Guidelines to determine whether sentencing enhancement is appropriate for any offense under section 659 or 2311 of title 18, United States Code, as amended by this title.”</p><p>* * *</p>\"},{\"id\":\"PUB.L.109–181\",\"content\":\"<p><strong>STOP COUNTERFEITING IN </strong></p><p><strong>MANUFACTURED GOODS ACT</strong></p><p><strong>(PUB. L. 109–181)</strong></p><p><strong>TRAFFICKING IN COUNTERFEIT LABELS, GOODS, OR SERVICES (SECTION 2318 OR 2320 OFFENSES).</strong> Pub. L. 109–181, § 1(c), March 16, 2006, 120 Stat. 285, provided:</p><p>“<strong>(c) Sentencing Guidelines.—</strong></p><blockquote><p><strong>(1) Review and Amendment.—</strong>Not later than 180 days after the date of enactment of this Act, the United States Sentencing Commission, pursuant to its authority under section 994 of title 28, United States Code, and in accordance with this subsection, shall review and, if appropriate, amend the Federal sentencing guidelines and policy statements applicable to persons convicted of any offense under section 2318 or 2320 of title 18, United States Code.</p><p><strong>(2) Authorization.—</strong>The United States Sentencing Commission may amend the Federal sentencing guidelines in accordance with the procedures set forth in section 21(a) of the Sentencing Act of 1987 (28 U.S.C. 994 note) as though the authority under that section had not expired.</p><p><strong>(3) Responsibilities of United States Sentencing Commission.—</strong>In carrying out this subsection, the United States Sentencing Commission shall determine whether the definition of ‘infringement amount’ set forth in application note 2 of section 2B5.3 of the Federal sentencing guidelines is adequate to address situations in which the defendant has been convicted of one of the offenses listed in paragraph (1) and the item in which the defendant trafficked was not an infringing item but rather was intended to facilitate infringement, such as an anti-circumvention device, or the item in which the defendant trafficked was infringing and also was intended to facilitate infringement in another good or service, such as a counterfeit label, documentation, or packaging, taking into account cases such as U.S. v. Sung, 87 F.3d 194 (7th Cir. 1996).”</p></blockquote><p>* * *</p>\"},{\"id\":\"PUB.L.109–248\",\"content\":\"<p><strong>ADAM WALSH CHILD PROTECTION AND SAFETY ACT OF 2006</strong></p><p><strong>or</strong></p><p><strong>SEX OFFENDER REGISTRATION AND </strong></p><p><strong>NOTIFICATION ACT</strong></p><p><strong>(PUB. L. 109–248)</strong></p><p><strong>SEX OFFENDER REGISTRATION (SECTION 2250 OFFENSES).</strong> Pub. L. 109–248, § 141(b), July 27, 2006, 120 Stat. 587, provided:</p><p>“<strong>Sec. 141. Amendments to Title 18, United States Code, Relating to Sex Offender Registration.</strong></p><p><strong>(a)</strong> [omitted; enacted 18 U.S.C. § 2250 (Failure to register)]</p><p><strong>(b) Directive to the United States Sentencing Commission.—</strong>In promulgating guidelines for use of a sentencing court in determining the sentence to be imposed for the offense specified in subsection (a), the United States Sentencing Commission shall consider the following matters, in addition to the matters specified in section 994 of title 28, United States Code:</p><blockquote><p><strong>(1)</strong> Whether the person committed another sex offense in connection with, or during, the period for which the person failed to register.</p><p><strong>(2)</strong> Whether the person committed an offense against a minor in connection with, or during, the period for which the person failed to register.</p><p><strong>(3)</strong> Whether the person voluntarily attempted to correct the failure to register.</p><p><strong>(4)</strong> The seriousness of the offense which gave rise to the requirement to register, including whether such offense is a tier I, tier II, or tier III offense, as those terms are defined in section 111.</p><p><strong>(5)</strong> Whether the person has been convicted or adjudicated delinquent for any offense other than the offense which gave rise to the requirement to register.”</p></blockquote><p>* * *</p>\"},{\"id\":\"PUB.L.109–295\",\"content\":\"<p><strong>DEPARTMENT OF HOMELAND SECURITY APPROPRIATIONS ACT, 2007</strong></p><p><strong>(PUB. L. 109–295)</strong></p><p><strong>OFFENSES INVOLVING BORDER TUNNELS AND SUBTERRANEAN PASSAGES (SECTION 554 OFFENSES).</strong> Pub. L. 109–295, § 551(d), Oct. 4, 2006, 120 Stat. 1390, provided:</p><p>“<strong>(d) Directive to the United States Sentencing Commission.—</strong></p><blockquote><p><strong>(1) In general.—</strong>Pursuant to its authority under section 994 of title 28, United States Code, and in accordance with this subsection, the United States Sentencing Commission shall promulgate or amend sentencing guidelines to provide for increased penalties for persons convicted of offenses described in section 554 of title 18, United States Code, as added by subsection (a).</p><p><strong>(2) Requirements.—</strong>In carrying out this subsection, the United States Sentencing Commission shall—</p><p><strong>(A)</strong> ensure that the sentencing guidelines, policy statements, and official commentary reflect the serious nature of the offenses described in section 554 of title 18, United States Code, and the need for aggressive and appropriate law enforcement action to prevent such offenses;</p><p><strong>(B)</strong> provide adequate base offense levels for offenses under such section;</p><p><strong>(C</strong>) account for any aggravating or mitigating circumstances that might justify exceptions, including—</p><p><strong>(i)</strong> the use of a tunnel or passage described in subsection (a) of such section to facilitate other felonies; and</p><p><strong>(ii)</strong> the circumstances for which the sentencing guidelines currently provide applicable sentencing enhancements;</p><p><strong>(D)</strong> ensure reasonable consistency with other relevant directives, other sentencing guidelines, and statutes;</p><p><strong>(E)</strong> make any necessary and conforming changes to the sentencing guidelines and policy statements; and</p><p><strong>(F)</strong> ensure that the sentencing guidelines adequately meet the purposes of sentencing set forth in section 3553(a)(2) of title 18, United States Code.”</p></blockquote><p>* * *</p>\"},{\"id\":\"PUB.L.109–476\",\"content\":\"<p><strong>TELEPHONE RECORDS AND PRIVACY </strong></p><p><strong>PROTECTION ACT OF 2006</strong></p><p><strong>(PUB. L. 109–476)</strong></p><p><strong>FRAUD IN OBTAINING CONFIDENTIAL PHONE RECORDS INFORMATION (SECTION 1039 OFFENSES).</strong> Pub. L. 109–476, § 4, Jan. 12, 2007, 120 Stat. 3571, provided:</p><p>“<strong>Sec. 4. Sentencing Guidelines.</strong></p><p><strong>(a) Review and Amendment.—</strong>Not later than 180 days after the date of enactment of this Act, the United States Sentencing Commission, pursuant to its authority under section 994 of title 28, United States Code, and in accordance with this section, shall review and, if appropriate, amend the Federal sentencing guidelines and policy statements applicable to persons convicted of any offense under section 1039 of title 18, United States Code.</p><p><strong>(b) Authorization.—</strong>The United States Sentencing Commission may amend the Federal sentencing guidelines in accordance with the procedures set forth in section 21(a) of the Sentencing Act of 1987 (28 U.S.C. 994 note) as though the authority under that section had not expired.”</p><p>* * *</p>\"},{\"id\":\"PUB.L.110–177\",\"content\":\"<p><strong>COURT SECURITY IMPROVEMENT ACT OF 2007</strong></p><p><strong>(PUB. L. 110–177)</strong></p><p><strong>THREATS OVER THE INTERNET AGAINST FEDERAL OFFICIALS (SECTION 115 OFFENSES).</strong> Pub. L. 110–177, § 209, Jan. 7, 2008, 121 Stat. 2538, provided:</p><p>“<strong>Sec. 209. Direction to the Sentencing Commission.</strong></p><p>The United States Sentencing Commission is directed to review the Sentencing Guidelines as they apply to threats punishable under section 115 of title 18, United States Code, that occur over the Internet, and determine whether and by how much that circumstance should aggravate the punishment pursuant to section 994 of title 28, United States Code. In conducting the study, the Commission shall take into consideration the number of such threats made, the intended number of recipients of such threats, and whether the initial senders of such threats were acting in an individual capacity or as part of a larger group.”</p><p>* * *</p>\"},{\"id\":\"PUB.L.110–179\",\"content\":\"<p><strong>EMERGENCY AND DISASTER ASSISTANCE FRAUD PENALTY ENHANCEMENT ACT</strong></p><p><strong>OF 2007</strong></p><p><strong>(PUB. L. 110–179)</strong></p><p><strong>DISASTER ASSISTANCE FRAUD.</strong> Pub. L. 110–179, § 5, Jan. 7, 2008, 121 Stat. 2557, provided:</p><p>“<strong>Sec. 5. Directive to Sentencing Commission.</strong></p><p><strong>(a) In General.—</strong>Pursuant to its authority under section 994(p) of title 28, United States Code, and in accordance with this section, the United States Sentencing Commission forthwith shall—</p><blockquote><p><strong>(1)</strong> promulgate sentencing guidelines or amend existing sentencing guidelines to provide for increased penalties for persons convicted of fraud or theft offenses in connection with a major disaster declaration under section 401 of the Robert T. Stafford Disaster Relief and Emergency Assistance Act (42 U.S.C. 5170) or an emergency declaration under section 501 of the Robert T. Stafford Disaster Relief and Emergency Assistance Act (42 U.S.C. 5191); and</p><p><strong>(2)</strong> submit to the Committee on the Judiciary of the Senate and the Committee on the Judiciary of the House of Representatives an explanation of actions taken by the Commission pursuant to paragraph (1) and any additional policy recommendations the Commission may have for combating offenses described in that paragraph.</p></blockquote><p><strong>(b) Requirements.</strong>—In carrying out this section, the Sentencing Commission shall—</p><blockquote><p><strong>(1)</strong> ensure that the sentencing guidelines and policy statements reflect the serious nature of the offenses described in subsection (a) and the need for aggressive and appropriate law enforcement action to prevent such offenses;</p><p><strong>(2)</strong> assure reasonable consistency with other relevant directives and with other guidelines;</p><p><strong>(3)</strong> account for any aggravating or mitigating circumstances that might justify exceptions, including circumstances for which the sentencing guidelines currently provide sentencing enhancements;</p><p><strong>(4)</strong> make any necessary conforming changes to the sentencing guidelines; and</p><p><strong>(5)</strong> assure that the guidelines adequately meet the purposes of sentencing as set forth in section 3553(a)(2) of title 18, United States Code.</p></blockquote><p><strong>(c) Emergency Authority and Deadline for Commission Action.</strong>—The Commission shall promulgate the guidelines or amendments provided for under this section as soon as practicable, and in any event not later than the 30 days after the date of enactment of this Act, in accordance with the procedures set forth in section 21(a) of the Sentencing Reform Act of 1987, as though the authority under that Act had not expired.”</p><p>* * *</p>\"},{\"id\":\"PUB.L.110–326\",\"content\":\"<p><strong>FORMER VICE PRESIDENT PROTECTION ACT OF 2008</strong></p><p><strong>or</strong></p><p><strong>IDENTITY THEFT ENFORCEMENT AND </strong></p><p><strong>RESTITUTION ACT OF 2008</strong></p><p><strong>(PUB. L. 110–326)</strong></p><p><strong>COMPUTER CRIME; THEFT OR MISUSE OF PERSONALLY IDENTIFIABLE DATA (SECTION 1028, 1028A, 1030, 2511, AND 2701 OFFENSES).</strong> Pub.L. 110–326, Title II, § 209, Sept. 26, 2008, 122 Stat. 3564, provided:</p><p>“<strong>Sec. 209. Directive to United States Sentencing Commission.</strong></p><p><strong>(a) Directive.—</strong>Pursuant to its authority under section 994(p) of title 28, United States Code, and in accordance with this section, the United States Sentencing Commission shall review its guidelines and policy statements applicable to persons convicted of offenses under sections 1028, 1028A, 1030, 2511, and 2701 of title 18, United States Code, and any other relevant provisions of law, in order to reflect the intent of Congress that such penalties be increased in comparison to those currently provided by such guidelines and policy statements.</p><p><strong>(b) Requirements.—</strong>In determining its guidelines and policy statements on the appropriate sentence for the crimes enumerated in subsection (a), the United States Sentencing Commission shall consider the extent to which the guidelines and policy statements may or may not account for the following factors in order to create an effective deterrent to computer crime and the theft or misuse of personally identifiable data:</p><blockquote><p><strong>(1)</strong> The level of sophistication and planning involved in such offense.</p><p><strong>(2)</strong> Whether such offense was committed for purpose of commercial advantage or private financial benefit.</p><p><strong>(3)</strong> The potential and actual loss resulting from the offense including—</p><p><strong>(A)</strong> the value of information obtained from a protected computer, regardless of whether the owner was deprived of use of the information; and</p><p><strong>(B)</strong> where the information obtained constitutes a trade secret or other proprietary information, the cost the victim incurred developing or compiling the information.</p><p><strong>(4)</strong> Whether the defendant acted with intent to cause either physical or property harm in committing the offense.</p><p><strong>(5)</strong> The extent to which the offense violated the privacy rights of individuals.</p><p><strong>(6)</strong> The effect of the offense upon the operations of an agency of the United States Government, or of a State or local government.</p><p><strong>(7)</strong> Whether the offense involved a computer used by the United States Government, a State, or a local government in furtherance of national defense, national security, or the administration of justice.</p><p><strong>(8)</strong> Whether the offense was intended to, or had the effect of, significantly interfering with or disrupting a critical infrastructure.</p><p><strong>(9)</strong> Whether the offense was intended to, or had the effect of, creating a threat to public health or safety, causing injury to any person, or causing death.</p><p><strong>(10)</strong> Whether the defendant purposefully involved a juvenile in the commission of the offense.</p><p><strong>(11)</strong> Whether the defendant’s intent to cause damage or intent to obtain personal information should be disaggregated and considered separately from the other factors set forth in USSG 2B1.1(b)(14).</p><p><strong>(12)</strong> Whether the term “victim’‘ as used in USSG 2B1.1, should include individuals whose privacy was violated as a result of the offense in addition to individuals who suffered monetary harm as a result of the offense.</p><p><strong>(13)</strong> Whether the defendant disclosed personal information obtained during the commission of the offense.</p></blockquote><p><strong>(c) Additional Requirements.—</strong>In carrying out this section, the United States Sentencing Commission shall—</p><blockquote><p><strong>(1)</strong> assure reasonable consistency with other relevant directives and with other sentencing guidelines;</p><p><strong>(2)</strong> account for any additional aggravating or mitigating circumstances that might justify exceptions to the generally applicable sentencing ranges;</p><p><strong>(3)</strong> make any conforming changes to the sentencing guidelines; and</p><p><strong>(4)</strong> assure that the guidelines adequately meet the purposes of sentencing as set forth in section 3553(a)(2) of title 18, United States Code.”</p></blockquote><p>* * *</p>\"},{\"id\":\"PUB.L.110–384\",\"content\":\"<p><strong>LET OUR VETERANS REST IN PEACE ACT OF 2008</strong></p><p><strong>(PUB. L. 110–384)</strong></p><p><strong>VETERANS’ GRAVE MARKERS.</strong> Pub.L. 110–384, § 3, Oct. 10, 2008, 122 Stat. 4094, provided:</p><p>“<strong>Sec. 3. Direction to the Sentencing Commission.</strong></p><p><strong>(a) In General.—</strong>Pursuant to its authority under section 994 of title 28, United States Code, the United States Sentencing Commission shall review and, if appropriate, amend the Federal sentencing guidelines and policy statements to ensure the guidelines and policy statements provide adequate sentencing enhancements for any offense involving the desecration, theft, or trafficking in, a grave marker, headstone, monument, or other object, intended to permanently mark a veteran’s grave.</p><p><strong>(b) Commission Duties.—</strong>In carrying out this section, the Sentencing Commission shall—</p><blockquote><p><strong>(1)</strong> ensure that the sentences, guidelines, and policy statements relating to offenders convicted of these offenses are appropriately severe and reasonably consistent with other relevant directives and other Federal sentencing guidelines and policy statements;</p><p><strong>(2)</strong> make any necessary conforming changes to the Federal sentencing guidelines; and</p><p><strong>(3)</strong> assure that the guidelines adequately meet the purposes of sentencing as set forth in section 3553(a)(2) of title 18, United States Code.”</p></blockquote><p>* * *</p>\"},{\"id\":\"PUB.L.110–407\",\"content\":\"<p><strong>DRUG TRAFFICKING VESSEL </strong></p><p><strong>INTERDICTION ACT OF 2008</strong></p><p><strong>(PUB. L. 110–407)</strong></p><p><strong>SUBMERSIBLE VESSELS (SECTION 2285 OFFENSES).</strong> Pub.L. 110–407, Title I, § 103, Oct. 13, 2008, 122 Stat. 4298, provided:</p><p>“<strong>Sec. 103. Sentencing Guidelines.</strong></p><p><strong>(a) In General.—</strong>Pursuant to its authority under section 994(p) of title 28, United States Code, and in accordance with this section, the United States Sentencing Commission shall promulgate sentencing guidelines (including policy statements) or amend existing sentencing guidelines (including policy statements) to provide adequate penalties for persons convicted of knowingly operating by any means or embarking in any submersible vessel or semi‑submersible vessel in violation of section 2285 of title 18, United States Code.</p><p><strong>(b) Requirements.—</strong>In carrying out this section, the United States Sentencing Commission shall—</p><blockquote><p><strong>(1)</strong> ensure that the sentencing guidelines and policy statements reflect the serious nature of the offense described in section 2285 of title 18, United States Code, and the need for deterrence to prevent such offenses;</p><p><strong>(2)</strong> account for any aggravating or mitigating circumstances that might justify exceptions, including—</p><p><strong>(A)</strong> the use of a submersible vessel or semi‑submersible vessel described in section 2285 of title 18, United States Code, to facilitate other felonies;</p><p><strong>(B)</strong> the repeated use of a submersible vessel or semi‑submersible vessel described in section 2285 of title 18, United States Code, to facilitate other felonies, including whether such use is part of an ongoing criminal organization or enterprise;</p><p><strong>(C)</strong> whether the use of such a vessel involves a pattern of continued and flagrant violations of section 2285 of title 18, United States Code;</p><p><strong>(D)</strong> whether the persons operating or embarking in a submersible vessel or semi‑submersible vessel willfully caused, attempted to cause, or permitted the destruction or damage of such vessel or failed to heave to when directed by law enforcement officers; and</p><p><strong>(E)</strong> circumstances for which the sentencing guidelines (and policy statements) provide sentencing enhancements;</p><p><strong>(3)</strong> ensure reasonable consistency with other relevant directives, other sentencing guidelines and policy statements, and statutory provisions;</p><p><strong>(4)</strong> make any necessary and conforming changes to the sentencing guidelines and policy statements; and</p><p><strong>(5)</strong> ensure that the sentencing guidelines and policy statements adequately meet the purposes of sentencing set forth in section 3553(a)(2) of title 18, United States Code.”</p></blockquote><p>* * *</p>\"},{\"id\":\"PUB.L.110–425\",\"content\":\"<p><strong>RYAN HAIGHT ONLINE PHARMACY </strong></p><p><strong>CONSUMER PROTECTION ACT OF 2008</strong></p><p><strong>(PUB. L. 110–425)</strong></p><p><strong>DELIVERY OF CONTROLLED SUBSTANCES BY MEANS OF THE INTERNET.</strong> Pub.L. 110–425, § 3(k)(2), Oct. 15, 2008, 122 Stat. 4833, provided:</p><p>“<strong>(2) Sentencing guidelines.—</strong>The United States Sentencing Commission, in determining whether to amend, or establish new, guidelines or policy statements, to conform the Federal sentencing guidelines and policy statements to this Act and the amendments made by this Act, should not construe any change in the maximum penalty for a violation involving a controlled substance in a particular schedule as being the sole reason to amend, or establish a new, guideline or policy statement.”</p><p>* * *</p>\"},{\"id\":\"PUB.L.110–457\",\"content\":\"<p><strong>WILLIAM WILBERFORCE TRAFFICKING VICTIMS PROTECTION</strong></p><p><strong>REAUTHORIZATION ACT OF 2008</strong></p><p><strong>(PUB. L. 110–457)</strong></p><p><strong>ALIEN HARBORING.</strong> Pub.L. 110–457, Title II, § 222(g), Dec. 23, 2008, 122 Stat. 5071, provided:</p><p>“<strong>(g) Amendment to Sentencing Guidelines.—</strong>Pursuant to its authority under section 994 of title 28, United States Code, the United States Sentencing Commission shall review and, if appropriate, amend the sentencing guidelines and policy statements applicable to persons convicted of alien harboring to ensure conformity with the sentencing guidelines applicable to persons convicted of promoting a commercial sex act if—</p><blockquote><p><strong>(1)</strong> the harboring was committed in furtherance of prostitution; and</p><p><strong>(2)</strong> the defendant to be sentenced is an organizer, leader, manager, or supervisor of the criminal activity.”</p></blockquote><p>* * *</p>\"},{\"id\":\"PUB.L.111–84\",\"content\":\"<p><strong>NATIONAL DEFENSE AUTHORIZATION ACT FOR FISCAL YEAR 2010</strong></p><p><strong>or</strong></p><p><strong>MATTHEW SHEPARD AND JAMES BYRD, JR. HATE CRIMES PREVENTION ACT</strong></p><p><strong>(PUB. L. 111–84)</strong></p><p><strong>REPORT ON MANDATORY MINIMUM SENTENCING PROVISIONS.</strong> Pub.L. 111–84, Div. E, § 4713, Oct. 28, 2009, 123 Stat. 2843, provided:</p><p>“<strong>Sec. 4713. Report on Mandatory Minimum Sentencing Provisions.</strong></p><p><strong>(a) Report.</strong>—Not later than 1 year after the date of enactment of this Act, the United States Sentencing Commission shall submit to the Committee on the Judiciary of the Senate and the Committee on the Judiciary of the House of Representatives a report on mandatory minimum sentencing provisions under Federal law.</p><p><strong>(b) Contents of Report.</strong>—The report submitted under subsection (a) shall include—</p><blockquote><p><strong>(1)</strong> a compilation of all mandatory minimum sentencing provisions under Federal law;</p><p><strong>(2)</strong> an assessment of the effect of mandatory minimum sentencing provisions under Federal law on the goal of eliminating unwarranted sentencing disparity and other goals of sentencing;</p><p><strong>(3)</strong> an assessment of the impact of mandatory minimum sentencing provisions on the Federal prison population;</p><p><strong>(4)</strong> an assessment of the compatibility of mandatory minimum sentencing provisions under Federal law and the sentencing guidelines system established under the Sentencing Reform Act of 1984 (Public Law 98–473; 98 Stat. 1987) and the sentencing guidelines system in place after Booker v. United States, 543 U.S. 220 (2005);</p><p><strong>(5)</strong> a description of the interaction between mandatory minimum sentencing provisions under Federal law and plea agreements;</p><p><strong>(6)</strong> a detailed empirical research study of the effect of mandatory minimum penalties under Federal law;</p><p><strong>(7)</strong> a discussion of mechanisms other than mandatory minimum sentencing laws by which Congress can take action with respect to sentencing policy; and</p><p><strong>(8)</strong> any other information that the Commission determines would contribute to a thorough assessment of mandatory minimum sentencing provisions under Federal law.”</p></blockquote><p>* * *</p>\"},{\"id\":\"PUB.L.111–148\",\"content\":\"<p><strong>PATIENT PROTECTION AND AFFORDABLE CARE ACT</strong></p><p><strong>(PUB. L. 111–148)</strong></p><p><strong>FEDERAL HEALTH CARE OFFENSES.</strong> Pub.L. 111–148, § 10606(a), Mar. 23, 2010, 124 Stat. 1006, provided:</p><p><strong>“(a) Fraud Sentencing Guidelines.—</strong></p><blockquote><p><strong>(1) Definition.—</strong>In this subsection, the term ‘Federal health care offense’ has the meaning given that term in section 24 of title 18, United States Code, as amended by this Act.</p><p><strong>(2) Review and amendments.—</strong>Pursuant to the authority under section 994 of title 28, United States Code, and in accordance with this subsection, the United States Sentencing Commission shall—</p><p><strong>(A)</strong> review the Federal Sentencing Guidelines and policy statements applicable to persons convicted of Federal health care offenses;</p><p><strong>(B)</strong> amend the Federal Sentencing Guidelines and policy statements applicable to persons convicted of Federal health care offenses involving Government health care programs to provide that the aggregate dollar amount of fraudulent bills submitted to the Government health care program shall constitute prima facie evidence of the amount of the intended loss by the defendant; and</p><p><strong>(C)</strong> amend the Federal Sentencing Guidelines to provide—</p><p><strong>(i)</strong> a 2-level increase in the offense level for any defendant convicted of a Federal health care offense relating to a Government health care program which involves a loss of not less than $1,000,000 and less than $7,000,000;</p><p><strong>(ii)</strong> a 3-level increase in the offense level for any defendant convicted of a Federal health care offense relating to a Government health care program which involves a loss of not less than $7,000,000 and less than $20,000,000;</p><p><strong>(iii)</strong> a 4-level increase in the offense level for any defendant convicted of a Federal health care offense relating to a Government health care program which involves a loss of not less than $20,000,000; and</p><p><strong>(iv)</strong> if appropriate, otherwise amend the Federal Sentencing Guidelines and policy statements applicable to persons convicted of Federal health care offenses involving Government health care programs.</p><p><strong>(3) Requirements.—</strong>In carrying this subsection, the United States Sentencing Commission shall—</p><p><strong>(A)</strong> ensure that the Federal Sentencing Guidelines and policy statements—</p><p><strong>(i)</strong> reflect the serious harms associated with health care fraud and the need for aggressive and appropriate law enforcement action to prevent such fraud; and</p><p><strong>(ii)</strong> provide increased penalties for persons convicted of health care fraud offenses in appropriate circumstances;</p><p><strong>(B)</strong> consult with individuals or groups representing health care fraud victims, law enforcement officials, the health care industry, and the Federal judiciary as part of the review described in paragraph (2);</p><p><strong>(C)</strong> ensure reasonable consistency with other relevant directives and with other guidelines under the Federal Sentencing Guidelines;</p><p><strong>(D)</strong> account for any aggravating or mitigating circumstances that might justify exceptions, including circumstances for which the Federal Sentencing Guidelines, as in effect on the date of enactment of this Act, provide sentencing enhancements;</p><p><strong>(E)</strong> make any necessary conforming changes to the Federal Sentencing Guidelines; and</p><p><strong>(F)</strong> ensure that the Federal Sentencing Guidelines adequately meet the purposes of sentencing.”</p></blockquote><p>* * *</p>\"},{\"id\":\"PUB.L.111–203\",\"content\":\"<p><strong>DODD–FRANK WALL STREET REFORM AND CONSUMER PROTECTION ACT</strong></p><p><strong>(PUB. L. 111–203)</strong></p><p><strong>OFFENSES RELATING TO SECURITIES FRAUD, FINANCIAL INSTITUTION FRAUD, OR FEDERALLY RELATED MORTGAGE LOAN FRAUD.</strong> Pub.L. 111–203, § 1079A(a), July 21, 2010, 124 Stat. 2077–78, provided:</p><p><strong>“(a) Sentencing Guidelines.—</strong></p><blockquote><p><strong>(1) Securities fraud.—</strong></p><p><strong>(A) Directive.—</strong>Pursuant to its authority under section 994 of title 28, United States Code, and in accordance with this paragraph, the United States Sentencing Commission shall review and, if appropriate, amend the Federal Sentencing Guidelines and policy statements applicable to persons convicted of offenses relating to securities fraud or any other similar provision of law, in order to reflect the intent of Congress that penalties for the offenses under the guidelines and policy statements appropriately account for the potential and actual harm to the public and the financial markets from the offenses.</p><p><strong>(B) Requirements.—</strong>In making any amendments to the Federal Sentencing Guidelines and policy statements under subparagraph (A), the United States Sentencing Commission shall—</p><p><strong>(i)</strong> ensure that the guidelines and policy statements, particularly section 2B1.1(b)(14) and section 2B1.1(b)(17) (and any successors thereto), reflect—</p><p><strong>(I)</strong> the serious nature of the offenses described in subparagraph (A);</p><p><strong>(II)</strong> the need for an effective deterrent and appropriate punishment to prevent the offenses; and</p><p><strong>(III)</strong> the effectiveness of incarceration in furthering the objectives described in subclauses (I) and (II);</p><p><strong>(ii)</strong> consider the extent to which the guidelines appropriately account for the potential and actual harm to the public and the financial markets resulting from the offenses;</p><p><strong>(iii)</strong> ensure reasonable consistency with other relevant directives and guidelines and Federal statutes;</p><p><strong>(iv)</strong> make any necessary conforming changes to guidelines; and</p><p><strong>(v)</strong> ensure that the guidelines adequately meet the purposes of sentencing, as set forth in section 3553(a)(2) of title 18, United States Code.</p><p><strong>(2) Financial institution fraud.—</strong></p><p><strong>(A) Directive.—</strong>Pursuant to its authority under section 994 of title 28, United States Code, and in accordance with this paragraph, the United States Sentencing Commission shall review and, if appropriate, amend the Federal Sentencing Guidelines and policy statements applicable to persons convicted of fraud offenses relating to financial institutions or federally related mortgage loans and any other similar provisions of law, to reflect the intent of Congress that the penalties for the offenses under the guidelines and policy statements ensure appropriate terms of imprisonment for offenders involved in substantial bank frauds or other frauds relating to financial institutions.</p><p><strong>(B) Requirements.—</strong>In making any amendments to the Federal Sentencing Guidelines and policy statements under subparagraph (A), the United States Sentencing Commission shall—</p><p><strong>(i)</strong> ensure that the guidelines and policy statements reflect—</p><p><strong>(I)</strong> the serious nature of the offenses described in subparagraph (A);</p><p><strong>(II)</strong> the need for an effective deterrent and appropriate punishment to prevent the offenses; and</p><p><strong>(III)</strong> the effectiveness of incarceration in furthering the objectives described in subclauses (I) and (II);</p><p><strong>(ii)</strong> consider the extent to which the guidelines appropriately account for the potential and actual harm to the public and the financial markets resulting from the offenses;</p><p><strong>(iii)</strong> ensure reasonable consistency with other relevant directives and guidelines and Federal statutes;</p><p><strong>(iv)</strong> make any necessary conforming changes to guidelines; and</p><p><strong>(v)</strong> ensure that the guidelines adequately meet the purposes of sentencing, as set forth in section 3553(a)(2) of title 18, United States Code.”</p></blockquote><p>* * *</p>\"},{\"id\":\"PUB.L.111–220\",\"content\":\"<p><strong>FAIR SENTENCING ACT OF 2010</strong></p><p><strong>(PUB. L. 111–220)</strong></p><p><strong>ENHANCEMENTS FOR ACTS OF VIOLENCE DURING DRUG TRAFFICKING OFFENSE; INCREASED EMPHASIS ON DEFENDANT’S ROLE AND CERTAIN AGGRAVATING AND MITIGATING FACTORS; EMERGENCY AUTHORITY; REPORT TO CONGRESS.</strong> Pub.L. 111–220, §§ 5 to 8, 10, Aug. 3, 2010, 124 Stat. 2373, provided:</p><p><strong>“Sec. 5. Enhancements for Acts of Violence During the Course of a Drug Trafficking Offense.</strong></p><p>Pursuant to its authority under section 994 of title 28, United States Code, the United States Sentencing Commission shall review and amend the Federal sentencing guidelines to ensure that the guidelines provide an additional penalty increase of at least 2 offense levels if the defendant used violence, made a credible threat to use violence, or directed the use of violence during a drug trafficking offense.</p><p><strong>“Sec. 6. Increased Emphasis on Defendant’s Role and Certain Aggravating Factors.</strong></p><p>Pursuant to its authority under section 994 of title 28, United States Code, the United States Sentencing Commission shall review and amend the Federal sentencing guidelines to ensure an additional increase of at least 2 offense levels if—</p><blockquote><p><strong>(1)</strong> the defendant bribed, or attempted to bribe, a Federal, State, or local law enforcement official in connection with a drug trafficking offense;</p><p><strong>(2)</strong> the defendant maintained an establishment for the manufacture or distribution of a controlled substance, as generally described in section 416 of the Controlled Substances Act (21 U.S.C. 856); or</p><p><strong>(3)(A)</strong> the defendant is an organizer, leader, manager, or supervisor of drug trafficking activity subject to an aggravating role enhancement under the guidelines; and</p><p><strong>(B)</strong> the offense involved 1 or more of the following super-aggravating factors:</p><p><strong>(i)</strong> The defendant—</p><p><strong>(I)</strong> used another person to purchase, sell, transport, or store controlled substances;</p><p><strong>(II)</strong> used impulse, fear, friendship, affection, or some combination thereof to involve such person in the offense; and</p><p><strong>(III)</strong> such person had a minimum knowledge of the illegal enterprise and was to receive little or no compensation from the illegal transaction.</p><p><strong>(ii)</strong> The defendant—</p><p><strong>(I)</strong> knowingly distributed a controlled substance to a person under the age of 18 years, a person over the age of 64 years, or a pregnant individual;</p><p><strong>(II)</strong> knowingly involved a person under the age of 18 years, a person over the age of 64 years, or a pregnant individual in drug trafficking;</p><p><strong>(III)</strong> knowingly distributed a controlled substance to an individual who was unusually vulnerable due to physical or mental condition, or who was particularly susceptible to criminal conduct; or</p><p><strong>(IV)</strong> knowingly involved an individual who was unusually vulnerable due to physical or mental condition, or who was particularly susceptible to criminal conduct, in the offense.</p><p><strong>(iii)</strong> The defendant was involved in the importation into the United States of a controlled substance.</p><p><strong>(iv)</strong> The defendant engaged in witness intimidation, tampered with or destroyed evidence, or otherwise obstructed justice in connection with the investigation or prosecution of the offense.</p><p><strong>(v)</strong> The defendant committed the drug trafficking offense as part of a pattern of criminal conduct engaged in as a livelihood.</p></blockquote><p>“<strong>Sec. 7. Increased Emphasis on Defendant’s Role and Certain Mitigating Factors.</strong></p><p>Pursuant to its authority under section 994 of title 28, United States Code, the United States Sentencing Commission shall review and amend the Federal sentencing guidelines and policy statements to ensure that—</p><blockquote><p><strong>(1)</strong> if the defendant is subject to a minimal role adjustment under the guidelines, the base offense level for the defendant based solely on drug quantity shall not exceed level 32; and</p><p><strong>(2)</strong> there is an additional reduction of 2 offense levels if the defendant—</p><p><strong>(A)</strong> otherwise qualifies for a minimal role adjustment under the guidelines and had a minimum knowledge of the illegal enterprise;</p><p><strong>(B)</strong> was to receive no monetary compensation from the illegal transaction; and</p><p><strong>(C)</strong> was motivated by an intimate or familial relationship or by threats or fear when the defendant was otherwise unlikely to commit such an offense.</p></blockquote><p>“<strong>Sec. 8. Emergency Authority for United States Sentencing Commission.</strong></p><p>The United States Sentencing Commission shall—</p><blockquote><p><strong>(1)</strong> promulgate the guidelines, policy statements, or amendments provided for in this Act as soon as practicable, and in any event not later than 90 days after the date of enactment of this Act, in accordance with the procedure set forth in section 21(a) of the Sentencing Act of 1987 (28 U.S.C. 994 note), as though the authority under that Act had not expired; and</p><p><strong>(2)</strong> pursuant to the emergency authority provided under paragraph (1), make such conforming amendments to the Federal sentencing guidelines as the Commission determines necessary to achieve consistency with other guideline provisions and applicable law.</p></blockquote><p>“<strong>Sec. 9. Report [by Comptroller General] on Effectiveness of Drug Courts.</strong></p><p><strong>[omitted]</strong></p><p><strong>“Sec. 10. United States Sentencing Commission Report on Impact of Changes to Federal Cocaine Sentencing Law.</strong></p><p>Not later than 5 years after the date of enactment of this Act, the United States Sentencing Commission, pursuant to the authority under sections 994 and 995 of title 28, United States Code, and the responsibility of the United States Sentencing Commission to advise Congress on sentencing policy under section 995(a)(20) of title 28, United States Code, shall study and submit to Congress a report regarding the impact of the changes in Federal sentencing law under this Act and the amendments made by this Act.”</p><p>* * *</p>\"},{\"id\":\"PUB.L.111–273\",\"content\":\"<p><strong>SECURE AND RESPONSIBLE DRUG </strong></p><p><strong>DISPOSAL ACT</strong></p><p><strong>(PUB. L. 111–273)</strong></p><p><strong>DRUG OFFENSES RESULTING FROM AUTHORIZATION TO RECEIVE SCHEDULED SUBSTANCES FROM ULTIMATE USERS OR LONG-TERM CARE FACILITIES.</strong> Pub.L. 111–273, § 4, Oct. 12, 2010, 124 Stat. 2860, provided:</p><p><strong>“Sec. 4. Directive to the United States Sentencing Commission.</strong></p><p>Pursuant to its authority under section 994 of title 28, United States Code, the United States Sentencing Commission shall review and, if appropriate, amend the Federal sentencing guidelines and policy statements to ensure that the guidelines and policy statements provide an appropriate penalty increase of up to 2 offense levels above the sentence otherwise applicable in Part D of the Guidelines Manual if a person is convicted of a drug offense resulting from the authorization of that person to receive scheduled substances from an ultimate user or long-term care facility as set forth in the amendments made by section 3 [adding subsection (g) to 21 U.S.C. § 822 and paragraph (3) to 21 U.S.C. § 828(b)].”</p><p>* * *</p>\"},{\"id\":\"PUB.L.112–144\",\"content\":\"<p><strong>FOOD AND DRUG ADMINISTRATION SAFETY AND INNOVATION ACT</strong></p><p><strong>(PUB. L. 112–144)</strong></p><p><strong>COUNTERFEIT DRUG TRAFFICKING.</strong> Pub. L. 112–144, title VII, § 717(b), July 9, 2012, 126 Stat. 1076, provided:</p><p><strong>“(b) Sentencing Commission Directive.— </strong></p><blockquote><p><strong>(1) Directive to Sentencing Commission.—</strong>Pursuant to its authority under section 994(p) of title 28, United States Code, and in accordance with this subsection, the United States Sentencing Commission shall review and amend, if appropriate, its guidelines and its policy statements applicable to persons convicted of an offense described in section 2320(a)(4) of title 18, United States Code, as amended by subsection (a), in order to reflect the intent of Congress that such penalties be increased in comparison to those currently provided by the guidelines and policy statements.</p><p><strong>(2) Requirements.—</strong>In carrying out this subsection, the Commission shall—</p><p><strong>(A)</strong> ensure that the sentencing guidelines and policy statements reflect the intent of Congress that the guidelines and policy statements reflect the serious nature of the offenses described in paragraph (1) and the need for an effective deterrent and appropriate punishment to prevent such offenses;</p><p><strong>(B)</strong> consider the extent to which the guidelines may or may not appropriately account for the potential and actual harm to the public resulting from the offense;</p><p><strong>(C)</strong> assure reasonable consistency with other relevant directives and with other sentencing guidelines;</p><p><strong>(D)</strong> account for any additional aggravating or mitigating circumstances that might justify exceptions to the generally applicable sentencing ranges;</p><p><strong>(E)</strong> make any necessary conforming changes to the sentencing guidelines; and</p><p><strong>(F)</strong> assure that the guidelines adequately meet the purposes of sentencing as set forth in section 3553(a)(2) of title 18, United States Code.”</p></blockquote><p>* * *</p>\"},{\"id\":\"PUB.L.112–186\",\"content\":\"<p><strong>STRENGTHENING AND FOCUSING</strong></p><p><strong>ENFORCEMENT TO DETER ORGANIZED STEALING AND ENHANCE SAFETY ACT OF 2012</strong></p><p><strong>or</strong></p><p><strong>SAFE DOSES ACT</strong></p><p><strong>(PUB. L. 112–186)</strong></p><p><strong>THEFT OF PRE-RETAIL MEDICAL PRODUCTS.</strong> Pub. L. 112–186, § 7, Oct. 5, 2012, 126 Stat. 1430, provided:</p><p><strong>“Sec. 7. Directive to United States Sentencing Commission.</strong></p><p><strong>(a) In General.—</strong>Pursuant to its authority under section 994 of title 28, United States Code, and in accordance with this section, the United States Sentencing Commission shall review and, if appropriate, amend the Federal sentencing guidelines and policy statements applicable to persons convicted of offenses under section 670 of title 18, United States Code, as added by this Act, section 2118 of title 18, United States Code, or any another section of title 18, United States Code, amended by this Act, to reflect the intent of Congress that penalties for such offenses be sufficient to deter and punish such offenses, and appropriately account for the actual harm to the public from these offenses.</p><p><strong>(b) Requirements.—</strong>In carrying out this section, the United States Sentencing Commission shall—</p><blockquote><p><strong>(1)</strong> consider the extent to which the Federal sentencing guidelines and policy statements appropriately reflect—</p><p><strong>(A)</strong> the serious nature of such offenses;</p><p><strong>(B)</strong> the incidence of such offenses; and</p><p><strong>(C)</strong> the need for an effective deterrent and appropriate punishment to prevent such offenses;</p><p><strong>(2)</strong> consider establishing a minimum offense level under the Federal sentencing guidelines and policy statements for offenses covered by this Act;</p><p><strong>(3)</strong> account for any additional aggravating or mitigating circumstances that might justify exceptions to the generally applicable sentencing ranges;</p><p><strong>(4)</strong> ensure reasonable consistency with other relevant directives, Federal sentencing guidelines and policy statements;</p><p><strong>(5)</strong> make any necessary conforming changes to the Federal sentencing guidelines and policy statements; and</p><p><strong>(6)</strong> ensure that the Federal sentencing guidelines and policy statements adequately meet the purposes of sentencing set forth in section 3553(a)(2) of title 18, United States Code.”</p></blockquote><p>* * *</p>\"},{\"id\":\"PUB.L.112–206\",\"content\":\"<p><strong>CHILD PROTECTION ACT OF 2012</strong></p><p><strong>(PUB. L. 112–206)</strong></p><p><strong>PROTECTION OF CHILD WITNESSES.</strong> Pub. L. 112–206, § 3(b), Dec. 7, 2012, 126 Stat. 1492, provided:</p><p><strong>“(b) Sentencing Guidelines.—</strong>Pursuant to its authority under section 994 of title 28, United States Code, and in accordance with this section, the United States Sentencing Commission shall review and, if appropriate, amend the Federal sentencing guidelines and policy statements to ensure—</p><blockquote><p><strong>(1)</strong> that the guidelines provide an additional penalty increase above the sentence otherwise applicable in Part J of Chapter 2 of the Guidelines Manual if the defendant was convicted of a violation of section 1591 of title 18, United States Code, or chapters 109A, 109B, 110, or 117 of title 18, United States Code; and</p><p><strong>(2)</strong> if the offense described in paragraph (1) involved causing or threatening to cause physical injury to a person under 18 years of age, in order to obstruct the administration of justice, an additional penalty increase above the sentence otherwise applicable in Part J of Chapter 2 of the Guidelines Manual.”</p></blockquote><p>* * *</p>\"},{\"id\":\"PUB.L.112–269\",\"content\":\"<p><strong>FOREIGN AND ECONOMIC ESPIONAGE </strong></p><p><strong>PENALTY ENHANCEMENT ACT OF 2012</strong></p><p><strong>(PUB. L. 112–269)</strong></p><p><strong>TRADE SECRETS AND ECONOMIC ESPIONAGE.</strong> Pub. L. 112–269, § 3, Jan. 14, 2013, 126 Stat. 2442, provided:</p><p><strong>“Sec. 3. Review by the United States Sentencing Commission. </strong></p><p><strong>(a) In General.—</strong>Pursuant to its authority under section 994(p) of title 28, United States Code, the United States Sentencing Commission shall review and, if appropriate, amend the Federal sentencing guidelines and policy statements applicable to persons convicted of offenses relating to the transmission or attempted transmission of a stolen trade secret outside of the United States or economic espionage, in order to reflect the intent of Congress that penalties for such offenses under the Federal sentencing guidelines and policy statements appropriately, reflect the seriousness of these offenses, account for the potential and actual harm caused by these offenses, and provide adequate deterrence against such offenses.</p><p><strong>(b) Requirements.—</strong>In carrying out this section, the United States Sentencing Commission shall—</p><blockquote><p><strong>(1)</strong> consider the extent to which the Federal sentencing guidelines and policy statements appropriately account for the simple misappropriation of a trade secret, including the sufficiency of the existing enhancement for these offenses to address the seriousness of this conduct;</p><p><strong>(2)</strong> consider whether additional enhancements in the Federal sentencing guidelines and policy statements are appropriate to account for—</p><p><strong>(A)</strong> the transmission or attempted transmission of a stolen trade secret outside of the United States; and</p><p><strong>(B)</strong> the transmission or attempted transmission of a stolen trade secret outside of the United States that is committed or attempted to be committed for the benefit of a foreign government, foreign instrumentality, or foreign agent;</p><p><strong>(3)</strong> ensure the Federal sentencing guidelines and policy statements reflect the seriousness of these offenses and the need to deter such conduct;</p><p><strong>(4)</strong> ensure reasonable consistency with other relevant directives, Federal sentencing guidelines and policy statements, and related Federal statutes;</p><p><strong>(5)</strong> make any necessary conforming changes to the Federal sentencing guidelines and policy statements; and</p><p><strong>(6)</strong> ensure that the Federal sentencing guidelines adequately meet the purposes of sentencing as set forth in section 3553(a)(2) of title 18, United States Code.</p></blockquote><p><strong>(c) Consultation.—</strong>In carrying out the review required under this section, the Commission shall consult with individuals or groups representing law enforcement, owners of trade secrets, victims of economic espionage offenses, the United States Department of Justice, the United States Department of Homeland Security, the United States Department of State and the Office of the United States Trade Representative.</p><p><strong>(d) Review.—</strong>Not later than 180 days after the date of enactment of this Act, the Commission shall complete its consideration and review under this section.”</p>\"}]\n\n/***/ })\n\n});\n\n\n// WEBPACK FOOTER //\n// static/js/9.5bc6816e.chunk.js","import React from 'react';\r\nimport data from '../data/appendix-b';\r\nimport _ from 'lodash';\r\n\r\nexport default props => {\r\n  let content = _.find(data, b => b.id === props.match.params.part).content;\r\n  return (\r\n    <div>\r\n      <a href=\"/ab\">AppendixB</a>\r\n      <p dangerouslySetInnerHTML={{ __html: content }} />\r\n    </div>\r\n  );\r\n};\r\n\n\n\n// WEBPACK FOOTER //\n// ./src/pages/appendixbpart.js","/**\n * @license\n * Lodash <https://lodash.com/>\n * Copyright JS Foundation and other contributors <https://js.foundation/>\n * Released under MIT license <https://lodash.com/license>\n * Based on Underscore.js 1.8.3 <http://underscorejs.org/LICENSE>\n * Copyright Jeremy Ashkenas, DocumentCloud and Investigative Reporters & Editors\n */\n;(function() {\n\n  /** Used as a safe reference for `undefined` in pre-ES5 environments. */\n  var undefined;\n\n  /** Used as the semantic version number. */\n  var VERSION = '4.17.4';\n\n  /** Used as the size to enable large array optimizations. */\n  var LARGE_ARRAY_SIZE = 200;\n\n  /** Error message constants. */\n  var CORE_ERROR_TEXT = 'Unsupported core-js use. Try https://npms.io/search?q=ponyfill.',\n      FUNC_ERROR_TEXT = 'Expected a function';\n\n  /** Used to stand-in for `undefined` hash values. */\n  var HASH_UNDEFINED = '__lodash_hash_undefined__';\n\n  /** Used as the maximum memoize cache size. */\n  var MAX_MEMOIZE_SIZE = 500;\n\n  /** Used as the internal argument placeholder. */\n  var PLACEHOLDER = '__lodash_placeholder__';\n\n  /** Used to compose bitmasks for cloning. */\n  var CLONE_DEEP_FLAG = 1,\n      CLONE_FLAT_FLAG = 2,\n      CLONE_SYMBOLS_FLAG = 4;\n\n  /** Used to compose bitmasks for value comparisons. */\n  var COMPARE_PARTIAL_FLAG = 1,\n      COMPARE_UNORDERED_FLAG = 2;\n\n  /** Used to compose bitmasks for function metadata. */\n  var WRAP_BIND_FLAG = 1,\n      WRAP_BIND_KEY_FLAG = 2,\n      WRAP_CURRY_BOUND_FLAG = 4,\n      WRAP_CURRY_FLAG = 8,\n      WRAP_CURRY_RIGHT_FLAG = 16,\n      WRAP_PARTIAL_FLAG = 32,\n      WRAP_PARTIAL_RIGHT_FLAG = 64,\n      WRAP_ARY_FLAG = 128,\n      WRAP_REARG_FLAG = 256,\n      WRAP_FLIP_FLAG = 512;\n\n  /** Used as default options for `_.truncate`. */\n  var DEFAULT_TRUNC_LENGTH = 30,\n      DEFAULT_TRUNC_OMISSION = '...';\n\n  /** Used to detect hot functions by number of calls within a span of milliseconds. */\n  var HOT_COUNT = 800,\n      HOT_SPAN = 16;\n\n  /** Used to indicate the type of lazy iteratees. */\n  var LAZY_FILTER_FLAG = 1,\n      LAZY_MAP_FLAG = 2,\n      LAZY_WHILE_FLAG = 3;\n\n  /** Used as references for various `Number` constants. */\n  var INFINITY = 1 / 0,\n      MAX_SAFE_INTEGER = 9007199254740991,\n      MAX_INTEGER = 1.7976931348623157e+308,\n      NAN = 0 / 0;\n\n  /** Used as references for the maximum length and index of an array. */\n  var MAX_ARRAY_LENGTH = 4294967295,\n      MAX_ARRAY_INDEX = MAX_ARRAY_LENGTH - 1,\n      HALF_MAX_ARRAY_LENGTH = MAX_ARRAY_LENGTH >>> 1;\n\n  /** Used to associate wrap methods with their bit flags. */\n  var wrapFlags = [\n    ['ary', WRAP_ARY_FLAG],\n    ['bind', WRAP_BIND_FLAG],\n    ['bindKey', WRAP_BIND_KEY_FLAG],\n    ['curry', WRAP_CURRY_FLAG],\n    ['curryRight', WRAP_CURRY_RIGHT_FLAG],\n    ['flip', WRAP_FLIP_FLAG],\n    ['partial', WRAP_PARTIAL_FLAG],\n    ['partialRight', WRAP_PARTIAL_RIGHT_FLAG],\n    ['rearg', WRAP_REARG_FLAG]\n  ];\n\n  /** `Object#toString` result references. */\n  var argsTag = '[object Arguments]',\n      arrayTag = '[object Array]',\n      asyncTag = '[object AsyncFunction]',\n      boolTag = '[object Boolean]',\n      dateTag = '[object Date]',\n      domExcTag = '[object DOMException]',\n      errorTag = '[object Error]',\n      funcTag = '[object Function]',\n      genTag = '[object GeneratorFunction]',\n      mapTag = '[object Map]',\n      numberTag = '[object Number]',\n      nullTag = '[object Null]',\n      objectTag = '[object Object]',\n      promiseTag = '[object Promise]',\n      proxyTag = '[object Proxy]',\n      regexpTag = '[object RegExp]',\n      setTag = '[object Set]',\n      stringTag = '[object String]',\n      symbolTag = '[object Symbol]',\n      undefinedTag = '[object Undefined]',\n      weakMapTag = '[object WeakMap]',\n      weakSetTag = '[object WeakSet]';\n\n  var arrayBufferTag = '[object ArrayBuffer]',\n      dataViewTag = '[object DataView]',\n      float32Tag = '[object Float32Array]',\n      float64Tag = '[object Float64Array]',\n      int8Tag = '[object Int8Array]',\n      int16Tag = '[object Int16Array]',\n      int32Tag = '[object Int32Array]',\n      uint8Tag = '[object Uint8Array]',\n      uint8ClampedTag = '[object Uint8ClampedArray]',\n      uint16Tag = '[object Uint16Array]',\n      uint32Tag = '[object Uint32Array]';\n\n  /** Used to match empty string literals in compiled template source. */\n  var reEmptyStringLeading = /\\b__p \\+= '';/g,\n      reEmptyStringMiddle = /\\b(__p \\+=) '' \\+/g,\n      reEmptyStringTrailing = /(__e\\(.*?\\)|\\b__t\\)) \\+\\n'';/g;\n\n  /** Used to match HTML entities and HTML characters. */\n  var reEscapedHtml = /&(?:amp|lt|gt|quot|#39);/g,\n      reUnescapedHtml = /[&<>\"']/g,\n      reHasEscapedHtml = RegExp(reEscapedHtml.source),\n      reHasUnescapedHtml = RegExp(reUnescapedHtml.source);\n\n  /** Used to match template delimiters. */\n  var reEscape = /<%-([\\s\\S]+?)%>/g,\n      reEvaluate = /<%([\\s\\S]+?)%>/g,\n      reInterpolate = /<%=([\\s\\S]+?)%>/g;\n\n  /** Used to match property names within property paths. */\n  var reIsDeepProp = /\\.|\\[(?:[^[\\]]*|([\"'])(?:(?!\\1)[^\\\\]|\\\\.)*?\\1)\\]/,\n      reIsPlainProp = /^\\w*$/,\n      reLeadingDot = /^\\./,\n      rePropName = /[^.[\\]]+|\\[(?:(-?\\d+(?:\\.\\d+)?)|([\"'])((?:(?!\\2)[^\\\\]|\\\\.)*?)\\2)\\]|(?=(?:\\.|\\[\\])(?:\\.|\\[\\]|$))/g;\n\n  /**\n   * Used to match `RegExp`\n   * [syntax characters](http://ecma-international.org/ecma-262/7.0/#sec-patterns).\n   */\n  var reRegExpChar = /[\\\\^$.*+?()[\\]{}|]/g,\n      reHasRegExpChar = RegExp(reRegExpChar.source);\n\n  /** Used to match leading and trailing whitespace. */\n  var reTrim = /^\\s+|\\s+$/g,\n      reTrimStart = /^\\s+/,\n      reTrimEnd = /\\s+$/;\n\n  /** Used to match wrap detail comments. */\n  var reWrapComment = /\\{(?:\\n\\/\\* \\[wrapped with .+\\] \\*\\/)?\\n?/,\n      reWrapDetails = /\\{\\n\\/\\* \\[wrapped with (.+)\\] \\*/,\n      reSplitDetails = /,? & /;\n\n  /** Used to match words composed of alphanumeric characters. */\n  var reAsciiWord = /[^\\x00-\\x2f\\x3a-\\x40\\x5b-\\x60\\x7b-\\x7f]+/g;\n\n  /** Used to match backslashes in property paths. */\n  var reEscapeChar = /\\\\(\\\\)?/g;\n\n  /**\n   * Used to match\n   * [ES template delimiters](http://ecma-international.org/ecma-262/7.0/#sec-template-literal-lexical-components).\n   */\n  var reEsTemplate = /\\$\\{([^\\\\}]*(?:\\\\.[^\\\\}]*)*)\\}/g;\n\n  /** Used to match `RegExp` flags from their coerced string values. */\n  var reFlags = /\\w*$/;\n\n  /** Used to detect bad signed hexadecimal string values. */\n  var reIsBadHex = /^[-+]0x[0-9a-f]+$/i;\n\n  /** Used to detect binary string values. */\n  var reIsBinary = /^0b[01]+$/i;\n\n  /** Used to detect host constructors (Safari). */\n  var reIsHostCtor = /^\\[object .+?Constructor\\]$/;\n\n  /** Used to detect octal string values. */\n  var reIsOctal = /^0o[0-7]+$/i;\n\n  /** Used to detect unsigned integer values. */\n  var reIsUint = /^(?:0|[1-9]\\d*)$/;\n\n  /** Used to match Latin Unicode letters (excluding mathematical operators). */\n  var reLatin = /[\\xc0-\\xd6\\xd8-\\xf6\\xf8-\\xff\\u0100-\\u017f]/g;\n\n  /** Used to ensure capturing order of template delimiters. */\n  var reNoMatch = /($^)/;\n\n  /** Used to match unescaped characters in compiled string literals. */\n  var reUnescapedString = /['\\n\\r\\u2028\\u2029\\\\]/g;\n\n  /** Used to compose unicode character classes. */\n  var rsAstralRange = '\\\\ud800-\\\\udfff',\n      rsComboMarksRange = '\\\\u0300-\\\\u036f',\n      reComboHalfMarksRange = '\\\\ufe20-\\\\ufe2f',\n      rsComboSymbolsRange = '\\\\u20d0-\\\\u20ff',\n      rsComboRange = rsComboMarksRange + reComboHalfMarksRange + rsComboSymbolsRange,\n      rsDingbatRange = '\\\\u2700-\\\\u27bf',\n      rsLowerRange = 'a-z\\\\xdf-\\\\xf6\\\\xf8-\\\\xff',\n      rsMathOpRange = '\\\\xac\\\\xb1\\\\xd7\\\\xf7',\n      rsNonCharRange = '\\\\x00-\\\\x2f\\\\x3a-\\\\x40\\\\x5b-\\\\x60\\\\x7b-\\\\xbf',\n      rsPunctuationRange = '\\\\u2000-\\\\u206f',\n      rsSpaceRange = ' \\\\t\\\\x0b\\\\f\\\\xa0\\\\ufeff\\\\n\\\\r\\\\u2028\\\\u2029\\\\u1680\\\\u180e\\\\u2000\\\\u2001\\\\u2002\\\\u2003\\\\u2004\\\\u2005\\\\u2006\\\\u2007\\\\u2008\\\\u2009\\\\u200a\\\\u202f\\\\u205f\\\\u3000',\n      rsUpperRange = 'A-Z\\\\xc0-\\\\xd6\\\\xd8-\\\\xde',\n      rsVarRange = '\\\\ufe0e\\\\ufe0f',\n      rsBreakRange = rsMathOpRange + rsNonCharRange + rsPunctuationRange + rsSpaceRange;\n\n  /** Used to compose unicode capture groups. */\n  var rsApos = \"['\\u2019]\",\n      rsAstral = '[' + rsAstralRange + ']',\n      rsBreak = '[' + rsBreakRange + ']',\n      rsCombo = '[' + rsComboRange + ']',\n      rsDigits = '\\\\d+',\n      rsDingbat = '[' + rsDingbatRange + ']',\n      rsLower = '[' + rsLowerRange + ']',\n      rsMisc = '[^' + rsAstralRange + rsBreakRange + rsDigits + rsDingbatRange + rsLowerRange + rsUpperRange + ']',\n      rsFitz = '\\\\ud83c[\\\\udffb-\\\\udfff]',\n      rsModifier = '(?:' + rsCombo + '|' + rsFitz + ')',\n      rsNonAstral = '[^' + rsAstralRange + ']',\n      rsRegional = '(?:\\\\ud83c[\\\\udde6-\\\\uddff]){2}',\n      rsSurrPair = '[\\\\ud800-\\\\udbff][\\\\udc00-\\\\udfff]',\n      rsUpper = '[' + rsUpperRange + ']',\n      rsZWJ = '\\\\u200d';\n\n  /** Used to compose unicode regexes. */\n  var rsMiscLower = '(?:' + rsLower + '|' + rsMisc + ')',\n      rsMiscUpper = '(?:' + rsUpper + '|' + rsMisc + ')',\n      rsOptContrLower = '(?:' + rsApos + '(?:d|ll|m|re|s|t|ve))?',\n      rsOptContrUpper = '(?:' + rsApos + '(?:D|LL|M|RE|S|T|VE))?',\n      reOptMod = rsModifier + '?',\n      rsOptVar = '[' + rsVarRange + ']?',\n      rsOptJoin = '(?:' + rsZWJ + '(?:' + [rsNonAstral, rsRegional, rsSurrPair].join('|') + ')' + rsOptVar + reOptMod + ')*',\n      rsOrdLower = '\\\\d*(?:(?:1st|2nd|3rd|(?![123])\\\\dth)\\\\b)',\n      rsOrdUpper = '\\\\d*(?:(?:1ST|2ND|3RD|(?![123])\\\\dTH)\\\\b)',\n      rsSeq = rsOptVar + reOptMod + rsOptJoin,\n      rsEmoji = '(?:' + [rsDingbat, rsRegional, rsSurrPair].join('|') + ')' + rsSeq,\n      rsSymbol = '(?:' + [rsNonAstral + rsCombo + '?', rsCombo, rsRegional, rsSurrPair, rsAstral].join('|') + ')';\n\n  /** Used to match apostrophes. */\n  var reApos = RegExp(rsApos, 'g');\n\n  /**\n   * Used to match [combining diacritical marks](https://en.wikipedia.org/wiki/Combining_Diacritical_Marks) and\n   * [combining diacritical marks for symbols](https://en.wikipedia.org/wiki/Combining_Diacritical_Marks_for_Symbols).\n   */\n  var reComboMark = RegExp(rsCombo, 'g');\n\n  /** Used to match [string symbols](https://mathiasbynens.be/notes/javascript-unicode). */\n  var reUnicode = RegExp(rsFitz + '(?=' + rsFitz + ')|' + rsSymbol + rsSeq, 'g');\n\n  /** Used to match complex or compound words. */\n  var reUnicodeWord = RegExp([\n    rsUpper + '?' + rsLower + '+' + rsOptContrLower + '(?=' + [rsBreak, rsUpper, '$'].join('|') + ')',\n    rsMiscUpper + '+' + rsOptContrUpper + '(?=' + [rsBreak, rsUpper + rsMiscLower, '$'].join('|') + ')',\n    rsUpper + '?' + rsMiscLower + '+' + rsOptContrLower,\n    rsUpper + '+' + rsOptContrUpper,\n    rsOrdUpper,\n    rsOrdLower,\n    rsDigits,\n    rsEmoji\n  ].join('|'), 'g');\n\n  /** Used to detect strings with [zero-width joiners or code points from the astral planes](http://eev.ee/blog/2015/09/12/dark-corners-of-unicode/). */\n  var reHasUnicode = RegExp('[' + rsZWJ + rsAstralRange  + rsComboRange + rsVarRange + ']');\n\n  /** Used to detect strings that need a more robust regexp to match words. */\n  var reHasUnicodeWord = /[a-z][A-Z]|[A-Z]{2,}[a-z]|[0-9][a-zA-Z]|[a-zA-Z][0-9]|[^a-zA-Z0-9 ]/;\n\n  /** Used to assign default `context` object properties. */\n  var contextProps = [\n    'Array', 'Buffer', 'DataView', 'Date', 'Error', 'Float32Array', 'Float64Array',\n    'Function', 'Int8Array', 'Int16Array', 'Int32Array', 'Map', 'Math', 'Object',\n    'Promise', 'RegExp', 'Set', 'String', 'Symbol', 'TypeError', 'Uint8Array',\n    'Uint8ClampedArray', 'Uint16Array', 'Uint32Array', 'WeakMap',\n    '_', 'clearTimeout', 'isFinite', 'parseInt', 'setTimeout'\n  ];\n\n  /** Used to make template sourceURLs easier to identify. */\n  var templateCounter = -1;\n\n  /** Used to identify `toStringTag` values of typed arrays. */\n  var typedArrayTags = {};\n  typedArrayTags[float32Tag] = typedArrayTags[float64Tag] =\n  typedArrayTags[int8Tag] = typedArrayTags[int16Tag] =\n  typedArrayTags[int32Tag] = typedArrayTags[uint8Tag] =\n  typedArrayTags[uint8ClampedTag] = typedArrayTags[uint16Tag] =\n  typedArrayTags[uint32Tag] = true;\n  typedArrayTags[argsTag] = typedArrayTags[arrayTag] =\n  typedArrayTags[arrayBufferTag] = typedArrayTags[boolTag] =\n  typedArrayTags[dataViewTag] = typedArrayTags[dateTag] =\n  typedArrayTags[errorTag] = typedArrayTags[funcTag] =\n  typedArrayTags[mapTag] = typedArrayTags[numberTag] =\n  typedArrayTags[objectTag] = typedArrayTags[regexpTag] =\n  typedArrayTags[setTag] = typedArrayTags[stringTag] =\n  typedArrayTags[weakMapTag] = false;\n\n  /** Used to identify `toStringTag` values supported by `_.clone`. */\n  var cloneableTags = {};\n  cloneableTags[argsTag] = cloneableTags[arrayTag] =\n  cloneableTags[arrayBufferTag] = cloneableTags[dataViewTag] =\n  cloneableTags[boolTag] = cloneableTags[dateTag] =\n  cloneableTags[float32Tag] = cloneableTags[float64Tag] =\n  cloneableTags[int8Tag] = cloneableTags[int16Tag] =\n  cloneableTags[int32Tag] = cloneableTags[mapTag] =\n  cloneableTags[numberTag] = cloneableTags[objectTag] =\n  cloneableTags[regexpTag] = cloneableTags[setTag] =\n  cloneableTags[stringTag] = cloneableTags[symbolTag] =\n  cloneableTags[uint8Tag] = cloneableTags[uint8ClampedTag] =\n  cloneableTags[uint16Tag] = cloneableTags[uint32Tag] = true;\n  cloneableTags[errorTag] = cloneableTags[funcTag] =\n  cloneableTags[weakMapTag] = false;\n\n  /** Used to map Latin Unicode letters to basic Latin letters. */\n  var deburredLetters = {\n    // Latin-1 Supplement block.\n    '\\xc0': 'A',  '\\xc1': 'A', '\\xc2': 'A', '\\xc3': 'A', '\\xc4': 'A', '\\xc5': 'A',\n    '\\xe0': 'a',  '\\xe1': 'a', '\\xe2': 'a', '\\xe3': 'a', '\\xe4': 'a', '\\xe5': 'a',\n    '\\xc7': 'C',  '\\xe7': 'c',\n    '\\xd0': 'D',  '\\xf0': 'd',\n    '\\xc8': 'E',  '\\xc9': 'E', '\\xca': 'E', '\\xcb': 'E',\n    '\\xe8': 'e',  '\\xe9': 'e', '\\xea': 'e', '\\xeb': 'e',\n    '\\xcc': 'I',  '\\xcd': 'I', '\\xce': 'I', '\\xcf': 'I',\n    '\\xec': 'i',  '\\xed': 'i', '\\xee': 'i', '\\xef': 'i',\n    '\\xd1': 'N',  '\\xf1': 'n',\n    '\\xd2': 'O',  '\\xd3': 'O', '\\xd4': 'O', '\\xd5': 'O', '\\xd6': 'O', '\\xd8': 'O',\n    '\\xf2': 'o',  '\\xf3': 'o', '\\xf4': 'o', '\\xf5': 'o', '\\xf6': 'o', '\\xf8': 'o',\n    '\\xd9': 'U',  '\\xda': 'U', '\\xdb': 'U', '\\xdc': 'U',\n    '\\xf9': 'u',  '\\xfa': 'u', '\\xfb': 'u', '\\xfc': 'u',\n    '\\xdd': 'Y',  '\\xfd': 'y', '\\xff': 'y',\n    '\\xc6': 'Ae', '\\xe6': 'ae',\n    '\\xde': 'Th', '\\xfe': 'th',\n    '\\xdf': 'ss',\n    // Latin Extended-A block.\n    '\\u0100': 'A',  '\\u0102': 'A', '\\u0104': 'A',\n    '\\u0101': 'a',  '\\u0103': 'a', '\\u0105': 'a',\n    '\\u0106': 'C',  '\\u0108': 'C', '\\u010a': 'C', '\\u010c': 'C',\n    '\\u0107': 'c',  '\\u0109': 'c', '\\u010b': 'c', '\\u010d': 'c',\n    '\\u010e': 'D',  '\\u0110': 'D', '\\u010f': 'd', '\\u0111': 'd',\n    '\\u0112': 'E',  '\\u0114': 'E', '\\u0116': 'E', '\\u0118': 'E', '\\u011a': 'E',\n    '\\u0113': 'e',  '\\u0115': 'e', '\\u0117': 'e', '\\u0119': 'e', '\\u011b': 'e',\n    '\\u011c': 'G',  '\\u011e': 'G', '\\u0120': 'G', '\\u0122': 'G',\n    '\\u011d': 'g',  '\\u011f': 'g', '\\u0121': 'g', '\\u0123': 'g',\n    '\\u0124': 'H',  '\\u0126': 'H', '\\u0125': 'h', '\\u0127': 'h',\n    '\\u0128': 'I',  '\\u012a': 'I', '\\u012c': 'I', '\\u012e': 'I', '\\u0130': 'I',\n    '\\u0129': 'i',  '\\u012b': 'i', '\\u012d': 'i', '\\u012f': 'i', '\\u0131': 'i',\n    '\\u0134': 'J',  '\\u0135': 'j',\n    '\\u0136': 'K',  '\\u0137': 'k', '\\u0138': 'k',\n    '\\u0139': 'L',  '\\u013b': 'L', '\\u013d': 'L', '\\u013f': 'L', '\\u0141': 'L',\n    '\\u013a': 'l',  '\\u013c': 'l', '\\u013e': 'l', '\\u0140': 'l', '\\u0142': 'l',\n    '\\u0143': 'N',  '\\u0145': 'N', '\\u0147': 'N', '\\u014a': 'N',\n    '\\u0144': 'n',  '\\u0146': 'n', '\\u0148': 'n', '\\u014b': 'n',\n    '\\u014c': 'O',  '\\u014e': 'O', '\\u0150': 'O',\n    '\\u014d': 'o',  '\\u014f': 'o', '\\u0151': 'o',\n    '\\u0154': 'R',  '\\u0156': 'R', '\\u0158': 'R',\n    '\\u0155': 'r',  '\\u0157': 'r', '\\u0159': 'r',\n    '\\u015a': 'S',  '\\u015c': 'S', '\\u015e': 'S', '\\u0160': 'S',\n    '\\u015b': 's',  '\\u015d': 's', '\\u015f': 's', '\\u0161': 's',\n    '\\u0162': 'T',  '\\u0164': 'T', '\\u0166': 'T',\n    '\\u0163': 't',  '\\u0165': 't', '\\u0167': 't',\n    '\\u0168': 'U',  '\\u016a': 'U', '\\u016c': 'U', '\\u016e': 'U', '\\u0170': 'U', '\\u0172': 'U',\n    '\\u0169': 'u',  '\\u016b': 'u', '\\u016d': 'u', '\\u016f': 'u', '\\u0171': 'u', '\\u0173': 'u',\n    '\\u0174': 'W',  '\\u0175': 'w',\n    '\\u0176': 'Y',  '\\u0177': 'y', '\\u0178': 'Y',\n    '\\u0179': 'Z',  '\\u017b': 'Z', '\\u017d': 'Z',\n    '\\u017a': 'z',  '\\u017c': 'z', '\\u017e': 'z',\n    '\\u0132': 'IJ', '\\u0133': 'ij',\n    '\\u0152': 'Oe', '\\u0153': 'oe',\n    '\\u0149': \"'n\", '\\u017f': 's'\n  };\n\n  /** Used to map characters to HTML entities. */\n  var htmlEscapes = {\n    '&': '&amp;',\n    '<': '&lt;',\n    '>': '&gt;',\n    '\"': '&quot;',\n    \"'\": '&#39;'\n  };\n\n  /** Used to map HTML entities to characters. */\n  var htmlUnescapes = {\n    '&amp;': '&',\n    '&lt;': '<',\n    '&gt;': '>',\n    '&quot;': '\"',\n    '&#39;': \"'\"\n  };\n\n  /** Used to escape characters for inclusion in compiled string literals. */\n  var stringEscapes = {\n    '\\\\': '\\\\',\n    \"'\": \"'\",\n    '\\n': 'n',\n    '\\r': 'r',\n    '\\u2028': 'u2028',\n    '\\u2029': 'u2029'\n  };\n\n  /** Built-in method references without a dependency on `root`. */\n  var freeParseFloat = parseFloat,\n      freeParseInt = parseInt;\n\n  /** Detect free variable `global` from Node.js. */\n  var freeGlobal = typeof global == 'object' && global && global.Object === Object && global;\n\n  /** Detect free variable `self`. */\n  var freeSelf = typeof self == 'object' && self && self.Object === Object && self;\n\n  /** Used as a reference to the global object. */\n  var root = freeGlobal || freeSelf || Function('return this')();\n\n  /** Detect free variable `exports`. */\n  var freeExports = typeof exports == 'object' && exports && !exports.nodeType && exports;\n\n  /** Detect free variable `module`. */\n  var freeModule = freeExports && typeof module == 'object' && module && !module.nodeType && module;\n\n  /** Detect the popular CommonJS extension `module.exports`. */\n  var moduleExports = freeModule && freeModule.exports === freeExports;\n\n  /** Detect free variable `process` from Node.js. */\n  var freeProcess = moduleExports && freeGlobal.process;\n\n  /** Used to access faster Node.js helpers. */\n  var nodeUtil = (function() {\n    try {\n      return freeProcess && freeProcess.binding && freeProcess.binding('util');\n    } catch (e) {}\n  }());\n\n  /* Node.js helper references. */\n  var nodeIsArrayBuffer = nodeUtil && nodeUtil.isArrayBuffer,\n      nodeIsDate = nodeUtil && nodeUtil.isDate,\n      nodeIsMap = nodeUtil && nodeUtil.isMap,\n      nodeIsRegExp = nodeUtil && nodeUtil.isRegExp,\n      nodeIsSet = nodeUtil && nodeUtil.isSet,\n      nodeIsTypedArray = nodeUtil && nodeUtil.isTypedArray;\n\n  /*--------------------------------------------------------------------------*/\n\n  /**\n   * Adds the key-value `pair` to `map`.\n   *\n   * @private\n   * @param {Object} map The map to modify.\n   * @param {Array} pair The key-value pair to add.\n   * @returns {Object} Returns `map`.\n   */\n  function addMapEntry(map, pair) {\n    // Don't return `map.set` because it's not chainable in IE 11.\n    map.set(pair[0], pair[1]);\n    return map;\n  }\n\n  /**\n   * Adds `value` to `set`.\n   *\n   * @private\n   * @param {Object} set The set to modify.\n   * @param {*} value The value to add.\n   * @returns {Object} Returns `set`.\n   */\n  function addSetEntry(set, value) {\n    // Don't return `set.add` because it's not chainable in IE 11.\n    set.add(value);\n    return set;\n  }\n\n  /**\n   * A faster alternative to `Function#apply`, this function invokes `func`\n   * with the `this` binding of `thisArg` and the arguments of `args`.\n   *\n   * @private\n   * @param {Function} func The function to invoke.\n   * @param {*} thisArg The `this` binding of `func`.\n   * @param {Array} args The arguments to invoke `func` with.\n   * @returns {*} Returns the result of `func`.\n   */\n  function apply(func, thisArg, args) {\n    switch (args.length) {\n      case 0: return func.call(thisArg);\n      case 1: return func.call(thisArg, args[0]);\n      case 2: return func.call(thisArg, args[0], args[1]);\n      case 3: return func.call(thisArg, args[0], args[1], args[2]);\n    }\n    return func.apply(thisArg, args);\n  }\n\n  /**\n   * A specialized version of `baseAggregator` for arrays.\n   *\n   * @private\n   * @param {Array} [array] The array to iterate over.\n   * @param {Function} setter The function to set `accumulator` values.\n   * @param {Function} iteratee The iteratee to transform keys.\n   * @param {Object} accumulator The initial aggregated object.\n   * @returns {Function} Returns `accumulator`.\n   */\n  function arrayAggregator(array, setter, iteratee, accumulator) {\n    var index = -1,\n        length = array == null ? 0 : array.length;\n\n    while (++index < length) {\n      var value = array[index];\n      setter(accumulator, value, iteratee(value), array);\n    }\n    return accumulator;\n  }\n\n  /**\n   * A specialized version of `_.forEach` for arrays without support for\n   * iteratee shorthands.\n   *\n   * @private\n   * @param {Array} [array] The array to iterate over.\n   * @param {Function} iteratee The function invoked per iteration.\n   * @returns {Array} Returns `array`.\n   */\n  function arrayEach(array, iteratee) {\n    var index = -1,\n        length = array == null ? 0 : array.length;\n\n    while (++index < length) {\n      if (iteratee(array[index], index, array) === false) {\n        break;\n      }\n    }\n    return array;\n  }\n\n  /**\n   * A specialized version of `_.forEachRight` for arrays without support for\n   * iteratee shorthands.\n   *\n   * @private\n   * @param {Array} [array] The array to iterate over.\n   * @param {Function} iteratee The function invoked per iteration.\n   * @returns {Array} Returns `array`.\n   */\n  function arrayEachRight(array, iteratee) {\n    var length = array == null ? 0 : array.length;\n\n    while (length--) {\n      if (iteratee(array[length], length, array) === false) {\n        break;\n      }\n    }\n    return array;\n  }\n\n  /**\n   * A specialized version of `_.every` for arrays without support for\n   * iteratee shorthands.\n   *\n   * @private\n   * @param {Array} [array] The array to iterate over.\n   * @param {Function} predicate The function invoked per iteration.\n   * @returns {boolean} Returns `true` if all elements pass the predicate check,\n   *  else `false`.\n   */\n  function arrayEvery(array, predicate) {\n    var index = -1,\n        length = array == null ? 0 : array.length;\n\n    while (++index < length) {\n      if (!predicate(array[index], index, array)) {\n        return false;\n      }\n    }\n    return true;\n  }\n\n  /**\n   * A specialized version of `_.filter` for arrays without support for\n   * iteratee shorthands.\n   *\n   * @private\n   * @param {Array} [array] The array to iterate over.\n   * @param {Function} predicate The function invoked per iteration.\n   * @returns {Array} Returns the new filtered array.\n   */\n  function arrayFilter(array, predicate) {\n    var index = -1,\n        length = array == null ? 0 : array.length,\n        resIndex = 0,\n        result = [];\n\n    while (++index < length) {\n      var value = array[index];\n      if (predicate(value, index, array)) {\n        result[resIndex++] = value;\n      }\n    }\n    return result;\n  }\n\n  /**\n   * A specialized version of `_.includes` for arrays without support for\n   * specifying an index to search from.\n   *\n   * @private\n   * @param {Array} [array] The array to inspect.\n   * @param {*} target The value to search for.\n   * @returns {boolean} Returns `true` if `target` is found, else `false`.\n   */\n  function arrayIncludes(array, value) {\n    var length = array == null ? 0 : array.length;\n    return !!length && baseIndexOf(array, value, 0) > -1;\n  }\n\n  /**\n   * This function is like `arrayIncludes` except that it accepts a comparator.\n   *\n   * @private\n   * @param {Array} [array] The array to inspect.\n   * @param {*} target The value to search for.\n   * @param {Function} comparator The comparator invoked per element.\n   * @returns {boolean} Returns `true` if `target` is found, else `false`.\n   */\n  function arrayIncludesWith(array, value, comparator) {\n    var index = -1,\n        length = array == null ? 0 : array.length;\n\n    while (++index < length) {\n      if (comparator(value, array[index])) {\n        return true;\n      }\n    }\n    return false;\n  }\n\n  /**\n   * A specialized version of `_.map` for arrays without support for iteratee\n   * shorthands.\n   *\n   * @private\n   * @param {Array} [array] The array to iterate over.\n   * @param {Function} iteratee The function invoked per iteration.\n   * @returns {Array} Returns the new mapped array.\n   */\n  function arrayMap(array, iteratee) {\n    var index = -1,\n        length = array == null ? 0 : array.length,\n        result = Array(length);\n\n    while (++index < length) {\n      result[index] = iteratee(array[index], index, array);\n    }\n    return result;\n  }\n\n  /**\n   * Appends the elements of `values` to `array`.\n   *\n   * @private\n   * @param {Array} array The array to modify.\n   * @param {Array} values The values to append.\n   * @returns {Array} Returns `array`.\n   */\n  function arrayPush(array, values) {\n    var index = -1,\n        length = values.length,\n        offset = array.length;\n\n    while (++index < length) {\n      array[offset + index] = values[index];\n    }\n    return array;\n  }\n\n  /**\n   * A specialized version of `_.reduce` for arrays without support for\n   * iteratee shorthands.\n   *\n   * @private\n   * @param {Array} [array] The array to iterate over.\n   * @param {Function} iteratee The function invoked per iteration.\n   * @param {*} [accumulator] The initial value.\n   * @param {boolean} [initAccum] Specify using the first element of `array` as\n   *  the initial value.\n   * @returns {*} Returns the accumulated value.\n   */\n  function arrayReduce(array, iteratee, accumulator, initAccum) {\n    var index = -1,\n        length = array == null ? 0 : array.length;\n\n    if (initAccum && length) {\n      accumulator = array[++index];\n    }\n    while (++index < length) {\n      accumulator = iteratee(accumulator, array[index], index, array);\n    }\n    return accumulator;\n  }\n\n  /**\n   * A specialized version of `_.reduceRight` for arrays without support for\n   * iteratee shorthands.\n   *\n   * @private\n   * @param {Array} [array] The array to iterate over.\n   * @param {Function} iteratee The function invoked per iteration.\n   * @param {*} [accumulator] The initial value.\n   * @param {boolean} [initAccum] Specify using the last element of `array` as\n   *  the initial value.\n   * @returns {*} Returns the accumulated value.\n   */\n  function arrayReduceRight(array, iteratee, accumulator, initAccum) {\n    var length = array == null ? 0 : array.length;\n    if (initAccum && length) {\n      accumulator = array[--length];\n    }\n    while (length--) {\n      accumulator = iteratee(accumulator, array[length], length, array);\n    }\n    return accumulator;\n  }\n\n  /**\n   * A specialized version of `_.some` for arrays without support for iteratee\n   * shorthands.\n   *\n   * @private\n   * @param {Array} [array] The array to iterate over.\n   * @param {Function} predicate The function invoked per iteration.\n   * @returns {boolean} Returns `true` if any element passes the predicate check,\n   *  else `false`.\n   */\n  function arraySome(array, predicate) {\n    var index = -1,\n        length = array == null ? 0 : array.length;\n\n    while (++index < length) {\n      if (predicate(array[index], index, array)) {\n        return true;\n      }\n    }\n    return false;\n  }\n\n  /**\n   * Gets the size of an ASCII `string`.\n   *\n   * @private\n   * @param {string} string The string inspect.\n   * @returns {number} Returns the string size.\n   */\n  var asciiSize = baseProperty('length');\n\n  /**\n   * Converts an ASCII `string` to an array.\n   *\n   * @private\n   * @param {string} string The string to convert.\n   * @returns {Array} Returns the converted array.\n   */\n  function asciiToArray(string) {\n    return string.split('');\n  }\n\n  /**\n   * Splits an ASCII `string` into an array of its words.\n   *\n   * @private\n   * @param {string} The string to inspect.\n   * @returns {Array} Returns the words of `string`.\n   */\n  function asciiWords(string) {\n    return string.match(reAsciiWord) || [];\n  }\n\n  /**\n   * The base implementation of methods like `_.findKey` and `_.findLastKey`,\n   * without support for iteratee shorthands, which iterates over `collection`\n   * using `eachFunc`.\n   *\n   * @private\n   * @param {Array|Object} collection The collection to inspect.\n   * @param {Function} predicate The function invoked per iteration.\n   * @param {Function} eachFunc The function to iterate over `collection`.\n   * @returns {*} Returns the found element or its key, else `undefined`.\n   */\n  function baseFindKey(collection, predicate, eachFunc) {\n    var result;\n    eachFunc(collection, function(value, key, collection) {\n      if (predicate(value, key, collection)) {\n        result = key;\n        return false;\n      }\n    });\n    return result;\n  }\n\n  /**\n   * The base implementation of `_.findIndex` and `_.findLastIndex` without\n   * support for iteratee shorthands.\n   *\n   * @private\n   * @param {Array} array The array to inspect.\n   * @param {Function} predicate The function invoked per iteration.\n   * @param {number} fromIndex The index to search from.\n   * @param {boolean} [fromRight] Specify iterating from right to left.\n   * @returns {number} Returns the index of the matched value, else `-1`.\n   */\n  function baseFindIndex(array, predicate, fromIndex, fromRight) {\n    var length = array.length,\n        index = fromIndex + (fromRight ? 1 : -1);\n\n    while ((fromRight ? index-- : ++index < length)) {\n      if (predicate(array[index], index, array)) {\n        return index;\n      }\n    }\n    return -1;\n  }\n\n  /**\n   * The base implementation of `_.indexOf` without `fromIndex` bounds checks.\n   *\n   * @private\n   * @param {Array} array The array to inspect.\n   * @param {*} value The value to search for.\n   * @param {number} fromIndex The index to search from.\n   * @returns {number} Returns the index of the matched value, else `-1`.\n   */\n  function baseIndexOf(array, value, fromIndex) {\n    return value === value\n      ? strictIndexOf(array, value, fromIndex)\n      : baseFindIndex(array, baseIsNaN, fromIndex);\n  }\n\n  /**\n   * This function is like `baseIndexOf` except that it accepts a comparator.\n   *\n   * @private\n   * @param {Array} array The array to inspect.\n   * @param {*} value The value to search for.\n   * @param {number} fromIndex The index to search from.\n   * @param {Function} comparator The comparator invoked per element.\n   * @returns {number} Returns the index of the matched value, else `-1`.\n   */\n  function baseIndexOfWith(array, value, fromIndex, comparator) {\n    var index = fromIndex - 1,\n        length = array.length;\n\n    while (++index < length) {\n      if (comparator(array[index], value)) {\n        return index;\n      }\n    }\n    return -1;\n  }\n\n  /**\n   * The base implementation of `_.isNaN` without support for number objects.\n   *\n   * @private\n   * @param {*} value The value to check.\n   * @returns {boolean} Returns `true` if `value` is `NaN`, else `false`.\n   */\n  function baseIsNaN(value) {\n    return value !== value;\n  }\n\n  /**\n   * The base implementation of `_.mean` and `_.meanBy` without support for\n   * iteratee shorthands.\n   *\n   * @private\n   * @param {Array} array The array to iterate over.\n   * @param {Function} iteratee The function invoked per iteration.\n   * @returns {number} Returns the mean.\n   */\n  function baseMean(array, iteratee) {\n    var length = array == null ? 0 : array.length;\n    return length ? (baseSum(array, iteratee) / length) : NAN;\n  }\n\n  /**\n   * The base implementation of `_.property` without support for deep paths.\n   *\n   * @private\n   * @param {string} key The key of the property to get.\n   * @returns {Function} Returns the new accessor function.\n   */\n  function baseProperty(key) {\n    return function(object) {\n      return object == null ? undefined : object[key];\n    };\n  }\n\n  /**\n   * The base implementation of `_.propertyOf` without support for deep paths.\n   *\n   * @private\n   * @param {Object} object The object to query.\n   * @returns {Function} Returns the new accessor function.\n   */\n  function basePropertyOf(object) {\n    return function(key) {\n      return object == null ? undefined : object[key];\n    };\n  }\n\n  /**\n   * The base implementation of `_.reduce` and `_.reduceRight`, without support\n   * for iteratee shorthands, which iterates over `collection` using `eachFunc`.\n   *\n   * @private\n   * @param {Array|Object} collection The collection to iterate over.\n   * @param {Function} iteratee The function invoked per iteration.\n   * @param {*} accumulator The initial value.\n   * @param {boolean} initAccum Specify using the first or last element of\n   *  `collection` as the initial value.\n   * @param {Function} eachFunc The function to iterate over `collection`.\n   * @returns {*} Returns the accumulated value.\n   */\n  function baseReduce(collection, iteratee, accumulator, initAccum, eachFunc) {\n    eachFunc(collection, function(value, index, collection) {\n      accumulator = initAccum\n        ? (initAccum = false, value)\n        : iteratee(accumulator, value, index, collection);\n    });\n    return accumulator;\n  }\n\n  /**\n   * The base implementation of `_.sortBy` which uses `comparer` to define the\n   * sort order of `array` and replaces criteria objects with their corresponding\n   * values.\n   *\n   * @private\n   * @param {Array} array The array to sort.\n   * @param {Function} comparer The function to define sort order.\n   * @returns {Array} Returns `array`.\n   */\n  function baseSortBy(array, comparer) {\n    var length = array.length;\n\n    array.sort(comparer);\n    while (length--) {\n      array[length] = array[length].value;\n    }\n    return array;\n  }\n\n  /**\n   * The base implementation of `_.sum` and `_.sumBy` without support for\n   * iteratee shorthands.\n   *\n   * @private\n   * @param {Array} array The array to iterate over.\n   * @param {Function} iteratee The function invoked per iteration.\n   * @returns {number} Returns the sum.\n   */\n  function baseSum(array, iteratee) {\n    var result,\n        index = -1,\n        length = array.length;\n\n    while (++index < length) {\n      var current = iteratee(array[index]);\n      if (current !== undefined) {\n        result = result === undefined ? current : (result + current);\n      }\n    }\n    return result;\n  }\n\n  /**\n   * The base implementation of `_.times` without support for iteratee shorthands\n   * or max array length checks.\n   *\n   * @private\n   * @param {number} n The number of times to invoke `iteratee`.\n   * @param {Function} iteratee The function invoked per iteration.\n   * @returns {Array} Returns the array of results.\n   */\n  function baseTimes(n, iteratee) {\n    var index = -1,\n        result = Array(n);\n\n    while (++index < n) {\n      result[index] = iteratee(index);\n    }\n    return result;\n  }\n\n  /**\n   * The base implementation of `_.toPairs` and `_.toPairsIn` which creates an array\n   * of key-value pairs for `object` corresponding to the property names of `props`.\n   *\n   * @private\n   * @param {Object} object The object to query.\n   * @param {Array} props The property names to get values for.\n   * @returns {Object} Returns the key-value pairs.\n   */\n  function baseToPairs(object, props) {\n    return arrayMap(props, function(key) {\n      return [key, object[key]];\n    });\n  }\n\n  /**\n   * The base implementation of `_.unary` without support for storing metadata.\n   *\n   * @private\n   * @param {Function} func The function to cap arguments for.\n   * @returns {Function} Returns the new capped function.\n   */\n  function baseUnary(func) {\n    return function(value) {\n      return func(value);\n    };\n  }\n\n  /**\n   * The base implementation of `_.values` and `_.valuesIn` which creates an\n   * array of `object` property values corresponding to the property names\n   * of `props`.\n   *\n   * @private\n   * @param {Object} object The object to query.\n   * @param {Array} props The property names to get values for.\n   * @returns {Object} Returns the array of property values.\n   */\n  function baseValues(object, props) {\n    return arrayMap(props, function(key) {\n      return object[key];\n    });\n  }\n\n  /**\n   * Checks if a `cache` value for `key` exists.\n   *\n   * @private\n   * @param {Object} cache The cache to query.\n   * @param {string} key The key of the entry to check.\n   * @returns {boolean} Returns `true` if an entry for `key` exists, else `false`.\n   */\n  function cacheHas(cache, key) {\n    return cache.has(key);\n  }\n\n  /**\n   * Used by `_.trim` and `_.trimStart` to get the index of the first string symbol\n   * that is not found in the character symbols.\n   *\n   * @private\n   * @param {Array} strSymbols The string symbols to inspect.\n   * @param {Array} chrSymbols The character symbols to find.\n   * @returns {number} Returns the index of the first unmatched string symbol.\n   */\n  function charsStartIndex(strSymbols, chrSymbols) {\n    var index = -1,\n        length = strSymbols.length;\n\n    while (++index < length && baseIndexOf(chrSymbols, strSymbols[index], 0) > -1) {}\n    return index;\n  }\n\n  /**\n   * Used by `_.trim` and `_.trimEnd` to get the index of the last string symbol\n   * that is not found in the character symbols.\n   *\n   * @private\n   * @param {Array} strSymbols The string symbols to inspect.\n   * @param {Array} chrSymbols The character symbols to find.\n   * @returns {number} Returns the index of the last unmatched string symbol.\n   */\n  function charsEndIndex(strSymbols, chrSymbols) {\n    var index = strSymbols.length;\n\n    while (index-- && baseIndexOf(chrSymbols, strSymbols[index], 0) > -1) {}\n    return index;\n  }\n\n  /**\n   * Gets the number of `placeholder` occurrences in `array`.\n   *\n   * @private\n   * @param {Array} array The array to inspect.\n   * @param {*} placeholder The placeholder to search for.\n   * @returns {number} Returns the placeholder count.\n   */\n  function countHolders(array, placeholder) {\n    var length = array.length,\n        result = 0;\n\n    while (length--) {\n      if (array[length] === placeholder) {\n        ++result;\n      }\n    }\n    return result;\n  }\n\n  /**\n   * Used by `_.deburr` to convert Latin-1 Supplement and Latin Extended-A\n   * letters to basic Latin letters.\n   *\n   * @private\n   * @param {string} letter The matched letter to deburr.\n   * @returns {string} Returns the deburred letter.\n   */\n  var deburrLetter = basePropertyOf(deburredLetters);\n\n  /**\n   * Used by `_.escape` to convert characters to HTML entities.\n   *\n   * @private\n   * @param {string} chr The matched character to escape.\n   * @returns {string} Returns the escaped character.\n   */\n  var escapeHtmlChar = basePropertyOf(htmlEscapes);\n\n  /**\n   * Used by `_.template` to escape characters for inclusion in compiled string literals.\n   *\n   * @private\n   * @param {string} chr The matched character to escape.\n   * @returns {string} Returns the escaped character.\n   */\n  function escapeStringChar(chr) {\n    return '\\\\' + stringEscapes[chr];\n  }\n\n  /**\n   * Gets the value at `key` of `object`.\n   *\n   * @private\n   * @param {Object} [object] The object to query.\n   * @param {string} key The key of the property to get.\n   * @returns {*} Returns the property value.\n   */\n  function getValue(object, key) {\n    return object == null ? undefined : object[key];\n  }\n\n  /**\n   * Checks if `string` contains Unicode symbols.\n   *\n   * @private\n   * @param {string} string The string to inspect.\n   * @returns {boolean} Returns `true` if a symbol is found, else `false`.\n   */\n  function hasUnicode(string) {\n    return reHasUnicode.test(string);\n  }\n\n  /**\n   * Checks if `string` contains a word composed of Unicode symbols.\n   *\n   * @private\n   * @param {string} string The string to inspect.\n   * @returns {boolean} Returns `true` if a word is found, else `false`.\n   */\n  function hasUnicodeWord(string) {\n    return reHasUnicodeWord.test(string);\n  }\n\n  /**\n   * Converts `iterator` to an array.\n   *\n   * @private\n   * @param {Object} iterator The iterator to convert.\n   * @returns {Array} Returns the converted array.\n   */\n  function iteratorToArray(iterator) {\n    var data,\n        result = [];\n\n    while (!(data = iterator.next()).done) {\n      result.push(data.value);\n    }\n    return result;\n  }\n\n  /**\n   * Converts `map` to its key-value pairs.\n   *\n   * @private\n   * @param {Object} map The map to convert.\n   * @returns {Array} Returns the key-value pairs.\n   */\n  function mapToArray(map) {\n    var index = -1,\n        result = Array(map.size);\n\n    map.forEach(function(value, key) {\n      result[++index] = [key, value];\n    });\n    return result;\n  }\n\n  /**\n   * Creates a unary function that invokes `func` with its argument transformed.\n   *\n   * @private\n   * @param {Function} func The function to wrap.\n   * @param {Function} transform The argument transform.\n   * @returns {Function} Returns the new function.\n   */\n  function overArg(func, transform) {\n    return function(arg) {\n      return func(transform(arg));\n    };\n  }\n\n  /**\n   * Replaces all `placeholder` elements in `array` with an internal placeholder\n   * and returns an array of their indexes.\n   *\n   * @private\n   * @param {Array} array The array to modify.\n   * @param {*} placeholder The placeholder to replace.\n   * @returns {Array} Returns the new array of placeholder indexes.\n   */\n  function replaceHolders(array, placeholder) {\n    var index = -1,\n        length = array.length,\n        resIndex = 0,\n        result = [];\n\n    while (++index < length) {\n      var value = array[index];\n      if (value === placeholder || value === PLACEHOLDER) {\n        array[index] = PLACEHOLDER;\n        result[resIndex++] = index;\n      }\n    }\n    return result;\n  }\n\n  /**\n   * Converts `set` to an array of its values.\n   *\n   * @private\n   * @param {Object} set The set to convert.\n   * @returns {Array} Returns the values.\n   */\n  function setToArray(set) {\n    var index = -1,\n        result = Array(set.size);\n\n    set.forEach(function(value) {\n      result[++index] = value;\n    });\n    return result;\n  }\n\n  /**\n   * Converts `set` to its value-value pairs.\n   *\n   * @private\n   * @param {Object} set The set to convert.\n   * @returns {Array} Returns the value-value pairs.\n   */\n  function setToPairs(set) {\n    var index = -1,\n        result = Array(set.size);\n\n    set.forEach(function(value) {\n      result[++index] = [value, value];\n    });\n    return result;\n  }\n\n  /**\n   * A specialized version of `_.indexOf` which performs strict equality\n   * comparisons of values, i.e. `===`.\n   *\n   * @private\n   * @param {Array} array The array to inspect.\n   * @param {*} value The value to search for.\n   * @param {number} fromIndex The index to search from.\n   * @returns {number} Returns the index of the matched value, else `-1`.\n   */\n  function strictIndexOf(array, value, fromIndex) {\n    var index = fromIndex - 1,\n        length = array.length;\n\n    while (++index < length) {\n      if (array[index] === value) {\n        return index;\n      }\n    }\n    return -1;\n  }\n\n  /**\n   * A specialized version of `_.lastIndexOf` which performs strict equality\n   * comparisons of values, i.e. `===`.\n   *\n   * @private\n   * @param {Array} array The array to inspect.\n   * @param {*} value The value to search for.\n   * @param {number} fromIndex The index to search from.\n   * @returns {number} Returns the index of the matched value, else `-1`.\n   */\n  function strictLastIndexOf(array, value, fromIndex) {\n    var index = fromIndex + 1;\n    while (index--) {\n      if (array[index] === value) {\n        return index;\n      }\n    }\n    return index;\n  }\n\n  /**\n   * Gets the number of symbols in `string`.\n   *\n   * @private\n   * @param {string} string The string to inspect.\n   * @returns {number} Returns the string size.\n   */\n  function stringSize(string) {\n    return hasUnicode(string)\n      ? unicodeSize(string)\n      : asciiSize(string);\n  }\n\n  /**\n   * Converts `string` to an array.\n   *\n   * @private\n   * @param {string} string The string to convert.\n   * @returns {Array} Returns the converted array.\n   */\n  function stringToArray(string) {\n    return hasUnicode(string)\n      ? unicodeToArray(string)\n      : asciiToArray(string);\n  }\n\n  /**\n   * Used by `_.unescape` to convert HTML entities to characters.\n   *\n   * @private\n   * @param {string} chr The matched character to unescape.\n   * @returns {string} Returns the unescaped character.\n   */\n  var unescapeHtmlChar = basePropertyOf(htmlUnescapes);\n\n  /**\n   * Gets the size of a Unicode `string`.\n   *\n   * @private\n   * @param {string} string The string inspect.\n   * @returns {number} Returns the string size.\n   */\n  function unicodeSize(string) {\n    var result = reUnicode.lastIndex = 0;\n    while (reUnicode.test(string)) {\n      ++result;\n    }\n    return result;\n  }\n\n  /**\n   * Converts a Unicode `string` to an array.\n   *\n   * @private\n   * @param {string} string The string to convert.\n   * @returns {Array} Returns the converted array.\n   */\n  function unicodeToArray(string) {\n    return string.match(reUnicode) || [];\n  }\n\n  /**\n   * Splits a Unicode `string` into an array of its words.\n   *\n   * @private\n   * @param {string} The string to inspect.\n   * @returns {Array} Returns the words of `string`.\n   */\n  function unicodeWords(string) {\n    return string.match(reUnicodeWord) || [];\n  }\n\n  /*--------------------------------------------------------------------------*/\n\n  /**\n   * Create a new pristine `lodash` function using the `context` object.\n   *\n   * @static\n   * @memberOf _\n   * @since 1.1.0\n   * @category Util\n   * @param {Object} [context=root] The context object.\n   * @returns {Function} Returns a new `lodash` function.\n   * @example\n   *\n   * _.mixin({ 'foo': _.constant('foo') });\n   *\n   * var lodash = _.runInContext();\n   * lodash.mixin({ 'bar': lodash.constant('bar') });\n   *\n   * _.isFunction(_.foo);\n   * // => true\n   * _.isFunction(_.bar);\n   * // => false\n   *\n   * lodash.isFunction(lodash.foo);\n   * // => false\n   * lodash.isFunction(lodash.bar);\n   * // => true\n   *\n   * // Create a suped-up `defer` in Node.js.\n   * var defer = _.runInContext({ 'setTimeout': setImmediate }).defer;\n   */\n  var runInContext = (function runInContext(context) {\n    context = context == null ? root : _.defaults(root.Object(), context, _.pick(root, contextProps));\n\n    /** Built-in constructor references. */\n    var Array = context.Array,\n        Date = context.Date,\n        Error = context.Error,\n        Function = context.Function,\n        Math = context.Math,\n        Object = context.Object,\n        RegExp = context.RegExp,\n        String = context.String,\n        TypeError = context.TypeError;\n\n    /** Used for built-in method references. */\n    var arrayProto = Array.prototype,\n        funcProto = Function.prototype,\n        objectProto = Object.prototype;\n\n    /** Used to detect overreaching core-js shims. */\n    var coreJsData = context['__core-js_shared__'];\n\n    /** Used to resolve the decompiled source of functions. */\n    var funcToString = funcProto.toString;\n\n    /** Used to check objects for own properties. */\n    var hasOwnProperty = objectProto.hasOwnProperty;\n\n    /** Used to generate unique IDs. */\n    var idCounter = 0;\n\n    /** Used to detect methods masquerading as native. */\n    var maskSrcKey = (function() {\n      var uid = /[^.]+$/.exec(coreJsData && coreJsData.keys && coreJsData.keys.IE_PROTO || '');\n      return uid ? ('Symbol(src)_1.' + uid) : '';\n    }());\n\n    /**\n     * Used to resolve the\n     * [`toStringTag`](http://ecma-international.org/ecma-262/7.0/#sec-object.prototype.tostring)\n     * of values.\n     */\n    var nativeObjectToString = objectProto.toString;\n\n    /** Used to infer the `Object` constructor. */\n    var objectCtorString = funcToString.call(Object);\n\n    /** Used to restore the original `_` reference in `_.noConflict`. */\n    var oldDash = root._;\n\n    /** Used to detect if a method is native. */\n    var reIsNative = RegExp('^' +\n      funcToString.call(hasOwnProperty).replace(reRegExpChar, '\\\\$&')\n      .replace(/hasOwnProperty|(function).*?(?=\\\\\\()| for .+?(?=\\\\\\])/g, '$1.*?') + '$'\n    );\n\n    /** Built-in value references. */\n    var Buffer = moduleExports ? context.Buffer : undefined,\n        Symbol = context.Symbol,\n        Uint8Array = context.Uint8Array,\n        allocUnsafe = Buffer ? Buffer.allocUnsafe : undefined,\n        getPrototype = overArg(Object.getPrototypeOf, Object),\n        objectCreate = Object.create,\n        propertyIsEnumerable = objectProto.propertyIsEnumerable,\n        splice = arrayProto.splice,\n        spreadableSymbol = Symbol ? Symbol.isConcatSpreadable : undefined,\n        symIterator = Symbol ? Symbol.iterator : undefined,\n        symToStringTag = Symbol ? Symbol.toStringTag : undefined;\n\n    var defineProperty = (function() {\n      try {\n        var func = getNative(Object, 'defineProperty');\n        func({}, '', {});\n        return func;\n      } catch (e) {}\n    }());\n\n    /** Mocked built-ins. */\n    var ctxClearTimeout = context.clearTimeout !== root.clearTimeout && context.clearTimeout,\n        ctxNow = Date && Date.now !== root.Date.now && Date.now,\n        ctxSetTimeout = context.setTimeout !== root.setTimeout && context.setTimeout;\n\n    /* Built-in method references for those with the same name as other `lodash` methods. */\n    var nativeCeil = Math.ceil,\n        nativeFloor = Math.floor,\n        nativeGetSymbols = Object.getOwnPropertySymbols,\n        nativeIsBuffer = Buffer ? Buffer.isBuffer : undefined,\n        nativeIsFinite = context.isFinite,\n        nativeJoin = arrayProto.join,\n        nativeKeys = overArg(Object.keys, Object),\n        nativeMax = Math.max,\n        nativeMin = Math.min,\n        nativeNow = Date.now,\n        nativeParseInt = context.parseInt,\n        nativeRandom = Math.random,\n        nativeReverse = arrayProto.reverse;\n\n    /* Built-in method references that are verified to be native. */\n    var DataView = getNative(context, 'DataView'),\n        Map = getNative(context, 'Map'),\n        Promise = getNative(context, 'Promise'),\n        Set = getNative(context, 'Set'),\n        WeakMap = getNative(context, 'WeakMap'),\n        nativeCreate = getNative(Object, 'create');\n\n    /** Used to store function metadata. */\n    var metaMap = WeakMap && new WeakMap;\n\n    /** Used to lookup unminified function names. */\n    var realNames = {};\n\n    /** Used to detect maps, sets, and weakmaps. */\n    var dataViewCtorString = toSource(DataView),\n        mapCtorString = toSource(Map),\n        promiseCtorString = toSource(Promise),\n        setCtorString = toSource(Set),\n        weakMapCtorString = toSource(WeakMap);\n\n    /** Used to convert symbols to primitives and strings. */\n    var symbolProto = Symbol ? Symbol.prototype : undefined,\n        symbolValueOf = symbolProto ? symbolProto.valueOf : undefined,\n        symbolToString = symbolProto ? symbolProto.toString : undefined;\n\n    /*------------------------------------------------------------------------*/\n\n    /**\n     * Creates a `lodash` object which wraps `value` to enable implicit method\n     * chain sequences. Methods that operate on and return arrays, collections,\n     * and functions can be chained together. Methods that retrieve a single value\n     * or may return a primitive value will automatically end the chain sequence\n     * and return the unwrapped value. Otherwise, the value must be unwrapped\n     * with `_#value`.\n     *\n     * Explicit chain sequences, which must be unwrapped with `_#value`, may be\n     * enabled using `_.chain`.\n     *\n     * The execution of chained methods is lazy, that is, it's deferred until\n     * `_#value` is implicitly or explicitly called.\n     *\n     * Lazy evaluation allows several methods to support shortcut fusion.\n     * Shortcut fusion is an optimization to merge iteratee calls; this avoids\n     * the creation of intermediate arrays and can greatly reduce the number of\n     * iteratee executions. Sections of a chain sequence qualify for shortcut\n     * fusion if the section is applied to an array and iteratees accept only\n     * one argument. The heuristic for whether a section qualifies for shortcut\n     * fusion is subject to change.\n     *\n     * Chaining is supported in custom builds as long as the `_#value` method is\n     * directly or indirectly included in the build.\n     *\n     * In addition to lodash methods, wrappers have `Array` and `String` methods.\n     *\n     * The wrapper `Array` methods are:\n     * `concat`, `join`, `pop`, `push`, `shift`, `sort`, `splice`, and `unshift`\n     *\n     * The wrapper `String` methods are:\n     * `replace` and `split`\n     *\n     * The wrapper methods that support shortcut fusion are:\n     * `at`, `compact`, `drop`, `dropRight`, `dropWhile`, `filter`, `find`,\n     * `findLast`, `head`, `initial`, `last`, `map`, `reject`, `reverse`, `slice`,\n     * `tail`, `take`, `takeRight`, `takeRightWhile`, `takeWhile`, and `toArray`\n     *\n     * The chainable wrapper methods are:\n     * `after`, `ary`, `assign`, `assignIn`, `assignInWith`, `assignWith`, `at`,\n     * `before`, `bind`, `bindAll`, `bindKey`, `castArray`, `chain`, `chunk`,\n     * `commit`, `compact`, `concat`, `conforms`, `constant`, `countBy`, `create`,\n     * `curry`, `debounce`, `defaults`, `defaultsDeep`, `defer`, `delay`,\n     * `difference`, `differenceBy`, `differenceWith`, `drop`, `dropRight`,\n     * `dropRightWhile`, `dropWhile`, `extend`, `extendWith`, `fill`, `filter`,\n     * `flatMap`, `flatMapDeep`, `flatMapDepth`, `flatten`, `flattenDeep`,\n     * `flattenDepth`, `flip`, `flow`, `flowRight`, `fromPairs`, `functions`,\n     * `functionsIn`, `groupBy`, `initial`, `intersection`, `intersectionBy`,\n     * `intersectionWith`, `invert`, `invertBy`, `invokeMap`, `iteratee`, `keyBy`,\n     * `keys`, `keysIn`, `map`, `mapKeys`, `mapValues`, `matches`, `matchesProperty`,\n     * `memoize`, `merge`, `mergeWith`, `method`, `methodOf`, `mixin`, `negate`,\n     * `nthArg`, `omit`, `omitBy`, `once`, `orderBy`, `over`, `overArgs`,\n     * `overEvery`, `overSome`, `partial`, `partialRight`, `partition`, `pick`,\n     * `pickBy`, `plant`, `property`, `propertyOf`, `pull`, `pullAll`, `pullAllBy`,\n     * `pullAllWith`, `pullAt`, `push`, `range`, `rangeRight`, `rearg`, `reject`,\n     * `remove`, `rest`, `reverse`, `sampleSize`, `set`, `setWith`, `shuffle`,\n     * `slice`, `sort`, `sortBy`, `splice`, `spread`, `tail`, `take`, `takeRight`,\n     * `takeRightWhile`, `takeWhile`, `tap`, `throttle`, `thru`, `toArray`,\n     * `toPairs`, `toPairsIn`, `toPath`, `toPlainObject`, `transform`, `unary`,\n     * `union`, `unionBy`, `unionWith`, `uniq`, `uniqBy`, `uniqWith`, `unset`,\n     * `unshift`, `unzip`, `unzipWith`, `update`, `updateWith`, `values`,\n     * `valuesIn`, `without`, `wrap`, `xor`, `xorBy`, `xorWith`, `zip`,\n     * `zipObject`, `zipObjectDeep`, and `zipWith`\n     *\n     * The wrapper methods that are **not** chainable by default are:\n     * `add`, `attempt`, `camelCase`, `capitalize`, `ceil`, `clamp`, `clone`,\n     * `cloneDeep`, `cloneDeepWith`, `cloneWith`, `conformsTo`, `deburr`,\n     * `defaultTo`, `divide`, `each`, `eachRight`, `endsWith`, `eq`, `escape`,\n     * `escapeRegExp`, `every`, `find`, `findIndex`, `findKey`, `findLast`,\n     * `findLastIndex`, `findLastKey`, `first`, `floor`, `forEach`, `forEachRight`,\n     * `forIn`, `forInRight`, `forOwn`, `forOwnRight`, `get`, `gt`, `gte`, `has`,\n     * `hasIn`, `head`, `identity`, `includes`, `indexOf`, `inRange`, `invoke`,\n     * `isArguments`, `isArray`, `isArrayBuffer`, `isArrayLike`, `isArrayLikeObject`,\n     * `isBoolean`, `isBuffer`, `isDate`, `isElement`, `isEmpty`, `isEqual`,\n     * `isEqualWith`, `isError`, `isFinite`, `isFunction`, `isInteger`, `isLength`,\n     * `isMap`, `isMatch`, `isMatchWith`, `isNaN`, `isNative`, `isNil`, `isNull`,\n     * `isNumber`, `isObject`, `isObjectLike`, `isPlainObject`, `isRegExp`,\n     * `isSafeInteger`, `isSet`, `isString`, `isUndefined`, `isTypedArray`,\n     * `isWeakMap`, `isWeakSet`, `join`, `kebabCase`, `last`, `lastIndexOf`,\n     * `lowerCase`, `lowerFirst`, `lt`, `lte`, `max`, `maxBy`, `mean`, `meanBy`,\n     * `min`, `minBy`, `multiply`, `noConflict`, `noop`, `now`, `nth`, `pad`,\n     * `padEnd`, `padStart`, `parseInt`, `pop`, `random`, `reduce`, `reduceRight`,\n     * `repeat`, `result`, `round`, `runInContext`, `sample`, `shift`, `size`,\n     * `snakeCase`, `some`, `sortedIndex`, `sortedIndexBy`, `sortedLastIndex`,\n     * `sortedLastIndexBy`, `startCase`, `startsWith`, `stubArray`, `stubFalse`,\n     * `stubObject`, `stubString`, `stubTrue`, `subtract`, `sum`, `sumBy`,\n     * `template`, `times`, `toFinite`, `toInteger`, `toJSON`, `toLength`,\n     * `toLower`, `toNumber`, `toSafeInteger`, `toString`, `toUpper`, `trim`,\n     * `trimEnd`, `trimStart`, `truncate`, `unescape`, `uniqueId`, `upperCase`,\n     * `upperFirst`, `value`, and `words`\n     *\n     * @name _\n     * @constructor\n     * @category Seq\n     * @param {*} value The value to wrap in a `lodash` instance.\n     * @returns {Object} Returns the new `lodash` wrapper instance.\n     * @example\n     *\n     * function square(n) {\n     *   return n * n;\n     * }\n     *\n     * var wrapped = _([1, 2, 3]);\n     *\n     * // Returns an unwrapped value.\n     * wrapped.reduce(_.add);\n     * // => 6\n     *\n     * // Returns a wrapped value.\n     * var squares = wrapped.map(square);\n     *\n     * _.isArray(squares);\n     * // => false\n     *\n     * _.isArray(squares.value());\n     * // => true\n     */\n    function lodash(value) {\n      if (isObjectLike(value) && !isArray(value) && !(value instanceof LazyWrapper)) {\n        if (value instanceof LodashWrapper) {\n          return value;\n        }\n        if (hasOwnProperty.call(value, '__wrapped__')) {\n          return wrapperClone(value);\n        }\n      }\n      return new LodashWrapper(value);\n    }\n\n    /**\n     * The base implementation of `_.create` without support for assigning\n     * properties to the created object.\n     *\n     * @private\n     * @param {Object} proto The object to inherit from.\n     * @returns {Object} Returns the new object.\n     */\n    var baseCreate = (function() {\n      function object() {}\n      return function(proto) {\n        if (!isObject(proto)) {\n          return {};\n        }\n        if (objectCreate) {\n          return objectCreate(proto);\n        }\n        object.prototype = proto;\n        var result = new object;\n        object.prototype = undefined;\n        return result;\n      };\n    }());\n\n    /**\n     * The function whose prototype chain sequence wrappers inherit from.\n     *\n     * @private\n     */\n    function baseLodash() {\n      // No operation performed.\n    }\n\n    /**\n     * The base constructor for creating `lodash` wrapper objects.\n     *\n     * @private\n     * @param {*} value The value to wrap.\n     * @param {boolean} [chainAll] Enable explicit method chain sequences.\n     */\n    function LodashWrapper(value, chainAll) {\n      this.__wrapped__ = value;\n      this.__actions__ = [];\n      this.__chain__ = !!chainAll;\n      this.__index__ = 0;\n      this.__values__ = undefined;\n    }\n\n    /**\n     * By default, the template delimiters used by lodash are like those in\n     * embedded Ruby (ERB) as well as ES2015 template strings. Change the\n     * following template settings to use alternative delimiters.\n     *\n     * @static\n     * @memberOf _\n     * @type {Object}\n     */\n    lodash.templateSettings = {\n\n      /**\n       * Used to detect `data` property values to be HTML-escaped.\n       *\n       * @memberOf _.templateSettings\n       * @type {RegExp}\n       */\n      'escape': reEscape,\n\n      /**\n       * Used to detect code to be evaluated.\n       *\n       * @memberOf _.templateSettings\n       * @type {RegExp}\n       */\n      'evaluate': reEvaluate,\n\n      /**\n       * Used to detect `data` property values to inject.\n       *\n       * @memberOf _.templateSettings\n       * @type {RegExp}\n       */\n      'interpolate': reInterpolate,\n\n      /**\n       * Used to reference the data object in the template text.\n       *\n       * @memberOf _.templateSettings\n       * @type {string}\n       */\n      'variable': '',\n\n      /**\n       * Used to import variables into the compiled template.\n       *\n       * @memberOf _.templateSettings\n       * @type {Object}\n       */\n      'imports': {\n\n        /**\n         * A reference to the `lodash` function.\n         *\n         * @memberOf _.templateSettings.imports\n         * @type {Function}\n         */\n        '_': lodash\n      }\n    };\n\n    // Ensure wrappers are instances of `baseLodash`.\n    lodash.prototype = baseLodash.prototype;\n    lodash.prototype.constructor = lodash;\n\n    LodashWrapper.prototype = baseCreate(baseLodash.prototype);\n    LodashWrapper.prototype.constructor = LodashWrapper;\n\n    /*------------------------------------------------------------------------*/\n\n    /**\n     * Creates a lazy wrapper object which wraps `value` to enable lazy evaluation.\n     *\n     * @private\n     * @constructor\n     * @param {*} value The value to wrap.\n     */\n    function LazyWrapper(value) {\n      this.__wrapped__ = value;\n      this.__actions__ = [];\n      this.__dir__ = 1;\n      this.__filtered__ = false;\n      this.__iteratees__ = [];\n      this.__takeCount__ = MAX_ARRAY_LENGTH;\n      this.__views__ = [];\n    }\n\n    /**\n     * Creates a clone of the lazy wrapper object.\n     *\n     * @private\n     * @name clone\n     * @memberOf LazyWrapper\n     * @returns {Object} Returns the cloned `LazyWrapper` object.\n     */\n    function lazyClone() {\n      var result = new LazyWrapper(this.__wrapped__);\n      result.__actions__ = copyArray(this.__actions__);\n      result.__dir__ = this.__dir__;\n      result.__filtered__ = this.__filtered__;\n      result.__iteratees__ = copyArray(this.__iteratees__);\n      result.__takeCount__ = this.__takeCount__;\n      result.__views__ = copyArray(this.__views__);\n      return result;\n    }\n\n    /**\n     * Reverses the direction of lazy iteration.\n     *\n     * @private\n     * @name reverse\n     * @memberOf LazyWrapper\n     * @returns {Object} Returns the new reversed `LazyWrapper` object.\n     */\n    function lazyReverse() {\n      if (this.__filtered__) {\n        var result = new LazyWrapper(this);\n        result.__dir__ = -1;\n        result.__filtered__ = true;\n      } else {\n        result = this.clone();\n        result.__dir__ *= -1;\n      }\n      return result;\n    }\n\n    /**\n     * Extracts the unwrapped value from its lazy wrapper.\n     *\n     * @private\n     * @name value\n     * @memberOf LazyWrapper\n     * @returns {*} Returns the unwrapped value.\n     */\n    function lazyValue() {\n      var array = this.__wrapped__.value(),\n          dir = this.__dir__,\n          isArr = isArray(array),\n          isRight = dir < 0,\n          arrLength = isArr ? array.length : 0,\n          view = getView(0, arrLength, this.__views__),\n          start = view.start,\n          end = view.end,\n          length = end - start,\n          index = isRight ? end : (start - 1),\n          iteratees = this.__iteratees__,\n          iterLength = iteratees.length,\n          resIndex = 0,\n          takeCount = nativeMin(length, this.__takeCount__);\n\n      if (!isArr || (!isRight && arrLength == length && takeCount == length)) {\n        return baseWrapperValue(array, this.__actions__);\n      }\n      var result = [];\n\n      outer:\n      while (length-- && resIndex < takeCount) {\n        index += dir;\n\n        var iterIndex = -1,\n            value = array[index];\n\n        while (++iterIndex < iterLength) {\n          var data = iteratees[iterIndex],\n              iteratee = data.iteratee,\n              type = data.type,\n              computed = iteratee(value);\n\n          if (type == LAZY_MAP_FLAG) {\n            value = computed;\n          } else if (!computed) {\n            if (type == LAZY_FILTER_FLAG) {\n              continue outer;\n            } else {\n              break outer;\n            }\n          }\n        }\n        result[resIndex++] = value;\n      }\n      return result;\n    }\n\n    // Ensure `LazyWrapper` is an instance of `baseLodash`.\n    LazyWrapper.prototype = baseCreate(baseLodash.prototype);\n    LazyWrapper.prototype.constructor = LazyWrapper;\n\n    /*------------------------------------------------------------------------*/\n\n    /**\n     * Creates a hash object.\n     *\n     * @private\n     * @constructor\n     * @param {Array} [entries] The key-value pairs to cache.\n     */\n    function Hash(entries) {\n      var index = -1,\n          length = entries == null ? 0 : entries.length;\n\n      this.clear();\n      while (++index < length) {\n        var entry = entries[index];\n        this.set(entry[0], entry[1]);\n      }\n    }\n\n    /**\n     * Removes all key-value entries from the hash.\n     *\n     * @private\n     * @name clear\n     * @memberOf Hash\n     */\n    function hashClear() {\n      this.__data__ = nativeCreate ? nativeCreate(null) : {};\n      this.size = 0;\n    }\n\n    /**\n     * Removes `key` and its value from the hash.\n     *\n     * @private\n     * @name delete\n     * @memberOf Hash\n     * @param {Object} hash The hash to modify.\n     * @param {string} key The key of the value to remove.\n     * @returns {boolean} Returns `true` if the entry was removed, else `false`.\n     */\n    function hashDelete(key) {\n      var result = this.has(key) && delete this.__data__[key];\n      this.size -= result ? 1 : 0;\n      return result;\n    }\n\n    /**\n     * Gets the hash value for `key`.\n     *\n     * @private\n     * @name get\n     * @memberOf Hash\n     * @param {string} key The key of the value to get.\n     * @returns {*} Returns the entry value.\n     */\n    function hashGet(key) {\n      var data = this.__data__;\n      if (nativeCreate) {\n        var result = data[key];\n        return result === HASH_UNDEFINED ? undefined : result;\n      }\n      return hasOwnProperty.call(data, key) ? data[key] : undefined;\n    }\n\n    /**\n     * Checks if a hash value for `key` exists.\n     *\n     * @private\n     * @name has\n     * @memberOf Hash\n     * @param {string} key The key of the entry to check.\n     * @returns {boolean} Returns `true` if an entry for `key` exists, else `false`.\n     */\n    function hashHas(key) {\n      var data = this.__data__;\n      return nativeCreate ? (data[key] !== undefined) : hasOwnProperty.call(data, key);\n    }\n\n    /**\n     * Sets the hash `key` to `value`.\n     *\n     * @private\n     * @name set\n     * @memberOf Hash\n     * @param {string} key The key of the value to set.\n     * @param {*} value The value to set.\n     * @returns {Object} Returns the hash instance.\n     */\n    function hashSet(key, value) {\n      var data = this.__data__;\n      this.size += this.has(key) ? 0 : 1;\n      data[key] = (nativeCreate && value === undefined) ? HASH_UNDEFINED : value;\n      return this;\n    }\n\n    // Add methods to `Hash`.\n    Hash.prototype.clear = hashClear;\n    Hash.prototype['delete'] = hashDelete;\n    Hash.prototype.get = hashGet;\n    Hash.prototype.has = hashHas;\n    Hash.prototype.set = hashSet;\n\n    /*------------------------------------------------------------------------*/\n\n    /**\n     * Creates an list cache object.\n     *\n     * @private\n     * @constructor\n     * @param {Array} [entries] The key-value pairs to cache.\n     */\n    function ListCache(entries) {\n      var index = -1,\n          length = entries == null ? 0 : entries.length;\n\n      this.clear();\n      while (++index < length) {\n        var entry = entries[index];\n        this.set(entry[0], entry[1]);\n      }\n    }\n\n    /**\n     * Removes all key-value entries from the list cache.\n     *\n     * @private\n     * @name clear\n     * @memberOf ListCache\n     */\n    function listCacheClear() {\n      this.__data__ = [];\n      this.size = 0;\n    }\n\n    /**\n     * Removes `key` and its value from the list cache.\n     *\n     * @private\n     * @name delete\n     * @memberOf ListCache\n     * @param {string} key The key of the value to remove.\n     * @returns {boolean} Returns `true` if the entry was removed, else `false`.\n     */\n    function listCacheDelete(key) {\n      var data = this.__data__,\n          index = assocIndexOf(data, key);\n\n      if (index < 0) {\n        return false;\n      }\n      var lastIndex = data.length - 1;\n      if (index == lastIndex) {\n        data.pop();\n      } else {\n        splice.call(data, index, 1);\n      }\n      --this.size;\n      return true;\n    }\n\n    /**\n     * Gets the list cache value for `key`.\n     *\n     * @private\n     * @name get\n     * @memberOf ListCache\n     * @param {string} key The key of the value to get.\n     * @returns {*} Returns the entry value.\n     */\n    function listCacheGet(key) {\n      var data = this.__data__,\n          index = assocIndexOf(data, key);\n\n      return index < 0 ? undefined : data[index][1];\n    }\n\n    /**\n     * Checks if a list cache value for `key` exists.\n     *\n     * @private\n     * @name has\n     * @memberOf ListCache\n     * @param {string} key The key of the entry to check.\n     * @returns {boolean} Returns `true` if an entry for `key` exists, else `false`.\n     */\n    function listCacheHas(key) {\n      return assocIndexOf(this.__data__, key) > -1;\n    }\n\n    /**\n     * Sets the list cache `key` to `value`.\n     *\n     * @private\n     * @name set\n     * @memberOf ListCache\n     * @param {string} key The key of the value to set.\n     * @param {*} value The value to set.\n     * @returns {Object} Returns the list cache instance.\n     */\n    function listCacheSet(key, value) {\n      var data = this.__data__,\n          index = assocIndexOf(data, key);\n\n      if (index < 0) {\n        ++this.size;\n        data.push([key, value]);\n      } else {\n        data[index][1] = value;\n      }\n      return this;\n    }\n\n    // Add methods to `ListCache`.\n    ListCache.prototype.clear = listCacheClear;\n    ListCache.prototype['delete'] = listCacheDelete;\n    ListCache.prototype.get = listCacheGet;\n    ListCache.prototype.has = listCacheHas;\n    ListCache.prototype.set = listCacheSet;\n\n    /*------------------------------------------------------------------------*/\n\n    /**\n     * Creates a map cache object to store key-value pairs.\n     *\n     * @private\n     * @constructor\n     * @param {Array} [entries] The key-value pairs to cache.\n     */\n    function MapCache(entries) {\n      var index = -1,\n          length = entries == null ? 0 : entries.length;\n\n      this.clear();\n      while (++index < length) {\n        var entry = entries[index];\n        this.set(entry[0], entry[1]);\n      }\n    }\n\n    /**\n     * Removes all key-value entries from the map.\n     *\n     * @private\n     * @name clear\n     * @memberOf MapCache\n     */\n    function mapCacheClear() {\n      this.size = 0;\n      this.__data__ = {\n        'hash': new Hash,\n        'map': new (Map || ListCache),\n        'string': new Hash\n      };\n    }\n\n    /**\n     * Removes `key` and its value from the map.\n     *\n     * @private\n     * @name delete\n     * @memberOf MapCache\n     * @param {string} key The key of the value to remove.\n     * @returns {boolean} Returns `true` if the entry was removed, else `false`.\n     */\n    function mapCacheDelete(key) {\n      var result = getMapData(this, key)['delete'](key);\n      this.size -= result ? 1 : 0;\n      return result;\n    }\n\n    /**\n     * Gets the map value for `key`.\n     *\n     * @private\n     * @name get\n     * @memberOf MapCache\n     * @param {string} key The key of the value to get.\n     * @returns {*} Returns the entry value.\n     */\n    function mapCacheGet(key) {\n      return getMapData(this, key).get(key);\n    }\n\n    /**\n     * Checks if a map value for `key` exists.\n     *\n     * @private\n     * @name has\n     * @memberOf MapCache\n     * @param {string} key The key of the entry to check.\n     * @returns {boolean} Returns `true` if an entry for `key` exists, else `false`.\n     */\n    function mapCacheHas(key) {\n      return getMapData(this, key).has(key);\n    }\n\n    /**\n     * Sets the map `key` to `value`.\n     *\n     * @private\n     * @name set\n     * @memberOf MapCache\n     * @param {string} key The key of the value to set.\n     * @param {*} value The value to set.\n     * @returns {Object} Returns the map cache instance.\n     */\n    function mapCacheSet(key, value) {\n      var data = getMapData(this, key),\n          size = data.size;\n\n      data.set(key, value);\n      this.size += data.size == size ? 0 : 1;\n      return this;\n    }\n\n    // Add methods to `MapCache`.\n    MapCache.prototype.clear = mapCacheClear;\n    MapCache.prototype['delete'] = mapCacheDelete;\n    MapCache.prototype.get = mapCacheGet;\n    MapCache.prototype.has = mapCacheHas;\n    MapCache.prototype.set = mapCacheSet;\n\n    /*------------------------------------------------------------------------*/\n\n    /**\n     *\n     * Creates an array cache object to store unique values.\n     *\n     * @private\n     * @constructor\n     * @param {Array} [values] The values to cache.\n     */\n    function SetCache(values) {\n      var index = -1,\n          length = values == null ? 0 : values.length;\n\n      this.__data__ = new MapCache;\n      while (++index < length) {\n        this.add(values[index]);\n      }\n    }\n\n    /**\n     * Adds `value` to the array cache.\n     *\n     * @private\n     * @name add\n     * @memberOf SetCache\n     * @alias push\n     * @param {*} value The value to cache.\n     * @returns {Object} Returns the cache instance.\n     */\n    function setCacheAdd(value) {\n      this.__data__.set(value, HASH_UNDEFINED);\n      return this;\n    }\n\n    /**\n     * Checks if `value` is in the array cache.\n     *\n     * @private\n     * @name has\n     * @memberOf SetCache\n     * @param {*} value The value to search for.\n     * @returns {number} Returns `true` if `value` is found, else `false`.\n     */\n    function setCacheHas(value) {\n      return this.__data__.has(value);\n    }\n\n    // Add methods to `SetCache`.\n    SetCache.prototype.add = SetCache.prototype.push = setCacheAdd;\n    SetCache.prototype.has = setCacheHas;\n\n    /*------------------------------------------------------------------------*/\n\n    /**\n     * Creates a stack cache object to store key-value pairs.\n     *\n     * @private\n     * @constructor\n     * @param {Array} [entries] The key-value pairs to cache.\n     */\n    function Stack(entries) {\n      var data = this.__data__ = new ListCache(entries);\n      this.size = data.size;\n    }\n\n    /**\n     * Removes all key-value entries from the stack.\n     *\n     * @private\n     * @name clear\n     * @memberOf Stack\n     */\n    function stackClear() {\n      this.__data__ = new ListCache;\n      this.size = 0;\n    }\n\n    /**\n     * Removes `key` and its value from the stack.\n     *\n     * @private\n     * @name delete\n     * @memberOf Stack\n     * @param {string} key The key of the value to remove.\n     * @returns {boolean} Returns `true` if the entry was removed, else `false`.\n     */\n    function stackDelete(key) {\n      var data = this.__data__,\n          result = data['delete'](key);\n\n      this.size = data.size;\n      return result;\n    }\n\n    /**\n     * Gets the stack value for `key`.\n     *\n     * @private\n     * @name get\n     * @memberOf Stack\n     * @param {string} key The key of the value to get.\n     * @returns {*} Returns the entry value.\n     */\n    function stackGet(key) {\n      return this.__data__.get(key);\n    }\n\n    /**\n     * Checks if a stack value for `key` exists.\n     *\n     * @private\n     * @name has\n     * @memberOf Stack\n     * @param {string} key The key of the entry to check.\n     * @returns {boolean} Returns `true` if an entry for `key` exists, else `false`.\n     */\n    function stackHas(key) {\n      return this.__data__.has(key);\n    }\n\n    /**\n     * Sets the stack `key` to `value`.\n     *\n     * @private\n     * @name set\n     * @memberOf Stack\n     * @param {string} key The key of the value to set.\n     * @param {*} value The value to set.\n     * @returns {Object} Returns the stack cache instance.\n     */\n    function stackSet(key, value) {\n      var data = this.__data__;\n      if (data instanceof ListCache) {\n        var pairs = data.__data__;\n        if (!Map || (pairs.length < LARGE_ARRAY_SIZE - 1)) {\n          pairs.push([key, value]);\n          this.size = ++data.size;\n          return this;\n        }\n        data = this.__data__ = new MapCache(pairs);\n      }\n      data.set(key, value);\n      this.size = data.size;\n      return this;\n    }\n\n    // Add methods to `Stack`.\n    Stack.prototype.clear = stackClear;\n    Stack.prototype['delete'] = stackDelete;\n    Stack.prototype.get = stackGet;\n    Stack.prototype.has = stackHas;\n    Stack.prototype.set = stackSet;\n\n    /*------------------------------------------------------------------------*/\n\n    /**\n     * Creates an array of the enumerable property names of the array-like `value`.\n     *\n     * @private\n     * @param {*} value The value to query.\n     * @param {boolean} inherited Specify returning inherited property names.\n     * @returns {Array} Returns the array of property names.\n     */\n    function arrayLikeKeys(value, inherited) {\n      var isArr = isArray(value),\n          isArg = !isArr && isArguments(value),\n          isBuff = !isArr && !isArg && isBuffer(value),\n          isType = !isArr && !isArg && !isBuff && isTypedArray(value),\n          skipIndexes = isArr || isArg || isBuff || isType,\n          result = skipIndexes ? baseTimes(value.length, String) : [],\n          length = result.length;\n\n      for (var key in value) {\n        if ((inherited || hasOwnProperty.call(value, key)) &&\n            !(skipIndexes && (\n               // Safari 9 has enumerable `arguments.length` in strict mode.\n               key == 'length' ||\n               // Node.js 0.10 has enumerable non-index properties on buffers.\n               (isBuff && (key == 'offset' || key == 'parent')) ||\n               // PhantomJS 2 has enumerable non-index properties on typed arrays.\n               (isType && (key == 'buffer' || key == 'byteLength' || key == 'byteOffset')) ||\n               // Skip index properties.\n               isIndex(key, length)\n            ))) {\n          result.push(key);\n        }\n      }\n      return result;\n    }\n\n    /**\n     * A specialized version of `_.sample` for arrays.\n     *\n     * @private\n     * @param {Array} array The array to sample.\n     * @returns {*} Returns the random element.\n     */\n    function arraySample(array) {\n      var length = array.length;\n      return length ? array[baseRandom(0, length - 1)] : undefined;\n    }\n\n    /**\n     * A specialized version of `_.sampleSize` for arrays.\n     *\n     * @private\n     * @param {Array} array The array to sample.\n     * @param {number} n The number of elements to sample.\n     * @returns {Array} Returns the random elements.\n     */\n    function arraySampleSize(array, n) {\n      return shuffleSelf(copyArray(array), baseClamp(n, 0, array.length));\n    }\n\n    /**\n     * A specialized version of `_.shuffle` for arrays.\n     *\n     * @private\n     * @param {Array} array The array to shuffle.\n     * @returns {Array} Returns the new shuffled array.\n     */\n    function arrayShuffle(array) {\n      return shuffleSelf(copyArray(array));\n    }\n\n    /**\n     * This function is like `assignValue` except that it doesn't assign\n     * `undefined` values.\n     *\n     * @private\n     * @param {Object} object The object to modify.\n     * @param {string} key The key of the property to assign.\n     * @param {*} value The value to assign.\n     */\n    function assignMergeValue(object, key, value) {\n      if ((value !== undefined && !eq(object[key], value)) ||\n          (value === undefined && !(key in object))) {\n        baseAssignValue(object, key, value);\n      }\n    }\n\n    /**\n     * Assigns `value` to `key` of `object` if the existing value is not equivalent\n     * using [`SameValueZero`](http://ecma-international.org/ecma-262/7.0/#sec-samevaluezero)\n     * for equality comparisons.\n     *\n     * @private\n     * @param {Object} object The object to modify.\n     * @param {string} key The key of the property to assign.\n     * @param {*} value The value to assign.\n     */\n    function assignValue(object, key, value) {\n      var objValue = object[key];\n      if (!(hasOwnProperty.call(object, key) && eq(objValue, value)) ||\n          (value === undefined && !(key in object))) {\n        baseAssignValue(object, key, value);\n      }\n    }\n\n    /**\n     * Gets the index at which the `key` is found in `array` of key-value pairs.\n     *\n     * @private\n     * @param {Array} array The array to inspect.\n     * @param {*} key The key to search for.\n     * @returns {number} Returns the index of the matched value, else `-1`.\n     */\n    function assocIndexOf(array, key) {\n      var length = array.length;\n      while (length--) {\n        if (eq(array[length][0], key)) {\n          return length;\n        }\n      }\n      return -1;\n    }\n\n    /**\n     * Aggregates elements of `collection` on `accumulator` with keys transformed\n     * by `iteratee` and values set by `setter`.\n     *\n     * @private\n     * @param {Array|Object} collection The collection to iterate over.\n     * @param {Function} setter The function to set `accumulator` values.\n     * @param {Function} iteratee The iteratee to transform keys.\n     * @param {Object} accumulator The initial aggregated object.\n     * @returns {Function} Returns `accumulator`.\n     */\n    function baseAggregator(collection, setter, iteratee, accumulator) {\n      baseEach(collection, function(value, key, collection) {\n        setter(accumulator, value, iteratee(value), collection);\n      });\n      return accumulator;\n    }\n\n    /**\n     * The base implementation of `_.assign` without support for multiple sources\n     * or `customizer` functions.\n     *\n     * @private\n     * @param {Object} object The destination object.\n     * @param {Object} source The source object.\n     * @returns {Object} Returns `object`.\n     */\n    function baseAssign(object, source) {\n      return object && copyObject(source, keys(source), object);\n    }\n\n    /**\n     * The base implementation of `_.assignIn` without support for multiple sources\n     * or `customizer` functions.\n     *\n     * @private\n     * @param {Object} object The destination object.\n     * @param {Object} source The source object.\n     * @returns {Object} Returns `object`.\n     */\n    function baseAssignIn(object, source) {\n      return object && copyObject(source, keysIn(source), object);\n    }\n\n    /**\n     * The base implementation of `assignValue` and `assignMergeValue` without\n     * value checks.\n     *\n     * @private\n     * @param {Object} object The object to modify.\n     * @param {string} key The key of the property to assign.\n     * @param {*} value The value to assign.\n     */\n    function baseAssignValue(object, key, value) {\n      if (key == '__proto__' && defineProperty) {\n        defineProperty(object, key, {\n          'configurable': true,\n          'enumerable': true,\n          'value': value,\n          'writable': true\n        });\n      } else {\n        object[key] = value;\n      }\n    }\n\n    /**\n     * The base implementation of `_.at` without support for individual paths.\n     *\n     * @private\n     * @param {Object} object The object to iterate over.\n     * @param {string[]} paths The property paths to pick.\n     * @returns {Array} Returns the picked elements.\n     */\n    function baseAt(object, paths) {\n      var index = -1,\n          length = paths.length,\n          result = Array(length),\n          skip = object == null;\n\n      while (++index < length) {\n        result[index] = skip ? undefined : get(object, paths[index]);\n      }\n      return result;\n    }\n\n    /**\n     * The base implementation of `_.clamp` which doesn't coerce arguments.\n     *\n     * @private\n     * @param {number} number The number to clamp.\n     * @param {number} [lower] The lower bound.\n     * @param {number} upper The upper bound.\n     * @returns {number} Returns the clamped number.\n     */\n    function baseClamp(number, lower, upper) {\n      if (number === number) {\n        if (upper !== undefined) {\n          number = number <= upper ? number : upper;\n        }\n        if (lower !== undefined) {\n          number = number >= lower ? number : lower;\n        }\n      }\n      return number;\n    }\n\n    /**\n     * The base implementation of `_.clone` and `_.cloneDeep` which tracks\n     * traversed objects.\n     *\n     * @private\n     * @param {*} value The value to clone.\n     * @param {boolean} bitmask The bitmask flags.\n     *  1 - Deep clone\n     *  2 - Flatten inherited properties\n     *  4 - Clone symbols\n     * @param {Function} [customizer] The function to customize cloning.\n     * @param {string} [key] The key of `value`.\n     * @param {Object} [object] The parent object of `value`.\n     * @param {Object} [stack] Tracks traversed objects and their clone counterparts.\n     * @returns {*} Returns the cloned value.\n     */\n    function baseClone(value, bitmask, customizer, key, object, stack) {\n      var result,\n          isDeep = bitmask & CLONE_DEEP_FLAG,\n          isFlat = bitmask & CLONE_FLAT_FLAG,\n          isFull = bitmask & CLONE_SYMBOLS_FLAG;\n\n      if (customizer) {\n        result = object ? customizer(value, key, object, stack) : customizer(value);\n      }\n      if (result !== undefined) {\n        return result;\n      }\n      if (!isObject(value)) {\n        return value;\n      }\n      var isArr = isArray(value);\n      if (isArr) {\n        result = initCloneArray(value);\n        if (!isDeep) {\n          return copyArray(value, result);\n        }\n      } else {\n        var tag = getTag(value),\n            isFunc = tag == funcTag || tag == genTag;\n\n        if (isBuffer(value)) {\n          return cloneBuffer(value, isDeep);\n        }\n        if (tag == objectTag || tag == argsTag || (isFunc && !object)) {\n          result = (isFlat || isFunc) ? {} : initCloneObject(value);\n          if (!isDeep) {\n            return isFlat\n              ? copySymbolsIn(value, baseAssignIn(result, value))\n              : copySymbols(value, baseAssign(result, value));\n          }\n        } else {\n          if (!cloneableTags[tag]) {\n            return object ? value : {};\n          }\n          result = initCloneByTag(value, tag, baseClone, isDeep);\n        }\n      }\n      // Check for circular references and return its corresponding clone.\n      stack || (stack = new Stack);\n      var stacked = stack.get(value);\n      if (stacked) {\n        return stacked;\n      }\n      stack.set(value, result);\n\n      var keysFunc = isFull\n        ? (isFlat ? getAllKeysIn : getAllKeys)\n        : (isFlat ? keysIn : keys);\n\n      var props = isArr ? undefined : keysFunc(value);\n      arrayEach(props || value, function(subValue, key) {\n        if (props) {\n          key = subValue;\n          subValue = value[key];\n        }\n        // Recursively populate clone (susceptible to call stack limits).\n        assignValue(result, key, baseClone(subValue, bitmask, customizer, key, value, stack));\n      });\n      return result;\n    }\n\n    /**\n     * The base implementation of `_.conforms` which doesn't clone `source`.\n     *\n     * @private\n     * @param {Object} source The object of property predicates to conform to.\n     * @returns {Function} Returns the new spec function.\n     */\n    function baseConforms(source) {\n      var props = keys(source);\n      return function(object) {\n        return baseConformsTo(object, source, props);\n      };\n    }\n\n    /**\n     * The base implementation of `_.conformsTo` which accepts `props` to check.\n     *\n     * @private\n     * @param {Object} object The object to inspect.\n     * @param {Object} source The object of property predicates to conform to.\n     * @returns {boolean} Returns `true` if `object` conforms, else `false`.\n     */\n    function baseConformsTo(object, source, props) {\n      var length = props.length;\n      if (object == null) {\n        return !length;\n      }\n      object = Object(object);\n      while (length--) {\n        var key = props[length],\n            predicate = source[key],\n            value = object[key];\n\n        if ((value === undefined && !(key in object)) || !predicate(value)) {\n          return false;\n        }\n      }\n      return true;\n    }\n\n    /**\n     * The base implementation of `_.delay` and `_.defer` which accepts `args`\n     * to provide to `func`.\n     *\n     * @private\n     * @param {Function} func The function to delay.\n     * @param {number} wait The number of milliseconds to delay invocation.\n     * @param {Array} args The arguments to provide to `func`.\n     * @returns {number|Object} Returns the timer id or timeout object.\n     */\n    function baseDelay(func, wait, args) {\n      if (typeof func != 'function') {\n        throw new TypeError(FUNC_ERROR_TEXT);\n      }\n      return setTimeout(function() { func.apply(undefined, args); }, wait);\n    }\n\n    /**\n     * The base implementation of methods like `_.difference` without support\n     * for excluding multiple arrays or iteratee shorthands.\n     *\n     * @private\n     * @param {Array} array The array to inspect.\n     * @param {Array} values The values to exclude.\n     * @param {Function} [iteratee] The iteratee invoked per element.\n     * @param {Function} [comparator] The comparator invoked per element.\n     * @returns {Array} Returns the new array of filtered values.\n     */\n    function baseDifference(array, values, iteratee, comparator) {\n      var index = -1,\n          includes = arrayIncludes,\n          isCommon = true,\n          length = array.length,\n          result = [],\n          valuesLength = values.length;\n\n      if (!length) {\n        return result;\n      }\n      if (iteratee) {\n        values = arrayMap(values, baseUnary(iteratee));\n      }\n      if (comparator) {\n        includes = arrayIncludesWith;\n        isCommon = false;\n      }\n      else if (values.length >= LARGE_ARRAY_SIZE) {\n        includes = cacheHas;\n        isCommon = false;\n        values = new SetCache(values);\n      }\n      outer:\n      while (++index < length) {\n        var value = array[index],\n            computed = iteratee == null ? value : iteratee(value);\n\n        value = (comparator || value !== 0) ? value : 0;\n        if (isCommon && computed === computed) {\n          var valuesIndex = valuesLength;\n          while (valuesIndex--) {\n            if (values[valuesIndex] === computed) {\n              continue outer;\n            }\n          }\n          result.push(value);\n        }\n        else if (!includes(values, computed, comparator)) {\n          result.push(value);\n        }\n      }\n      return result;\n    }\n\n    /**\n     * The base implementation of `_.forEach` without support for iteratee shorthands.\n     *\n     * @private\n     * @param {Array|Object} collection The collection to iterate over.\n     * @param {Function} iteratee The function invoked per iteration.\n     * @returns {Array|Object} Returns `collection`.\n     */\n    var baseEach = createBaseEach(baseForOwn);\n\n    /**\n     * The base implementation of `_.forEachRight` without support for iteratee shorthands.\n     *\n     * @private\n     * @param {Array|Object} collection The collection to iterate over.\n     * @param {Function} iteratee The function invoked per iteration.\n     * @returns {Array|Object} Returns `collection`.\n     */\n    var baseEachRight = createBaseEach(baseForOwnRight, true);\n\n    /**\n     * The base implementation of `_.every` without support for iteratee shorthands.\n     *\n     * @private\n     * @param {Array|Object} collection The collection to iterate over.\n     * @param {Function} predicate The function invoked per iteration.\n     * @returns {boolean} Returns `true` if all elements pass the predicate check,\n     *  else `false`\n     */\n    function baseEvery(collection, predicate) {\n      var result = true;\n      baseEach(collection, function(value, index, collection) {\n        result = !!predicate(value, index, collection);\n        return result;\n      });\n      return result;\n    }\n\n    /**\n     * The base implementation of methods like `_.max` and `_.min` which accepts a\n     * `comparator` to determine the extremum value.\n     *\n     * @private\n     * @param {Array} array The array to iterate over.\n     * @param {Function} iteratee The iteratee invoked per iteration.\n     * @param {Function} comparator The comparator used to compare values.\n     * @returns {*} Returns the extremum value.\n     */\n    function baseExtremum(array, iteratee, comparator) {\n      var index = -1,\n          length = array.length;\n\n      while (++index < length) {\n        var value = array[index],\n            current = iteratee(value);\n\n        if (current != null && (computed === undefined\n              ? (current === current && !isSymbol(current))\n              : comparator(current, computed)\n            )) {\n          var computed = current,\n              result = value;\n        }\n      }\n      return result;\n    }\n\n    /**\n     * The base implementation of `_.fill` without an iteratee call guard.\n     *\n     * @private\n     * @param {Array} array The array to fill.\n     * @param {*} value The value to fill `array` with.\n     * @param {number} [start=0] The start position.\n     * @param {number} [end=array.length] The end position.\n     * @returns {Array} Returns `array`.\n     */\n    function baseFill(array, value, start, end) {\n      var length = array.length;\n\n      start = toInteger(start);\n      if (start < 0) {\n        start = -start > length ? 0 : (length + start);\n      }\n      end = (end === undefined || end > length) ? length : toInteger(end);\n      if (end < 0) {\n        end += length;\n      }\n      end = start > end ? 0 : toLength(end);\n      while (start < end) {\n        array[start++] = value;\n      }\n      return array;\n    }\n\n    /**\n     * The base implementation of `_.filter` without support for iteratee shorthands.\n     *\n     * @private\n     * @param {Array|Object} collection The collection to iterate over.\n     * @param {Function} predicate The function invoked per iteration.\n     * @returns {Array} Returns the new filtered array.\n     */\n    function baseFilter(collection, predicate) {\n      var result = [];\n      baseEach(collection, function(value, index, collection) {\n        if (predicate(value, index, collection)) {\n          result.push(value);\n        }\n      });\n      return result;\n    }\n\n    /**\n     * The base implementation of `_.flatten` with support for restricting flattening.\n     *\n     * @private\n     * @param {Array} array The array to flatten.\n     * @param {number} depth The maximum recursion depth.\n     * @param {boolean} [predicate=isFlattenable] The function invoked per iteration.\n     * @param {boolean} [isStrict] Restrict to values that pass `predicate` checks.\n     * @param {Array} [result=[]] The initial result value.\n     * @returns {Array} Returns the new flattened array.\n     */\n    function baseFlatten(array, depth, predicate, isStrict, result) {\n      var index = -1,\n          length = array.length;\n\n      predicate || (predicate = isFlattenable);\n      result || (result = []);\n\n      while (++index < length) {\n        var value = array[index];\n        if (depth > 0 && predicate(value)) {\n          if (depth > 1) {\n            // Recursively flatten arrays (susceptible to call stack limits).\n            baseFlatten(value, depth - 1, predicate, isStrict, result);\n          } else {\n            arrayPush(result, value);\n          }\n        } else if (!isStrict) {\n          result[result.length] = value;\n        }\n      }\n      return result;\n    }\n\n    /**\n     * The base implementation of `baseForOwn` which iterates over `object`\n     * properties returned by `keysFunc` and invokes `iteratee` for each property.\n     * Iteratee functions may exit iteration early by explicitly returning `false`.\n     *\n     * @private\n     * @param {Object} object The object to iterate over.\n     * @param {Function} iteratee The function invoked per iteration.\n     * @param {Function} keysFunc The function to get the keys of `object`.\n     * @returns {Object} Returns `object`.\n     */\n    var baseFor = createBaseFor();\n\n    /**\n     * This function is like `baseFor` except that it iterates over properties\n     * in the opposite order.\n     *\n     * @private\n     * @param {Object} object The object to iterate over.\n     * @param {Function} iteratee The function invoked per iteration.\n     * @param {Function} keysFunc The function to get the keys of `object`.\n     * @returns {Object} Returns `object`.\n     */\n    var baseForRight = createBaseFor(true);\n\n    /**\n     * The base implementation of `_.forOwn` without support for iteratee shorthands.\n     *\n     * @private\n     * @param {Object} object The object to iterate over.\n     * @param {Function} iteratee The function invoked per iteration.\n     * @returns {Object} Returns `object`.\n     */\n    function baseForOwn(object, iteratee) {\n      return object && baseFor(object, iteratee, keys);\n    }\n\n    /**\n     * The base implementation of `_.forOwnRight` without support for iteratee shorthands.\n     *\n     * @private\n     * @param {Object} object The object to iterate over.\n     * @param {Function} iteratee The function invoked per iteration.\n     * @returns {Object} Returns `object`.\n     */\n    function baseForOwnRight(object, iteratee) {\n      return object && baseForRight(object, iteratee, keys);\n    }\n\n    /**\n     * The base implementation of `_.functions` which creates an array of\n     * `object` function property names filtered from `props`.\n     *\n     * @private\n     * @param {Object} object The object to inspect.\n     * @param {Array} props The property names to filter.\n     * @returns {Array} Returns the function names.\n     */\n    function baseFunctions(object, props) {\n      return arrayFilter(props, function(key) {\n        return isFunction(object[key]);\n      });\n    }\n\n    /**\n     * The base implementation of `_.get` without support for default values.\n     *\n     * @private\n     * @param {Object} object The object to query.\n     * @param {Array|string} path The path of the property to get.\n     * @returns {*} Returns the resolved value.\n     */\n    function baseGet(object, path) {\n      path = castPath(path, object);\n\n      var index = 0,\n          length = path.length;\n\n      while (object != null && index < length) {\n        object = object[toKey(path[index++])];\n      }\n      return (index && index == length) ? object : undefined;\n    }\n\n    /**\n     * The base implementation of `getAllKeys` and `getAllKeysIn` which uses\n     * `keysFunc` and `symbolsFunc` to get the enumerable property names and\n     * symbols of `object`.\n     *\n     * @private\n     * @param {Object} object The object to query.\n     * @param {Function} keysFunc The function to get the keys of `object`.\n     * @param {Function} symbolsFunc The function to get the symbols of `object`.\n     * @returns {Array} Returns the array of property names and symbols.\n     */\n    function baseGetAllKeys(object, keysFunc, symbolsFunc) {\n      var result = keysFunc(object);\n      return isArray(object) ? result : arrayPush(result, symbolsFunc(object));\n    }\n\n    /**\n     * The base implementation of `getTag` without fallbacks for buggy environments.\n     *\n     * @private\n     * @param {*} value The value to query.\n     * @returns {string} Returns the `toStringTag`.\n     */\n    function baseGetTag(value) {\n      if (value == null) {\n        return value === undefined ? undefinedTag : nullTag;\n      }\n      return (symToStringTag && symToStringTag in Object(value))\n        ? getRawTag(value)\n        : objectToString(value);\n    }\n\n    /**\n     * The base implementation of `_.gt` which doesn't coerce arguments.\n     *\n     * @private\n     * @param {*} value The value to compare.\n     * @param {*} other The other value to compare.\n     * @returns {boolean} Returns `true` if `value` is greater than `other`,\n     *  else `false`.\n     */\n    function baseGt(value, other) {\n      return value > other;\n    }\n\n    /**\n     * The base implementation of `_.has` without support for deep paths.\n     *\n     * @private\n     * @param {Object} [object] The object to query.\n     * @param {Array|string} key The key to check.\n     * @returns {boolean} Returns `true` if `key` exists, else `false`.\n     */\n    function baseHas(object, key) {\n      return object != null && hasOwnProperty.call(object, key);\n    }\n\n    /**\n     * The base implementation of `_.hasIn` without support for deep paths.\n     *\n     * @private\n     * @param {Object} [object] The object to query.\n     * @param {Array|string} key The key to check.\n     * @returns {boolean} Returns `true` if `key` exists, else `false`.\n     */\n    function baseHasIn(object, key) {\n      return object != null && key in Object(object);\n    }\n\n    /**\n     * The base implementation of `_.inRange` which doesn't coerce arguments.\n     *\n     * @private\n     * @param {number} number The number to check.\n     * @param {number} start The start of the range.\n     * @param {number} end The end of the range.\n     * @returns {boolean} Returns `true` if `number` is in the range, else `false`.\n     */\n    function baseInRange(number, start, end) {\n      return number >= nativeMin(start, end) && number < nativeMax(start, end);\n    }\n\n    /**\n     * The base implementation of methods like `_.intersection`, without support\n     * for iteratee shorthands, that accepts an array of arrays to inspect.\n     *\n     * @private\n     * @param {Array} arrays The arrays to inspect.\n     * @param {Function} [iteratee] The iteratee invoked per element.\n     * @param {Function} [comparator] The comparator invoked per element.\n     * @returns {Array} Returns the new array of shared values.\n     */\n    function baseIntersection(arrays, iteratee, comparator) {\n      var includes = comparator ? arrayIncludesWith : arrayIncludes,\n          length = arrays[0].length,\n          othLength = arrays.length,\n          othIndex = othLength,\n          caches = Array(othLength),\n          maxLength = Infinity,\n          result = [];\n\n      while (othIndex--) {\n        var array = arrays[othIndex];\n        if (othIndex && iteratee) {\n          array = arrayMap(array, baseUnary(iteratee));\n        }\n        maxLength = nativeMin(array.length, maxLength);\n        caches[othIndex] = !comparator && (iteratee || (length >= 120 && array.length >= 120))\n          ? new SetCache(othIndex && array)\n          : undefined;\n      }\n      array = arrays[0];\n\n      var index = -1,\n          seen = caches[0];\n\n      outer:\n      while (++index < length && result.length < maxLength) {\n        var value = array[index],\n            computed = iteratee ? iteratee(value) : value;\n\n        value = (comparator || value !== 0) ? value : 0;\n        if (!(seen\n              ? cacheHas(seen, computed)\n              : includes(result, computed, comparator)\n            )) {\n          othIndex = othLength;\n          while (--othIndex) {\n            var cache = caches[othIndex];\n            if (!(cache\n                  ? cacheHas(cache, computed)\n                  : includes(arrays[othIndex], computed, comparator))\n                ) {\n              continue outer;\n            }\n          }\n          if (seen) {\n            seen.push(computed);\n          }\n          result.push(value);\n        }\n      }\n      return result;\n    }\n\n    /**\n     * The base implementation of `_.invert` and `_.invertBy` which inverts\n     * `object` with values transformed by `iteratee` and set by `setter`.\n     *\n     * @private\n     * @param {Object} object The object to iterate over.\n     * @param {Function} setter The function to set `accumulator` values.\n     * @param {Function} iteratee The iteratee to transform values.\n     * @param {Object} accumulator The initial inverted object.\n     * @returns {Function} Returns `accumulator`.\n     */\n    function baseInverter(object, setter, iteratee, accumulator) {\n      baseForOwn(object, function(value, key, object) {\n        setter(accumulator, iteratee(value), key, object);\n      });\n      return accumulator;\n    }\n\n    /**\n     * The base implementation of `_.invoke` without support for individual\n     * method arguments.\n     *\n     * @private\n     * @param {Object} object The object to query.\n     * @param {Array|string} path The path of the method to invoke.\n     * @param {Array} args The arguments to invoke the method with.\n     * @returns {*} Returns the result of the invoked method.\n     */\n    function baseInvoke(object, path, args) {\n      path = castPath(path, object);\n      object = parent(object, path);\n      var func = object == null ? object : object[toKey(last(path))];\n      return func == null ? undefined : apply(func, object, args);\n    }\n\n    /**\n     * The base implementation of `_.isArguments`.\n     *\n     * @private\n     * @param {*} value The value to check.\n     * @returns {boolean} Returns `true` if `value` is an `arguments` object,\n     */\n    function baseIsArguments(value) {\n      return isObjectLike(value) && baseGetTag(value) == argsTag;\n    }\n\n    /**\n     * The base implementation of `_.isArrayBuffer` without Node.js optimizations.\n     *\n     * @private\n     * @param {*} value The value to check.\n     * @returns {boolean} Returns `true` if `value` is an array buffer, else `false`.\n     */\n    function baseIsArrayBuffer(value) {\n      return isObjectLike(value) && baseGetTag(value) == arrayBufferTag;\n    }\n\n    /**\n     * The base implementation of `_.isDate` without Node.js optimizations.\n     *\n     * @private\n     * @param {*} value The value to check.\n     * @returns {boolean} Returns `true` if `value` is a date object, else `false`.\n     */\n    function baseIsDate(value) {\n      return isObjectLike(value) && baseGetTag(value) == dateTag;\n    }\n\n    /**\n     * The base implementation of `_.isEqual` which supports partial comparisons\n     * and tracks traversed objects.\n     *\n     * @private\n     * @param {*} value The value to compare.\n     * @param {*} other The other value to compare.\n     * @param {boolean} bitmask The bitmask flags.\n     *  1 - Unordered comparison\n     *  2 - Partial comparison\n     * @param {Function} [customizer] The function to customize comparisons.\n     * @param {Object} [stack] Tracks traversed `value` and `other` objects.\n     * @returns {boolean} Returns `true` if the values are equivalent, else `false`.\n     */\n    function baseIsEqual(value, other, bitmask, customizer, stack) {\n      if (value === other) {\n        return true;\n      }\n      if (value == null || other == null || (!isObjectLike(value) && !isObjectLike(other))) {\n        return value !== value && other !== other;\n      }\n      return baseIsEqualDeep(value, other, bitmask, customizer, baseIsEqual, stack);\n    }\n\n    /**\n     * A specialized version of `baseIsEqual` for arrays and objects which performs\n     * deep comparisons and tracks traversed objects enabling objects with circular\n     * references to be compared.\n     *\n     * @private\n     * @param {Object} object The object to compare.\n     * @param {Object} other The other object to compare.\n     * @param {number} bitmask The bitmask flags. See `baseIsEqual` for more details.\n     * @param {Function} customizer The function to customize comparisons.\n     * @param {Function} equalFunc The function to determine equivalents of values.\n     * @param {Object} [stack] Tracks traversed `object` and `other` objects.\n     * @returns {boolean} Returns `true` if the objects are equivalent, else `false`.\n     */\n    function baseIsEqualDeep(object, other, bitmask, customizer, equalFunc, stack) {\n      var objIsArr = isArray(object),\n          othIsArr = isArray(other),\n          objTag = objIsArr ? arrayTag : getTag(object),\n          othTag = othIsArr ? arrayTag : getTag(other);\n\n      objTag = objTag == argsTag ? objectTag : objTag;\n      othTag = othTag == argsTag ? objectTag : othTag;\n\n      var objIsObj = objTag == objectTag,\n          othIsObj = othTag == objectTag,\n          isSameTag = objTag == othTag;\n\n      if (isSameTag && isBuffer(object)) {\n        if (!isBuffer(other)) {\n          return false;\n        }\n        objIsArr = true;\n        objIsObj = false;\n      }\n      if (isSameTag && !objIsObj) {\n        stack || (stack = new Stack);\n        return (objIsArr || isTypedArray(object))\n          ? equalArrays(object, other, bitmask, customizer, equalFunc, stack)\n          : equalByTag(object, other, objTag, bitmask, customizer, equalFunc, stack);\n      }\n      if (!(bitmask & COMPARE_PARTIAL_FLAG)) {\n        var objIsWrapped = objIsObj && hasOwnProperty.call(object, '__wrapped__'),\n            othIsWrapped = othIsObj && hasOwnProperty.call(other, '__wrapped__');\n\n        if (objIsWrapped || othIsWrapped) {\n          var objUnwrapped = objIsWrapped ? object.value() : object,\n              othUnwrapped = othIsWrapped ? other.value() : other;\n\n          stack || (stack = new Stack);\n          return equalFunc(objUnwrapped, othUnwrapped, bitmask, customizer, stack);\n        }\n      }\n      if (!isSameTag) {\n        return false;\n      }\n      stack || (stack = new Stack);\n      return equalObjects(object, other, bitmask, customizer, equalFunc, stack);\n    }\n\n    /**\n     * The base implementation of `_.isMap` without Node.js optimizations.\n     *\n     * @private\n     * @param {*} value The value to check.\n     * @returns {boolean} Returns `true` if `value` is a map, else `false`.\n     */\n    function baseIsMap(value) {\n      return isObjectLike(value) && getTag(value) == mapTag;\n    }\n\n    /**\n     * The base implementation of `_.isMatch` without support for iteratee shorthands.\n     *\n     * @private\n     * @param {Object} object The object to inspect.\n     * @param {Object} source The object of property values to match.\n     * @param {Array} matchData The property names, values, and compare flags to match.\n     * @param {Function} [customizer] The function to customize comparisons.\n     * @returns {boolean} Returns `true` if `object` is a match, else `false`.\n     */\n    function baseIsMatch(object, source, matchData, customizer) {\n      var index = matchData.length,\n          length = index,\n          noCustomizer = !customizer;\n\n      if (object == null) {\n        return !length;\n      }\n      object = Object(object);\n      while (index--) {\n        var data = matchData[index];\n        if ((noCustomizer && data[2])\n              ? data[1] !== object[data[0]]\n              : !(data[0] in object)\n            ) {\n          return false;\n        }\n      }\n      while (++index < length) {\n        data = matchData[index];\n        var key = data[0],\n            objValue = object[key],\n            srcValue = data[1];\n\n        if (noCustomizer && data[2]) {\n          if (objValue === undefined && !(key in object)) {\n            return false;\n          }\n        } else {\n          var stack = new Stack;\n          if (customizer) {\n            var result = customizer(objValue, srcValue, key, object, source, stack);\n          }\n          if (!(result === undefined\n                ? baseIsEqual(srcValue, objValue, COMPARE_PARTIAL_FLAG | COMPARE_UNORDERED_FLAG, customizer, stack)\n                : result\n              )) {\n            return false;\n          }\n        }\n      }\n      return true;\n    }\n\n    /**\n     * The base implementation of `_.isNative` without bad shim checks.\n     *\n     * @private\n     * @param {*} value The value to check.\n     * @returns {boolean} Returns `true` if `value` is a native function,\n     *  else `false`.\n     */\n    function baseIsNative(value) {\n      if (!isObject(value) || isMasked(value)) {\n        return false;\n      }\n      var pattern = isFunction(value) ? reIsNative : reIsHostCtor;\n      return pattern.test(toSource(value));\n    }\n\n    /**\n     * The base implementation of `_.isRegExp` without Node.js optimizations.\n     *\n     * @private\n     * @param {*} value The value to check.\n     * @returns {boolean} Returns `true` if `value` is a regexp, else `false`.\n     */\n    function baseIsRegExp(value) {\n      return isObjectLike(value) && baseGetTag(value) == regexpTag;\n    }\n\n    /**\n     * The base implementation of `_.isSet` without Node.js optimizations.\n     *\n     * @private\n     * @param {*} value The value to check.\n     * @returns {boolean} Returns `true` if `value` is a set, else `false`.\n     */\n    function baseIsSet(value) {\n      return isObjectLike(value) && getTag(value) == setTag;\n    }\n\n    /**\n     * The base implementation of `_.isTypedArray` without Node.js optimizations.\n     *\n     * @private\n     * @param {*} value The value to check.\n     * @returns {boolean} Returns `true` if `value` is a typed array, else `false`.\n     */\n    function baseIsTypedArray(value) {\n      return isObjectLike(value) &&\n        isLength(value.length) && !!typedArrayTags[baseGetTag(value)];\n    }\n\n    /**\n     * The base implementation of `_.iteratee`.\n     *\n     * @private\n     * @param {*} [value=_.identity] The value to convert to an iteratee.\n     * @returns {Function} Returns the iteratee.\n     */\n    function baseIteratee(value) {\n      // Don't store the `typeof` result in a variable to avoid a JIT bug in Safari 9.\n      // See https://bugs.webkit.org/show_bug.cgi?id=156034 for more details.\n      if (typeof value == 'function') {\n        return value;\n      }\n      if (value == null) {\n        return identity;\n      }\n      if (typeof value == 'object') {\n        return isArray(value)\n          ? baseMatchesProperty(value[0], value[1])\n          : baseMatches(value);\n      }\n      return property(value);\n    }\n\n    /**\n     * The base implementation of `_.keys` which doesn't treat sparse arrays as dense.\n     *\n     * @private\n     * @param {Object} object The object to query.\n     * @returns {Array} Returns the array of property names.\n     */\n    function baseKeys(object) {\n      if (!isPrototype(object)) {\n        return nativeKeys(object);\n      }\n      var result = [];\n      for (var key in Object(object)) {\n        if (hasOwnProperty.call(object, key) && key != 'constructor') {\n          result.push(key);\n        }\n      }\n      return result;\n    }\n\n    /**\n     * The base implementation of `_.keysIn` which doesn't treat sparse arrays as dense.\n     *\n     * @private\n     * @param {Object} object The object to query.\n     * @returns {Array} Returns the array of property names.\n     */\n    function baseKeysIn(object) {\n      if (!isObject(object)) {\n        return nativeKeysIn(object);\n      }\n      var isProto = isPrototype(object),\n          result = [];\n\n      for (var key in object) {\n        if (!(key == 'constructor' && (isProto || !hasOwnProperty.call(object, key)))) {\n          result.push(key);\n        }\n      }\n      return result;\n    }\n\n    /**\n     * The base implementation of `_.lt` which doesn't coerce arguments.\n     *\n     * @private\n     * @param {*} value The value to compare.\n     * @param {*} other The other value to compare.\n     * @returns {boolean} Returns `true` if `value` is less than `other`,\n     *  else `false`.\n     */\n    function baseLt(value, other) {\n      return value < other;\n    }\n\n    /**\n     * The base implementation of `_.map` without support for iteratee shorthands.\n     *\n     * @private\n     * @param {Array|Object} collection The collection to iterate over.\n     * @param {Function} iteratee The function invoked per iteration.\n     * @returns {Array} Returns the new mapped array.\n     */\n    function baseMap(collection, iteratee) {\n      var index = -1,\n          result = isArrayLike(collection) ? Array(collection.length) : [];\n\n      baseEach(collection, function(value, key, collection) {\n        result[++index] = iteratee(value, key, collection);\n      });\n      return result;\n    }\n\n    /**\n     * The base implementation of `_.matches` which doesn't clone `source`.\n     *\n     * @private\n     * @param {Object} source The object of property values to match.\n     * @returns {Function} Returns the new spec function.\n     */\n    function baseMatches(source) {\n      var matchData = getMatchData(source);\n      if (matchData.length == 1 && matchData[0][2]) {\n        return matchesStrictComparable(matchData[0][0], matchData[0][1]);\n      }\n      return function(object) {\n        return object === source || baseIsMatch(object, source, matchData);\n      };\n    }\n\n    /**\n     * The base implementation of `_.matchesProperty` which doesn't clone `srcValue`.\n     *\n     * @private\n     * @param {string} path The path of the property to get.\n     * @param {*} srcValue The value to match.\n     * @returns {Function} Returns the new spec function.\n     */\n    function baseMatchesProperty(path, srcValue) {\n      if (isKey(path) && isStrictComparable(srcValue)) {\n        return matchesStrictComparable(toKey(path), srcValue);\n      }\n      return function(object) {\n        var objValue = get(object, path);\n        return (objValue === undefined && objValue === srcValue)\n          ? hasIn(object, path)\n          : baseIsEqual(srcValue, objValue, COMPARE_PARTIAL_FLAG | COMPARE_UNORDERED_FLAG);\n      };\n    }\n\n    /**\n     * The base implementation of `_.merge` without support for multiple sources.\n     *\n     * @private\n     * @param {Object} object The destination object.\n     * @param {Object} source The source object.\n     * @param {number} srcIndex The index of `source`.\n     * @param {Function} [customizer] The function to customize merged values.\n     * @param {Object} [stack] Tracks traversed source values and their merged\n     *  counterparts.\n     */\n    function baseMerge(object, source, srcIndex, customizer, stack) {\n      if (object === source) {\n        return;\n      }\n      baseFor(source, function(srcValue, key) {\n        if (isObject(srcValue)) {\n          stack || (stack = new Stack);\n          baseMergeDeep(object, source, key, srcIndex, baseMerge, customizer, stack);\n        }\n        else {\n          var newValue = customizer\n            ? customizer(object[key], srcValue, (key + ''), object, source, stack)\n            : undefined;\n\n          if (newValue === undefined) {\n            newValue = srcValue;\n          }\n          assignMergeValue(object, key, newValue);\n        }\n      }, keysIn);\n    }\n\n    /**\n     * A specialized version of `baseMerge` for arrays and objects which performs\n     * deep merges and tracks traversed objects enabling objects with circular\n     * references to be merged.\n     *\n     * @private\n     * @param {Object} object The destination object.\n     * @param {Object} source The source object.\n     * @param {string} key The key of the value to merge.\n     * @param {number} srcIndex The index of `source`.\n     * @param {Function} mergeFunc The function to merge values.\n     * @param {Function} [customizer] The function to customize assigned values.\n     * @param {Object} [stack] Tracks traversed source values and their merged\n     *  counterparts.\n     */\n    function baseMergeDeep(object, source, key, srcIndex, mergeFunc, customizer, stack) {\n      var objValue = object[key],\n          srcValue = source[key],\n          stacked = stack.get(srcValue);\n\n      if (stacked) {\n        assignMergeValue(object, key, stacked);\n        return;\n      }\n      var newValue = customizer\n        ? customizer(objValue, srcValue, (key + ''), object, source, stack)\n        : undefined;\n\n      var isCommon = newValue === undefined;\n\n      if (isCommon) {\n        var isArr = isArray(srcValue),\n            isBuff = !isArr && isBuffer(srcValue),\n            isTyped = !isArr && !isBuff && isTypedArray(srcValue);\n\n        newValue = srcValue;\n        if (isArr || isBuff || isTyped) {\n          if (isArray(objValue)) {\n            newValue = objValue;\n          }\n          else if (isArrayLikeObject(objValue)) {\n            newValue = copyArray(objValue);\n          }\n          else if (isBuff) {\n            isCommon = false;\n            newValue = cloneBuffer(srcValue, true);\n          }\n          else if (isTyped) {\n            isCommon = false;\n            newValue = cloneTypedArray(srcValue, true);\n          }\n          else {\n            newValue = [];\n          }\n        }\n        else if (isPlainObject(srcValue) || isArguments(srcValue)) {\n          newValue = objValue;\n          if (isArguments(objValue)) {\n            newValue = toPlainObject(objValue);\n          }\n          else if (!isObject(objValue) || (srcIndex && isFunction(objValue))) {\n            newValue = initCloneObject(srcValue);\n          }\n        }\n        else {\n          isCommon = false;\n        }\n      }\n      if (isCommon) {\n        // Recursively merge objects and arrays (susceptible to call stack limits).\n        stack.set(srcValue, newValue);\n        mergeFunc(newValue, srcValue, srcIndex, customizer, stack);\n        stack['delete'](srcValue);\n      }\n      assignMergeValue(object, key, newValue);\n    }\n\n    /**\n     * The base implementation of `_.nth` which doesn't coerce arguments.\n     *\n     * @private\n     * @param {Array} array The array to query.\n     * @param {number} n The index of the element to return.\n     * @returns {*} Returns the nth element of `array`.\n     */\n    function baseNth(array, n) {\n      var length = array.length;\n      if (!length) {\n        return;\n      }\n      n += n < 0 ? length : 0;\n      return isIndex(n, length) ? array[n] : undefined;\n    }\n\n    /**\n     * The base implementation of `_.orderBy` without param guards.\n     *\n     * @private\n     * @param {Array|Object} collection The collection to iterate over.\n     * @param {Function[]|Object[]|string[]} iteratees The iteratees to sort by.\n     * @param {string[]} orders The sort orders of `iteratees`.\n     * @returns {Array} Returns the new sorted array.\n     */\n    function baseOrderBy(collection, iteratees, orders) {\n      var index = -1;\n      iteratees = arrayMap(iteratees.length ? iteratees : [identity], baseUnary(getIteratee()));\n\n      var result = baseMap(collection, function(value, key, collection) {\n        var criteria = arrayMap(iteratees, function(iteratee) {\n          return iteratee(value);\n        });\n        return { 'criteria': criteria, 'index': ++index, 'value': value };\n      });\n\n      return baseSortBy(result, function(object, other) {\n        return compareMultiple(object, other, orders);\n      });\n    }\n\n    /**\n     * The base implementation of `_.pick` without support for individual\n     * property identifiers.\n     *\n     * @private\n     * @param {Object} object The source object.\n     * @param {string[]} paths The property paths to pick.\n     * @returns {Object} Returns the new object.\n     */\n    function basePick(object, paths) {\n      return basePickBy(object, paths, function(value, path) {\n        return hasIn(object, path);\n      });\n    }\n\n    /**\n     * The base implementation of  `_.pickBy` without support for iteratee shorthands.\n     *\n     * @private\n     * @param {Object} object The source object.\n     * @param {string[]} paths The property paths to pick.\n     * @param {Function} predicate The function invoked per property.\n     * @returns {Object} Returns the new object.\n     */\n    function basePickBy(object, paths, predicate) {\n      var index = -1,\n          length = paths.length,\n          result = {};\n\n      while (++index < length) {\n        var path = paths[index],\n            value = baseGet(object, path);\n\n        if (predicate(value, path)) {\n          baseSet(result, castPath(path, object), value);\n        }\n      }\n      return result;\n    }\n\n    /**\n     * A specialized version of `baseProperty` which supports deep paths.\n     *\n     * @private\n     * @param {Array|string} path The path of the property to get.\n     * @returns {Function} Returns the new accessor function.\n     */\n    function basePropertyDeep(path) {\n      return function(object) {\n        return baseGet(object, path);\n      };\n    }\n\n    /**\n     * The base implementation of `_.pullAllBy` without support for iteratee\n     * shorthands.\n     *\n     * @private\n     * @param {Array} array The array to modify.\n     * @param {Array} values The values to remove.\n     * @param {Function} [iteratee] The iteratee invoked per element.\n     * @param {Function} [comparator] The comparator invoked per element.\n     * @returns {Array} Returns `array`.\n     */\n    function basePullAll(array, values, iteratee, comparator) {\n      var indexOf = comparator ? baseIndexOfWith : baseIndexOf,\n          index = -1,\n          length = values.length,\n          seen = array;\n\n      if (array === values) {\n        values = copyArray(values);\n      }\n      if (iteratee) {\n        seen = arrayMap(array, baseUnary(iteratee));\n      }\n      while (++index < length) {\n        var fromIndex = 0,\n            value = values[index],\n            computed = iteratee ? iteratee(value) : value;\n\n        while ((fromIndex = indexOf(seen, computed, fromIndex, comparator)) > -1) {\n          if (seen !== array) {\n            splice.call(seen, fromIndex, 1);\n          }\n          splice.call(array, fromIndex, 1);\n        }\n      }\n      return array;\n    }\n\n    /**\n     * The base implementation of `_.pullAt` without support for individual\n     * indexes or capturing the removed elements.\n     *\n     * @private\n     * @param {Array} array The array to modify.\n     * @param {number[]} indexes The indexes of elements to remove.\n     * @returns {Array} Returns `array`.\n     */\n    function basePullAt(array, indexes) {\n      var length = array ? indexes.length : 0,\n          lastIndex = length - 1;\n\n      while (length--) {\n        var index = indexes[length];\n        if (length == lastIndex || index !== previous) {\n          var previous = index;\n          if (isIndex(index)) {\n            splice.call(array, index, 1);\n          } else {\n            baseUnset(array, index);\n          }\n        }\n      }\n      return array;\n    }\n\n    /**\n     * The base implementation of `_.random` without support for returning\n     * floating-point numbers.\n     *\n     * @private\n     * @param {number} lower The lower bound.\n     * @param {number} upper The upper bound.\n     * @returns {number} Returns the random number.\n     */\n    function baseRandom(lower, upper) {\n      return lower + nativeFloor(nativeRandom() * (upper - lower + 1));\n    }\n\n    /**\n     * The base implementation of `_.range` and `_.rangeRight` which doesn't\n     * coerce arguments.\n     *\n     * @private\n     * @param {number} start The start of the range.\n     * @param {number} end The end of the range.\n     * @param {number} step The value to increment or decrement by.\n     * @param {boolean} [fromRight] Specify iterating from right to left.\n     * @returns {Array} Returns the range of numbers.\n     */\n    function baseRange(start, end, step, fromRight) {\n      var index = -1,\n          length = nativeMax(nativeCeil((end - start) / (step || 1)), 0),\n          result = Array(length);\n\n      while (length--) {\n        result[fromRight ? length : ++index] = start;\n        start += step;\n      }\n      return result;\n    }\n\n    /**\n     * The base implementation of `_.repeat` which doesn't coerce arguments.\n     *\n     * @private\n     * @param {string} string The string to repeat.\n     * @param {number} n The number of times to repeat the string.\n     * @returns {string} Returns the repeated string.\n     */\n    function baseRepeat(string, n) {\n      var result = '';\n      if (!string || n < 1 || n > MAX_SAFE_INTEGER) {\n        return result;\n      }\n      // Leverage the exponentiation by squaring algorithm for a faster repeat.\n      // See https://en.wikipedia.org/wiki/Exponentiation_by_squaring for more details.\n      do {\n        if (n % 2) {\n          result += string;\n        }\n        n = nativeFloor(n / 2);\n        if (n) {\n          string += string;\n        }\n      } while (n);\n\n      return result;\n    }\n\n    /**\n     * The base implementation of `_.rest` which doesn't validate or coerce arguments.\n     *\n     * @private\n     * @param {Function} func The function to apply a rest parameter to.\n     * @param {number} [start=func.length-1] The start position of the rest parameter.\n     * @returns {Function} Returns the new function.\n     */\n    function baseRest(func, start) {\n      return setToString(overRest(func, start, identity), func + '');\n    }\n\n    /**\n     * The base implementation of `_.sample`.\n     *\n     * @private\n     * @param {Array|Object} collection The collection to sample.\n     * @returns {*} Returns the random element.\n     */\n    function baseSample(collection) {\n      return arraySample(values(collection));\n    }\n\n    /**\n     * The base implementation of `_.sampleSize` without param guards.\n     *\n     * @private\n     * @param {Array|Object} collection The collection to sample.\n     * @param {number} n The number of elements to sample.\n     * @returns {Array} Returns the random elements.\n     */\n    function baseSampleSize(collection, n) {\n      var array = values(collection);\n      return shuffleSelf(array, baseClamp(n, 0, array.length));\n    }\n\n    /**\n     * The base implementation of `_.set`.\n     *\n     * @private\n     * @param {Object} object The object to modify.\n     * @param {Array|string} path The path of the property to set.\n     * @param {*} value The value to set.\n     * @param {Function} [customizer] The function to customize path creation.\n     * @returns {Object} Returns `object`.\n     */\n    function baseSet(object, path, value, customizer) {\n      if (!isObject(object)) {\n        return object;\n      }\n      path = castPath(path, object);\n\n      var index = -1,\n          length = path.length,\n          lastIndex = length - 1,\n          nested = object;\n\n      while (nested != null && ++index < length) {\n        var key = toKey(path[index]),\n            newValue = value;\n\n        if (index != lastIndex) {\n          var objValue = nested[key];\n          newValue = customizer ? customizer(objValue, key, nested) : undefined;\n          if (newValue === undefined) {\n            newValue = isObject(objValue)\n              ? objValue\n              : (isIndex(path[index + 1]) ? [] : {});\n          }\n        }\n        assignValue(nested, key, newValue);\n        nested = nested[key];\n      }\n      return object;\n    }\n\n    /**\n     * The base implementation of `setData` without support for hot loop shorting.\n     *\n     * @private\n     * @param {Function} func The function to associate metadata with.\n     * @param {*} data The metadata.\n     * @returns {Function} Returns `func`.\n     */\n    var baseSetData = !metaMap ? identity : function(func, data) {\n      metaMap.set(func, data);\n      return func;\n    };\n\n    /**\n     * The base implementation of `setToString` without support for hot loop shorting.\n     *\n     * @private\n     * @param {Function} func The function to modify.\n     * @param {Function} string The `toString` result.\n     * @returns {Function} Returns `func`.\n     */\n    var baseSetToString = !defineProperty ? identity : function(func, string) {\n      return defineProperty(func, 'toString', {\n        'configurable': true,\n        'enumerable': false,\n        'value': constant(string),\n        'writable': true\n      });\n    };\n\n    /**\n     * The base implementation of `_.shuffle`.\n     *\n     * @private\n     * @param {Array|Object} collection The collection to shuffle.\n     * @returns {Array} Returns the new shuffled array.\n     */\n    function baseShuffle(collection) {\n      return shuffleSelf(values(collection));\n    }\n\n    /**\n     * The base implementation of `_.slice` without an iteratee call guard.\n     *\n     * @private\n     * @param {Array} array The array to slice.\n     * @param {number} [start=0] The start position.\n     * @param {number} [end=array.length] The end position.\n     * @returns {Array} Returns the slice of `array`.\n     */\n    function baseSlice(array, start, end) {\n      var index = -1,\n          length = array.length;\n\n      if (start < 0) {\n        start = -start > length ? 0 : (length + start);\n      }\n      end = end > length ? length : end;\n      if (end < 0) {\n        end += length;\n      }\n      length = start > end ? 0 : ((end - start) >>> 0);\n      start >>>= 0;\n\n      var result = Array(length);\n      while (++index < length) {\n        result[index] = array[index + start];\n      }\n      return result;\n    }\n\n    /**\n     * The base implementation of `_.some` without support for iteratee shorthands.\n     *\n     * @private\n     * @param {Array|Object} collection The collection to iterate over.\n     * @param {Function} predicate The function invoked per iteration.\n     * @returns {boolean} Returns `true` if any element passes the predicate check,\n     *  else `false`.\n     */\n    function baseSome(collection, predicate) {\n      var result;\n\n      baseEach(collection, function(value, index, collection) {\n        result = predicate(value, index, collection);\n        return !result;\n      });\n      return !!result;\n    }\n\n    /**\n     * The base implementation of `_.sortedIndex` and `_.sortedLastIndex` which\n     * performs a binary search of `array` to determine the index at which `value`\n     * should be inserted into `array` in order to maintain its sort order.\n     *\n     * @private\n     * @param {Array} array The sorted array to inspect.\n     * @param {*} value The value to evaluate.\n     * @param {boolean} [retHighest] Specify returning the highest qualified index.\n     * @returns {number} Returns the index at which `value` should be inserted\n     *  into `array`.\n     */\n    function baseSortedIndex(array, value, retHighest) {\n      var low = 0,\n          high = array == null ? low : array.length;\n\n      if (typeof value == 'number' && value === value && high <= HALF_MAX_ARRAY_LENGTH) {\n        while (low < high) {\n          var mid = (low + high) >>> 1,\n              computed = array[mid];\n\n          if (computed !== null && !isSymbol(computed) &&\n              (retHighest ? (computed <= value) : (computed < value))) {\n            low = mid + 1;\n          } else {\n            high = mid;\n          }\n        }\n        return high;\n      }\n      return baseSortedIndexBy(array, value, identity, retHighest);\n    }\n\n    /**\n     * The base implementation of `_.sortedIndexBy` and `_.sortedLastIndexBy`\n     * which invokes `iteratee` for `value` and each element of `array` to compute\n     * their sort ranking. The iteratee is invoked with one argument; (value).\n     *\n     * @private\n     * @param {Array} array The sorted array to inspect.\n     * @param {*} value The value to evaluate.\n     * @param {Function} iteratee The iteratee invoked per element.\n     * @param {boolean} [retHighest] Specify returning the highest qualified index.\n     * @returns {number} Returns the index at which `value` should be inserted\n     *  into `array`.\n     */\n    function baseSortedIndexBy(array, value, iteratee, retHighest) {\n      value = iteratee(value);\n\n      var low = 0,\n          high = array == null ? 0 : array.length,\n          valIsNaN = value !== value,\n          valIsNull = value === null,\n          valIsSymbol = isSymbol(value),\n          valIsUndefined = value === undefined;\n\n      while (low < high) {\n        var mid = nativeFloor((low + high) / 2),\n            computed = iteratee(array[mid]),\n            othIsDefined = computed !== undefined,\n            othIsNull = computed === null,\n            othIsReflexive = computed === computed,\n            othIsSymbol = isSymbol(computed);\n\n        if (valIsNaN) {\n          var setLow = retHighest || othIsReflexive;\n        } else if (valIsUndefined) {\n          setLow = othIsReflexive && (retHighest || othIsDefined);\n        } else if (valIsNull) {\n          setLow = othIsReflexive && othIsDefined && (retHighest || !othIsNull);\n        } else if (valIsSymbol) {\n          setLow = othIsReflexive && othIsDefined && !othIsNull && (retHighest || !othIsSymbol);\n        } else if (othIsNull || othIsSymbol) {\n          setLow = false;\n        } else {\n          setLow = retHighest ? (computed <= value) : (computed < value);\n        }\n        if (setLow) {\n          low = mid + 1;\n        } else {\n          high = mid;\n        }\n      }\n      return nativeMin(high, MAX_ARRAY_INDEX);\n    }\n\n    /**\n     * The base implementation of `_.sortedUniq` and `_.sortedUniqBy` without\n     * support for iteratee shorthands.\n     *\n     * @private\n     * @param {Array} array The array to inspect.\n     * @param {Function} [iteratee] The iteratee invoked per element.\n     * @returns {Array} Returns the new duplicate free array.\n     */\n    function baseSortedUniq(array, iteratee) {\n      var index = -1,\n          length = array.length,\n          resIndex = 0,\n          result = [];\n\n      while (++index < length) {\n        var value = array[index],\n            computed = iteratee ? iteratee(value) : value;\n\n        if (!index || !eq(computed, seen)) {\n          var seen = computed;\n          result[resIndex++] = value === 0 ? 0 : value;\n        }\n      }\n      return result;\n    }\n\n    /**\n     * The base implementation of `_.toNumber` which doesn't ensure correct\n     * conversions of binary, hexadecimal, or octal string values.\n     *\n     * @private\n     * @param {*} value The value to process.\n     * @returns {number} Returns the number.\n     */\n    function baseToNumber(value) {\n      if (typeof value == 'number') {\n        return value;\n      }\n      if (isSymbol(value)) {\n        return NAN;\n      }\n      return +value;\n    }\n\n    /**\n     * The base implementation of `_.toString` which doesn't convert nullish\n     * values to empty strings.\n     *\n     * @private\n     * @param {*} value The value to process.\n     * @returns {string} Returns the string.\n     */\n    function baseToString(value) {\n      // Exit early for strings to avoid a performance hit in some environments.\n      if (typeof value == 'string') {\n        return value;\n      }\n      if (isArray(value)) {\n        // Recursively convert values (susceptible to call stack limits).\n        return arrayMap(value, baseToString) + '';\n      }\n      if (isSymbol(value)) {\n        return symbolToString ? symbolToString.call(value) : '';\n      }\n      var result = (value + '');\n      return (result == '0' && (1 / value) == -INFINITY) ? '-0' : result;\n    }\n\n    /**\n     * The base implementation of `_.uniqBy` without support for iteratee shorthands.\n     *\n     * @private\n     * @param {Array} array The array to inspect.\n     * @param {Function} [iteratee] The iteratee invoked per element.\n     * @param {Function} [comparator] The comparator invoked per element.\n     * @returns {Array} Returns the new duplicate free array.\n     */\n    function baseUniq(array, iteratee, comparator) {\n      var index = -1,\n          includes = arrayIncludes,\n          length = array.length,\n          isCommon = true,\n          result = [],\n          seen = result;\n\n      if (comparator) {\n        isCommon = false;\n        includes = arrayIncludesWith;\n      }\n      else if (length >= LARGE_ARRAY_SIZE) {\n        var set = iteratee ? null : createSet(array);\n        if (set) {\n          return setToArray(set);\n        }\n        isCommon = false;\n        includes = cacheHas;\n        seen = new SetCache;\n      }\n      else {\n        seen = iteratee ? [] : result;\n      }\n      outer:\n      while (++index < length) {\n        var value = array[index],\n            computed = iteratee ? iteratee(value) : value;\n\n        value = (comparator || value !== 0) ? value : 0;\n        if (isCommon && computed === computed) {\n          var seenIndex = seen.length;\n          while (seenIndex--) {\n            if (seen[seenIndex] === computed) {\n              continue outer;\n            }\n          }\n          if (iteratee) {\n            seen.push(computed);\n          }\n          result.push(value);\n        }\n        else if (!includes(seen, computed, comparator)) {\n          if (seen !== result) {\n            seen.push(computed);\n          }\n          result.push(value);\n        }\n      }\n      return result;\n    }\n\n    /**\n     * The base implementation of `_.unset`.\n     *\n     * @private\n     * @param {Object} object The object to modify.\n     * @param {Array|string} path The property path to unset.\n     * @returns {boolean} Returns `true` if the property is deleted, else `false`.\n     */\n    function baseUnset(object, path) {\n      path = castPath(path, object);\n      object = parent(object, path);\n      return object == null || delete object[toKey(last(path))];\n    }\n\n    /**\n     * The base implementation of `_.update`.\n     *\n     * @private\n     * @param {Object} object The object to modify.\n     * @param {Array|string} path The path of the property to update.\n     * @param {Function} updater The function to produce the updated value.\n     * @param {Function} [customizer] The function to customize path creation.\n     * @returns {Object} Returns `object`.\n     */\n    function baseUpdate(object, path, updater, customizer) {\n      return baseSet(object, path, updater(baseGet(object, path)), customizer);\n    }\n\n    /**\n     * The base implementation of methods like `_.dropWhile` and `_.takeWhile`\n     * without support for iteratee shorthands.\n     *\n     * @private\n     * @param {Array} array The array to query.\n     * @param {Function} predicate The function invoked per iteration.\n     * @param {boolean} [isDrop] Specify dropping elements instead of taking them.\n     * @param {boolean} [fromRight] Specify iterating from right to left.\n     * @returns {Array} Returns the slice of `array`.\n     */\n    function baseWhile(array, predicate, isDrop, fromRight) {\n      var length = array.length,\n          index = fromRight ? length : -1;\n\n      while ((fromRight ? index-- : ++index < length) &&\n        predicate(array[index], index, array)) {}\n\n      return isDrop\n        ? baseSlice(array, (fromRight ? 0 : index), (fromRight ? index + 1 : length))\n        : baseSlice(array, (fromRight ? index + 1 : 0), (fromRight ? length : index));\n    }\n\n    /**\n     * The base implementation of `wrapperValue` which returns the result of\n     * performing a sequence of actions on the unwrapped `value`, where each\n     * successive action is supplied the return value of the previous.\n     *\n     * @private\n     * @param {*} value The unwrapped value.\n     * @param {Array} actions Actions to perform to resolve the unwrapped value.\n     * @returns {*} Returns the resolved value.\n     */\n    function baseWrapperValue(value, actions) {\n      var result = value;\n      if (result instanceof LazyWrapper) {\n        result = result.value();\n      }\n      return arrayReduce(actions, function(result, action) {\n        return action.func.apply(action.thisArg, arrayPush([result], action.args));\n      }, result);\n    }\n\n    /**\n     * The base implementation of methods like `_.xor`, without support for\n     * iteratee shorthands, that accepts an array of arrays to inspect.\n     *\n     * @private\n     * @param {Array} arrays The arrays to inspect.\n     * @param {Function} [iteratee] The iteratee invoked per element.\n     * @param {Function} [comparator] The comparator invoked per element.\n     * @returns {Array} Returns the new array of values.\n     */\n    function baseXor(arrays, iteratee, comparator) {\n      var length = arrays.length;\n      if (length < 2) {\n        return length ? baseUniq(arrays[0]) : [];\n      }\n      var index = -1,\n          result = Array(length);\n\n      while (++index < length) {\n        var array = arrays[index],\n            othIndex = -1;\n\n        while (++othIndex < length) {\n          if (othIndex != index) {\n            result[index] = baseDifference(result[index] || array, arrays[othIndex], iteratee, comparator);\n          }\n        }\n      }\n      return baseUniq(baseFlatten(result, 1), iteratee, comparator);\n    }\n\n    /**\n     * This base implementation of `_.zipObject` which assigns values using `assignFunc`.\n     *\n     * @private\n     * @param {Array} props The property identifiers.\n     * @param {Array} values The property values.\n     * @param {Function} assignFunc The function to assign values.\n     * @returns {Object} Returns the new object.\n     */\n    function baseZipObject(props, values, assignFunc) {\n      var index = -1,\n          length = props.length,\n          valsLength = values.length,\n          result = {};\n\n      while (++index < length) {\n        var value = index < valsLength ? values[index] : undefined;\n        assignFunc(result, props[index], value);\n      }\n      return result;\n    }\n\n    /**\n     * Casts `value` to an empty array if it's not an array like object.\n     *\n     * @private\n     * @param {*} value The value to inspect.\n     * @returns {Array|Object} Returns the cast array-like object.\n     */\n    function castArrayLikeObject(value) {\n      return isArrayLikeObject(value) ? value : [];\n    }\n\n    /**\n     * Casts `value` to `identity` if it's not a function.\n     *\n     * @private\n     * @param {*} value The value to inspect.\n     * @returns {Function} Returns cast function.\n     */\n    function castFunction(value) {\n      return typeof value == 'function' ? value : identity;\n    }\n\n    /**\n     * Casts `value` to a path array if it's not one.\n     *\n     * @private\n     * @param {*} value The value to inspect.\n     * @param {Object} [object] The object to query keys on.\n     * @returns {Array} Returns the cast property path array.\n     */\n    function castPath(value, object) {\n      if (isArray(value)) {\n        return value;\n      }\n      return isKey(value, object) ? [value] : stringToPath(toString(value));\n    }\n\n    /**\n     * A `baseRest` alias which can be replaced with `identity` by module\n     * replacement plugins.\n     *\n     * @private\n     * @type {Function}\n     * @param {Function} func The function to apply a rest parameter to.\n     * @returns {Function} Returns the new function.\n     */\n    var castRest = baseRest;\n\n    /**\n     * Casts `array` to a slice if it's needed.\n     *\n     * @private\n     * @param {Array} array The array to inspect.\n     * @param {number} start The start position.\n     * @param {number} [end=array.length] The end position.\n     * @returns {Array} Returns the cast slice.\n     */\n    function castSlice(array, start, end) {\n      var length = array.length;\n      end = end === undefined ? length : end;\n      return (!start && end >= length) ? array : baseSlice(array, start, end);\n    }\n\n    /**\n     * A simple wrapper around the global [`clearTimeout`](https://mdn.io/clearTimeout).\n     *\n     * @private\n     * @param {number|Object} id The timer id or timeout object of the timer to clear.\n     */\n    var clearTimeout = ctxClearTimeout || function(id) {\n      return root.clearTimeout(id);\n    };\n\n    /**\n     * Creates a clone of  `buffer`.\n     *\n     * @private\n     * @param {Buffer} buffer The buffer to clone.\n     * @param {boolean} [isDeep] Specify a deep clone.\n     * @returns {Buffer} Returns the cloned buffer.\n     */\n    function cloneBuffer(buffer, isDeep) {\n      if (isDeep) {\n        return buffer.slice();\n      }\n      var length = buffer.length,\n          result = allocUnsafe ? allocUnsafe(length) : new buffer.constructor(length);\n\n      buffer.copy(result);\n      return result;\n    }\n\n    /**\n     * Creates a clone of `arrayBuffer`.\n     *\n     * @private\n     * @param {ArrayBuffer} arrayBuffer The array buffer to clone.\n     * @returns {ArrayBuffer} Returns the cloned array buffer.\n     */\n    function cloneArrayBuffer(arrayBuffer) {\n      var result = new arrayBuffer.constructor(arrayBuffer.byteLength);\n      new Uint8Array(result).set(new Uint8Array(arrayBuffer));\n      return result;\n    }\n\n    /**\n     * Creates a clone of `dataView`.\n     *\n     * @private\n     * @param {Object} dataView The data view to clone.\n     * @param {boolean} [isDeep] Specify a deep clone.\n     * @returns {Object} Returns the cloned data view.\n     */\n    function cloneDataView(dataView, isDeep) {\n      var buffer = isDeep ? cloneArrayBuffer(dataView.buffer) : dataView.buffer;\n      return new dataView.constructor(buffer, dataView.byteOffset, dataView.byteLength);\n    }\n\n    /**\n     * Creates a clone of `map`.\n     *\n     * @private\n     * @param {Object} map The map to clone.\n     * @param {Function} cloneFunc The function to clone values.\n     * @param {boolean} [isDeep] Specify a deep clone.\n     * @returns {Object} Returns the cloned map.\n     */\n    function cloneMap(map, isDeep, cloneFunc) {\n      var array = isDeep ? cloneFunc(mapToArray(map), CLONE_DEEP_FLAG) : mapToArray(map);\n      return arrayReduce(array, addMapEntry, new map.constructor);\n    }\n\n    /**\n     * Creates a clone of `regexp`.\n     *\n     * @private\n     * @param {Object} regexp The regexp to clone.\n     * @returns {Object} Returns the cloned regexp.\n     */\n    function cloneRegExp(regexp) {\n      var result = new regexp.constructor(regexp.source, reFlags.exec(regexp));\n      result.lastIndex = regexp.lastIndex;\n      return result;\n    }\n\n    /**\n     * Creates a clone of `set`.\n     *\n     * @private\n     * @param {Object} set The set to clone.\n     * @param {Function} cloneFunc The function to clone values.\n     * @param {boolean} [isDeep] Specify a deep clone.\n     * @returns {Object} Returns the cloned set.\n     */\n    function cloneSet(set, isDeep, cloneFunc) {\n      var array = isDeep ? cloneFunc(setToArray(set), CLONE_DEEP_FLAG) : setToArray(set);\n      return arrayReduce(array, addSetEntry, new set.constructor);\n    }\n\n    /**\n     * Creates a clone of the `symbol` object.\n     *\n     * @private\n     * @param {Object} symbol The symbol object to clone.\n     * @returns {Object} Returns the cloned symbol object.\n     */\n    function cloneSymbol(symbol) {\n      return symbolValueOf ? Object(symbolValueOf.call(symbol)) : {};\n    }\n\n    /**\n     * Creates a clone of `typedArray`.\n     *\n     * @private\n     * @param {Object} typedArray The typed array to clone.\n     * @param {boolean} [isDeep] Specify a deep clone.\n     * @returns {Object} Returns the cloned typed array.\n     */\n    function cloneTypedArray(typedArray, isDeep) {\n      var buffer = isDeep ? cloneArrayBuffer(typedArray.buffer) : typedArray.buffer;\n      return new typedArray.constructor(buffer, typedArray.byteOffset, typedArray.length);\n    }\n\n    /**\n     * Compares values to sort them in ascending order.\n     *\n     * @private\n     * @param {*} value The value to compare.\n     * @param {*} other The other value to compare.\n     * @returns {number} Returns the sort order indicator for `value`.\n     */\n    function compareAscending(value, other) {\n      if (value !== other) {\n        var valIsDefined = value !== undefined,\n            valIsNull = value === null,\n            valIsReflexive = value === value,\n            valIsSymbol = isSymbol(value);\n\n        var othIsDefined = other !== undefined,\n            othIsNull = other === null,\n            othIsReflexive = other === other,\n            othIsSymbol = isSymbol(other);\n\n        if ((!othIsNull && !othIsSymbol && !valIsSymbol && value > other) ||\n            (valIsSymbol && othIsDefined && othIsReflexive && !othIsNull && !othIsSymbol) ||\n            (valIsNull && othIsDefined && othIsReflexive) ||\n            (!valIsDefined && othIsReflexive) ||\n            !valIsReflexive) {\n          return 1;\n        }\n        if ((!valIsNull && !valIsSymbol && !othIsSymbol && value < other) ||\n            (othIsSymbol && valIsDefined && valIsReflexive && !valIsNull && !valIsSymbol) ||\n            (othIsNull && valIsDefined && valIsReflexive) ||\n            (!othIsDefined && valIsReflexive) ||\n            !othIsReflexive) {\n          return -1;\n        }\n      }\n      return 0;\n    }\n\n    /**\n     * Used by `_.orderBy` to compare multiple properties of a value to another\n     * and stable sort them.\n     *\n     * If `orders` is unspecified, all values are sorted in ascending order. Otherwise,\n     * specify an order of \"desc\" for descending or \"asc\" for ascending sort order\n     * of corresponding values.\n     *\n     * @private\n     * @param {Object} object The object to compare.\n     * @param {Object} other The other object to compare.\n     * @param {boolean[]|string[]} orders The order to sort by for each property.\n     * @returns {number} Returns the sort order indicator for `object`.\n     */\n    function compareMultiple(object, other, orders) {\n      var index = -1,\n          objCriteria = object.criteria,\n          othCriteria = other.criteria,\n          length = objCriteria.length,\n          ordersLength = orders.length;\n\n      while (++index < length) {\n        var result = compareAscending(objCriteria[index], othCriteria[index]);\n        if (result) {\n          if (index >= ordersLength) {\n            return result;\n          }\n          var order = orders[index];\n          return result * (order == 'desc' ? -1 : 1);\n        }\n      }\n      // Fixes an `Array#sort` bug in the JS engine embedded in Adobe applications\n      // that causes it, under certain circumstances, to provide the same value for\n      // `object` and `other`. See https://github.com/jashkenas/underscore/pull/1247\n      // for more details.\n      //\n      // This also ensures a stable sort in V8 and other engines.\n      // See https://bugs.chromium.org/p/v8/issues/detail?id=90 for more details.\n      return object.index - other.index;\n    }\n\n    /**\n     * Creates an array that is the composition of partially applied arguments,\n     * placeholders, and provided arguments into a single array of arguments.\n     *\n     * @private\n     * @param {Array} args The provided arguments.\n     * @param {Array} partials The arguments to prepend to those provided.\n     * @param {Array} holders The `partials` placeholder indexes.\n     * @params {boolean} [isCurried] Specify composing for a curried function.\n     * @returns {Array} Returns the new array of composed arguments.\n     */\n    function composeArgs(args, partials, holders, isCurried) {\n      var argsIndex = -1,\n          argsLength = args.length,\n          holdersLength = holders.length,\n          leftIndex = -1,\n          leftLength = partials.length,\n          rangeLength = nativeMax(argsLength - holdersLength, 0),\n          result = Array(leftLength + rangeLength),\n          isUncurried = !isCurried;\n\n      while (++leftIndex < leftLength) {\n        result[leftIndex] = partials[leftIndex];\n      }\n      while (++argsIndex < holdersLength) {\n        if (isUncurried || argsIndex < argsLength) {\n          result[holders[argsIndex]] = args[argsIndex];\n        }\n      }\n      while (rangeLength--) {\n        result[leftIndex++] = args[argsIndex++];\n      }\n      return result;\n    }\n\n    /**\n     * This function is like `composeArgs` except that the arguments composition\n     * is tailored for `_.partialRight`.\n     *\n     * @private\n     * @param {Array} args The provided arguments.\n     * @param {Array} partials The arguments to append to those provided.\n     * @param {Array} holders The `partials` placeholder indexes.\n     * @params {boolean} [isCurried] Specify composing for a curried function.\n     * @returns {Array} Returns the new array of composed arguments.\n     */\n    function composeArgsRight(args, partials, holders, isCurried) {\n      var argsIndex = -1,\n          argsLength = args.length,\n          holdersIndex = -1,\n          holdersLength = holders.length,\n          rightIndex = -1,\n          rightLength = partials.length,\n          rangeLength = nativeMax(argsLength - holdersLength, 0),\n          result = Array(rangeLength + rightLength),\n          isUncurried = !isCurried;\n\n      while (++argsIndex < rangeLength) {\n        result[argsIndex] = args[argsIndex];\n      }\n      var offset = argsIndex;\n      while (++rightIndex < rightLength) {\n        result[offset + rightIndex] = partials[rightIndex];\n      }\n      while (++holdersIndex < holdersLength) {\n        if (isUncurried || argsIndex < argsLength) {\n          result[offset + holders[holdersIndex]] = args[argsIndex++];\n        }\n      }\n      return result;\n    }\n\n    /**\n     * Copies the values of `source` to `array`.\n     *\n     * @private\n     * @param {Array} source The array to copy values from.\n     * @param {Array} [array=[]] The array to copy values to.\n     * @returns {Array} Returns `array`.\n     */\n    function copyArray(source, array) {\n      var index = -1,\n          length = source.length;\n\n      array || (array = Array(length));\n      while (++index < length) {\n        array[index] = source[index];\n      }\n      return array;\n    }\n\n    /**\n     * Copies properties of `source` to `object`.\n     *\n     * @private\n     * @param {Object} source The object to copy properties from.\n     * @param {Array} props The property identifiers to copy.\n     * @param {Object} [object={}] The object to copy properties to.\n     * @param {Function} [customizer] The function to customize copied values.\n     * @returns {Object} Returns `object`.\n     */\n    function copyObject(source, props, object, customizer) {\n      var isNew = !object;\n      object || (object = {});\n\n      var index = -1,\n          length = props.length;\n\n      while (++index < length) {\n        var key = props[index];\n\n        var newValue = customizer\n          ? customizer(object[key], source[key], key, object, source)\n          : undefined;\n\n        if (newValue === undefined) {\n          newValue = source[key];\n        }\n        if (isNew) {\n          baseAssignValue(object, key, newValue);\n        } else {\n          assignValue(object, key, newValue);\n        }\n      }\n      return object;\n    }\n\n    /**\n     * Copies own symbols of `source` to `object`.\n     *\n     * @private\n     * @param {Object} source The object to copy symbols from.\n     * @param {Object} [object={}] The object to copy symbols to.\n     * @returns {Object} Returns `object`.\n     */\n    function copySymbols(source, object) {\n      return copyObject(source, getSymbols(source), object);\n    }\n\n    /**\n     * Copies own and inherited symbols of `source` to `object`.\n     *\n     * @private\n     * @param {Object} source The object to copy symbols from.\n     * @param {Object} [object={}] The object to copy symbols to.\n     * @returns {Object} Returns `object`.\n     */\n    function copySymbolsIn(source, object) {\n      return copyObject(source, getSymbolsIn(source), object);\n    }\n\n    /**\n     * Creates a function like `_.groupBy`.\n     *\n     * @private\n     * @param {Function} setter The function to set accumulator values.\n     * @param {Function} [initializer] The accumulator object initializer.\n     * @returns {Function} Returns the new aggregator function.\n     */\n    function createAggregator(setter, initializer) {\n      return function(collection, iteratee) {\n        var func = isArray(collection) ? arrayAggregator : baseAggregator,\n            accumulator = initializer ? initializer() : {};\n\n        return func(collection, setter, getIteratee(iteratee, 2), accumulator);\n      };\n    }\n\n    /**\n     * Creates a function like `_.assign`.\n     *\n     * @private\n     * @param {Function} assigner The function to assign values.\n     * @returns {Function} Returns the new assigner function.\n     */\n    function createAssigner(assigner) {\n      return baseRest(function(object, sources) {\n        var index = -1,\n            length = sources.length,\n            customizer = length > 1 ? sources[length - 1] : undefined,\n            guard = length > 2 ? sources[2] : undefined;\n\n        customizer = (assigner.length > 3 && typeof customizer == 'function')\n          ? (length--, customizer)\n          : undefined;\n\n        if (guard && isIterateeCall(sources[0], sources[1], guard)) {\n          customizer = length < 3 ? undefined : customizer;\n          length = 1;\n        }\n        object = Object(object);\n        while (++index < length) {\n          var source = sources[index];\n          if (source) {\n            assigner(object, source, index, customizer);\n          }\n        }\n        return object;\n      });\n    }\n\n    /**\n     * Creates a `baseEach` or `baseEachRight` function.\n     *\n     * @private\n     * @param {Function} eachFunc The function to iterate over a collection.\n     * @param {boolean} [fromRight] Specify iterating from right to left.\n     * @returns {Function} Returns the new base function.\n     */\n    function createBaseEach(eachFunc, fromRight) {\n      return function(collection, iteratee) {\n        if (collection == null) {\n          return collection;\n        }\n        if (!isArrayLike(collection)) {\n          return eachFunc(collection, iteratee);\n        }\n        var length = collection.length,\n            index = fromRight ? length : -1,\n            iterable = Object(collection);\n\n        while ((fromRight ? index-- : ++index < length)) {\n          if (iteratee(iterable[index], index, iterable) === false) {\n            break;\n          }\n        }\n        return collection;\n      };\n    }\n\n    /**\n     * Creates a base function for methods like `_.forIn` and `_.forOwn`.\n     *\n     * @private\n     * @param {boolean} [fromRight] Specify iterating from right to left.\n     * @returns {Function} Returns the new base function.\n     */\n    function createBaseFor(fromRight) {\n      return function(object, iteratee, keysFunc) {\n        var index = -1,\n            iterable = Object(object),\n            props = keysFunc(object),\n            length = props.length;\n\n        while (length--) {\n          var key = props[fromRight ? length : ++index];\n          if (iteratee(iterable[key], key, iterable) === false) {\n            break;\n          }\n        }\n        return object;\n      };\n    }\n\n    /**\n     * Creates a function that wraps `func` to invoke it with the optional `this`\n     * binding of `thisArg`.\n     *\n     * @private\n     * @param {Function} func The function to wrap.\n     * @param {number} bitmask The bitmask flags. See `createWrap` for more details.\n     * @param {*} [thisArg] The `this` binding of `func`.\n     * @returns {Function} Returns the new wrapped function.\n     */\n    function createBind(func, bitmask, thisArg) {\n      var isBind = bitmask & WRAP_BIND_FLAG,\n          Ctor = createCtor(func);\n\n      function wrapper() {\n        var fn = (this && this !== root && this instanceof wrapper) ? Ctor : func;\n        return fn.apply(isBind ? thisArg : this, arguments);\n      }\n      return wrapper;\n    }\n\n    /**\n     * Creates a function like `_.lowerFirst`.\n     *\n     * @private\n     * @param {string} methodName The name of the `String` case method to use.\n     * @returns {Function} Returns the new case function.\n     */\n    function createCaseFirst(methodName) {\n      return function(string) {\n        string = toString(string);\n\n        var strSymbols = hasUnicode(string)\n          ? stringToArray(string)\n          : undefined;\n\n        var chr = strSymbols\n          ? strSymbols[0]\n          : string.charAt(0);\n\n        var trailing = strSymbols\n          ? castSlice(strSymbols, 1).join('')\n          : string.slice(1);\n\n        return chr[methodName]() + trailing;\n      };\n    }\n\n    /**\n     * Creates a function like `_.camelCase`.\n     *\n     * @private\n     * @param {Function} callback The function to combine each word.\n     * @returns {Function} Returns the new compounder function.\n     */\n    function createCompounder(callback) {\n      return function(string) {\n        return arrayReduce(words(deburr(string).replace(reApos, '')), callback, '');\n      };\n    }\n\n    /**\n     * Creates a function that produces an instance of `Ctor` regardless of\n     * whether it was invoked as part of a `new` expression or by `call` or `apply`.\n     *\n     * @private\n     * @param {Function} Ctor The constructor to wrap.\n     * @returns {Function} Returns the new wrapped function.\n     */\n    function createCtor(Ctor) {\n      return function() {\n        // Use a `switch` statement to work with class constructors. See\n        // http://ecma-international.org/ecma-262/7.0/#sec-ecmascript-function-objects-call-thisargument-argumentslist\n        // for more details.\n        var args = arguments;\n        switch (args.length) {\n          case 0: return new Ctor;\n          case 1: return new Ctor(args[0]);\n          case 2: return new Ctor(args[0], args[1]);\n          case 3: return new Ctor(args[0], args[1], args[2]);\n          case 4: return new Ctor(args[0], args[1], args[2], args[3]);\n          case 5: return new Ctor(args[0], args[1], args[2], args[3], args[4]);\n          case 6: return new Ctor(args[0], args[1], args[2], args[3], args[4], args[5]);\n          case 7: return new Ctor(args[0], args[1], args[2], args[3], args[4], args[5], args[6]);\n        }\n        var thisBinding = baseCreate(Ctor.prototype),\n            result = Ctor.apply(thisBinding, args);\n\n        // Mimic the constructor's `return` behavior.\n        // See https://es5.github.io/#x13.2.2 for more details.\n        return isObject(result) ? result : thisBinding;\n      };\n    }\n\n    /**\n     * Creates a function that wraps `func` to enable currying.\n     *\n     * @private\n     * @param {Function} func The function to wrap.\n     * @param {number} bitmask The bitmask flags. See `createWrap` for more details.\n     * @param {number} arity The arity of `func`.\n     * @returns {Function} Returns the new wrapped function.\n     */\n    function createCurry(func, bitmask, arity) {\n      var Ctor = createCtor(func);\n\n      function wrapper() {\n        var length = arguments.length,\n            args = Array(length),\n            index = length,\n            placeholder = getHolder(wrapper);\n\n        while (index--) {\n          args[index] = arguments[index];\n        }\n        var holders = (length < 3 && args[0] !== placeholder && args[length - 1] !== placeholder)\n          ? []\n          : replaceHolders(args, placeholder);\n\n        length -= holders.length;\n        if (length < arity) {\n          return createRecurry(\n            func, bitmask, createHybrid, wrapper.placeholder, undefined,\n            args, holders, undefined, undefined, arity - length);\n        }\n        var fn = (this && this !== root && this instanceof wrapper) ? Ctor : func;\n        return apply(fn, this, args);\n      }\n      return wrapper;\n    }\n\n    /**\n     * Creates a `_.find` or `_.findLast` function.\n     *\n     * @private\n     * @param {Function} findIndexFunc The function to find the collection index.\n     * @returns {Function} Returns the new find function.\n     */\n    function createFind(findIndexFunc) {\n      return function(collection, predicate, fromIndex) {\n        var iterable = Object(collection);\n        if (!isArrayLike(collection)) {\n          var iteratee = getIteratee(predicate, 3);\n          collection = keys(collection);\n          predicate = function(key) { return iteratee(iterable[key], key, iterable); };\n        }\n        var index = findIndexFunc(collection, predicate, fromIndex);\n        return index > -1 ? iterable[iteratee ? collection[index] : index] : undefined;\n      };\n    }\n\n    /**\n     * Creates a `_.flow` or `_.flowRight` function.\n     *\n     * @private\n     * @param {boolean} [fromRight] Specify iterating from right to left.\n     * @returns {Function} Returns the new flow function.\n     */\n    function createFlow(fromRight) {\n      return flatRest(function(funcs) {\n        var length = funcs.length,\n            index = length,\n            prereq = LodashWrapper.prototype.thru;\n\n        if (fromRight) {\n          funcs.reverse();\n        }\n        while (index--) {\n          var func = funcs[index];\n          if (typeof func != 'function') {\n            throw new TypeError(FUNC_ERROR_TEXT);\n          }\n          if (prereq && !wrapper && getFuncName(func) == 'wrapper') {\n            var wrapper = new LodashWrapper([], true);\n          }\n        }\n        index = wrapper ? index : length;\n        while (++index < length) {\n          func = funcs[index];\n\n          var funcName = getFuncName(func),\n              data = funcName == 'wrapper' ? getData(func) : undefined;\n\n          if (data && isLaziable(data[0]) &&\n                data[1] == (WRAP_ARY_FLAG | WRAP_CURRY_FLAG | WRAP_PARTIAL_FLAG | WRAP_REARG_FLAG) &&\n                !data[4].length && data[9] == 1\n              ) {\n            wrapper = wrapper[getFuncName(data[0])].apply(wrapper, data[3]);\n          } else {\n            wrapper = (func.length == 1 && isLaziable(func))\n              ? wrapper[funcName]()\n              : wrapper.thru(func);\n          }\n        }\n        return function() {\n          var args = arguments,\n              value = args[0];\n\n          if (wrapper && args.length == 1 && isArray(value)) {\n            return wrapper.plant(value).value();\n          }\n          var index = 0,\n              result = length ? funcs[index].apply(this, args) : value;\n\n          while (++index < length) {\n            result = funcs[index].call(this, result);\n          }\n          return result;\n        };\n      });\n    }\n\n    /**\n     * Creates a function that wraps `func` to invoke it with optional `this`\n     * binding of `thisArg`, partial application, and currying.\n     *\n     * @private\n     * @param {Function|string} func The function or method name to wrap.\n     * @param {number} bitmask The bitmask flags. See `createWrap` for more details.\n     * @param {*} [thisArg] The `this` binding of `func`.\n     * @param {Array} [partials] The arguments to prepend to those provided to\n     *  the new function.\n     * @param {Array} [holders] The `partials` placeholder indexes.\n     * @param {Array} [partialsRight] The arguments to append to those provided\n     *  to the new function.\n     * @param {Array} [holdersRight] The `partialsRight` placeholder indexes.\n     * @param {Array} [argPos] The argument positions of the new function.\n     * @param {number} [ary] The arity cap of `func`.\n     * @param {number} [arity] The arity of `func`.\n     * @returns {Function} Returns the new wrapped function.\n     */\n    function createHybrid(func, bitmask, thisArg, partials, holders, partialsRight, holdersRight, argPos, ary, arity) {\n      var isAry = bitmask & WRAP_ARY_FLAG,\n          isBind = bitmask & WRAP_BIND_FLAG,\n          isBindKey = bitmask & WRAP_BIND_KEY_FLAG,\n          isCurried = bitmask & (WRAP_CURRY_FLAG | WRAP_CURRY_RIGHT_FLAG),\n          isFlip = bitmask & WRAP_FLIP_FLAG,\n          Ctor = isBindKey ? undefined : createCtor(func);\n\n      function wrapper() {\n        var length = arguments.length,\n            args = Array(length),\n            index = length;\n\n        while (index--) {\n          args[index] = arguments[index];\n        }\n        if (isCurried) {\n          var placeholder = getHolder(wrapper),\n              holdersCount = countHolders(args, placeholder);\n        }\n        if (partials) {\n          args = composeArgs(args, partials, holders, isCurried);\n        }\n        if (partialsRight) {\n          args = composeArgsRight(args, partialsRight, holdersRight, isCurried);\n        }\n        length -= holdersCount;\n        if (isCurried && length < arity) {\n          var newHolders = replaceHolders(args, placeholder);\n          return createRecurry(\n            func, bitmask, createHybrid, wrapper.placeholder, thisArg,\n            args, newHolders, argPos, ary, arity - length\n          );\n        }\n        var thisBinding = isBind ? thisArg : this,\n            fn = isBindKey ? thisBinding[func] : func;\n\n        length = args.length;\n        if (argPos) {\n          args = reorder(args, argPos);\n        } else if (isFlip && length > 1) {\n          args.reverse();\n        }\n        if (isAry && ary < length) {\n          args.length = ary;\n        }\n        if (this && this !== root && this instanceof wrapper) {\n          fn = Ctor || createCtor(fn);\n        }\n        return fn.apply(thisBinding, args);\n      }\n      return wrapper;\n    }\n\n    /**\n     * Creates a function like `_.invertBy`.\n     *\n     * @private\n     * @param {Function} setter The function to set accumulator values.\n     * @param {Function} toIteratee The function to resolve iteratees.\n     * @returns {Function} Returns the new inverter function.\n     */\n    function createInverter(setter, toIteratee) {\n      return function(object, iteratee) {\n        return baseInverter(object, setter, toIteratee(iteratee), {});\n      };\n    }\n\n    /**\n     * Creates a function that performs a mathematical operation on two values.\n     *\n     * @private\n     * @param {Function} operator The function to perform the operation.\n     * @param {number} [defaultValue] The value used for `undefined` arguments.\n     * @returns {Function} Returns the new mathematical operation function.\n     */\n    function createMathOperation(operator, defaultValue) {\n      return function(value, other) {\n        var result;\n        if (value === undefined && other === undefined) {\n          return defaultValue;\n        }\n        if (value !== undefined) {\n          result = value;\n        }\n        if (other !== undefined) {\n          if (result === undefined) {\n            return other;\n          }\n          if (typeof value == 'string' || typeof other == 'string') {\n            value = baseToString(value);\n            other = baseToString(other);\n          } else {\n            value = baseToNumber(value);\n            other = baseToNumber(other);\n          }\n          result = operator(value, other);\n        }\n        return result;\n      };\n    }\n\n    /**\n     * Creates a function like `_.over`.\n     *\n     * @private\n     * @param {Function} arrayFunc The function to iterate over iteratees.\n     * @returns {Function} Returns the new over function.\n     */\n    function createOver(arrayFunc) {\n      return flatRest(function(iteratees) {\n        iteratees = arrayMap(iteratees, baseUnary(getIteratee()));\n        return baseRest(function(args) {\n          var thisArg = this;\n          return arrayFunc(iteratees, function(iteratee) {\n            return apply(iteratee, thisArg, args);\n          });\n        });\n      });\n    }\n\n    /**\n     * Creates the padding for `string` based on `length`. The `chars` string\n     * is truncated if the number of characters exceeds `length`.\n     *\n     * @private\n     * @param {number} length The padding length.\n     * @param {string} [chars=' '] The string used as padding.\n     * @returns {string} Returns the padding for `string`.\n     */\n    function createPadding(length, chars) {\n      chars = chars === undefined ? ' ' : baseToString(chars);\n\n      var charsLength = chars.length;\n      if (charsLength < 2) {\n        return charsLength ? baseRepeat(chars, length) : chars;\n      }\n      var result = baseRepeat(chars, nativeCeil(length / stringSize(chars)));\n      return hasUnicode(chars)\n        ? castSlice(stringToArray(result), 0, length).join('')\n        : result.slice(0, length);\n    }\n\n    /**\n     * Creates a function that wraps `func` to invoke it with the `this` binding\n     * of `thisArg` and `partials` prepended to the arguments it receives.\n     *\n     * @private\n     * @param {Function} func The function to wrap.\n     * @param {number} bitmask The bitmask flags. See `createWrap` for more details.\n     * @param {*} thisArg The `this` binding of `func`.\n     * @param {Array} partials The arguments to prepend to those provided to\n     *  the new function.\n     * @returns {Function} Returns the new wrapped function.\n     */\n    function createPartial(func, bitmask, thisArg, partials) {\n      var isBind = bitmask & WRAP_BIND_FLAG,\n          Ctor = createCtor(func);\n\n      function wrapper() {\n        var argsIndex = -1,\n            argsLength = arguments.length,\n            leftIndex = -1,\n            leftLength = partials.length,\n            args = Array(leftLength + argsLength),\n            fn = (this && this !== root && this instanceof wrapper) ? Ctor : func;\n\n        while (++leftIndex < leftLength) {\n          args[leftIndex] = partials[leftIndex];\n        }\n        while (argsLength--) {\n          args[leftIndex++] = arguments[++argsIndex];\n        }\n        return apply(fn, isBind ? thisArg : this, args);\n      }\n      return wrapper;\n    }\n\n    /**\n     * Creates a `_.range` or `_.rangeRight` function.\n     *\n     * @private\n     * @param {boolean} [fromRight] Specify iterating from right to left.\n     * @returns {Function} Returns the new range function.\n     */\n    function createRange(fromRight) {\n      return function(start, end, step) {\n        if (step && typeof step != 'number' && isIterateeCall(start, end, step)) {\n          end = step = undefined;\n        }\n        // Ensure the sign of `-0` is preserved.\n        start = toFinite(start);\n        if (end === undefined) {\n          end = start;\n          start = 0;\n        } else {\n          end = toFinite(end);\n        }\n        step = step === undefined ? (start < end ? 1 : -1) : toFinite(step);\n        return baseRange(start, end, step, fromRight);\n      };\n    }\n\n    /**\n     * Creates a function that performs a relational operation on two values.\n     *\n     * @private\n     * @param {Function} operator The function to perform the operation.\n     * @returns {Function} Returns the new relational operation function.\n     */\n    function createRelationalOperation(operator) {\n      return function(value, other) {\n        if (!(typeof value == 'string' && typeof other == 'string')) {\n          value = toNumber(value);\n          other = toNumber(other);\n        }\n        return operator(value, other);\n      };\n    }\n\n    /**\n     * Creates a function that wraps `func` to continue currying.\n     *\n     * @private\n     * @param {Function} func The function to wrap.\n     * @param {number} bitmask The bitmask flags. See `createWrap` for more details.\n     * @param {Function} wrapFunc The function to create the `func` wrapper.\n     * @param {*} placeholder The placeholder value.\n     * @param {*} [thisArg] The `this` binding of `func`.\n     * @param {Array} [partials] The arguments to prepend to those provided to\n     *  the new function.\n     * @param {Array} [holders] The `partials` placeholder indexes.\n     * @param {Array} [argPos] The argument positions of the new function.\n     * @param {number} [ary] The arity cap of `func`.\n     * @param {number} [arity] The arity of `func`.\n     * @returns {Function} Returns the new wrapped function.\n     */\n    function createRecurry(func, bitmask, wrapFunc, placeholder, thisArg, partials, holders, argPos, ary, arity) {\n      var isCurry = bitmask & WRAP_CURRY_FLAG,\n          newHolders = isCurry ? holders : undefined,\n          newHoldersRight = isCurry ? undefined : holders,\n          newPartials = isCurry ? partials : undefined,\n          newPartialsRight = isCurry ? undefined : partials;\n\n      bitmask |= (isCurry ? WRAP_PARTIAL_FLAG : WRAP_PARTIAL_RIGHT_FLAG);\n      bitmask &= ~(isCurry ? WRAP_PARTIAL_RIGHT_FLAG : WRAP_PARTIAL_FLAG);\n\n      if (!(bitmask & WRAP_CURRY_BOUND_FLAG)) {\n        bitmask &= ~(WRAP_BIND_FLAG | WRAP_BIND_KEY_FLAG);\n      }\n      var newData = [\n        func, bitmask, thisArg, newPartials, newHolders, newPartialsRight,\n        newHoldersRight, argPos, ary, arity\n      ];\n\n      var result = wrapFunc.apply(undefined, newData);\n      if (isLaziable(func)) {\n        setData(result, newData);\n      }\n      result.placeholder = placeholder;\n      return setWrapToString(result, func, bitmask);\n    }\n\n    /**\n     * Creates a function like `_.round`.\n     *\n     * @private\n     * @param {string} methodName The name of the `Math` method to use when rounding.\n     * @returns {Function} Returns the new round function.\n     */\n    function createRound(methodName) {\n      var func = Math[methodName];\n      return function(number, precision) {\n        number = toNumber(number);\n        precision = precision == null ? 0 : nativeMin(toInteger(precision), 292);\n        if (precision) {\n          // Shift with exponential notation to avoid floating-point issues.\n          // See [MDN](https://mdn.io/round#Examples) for more details.\n          var pair = (toString(number) + 'e').split('e'),\n              value = func(pair[0] + 'e' + (+pair[1] + precision));\n\n          pair = (toString(value) + 'e').split('e');\n          return +(pair[0] + 'e' + (+pair[1] - precision));\n        }\n        return func(number);\n      };\n    }\n\n    /**\n     * Creates a set object of `values`.\n     *\n     * @private\n     * @param {Array} values The values to add to the set.\n     * @returns {Object} Returns the new set.\n     */\n    var createSet = !(Set && (1 / setToArray(new Set([,-0]))[1]) == INFINITY) ? noop : function(values) {\n      return new Set(values);\n    };\n\n    /**\n     * Creates a `_.toPairs` or `_.toPairsIn` function.\n     *\n     * @private\n     * @param {Function} keysFunc The function to get the keys of a given object.\n     * @returns {Function} Returns the new pairs function.\n     */\n    function createToPairs(keysFunc) {\n      return function(object) {\n        var tag = getTag(object);\n        if (tag == mapTag) {\n          return mapToArray(object);\n        }\n        if (tag == setTag) {\n          return setToPairs(object);\n        }\n        return baseToPairs(object, keysFunc(object));\n      };\n    }\n\n    /**\n     * Creates a function that either curries or invokes `func` with optional\n     * `this` binding and partially applied arguments.\n     *\n     * @private\n     * @param {Function|string} func The function or method name to wrap.\n     * @param {number} bitmask The bitmask flags.\n     *    1 - `_.bind`\n     *    2 - `_.bindKey`\n     *    4 - `_.curry` or `_.curryRight` of a bound function\n     *    8 - `_.curry`\n     *   16 - `_.curryRight`\n     *   32 - `_.partial`\n     *   64 - `_.partialRight`\n     *  128 - `_.rearg`\n     *  256 - `_.ary`\n     *  512 - `_.flip`\n     * @param {*} [thisArg] The `this` binding of `func`.\n     * @param {Array} [partials] The arguments to be partially applied.\n     * @param {Array} [holders] The `partials` placeholder indexes.\n     * @param {Array} [argPos] The argument positions of the new function.\n     * @param {number} [ary] The arity cap of `func`.\n     * @param {number} [arity] The arity of `func`.\n     * @returns {Function} Returns the new wrapped function.\n     */\n    function createWrap(func, bitmask, thisArg, partials, holders, argPos, ary, arity) {\n      var isBindKey = bitmask & WRAP_BIND_KEY_FLAG;\n      if (!isBindKey && typeof func != 'function') {\n        throw new TypeError(FUNC_ERROR_TEXT);\n      }\n      var length = partials ? partials.length : 0;\n      if (!length) {\n        bitmask &= ~(WRAP_PARTIAL_FLAG | WRAP_PARTIAL_RIGHT_FLAG);\n        partials = holders = undefined;\n      }\n      ary = ary === undefined ? ary : nativeMax(toInteger(ary), 0);\n      arity = arity === undefined ? arity : toInteger(arity);\n      length -= holders ? holders.length : 0;\n\n      if (bitmask & WRAP_PARTIAL_RIGHT_FLAG) {\n        var partialsRight = partials,\n            holdersRight = holders;\n\n        partials = holders = undefined;\n      }\n      var data = isBindKey ? undefined : getData(func);\n\n      var newData = [\n        func, bitmask, thisArg, partials, holders, partialsRight, holdersRight,\n        argPos, ary, arity\n      ];\n\n      if (data) {\n        mergeData(newData, data);\n      }\n      func = newData[0];\n      bitmask = newData[1];\n      thisArg = newData[2];\n      partials = newData[3];\n      holders = newData[4];\n      arity = newData[9] = newData[9] === undefined\n        ? (isBindKey ? 0 : func.length)\n        : nativeMax(newData[9] - length, 0);\n\n      if (!arity && bitmask & (WRAP_CURRY_FLAG | WRAP_CURRY_RIGHT_FLAG)) {\n        bitmask &= ~(WRAP_CURRY_FLAG | WRAP_CURRY_RIGHT_FLAG);\n      }\n      if (!bitmask || bitmask == WRAP_BIND_FLAG) {\n        var result = createBind(func, bitmask, thisArg);\n      } else if (bitmask == WRAP_CURRY_FLAG || bitmask == WRAP_CURRY_RIGHT_FLAG) {\n        result = createCurry(func, bitmask, arity);\n      } else if ((bitmask == WRAP_PARTIAL_FLAG || bitmask == (WRAP_BIND_FLAG | WRAP_PARTIAL_FLAG)) && !holders.length) {\n        result = createPartial(func, bitmask, thisArg, partials);\n      } else {\n        result = createHybrid.apply(undefined, newData);\n      }\n      var setter = data ? baseSetData : setData;\n      return setWrapToString(setter(result, newData), func, bitmask);\n    }\n\n    /**\n     * Used by `_.defaults` to customize its `_.assignIn` use to assign properties\n     * of source objects to the destination object for all destination properties\n     * that resolve to `undefined`.\n     *\n     * @private\n     * @param {*} objValue The destination value.\n     * @param {*} srcValue The source value.\n     * @param {string} key The key of the property to assign.\n     * @param {Object} object The parent object of `objValue`.\n     * @returns {*} Returns the value to assign.\n     */\n    function customDefaultsAssignIn(objValue, srcValue, key, object) {\n      if (objValue === undefined ||\n          (eq(objValue, objectProto[key]) && !hasOwnProperty.call(object, key))) {\n        return srcValue;\n      }\n      return objValue;\n    }\n\n    /**\n     * Used by `_.defaultsDeep` to customize its `_.merge` use to merge source\n     * objects into destination objects that are passed thru.\n     *\n     * @private\n     * @param {*} objValue The destination value.\n     * @param {*} srcValue The source value.\n     * @param {string} key The key of the property to merge.\n     * @param {Object} object The parent object of `objValue`.\n     * @param {Object} source The parent object of `srcValue`.\n     * @param {Object} [stack] Tracks traversed source values and their merged\n     *  counterparts.\n     * @returns {*} Returns the value to assign.\n     */\n    function customDefaultsMerge(objValue, srcValue, key, object, source, stack) {\n      if (isObject(objValue) && isObject(srcValue)) {\n        // Recursively merge objects and arrays (susceptible to call stack limits).\n        stack.set(srcValue, objValue);\n        baseMerge(objValue, srcValue, undefined, customDefaultsMerge, stack);\n        stack['delete'](srcValue);\n      }\n      return objValue;\n    }\n\n    /**\n     * Used by `_.omit` to customize its `_.cloneDeep` use to only clone plain\n     * objects.\n     *\n     * @private\n     * @param {*} value The value to inspect.\n     * @param {string} key The key of the property to inspect.\n     * @returns {*} Returns the uncloned value or `undefined` to defer cloning to `_.cloneDeep`.\n     */\n    function customOmitClone(value) {\n      return isPlainObject(value) ? undefined : value;\n    }\n\n    /**\n     * A specialized version of `baseIsEqualDeep` for arrays with support for\n     * partial deep comparisons.\n     *\n     * @private\n     * @param {Array} array The array to compare.\n     * @param {Array} other The other array to compare.\n     * @param {number} bitmask The bitmask flags. See `baseIsEqual` for more details.\n     * @param {Function} customizer The function to customize comparisons.\n     * @param {Function} equalFunc The function to determine equivalents of values.\n     * @param {Object} stack Tracks traversed `array` and `other` objects.\n     * @returns {boolean} Returns `true` if the arrays are equivalent, else `false`.\n     */\n    function equalArrays(array, other, bitmask, customizer, equalFunc, stack) {\n      var isPartial = bitmask & COMPARE_PARTIAL_FLAG,\n          arrLength = array.length,\n          othLength = other.length;\n\n      if (arrLength != othLength && !(isPartial && othLength > arrLength)) {\n        return false;\n      }\n      // Assume cyclic values are equal.\n      var stacked = stack.get(array);\n      if (stacked && stack.get(other)) {\n        return stacked == other;\n      }\n      var index = -1,\n          result = true,\n          seen = (bitmask & COMPARE_UNORDERED_FLAG) ? new SetCache : undefined;\n\n      stack.set(array, other);\n      stack.set(other, array);\n\n      // Ignore non-index properties.\n      while (++index < arrLength) {\n        var arrValue = array[index],\n            othValue = other[index];\n\n        if (customizer) {\n          var compared = isPartial\n            ? customizer(othValue, arrValue, index, other, array, stack)\n            : customizer(arrValue, othValue, index, array, other, stack);\n        }\n        if (compared !== undefined) {\n          if (compared) {\n            continue;\n          }\n          result = false;\n          break;\n        }\n        // Recursively compare arrays (susceptible to call stack limits).\n        if (seen) {\n          if (!arraySome(other, function(othValue, othIndex) {\n                if (!cacheHas(seen, othIndex) &&\n                    (arrValue === othValue || equalFunc(arrValue, othValue, bitmask, customizer, stack))) {\n                  return seen.push(othIndex);\n                }\n              })) {\n            result = false;\n            break;\n          }\n        } else if (!(\n              arrValue === othValue ||\n                equalFunc(arrValue, othValue, bitmask, customizer, stack)\n            )) {\n          result = false;\n          break;\n        }\n      }\n      stack['delete'](array);\n      stack['delete'](other);\n      return result;\n    }\n\n    /**\n     * A specialized version of `baseIsEqualDeep` for comparing objects of\n     * the same `toStringTag`.\n     *\n     * **Note:** This function only supports comparing values with tags of\n     * `Boolean`, `Date`, `Error`, `Number`, `RegExp`, or `String`.\n     *\n     * @private\n     * @param {Object} object The object to compare.\n     * @param {Object} other The other object to compare.\n     * @param {string} tag The `toStringTag` of the objects to compare.\n     * @param {number} bitmask The bitmask flags. See `baseIsEqual` for more details.\n     * @param {Function} customizer The function to customize comparisons.\n     * @param {Function} equalFunc The function to determine equivalents of values.\n     * @param {Object} stack Tracks traversed `object` and `other` objects.\n     * @returns {boolean} Returns `true` if the objects are equivalent, else `false`.\n     */\n    function equalByTag(object, other, tag, bitmask, customizer, equalFunc, stack) {\n      switch (tag) {\n        case dataViewTag:\n          if ((object.byteLength != other.byteLength) ||\n              (object.byteOffset != other.byteOffset)) {\n            return false;\n          }\n          object = object.buffer;\n          other = other.buffer;\n\n        case arrayBufferTag:\n          if ((object.byteLength != other.byteLength) ||\n              !equalFunc(new Uint8Array(object), new Uint8Array(other))) {\n            return false;\n          }\n          return true;\n\n        case boolTag:\n        case dateTag:\n        case numberTag:\n          // Coerce booleans to `1` or `0` and dates to milliseconds.\n          // Invalid dates are coerced to `NaN`.\n          return eq(+object, +other);\n\n        case errorTag:\n          return object.name == other.name && object.message == other.message;\n\n        case regexpTag:\n        case stringTag:\n          // Coerce regexes to strings and treat strings, primitives and objects,\n          // as equal. See http://www.ecma-international.org/ecma-262/7.0/#sec-regexp.prototype.tostring\n          // for more details.\n          return object == (other + '');\n\n        case mapTag:\n          var convert = mapToArray;\n\n        case setTag:\n          var isPartial = bitmask & COMPARE_PARTIAL_FLAG;\n          convert || (convert = setToArray);\n\n          if (object.size != other.size && !isPartial) {\n            return false;\n          }\n          // Assume cyclic values are equal.\n          var stacked = stack.get(object);\n          if (stacked) {\n            return stacked == other;\n          }\n          bitmask |= COMPARE_UNORDERED_FLAG;\n\n          // Recursively compare objects (susceptible to call stack limits).\n          stack.set(object, other);\n          var result = equalArrays(convert(object), convert(other), bitmask, customizer, equalFunc, stack);\n          stack['delete'](object);\n          return result;\n\n        case symbolTag:\n          if (symbolValueOf) {\n            return symbolValueOf.call(object) == symbolValueOf.call(other);\n          }\n      }\n      return false;\n    }\n\n    /**\n     * A specialized version of `baseIsEqualDeep` for objects with support for\n     * partial deep comparisons.\n     *\n     * @private\n     * @param {Object} object The object to compare.\n     * @param {Object} other The other object to compare.\n     * @param {number} bitmask The bitmask flags. See `baseIsEqual` for more details.\n     * @param {Function} customizer The function to customize comparisons.\n     * @param {Function} equalFunc The function to determine equivalents of values.\n     * @param {Object} stack Tracks traversed `object` and `other` objects.\n     * @returns {boolean} Returns `true` if the objects are equivalent, else `false`.\n     */\n    function equalObjects(object, other, bitmask, customizer, equalFunc, stack) {\n      var isPartial = bitmask & COMPARE_PARTIAL_FLAG,\n          objProps = getAllKeys(object),\n          objLength = objProps.length,\n          othProps = getAllKeys(other),\n          othLength = othProps.length;\n\n      if (objLength != othLength && !isPartial) {\n        return false;\n      }\n      var index = objLength;\n      while (index--) {\n        var key = objProps[index];\n        if (!(isPartial ? key in other : hasOwnProperty.call(other, key))) {\n          return false;\n        }\n      }\n      // Assume cyclic values are equal.\n      var stacked = stack.get(object);\n      if (stacked && stack.get(other)) {\n        return stacked == other;\n      }\n      var result = true;\n      stack.set(object, other);\n      stack.set(other, object);\n\n      var skipCtor = isPartial;\n      while (++index < objLength) {\n        key = objProps[index];\n        var objValue = object[key],\n            othValue = other[key];\n\n        if (customizer) {\n          var compared = isPartial\n            ? customizer(othValue, objValue, key, other, object, stack)\n            : customizer(objValue, othValue, key, object, other, stack);\n        }\n        // Recursively compare objects (susceptible to call stack limits).\n        if (!(compared === undefined\n              ? (objValue === othValue || equalFunc(objValue, othValue, bitmask, customizer, stack))\n              : compared\n            )) {\n          result = false;\n          break;\n        }\n        skipCtor || (skipCtor = key == 'constructor');\n      }\n      if (result && !skipCtor) {\n        var objCtor = object.constructor,\n            othCtor = other.constructor;\n\n        // Non `Object` object instances with different constructors are not equal.\n        if (objCtor != othCtor &&\n            ('constructor' in object && 'constructor' in other) &&\n            !(typeof objCtor == 'function' && objCtor instanceof objCtor &&\n              typeof othCtor == 'function' && othCtor instanceof othCtor)) {\n          result = false;\n        }\n      }\n      stack['delete'](object);\n      stack['delete'](other);\n      return result;\n    }\n\n    /**\n     * A specialized version of `baseRest` which flattens the rest array.\n     *\n     * @private\n     * @param {Function} func The function to apply a rest parameter to.\n     * @returns {Function} Returns the new function.\n     */\n    function flatRest(func) {\n      return setToString(overRest(func, undefined, flatten), func + '');\n    }\n\n    /**\n     * Creates an array of own enumerable property names and symbols of `object`.\n     *\n     * @private\n     * @param {Object} object The object to query.\n     * @returns {Array} Returns the array of property names and symbols.\n     */\n    function getAllKeys(object) {\n      return baseGetAllKeys(object, keys, getSymbols);\n    }\n\n    /**\n     * Creates an array of own and inherited enumerable property names and\n     * symbols of `object`.\n     *\n     * @private\n     * @param {Object} object The object to query.\n     * @returns {Array} Returns the array of property names and symbols.\n     */\n    function getAllKeysIn(object) {\n      return baseGetAllKeys(object, keysIn, getSymbolsIn);\n    }\n\n    /**\n     * Gets metadata for `func`.\n     *\n     * @private\n     * @param {Function} func The function to query.\n     * @returns {*} Returns the metadata for `func`.\n     */\n    var getData = !metaMap ? noop : function(func) {\n      return metaMap.get(func);\n    };\n\n    /**\n     * Gets the name of `func`.\n     *\n     * @private\n     * @param {Function} func The function to query.\n     * @returns {string} Returns the function name.\n     */\n    function getFuncName(func) {\n      var result = (func.name + ''),\n          array = realNames[result],\n          length = hasOwnProperty.call(realNames, result) ? array.length : 0;\n\n      while (length--) {\n        var data = array[length],\n            otherFunc = data.func;\n        if (otherFunc == null || otherFunc == func) {\n          return data.name;\n        }\n      }\n      return result;\n    }\n\n    /**\n     * Gets the argument placeholder value for `func`.\n     *\n     * @private\n     * @param {Function} func The function to inspect.\n     * @returns {*} Returns the placeholder value.\n     */\n    function getHolder(func) {\n      var object = hasOwnProperty.call(lodash, 'placeholder') ? lodash : func;\n      return object.placeholder;\n    }\n\n    /**\n     * Gets the appropriate \"iteratee\" function. If `_.iteratee` is customized,\n     * this function returns the custom method, otherwise it returns `baseIteratee`.\n     * If arguments are provided, the chosen function is invoked with them and\n     * its result is returned.\n     *\n     * @private\n     * @param {*} [value] The value to convert to an iteratee.\n     * @param {number} [arity] The arity of the created iteratee.\n     * @returns {Function} Returns the chosen function or its result.\n     */\n    function getIteratee() {\n      var result = lodash.iteratee || iteratee;\n      result = result === iteratee ? baseIteratee : result;\n      return arguments.length ? result(arguments[0], arguments[1]) : result;\n    }\n\n    /**\n     * Gets the data for `map`.\n     *\n     * @private\n     * @param {Object} map The map to query.\n     * @param {string} key The reference key.\n     * @returns {*} Returns the map data.\n     */\n    function getMapData(map, key) {\n      var data = map.__data__;\n      return isKeyable(key)\n        ? data[typeof key == 'string' ? 'string' : 'hash']\n        : data.map;\n    }\n\n    /**\n     * Gets the property names, values, and compare flags of `object`.\n     *\n     * @private\n     * @param {Object} object The object to query.\n     * @returns {Array} Returns the match data of `object`.\n     */\n    function getMatchData(object) {\n      var result = keys(object),\n          length = result.length;\n\n      while (length--) {\n        var key = result[length],\n            value = object[key];\n\n        result[length] = [key, value, isStrictComparable(value)];\n      }\n      return result;\n    }\n\n    /**\n     * Gets the native function at `key` of `object`.\n     *\n     * @private\n     * @param {Object} object The object to query.\n     * @param {string} key The key of the method to get.\n     * @returns {*} Returns the function if it's native, else `undefined`.\n     */\n    function getNative(object, key) {\n      var value = getValue(object, key);\n      return baseIsNative(value) ? value : undefined;\n    }\n\n    /**\n     * A specialized version of `baseGetTag` which ignores `Symbol.toStringTag` values.\n     *\n     * @private\n     * @param {*} value The value to query.\n     * @returns {string} Returns the raw `toStringTag`.\n     */\n    function getRawTag(value) {\n      var isOwn = hasOwnProperty.call(value, symToStringTag),\n          tag = value[symToStringTag];\n\n      try {\n        value[symToStringTag] = undefined;\n        var unmasked = true;\n      } catch (e) {}\n\n      var result = nativeObjectToString.call(value);\n      if (unmasked) {\n        if (isOwn) {\n          value[symToStringTag] = tag;\n        } else {\n          delete value[symToStringTag];\n        }\n      }\n      return result;\n    }\n\n    /**\n     * Creates an array of the own enumerable symbols of `object`.\n     *\n     * @private\n     * @param {Object} object The object to query.\n     * @returns {Array} Returns the array of symbols.\n     */\n    var getSymbols = !nativeGetSymbols ? stubArray : function(object) {\n      if (object == null) {\n        return [];\n      }\n      object = Object(object);\n      return arrayFilter(nativeGetSymbols(object), function(symbol) {\n        return propertyIsEnumerable.call(object, symbol);\n      });\n    };\n\n    /**\n     * Creates an array of the own and inherited enumerable symbols of `object`.\n     *\n     * @private\n     * @param {Object} object The object to query.\n     * @returns {Array} Returns the array of symbols.\n     */\n    var getSymbolsIn = !nativeGetSymbols ? stubArray : function(object) {\n      var result = [];\n      while (object) {\n        arrayPush(result, getSymbols(object));\n        object = getPrototype(object);\n      }\n      return result;\n    };\n\n    /**\n     * Gets the `toStringTag` of `value`.\n     *\n     * @private\n     * @param {*} value The value to query.\n     * @returns {string} Returns the `toStringTag`.\n     */\n    var getTag = baseGetTag;\n\n    // Fallback for data views, maps, sets, and weak maps in IE 11 and promises in Node.js < 6.\n    if ((DataView && getTag(new DataView(new ArrayBuffer(1))) != dataViewTag) ||\n        (Map && getTag(new Map) != mapTag) ||\n        (Promise && getTag(Promise.resolve()) != promiseTag) ||\n        (Set && getTag(new Set) != setTag) ||\n        (WeakMap && getTag(new WeakMap) != weakMapTag)) {\n      getTag = function(value) {\n        var result = baseGetTag(value),\n            Ctor = result == objectTag ? value.constructor : undefined,\n            ctorString = Ctor ? toSource(Ctor) : '';\n\n        if (ctorString) {\n          switch (ctorString) {\n            case dataViewCtorString: return dataViewTag;\n            case mapCtorString: return mapTag;\n            case promiseCtorString: return promiseTag;\n            case setCtorString: return setTag;\n            case weakMapCtorString: return weakMapTag;\n          }\n        }\n        return result;\n      };\n    }\n\n    /**\n     * Gets the view, applying any `transforms` to the `start` and `end` positions.\n     *\n     * @private\n     * @param {number} start The start of the view.\n     * @param {number} end The end of the view.\n     * @param {Array} transforms The transformations to apply to the view.\n     * @returns {Object} Returns an object containing the `start` and `end`\n     *  positions of the view.\n     */\n    function getView(start, end, transforms) {\n      var index = -1,\n          length = transforms.length;\n\n      while (++index < length) {\n        var data = transforms[index],\n            size = data.size;\n\n        switch (data.type) {\n          case 'drop':      start += size; break;\n          case 'dropRight': end -= size; break;\n          case 'take':      end = nativeMin(end, start + size); break;\n          case 'takeRight': start = nativeMax(start, end - size); break;\n        }\n      }\n      return { 'start': start, 'end': end };\n    }\n\n    /**\n     * Extracts wrapper details from the `source` body comment.\n     *\n     * @private\n     * @param {string} source The source to inspect.\n     * @returns {Array} Returns the wrapper details.\n     */\n    function getWrapDetails(source) {\n      var match = source.match(reWrapDetails);\n      return match ? match[1].split(reSplitDetails) : [];\n    }\n\n    /**\n     * Checks if `path` exists on `object`.\n     *\n     * @private\n     * @param {Object} object The object to query.\n     * @param {Array|string} path The path to check.\n     * @param {Function} hasFunc The function to check properties.\n     * @returns {boolean} Returns `true` if `path` exists, else `false`.\n     */\n    function hasPath(object, path, hasFunc) {\n      path = castPath(path, object);\n\n      var index = -1,\n          length = path.length,\n          result = false;\n\n      while (++index < length) {\n        var key = toKey(path[index]);\n        if (!(result = object != null && hasFunc(object, key))) {\n          break;\n        }\n        object = object[key];\n      }\n      if (result || ++index != length) {\n        return result;\n      }\n      length = object == null ? 0 : object.length;\n      return !!length && isLength(length) && isIndex(key, length) &&\n        (isArray(object) || isArguments(object));\n    }\n\n    /**\n     * Initializes an array clone.\n     *\n     * @private\n     * @param {Array} array The array to clone.\n     * @returns {Array} Returns the initialized clone.\n     */\n    function initCloneArray(array) {\n      var length = array.length,\n          result = array.constructor(length);\n\n      // Add properties assigned by `RegExp#exec`.\n      if (length && typeof array[0] == 'string' && hasOwnProperty.call(array, 'index')) {\n        result.index = array.index;\n        result.input = array.input;\n      }\n      return result;\n    }\n\n    /**\n     * Initializes an object clone.\n     *\n     * @private\n     * @param {Object} object The object to clone.\n     * @returns {Object} Returns the initialized clone.\n     */\n    function initCloneObject(object) {\n      return (typeof object.constructor == 'function' && !isPrototype(object))\n        ? baseCreate(getPrototype(object))\n        : {};\n    }\n\n    /**\n     * Initializes an object clone based on its `toStringTag`.\n     *\n     * **Note:** This function only supports cloning values with tags of\n     * `Boolean`, `Date`, `Error`, `Number`, `RegExp`, or `String`.\n     *\n     * @private\n     * @param {Object} object The object to clone.\n     * @param {string} tag The `toStringTag` of the object to clone.\n     * @param {Function} cloneFunc The function to clone values.\n     * @param {boolean} [isDeep] Specify a deep clone.\n     * @returns {Object} Returns the initialized clone.\n     */\n    function initCloneByTag(object, tag, cloneFunc, isDeep) {\n      var Ctor = object.constructor;\n      switch (tag) {\n        case arrayBufferTag:\n          return cloneArrayBuffer(object);\n\n        case boolTag:\n        case dateTag:\n          return new Ctor(+object);\n\n        case dataViewTag:\n          return cloneDataView(object, isDeep);\n\n        case float32Tag: case float64Tag:\n        case int8Tag: case int16Tag: case int32Tag:\n        case uint8Tag: case uint8ClampedTag: case uint16Tag: case uint32Tag:\n          return cloneTypedArray(object, isDeep);\n\n        case mapTag:\n          return cloneMap(object, isDeep, cloneFunc);\n\n        case numberTag:\n        case stringTag:\n          return new Ctor(object);\n\n        case regexpTag:\n          return cloneRegExp(object);\n\n        case setTag:\n          return cloneSet(object, isDeep, cloneFunc);\n\n        case symbolTag:\n          return cloneSymbol(object);\n      }\n    }\n\n    /**\n     * Inserts wrapper `details` in a comment at the top of the `source` body.\n     *\n     * @private\n     * @param {string} source The source to modify.\n     * @returns {Array} details The details to insert.\n     * @returns {string} Returns the modified source.\n     */\n    function insertWrapDetails(source, details) {\n      var length = details.length;\n      if (!length) {\n        return source;\n      }\n      var lastIndex = length - 1;\n      details[lastIndex] = (length > 1 ? '& ' : '') + details[lastIndex];\n      details = details.join(length > 2 ? ', ' : ' ');\n      return source.replace(reWrapComment, '{\\n/* [wrapped with ' + details + '] */\\n');\n    }\n\n    /**\n     * Checks if `value` is a flattenable `arguments` object or array.\n     *\n     * @private\n     * @param {*} value The value to check.\n     * @returns {boolean} Returns `true` if `value` is flattenable, else `false`.\n     */\n    function isFlattenable(value) {\n      return isArray(value) || isArguments(value) ||\n        !!(spreadableSymbol && value && value[spreadableSymbol]);\n    }\n\n    /**\n     * Checks if `value` is a valid array-like index.\n     *\n     * @private\n     * @param {*} value The value to check.\n     * @param {number} [length=MAX_SAFE_INTEGER] The upper bounds of a valid index.\n     * @returns {boolean} Returns `true` if `value` is a valid index, else `false`.\n     */\n    function isIndex(value, length) {\n      length = length == null ? MAX_SAFE_INTEGER : length;\n      return !!length &&\n        (typeof value == 'number' || reIsUint.test(value)) &&\n        (value > -1 && value % 1 == 0 && value < length);\n    }\n\n    /**\n     * Checks if the given arguments are from an iteratee call.\n     *\n     * @private\n     * @param {*} value The potential iteratee value argument.\n     * @param {*} index The potential iteratee index or key argument.\n     * @param {*} object The potential iteratee object argument.\n     * @returns {boolean} Returns `true` if the arguments are from an iteratee call,\n     *  else `false`.\n     */\n    function isIterateeCall(value, index, object) {\n      if (!isObject(object)) {\n        return false;\n      }\n      var type = typeof index;\n      if (type == 'number'\n            ? (isArrayLike(object) && isIndex(index, object.length))\n            : (type == 'string' && index in object)\n          ) {\n        return eq(object[index], value);\n      }\n      return false;\n    }\n\n    /**\n     * Checks if `value` is a property name and not a property path.\n     *\n     * @private\n     * @param {*} value The value to check.\n     * @param {Object} [object] The object to query keys on.\n     * @returns {boolean} Returns `true` if `value` is a property name, else `false`.\n     */\n    function isKey(value, object) {\n      if (isArray(value)) {\n        return false;\n      }\n      var type = typeof value;\n      if (type == 'number' || type == 'symbol' || type == 'boolean' ||\n          value == null || isSymbol(value)) {\n        return true;\n      }\n      return reIsPlainProp.test(value) || !reIsDeepProp.test(value) ||\n        (object != null && value in Object(object));\n    }\n\n    /**\n     * Checks if `value` is suitable for use as unique object key.\n     *\n     * @private\n     * @param {*} value The value to check.\n     * @returns {boolean} Returns `true` if `value` is suitable, else `false`.\n     */\n    function isKeyable(value) {\n      var type = typeof value;\n      return (type == 'string' || type == 'number' || type == 'symbol' || type == 'boolean')\n        ? (value !== '__proto__')\n        : (value === null);\n    }\n\n    /**\n     * Checks if `func` has a lazy counterpart.\n     *\n     * @private\n     * @param {Function} func The function to check.\n     * @returns {boolean} Returns `true` if `func` has a lazy counterpart,\n     *  else `false`.\n     */\n    function isLaziable(func) {\n      var funcName = getFuncName(func),\n          other = lodash[funcName];\n\n      if (typeof other != 'function' || !(funcName in LazyWrapper.prototype)) {\n        return false;\n      }\n      if (func === other) {\n        return true;\n      }\n      var data = getData(other);\n      return !!data && func === data[0];\n    }\n\n    /**\n     * Checks if `func` has its source masked.\n     *\n     * @private\n     * @param {Function} func The function to check.\n     * @returns {boolean} Returns `true` if `func` is masked, else `false`.\n     */\n    function isMasked(func) {\n      return !!maskSrcKey && (maskSrcKey in func);\n    }\n\n    /**\n     * Checks if `func` is capable of being masked.\n     *\n     * @private\n     * @param {*} value The value to check.\n     * @returns {boolean} Returns `true` if `func` is maskable, else `false`.\n     */\n    var isMaskable = coreJsData ? isFunction : stubFalse;\n\n    /**\n     * Checks if `value` is likely a prototype object.\n     *\n     * @private\n     * @param {*} value The value to check.\n     * @returns {boolean} Returns `true` if `value` is a prototype, else `false`.\n     */\n    function isPrototype(value) {\n      var Ctor = value && value.constructor,\n          proto = (typeof Ctor == 'function' && Ctor.prototype) || objectProto;\n\n      return value === proto;\n    }\n\n    /**\n     * Checks if `value` is suitable for strict equality comparisons, i.e. `===`.\n     *\n     * @private\n     * @param {*} value The value to check.\n     * @returns {boolean} Returns `true` if `value` if suitable for strict\n     *  equality comparisons, else `false`.\n     */\n    function isStrictComparable(value) {\n      return value === value && !isObject(value);\n    }\n\n    /**\n     * A specialized version of `matchesProperty` for source values suitable\n     * for strict equality comparisons, i.e. `===`.\n     *\n     * @private\n     * @param {string} key The key of the property to get.\n     * @param {*} srcValue The value to match.\n     * @returns {Function} Returns the new spec function.\n     */\n    function matchesStrictComparable(key, srcValue) {\n      return function(object) {\n        if (object == null) {\n          return false;\n        }\n        return object[key] === srcValue &&\n          (srcValue !== undefined || (key in Object(object)));\n      };\n    }\n\n    /**\n     * A specialized version of `_.memoize` which clears the memoized function's\n     * cache when it exceeds `MAX_MEMOIZE_SIZE`.\n     *\n     * @private\n     * @param {Function} func The function to have its output memoized.\n     * @returns {Function} Returns the new memoized function.\n     */\n    function memoizeCapped(func) {\n      var result = memoize(func, function(key) {\n        if (cache.size === MAX_MEMOIZE_SIZE) {\n          cache.clear();\n        }\n        return key;\n      });\n\n      var cache = result.cache;\n      return result;\n    }\n\n    /**\n     * Merges the function metadata of `source` into `data`.\n     *\n     * Merging metadata reduces the number of wrappers used to invoke a function.\n     * This is possible because methods like `_.bind`, `_.curry`, and `_.partial`\n     * may be applied regardless of execution order. Methods like `_.ary` and\n     * `_.rearg` modify function arguments, making the order in which they are\n     * executed important, preventing the merging of metadata. However, we make\n     * an exception for a safe combined case where curried functions have `_.ary`\n     * and or `_.rearg` applied.\n     *\n     * @private\n     * @param {Array} data The destination metadata.\n     * @param {Array} source The source metadata.\n     * @returns {Array} Returns `data`.\n     */\n    function mergeData(data, source) {\n      var bitmask = data[1],\n          srcBitmask = source[1],\n          newBitmask = bitmask | srcBitmask,\n          isCommon = newBitmask < (WRAP_BIND_FLAG | WRAP_BIND_KEY_FLAG | WRAP_ARY_FLAG);\n\n      var isCombo =\n        ((srcBitmask == WRAP_ARY_FLAG) && (bitmask == WRAP_CURRY_FLAG)) ||\n        ((srcBitmask == WRAP_ARY_FLAG) && (bitmask == WRAP_REARG_FLAG) && (data[7].length <= source[8])) ||\n        ((srcBitmask == (WRAP_ARY_FLAG | WRAP_REARG_FLAG)) && (source[7].length <= source[8]) && (bitmask == WRAP_CURRY_FLAG));\n\n      // Exit early if metadata can't be merged.\n      if (!(isCommon || isCombo)) {\n        return data;\n      }\n      // Use source `thisArg` if available.\n      if (srcBitmask & WRAP_BIND_FLAG) {\n        data[2] = source[2];\n        // Set when currying a bound function.\n        newBitmask |= bitmask & WRAP_BIND_FLAG ? 0 : WRAP_CURRY_BOUND_FLAG;\n      }\n      // Compose partial arguments.\n      var value = source[3];\n      if (value) {\n        var partials = data[3];\n        data[3] = partials ? composeArgs(partials, value, source[4]) : value;\n        data[4] = partials ? replaceHolders(data[3], PLACEHOLDER) : source[4];\n      }\n      // Compose partial right arguments.\n      value = source[5];\n      if (value) {\n        partials = data[5];\n        data[5] = partials ? composeArgsRight(partials, value, source[6]) : value;\n        data[6] = partials ? replaceHolders(data[5], PLACEHOLDER) : source[6];\n      }\n      // Use source `argPos` if available.\n      value = source[7];\n      if (value) {\n        data[7] = value;\n      }\n      // Use source `ary` if it's smaller.\n      if (srcBitmask & WRAP_ARY_FLAG) {\n        data[8] = data[8] == null ? source[8] : nativeMin(data[8], source[8]);\n      }\n      // Use source `arity` if one is not provided.\n      if (data[9] == null) {\n        data[9] = source[9];\n      }\n      // Use source `func` and merge bitmasks.\n      data[0] = source[0];\n      data[1] = newBitmask;\n\n      return data;\n    }\n\n    /**\n     * This function is like\n     * [`Object.keys`](http://ecma-international.org/ecma-262/7.0/#sec-object.keys)\n     * except that it includes inherited enumerable properties.\n     *\n     * @private\n     * @param {Object} object The object to query.\n     * @returns {Array} Returns the array of property names.\n     */\n    function nativeKeysIn(object) {\n      var result = [];\n      if (object != null) {\n        for (var key in Object(object)) {\n          result.push(key);\n        }\n      }\n      return result;\n    }\n\n    /**\n     * Converts `value` to a string using `Object.prototype.toString`.\n     *\n     * @private\n     * @param {*} value The value to convert.\n     * @returns {string} Returns the converted string.\n     */\n    function objectToString(value) {\n      return nativeObjectToString.call(value);\n    }\n\n    /**\n     * A specialized version of `baseRest` which transforms the rest array.\n     *\n     * @private\n     * @param {Function} func The function to apply a rest parameter to.\n     * @param {number} [start=func.length-1] The start position of the rest parameter.\n     * @param {Function} transform The rest array transform.\n     * @returns {Function} Returns the new function.\n     */\n    function overRest(func, start, transform) {\n      start = nativeMax(start === undefined ? (func.length - 1) : start, 0);\n      return function() {\n        var args = arguments,\n            index = -1,\n            length = nativeMax(args.length - start, 0),\n            array = Array(length);\n\n        while (++index < length) {\n          array[index] = args[start + index];\n        }\n        index = -1;\n        var otherArgs = Array(start + 1);\n        while (++index < start) {\n          otherArgs[index] = args[index];\n        }\n        otherArgs[start] = transform(array);\n        return apply(func, this, otherArgs);\n      };\n    }\n\n    /**\n     * Gets the parent value at `path` of `object`.\n     *\n     * @private\n     * @param {Object} object The object to query.\n     * @param {Array} path The path to get the parent value of.\n     * @returns {*} Returns the parent value.\n     */\n    function parent(object, path) {\n      return path.length < 2 ? object : baseGet(object, baseSlice(path, 0, -1));\n    }\n\n    /**\n     * Reorder `array` according to the specified indexes where the element at\n     * the first index is assigned as the first element, the element at\n     * the second index is assigned as the second element, and so on.\n     *\n     * @private\n     * @param {Array} array The array to reorder.\n     * @param {Array} indexes The arranged array indexes.\n     * @returns {Array} Returns `array`.\n     */\n    function reorder(array, indexes) {\n      var arrLength = array.length,\n          length = nativeMin(indexes.length, arrLength),\n          oldArray = copyArray(array);\n\n      while (length--) {\n        var index = indexes[length];\n        array[length] = isIndex(index, arrLength) ? oldArray[index] : undefined;\n      }\n      return array;\n    }\n\n    /**\n     * Sets metadata for `func`.\n     *\n     * **Note:** If this function becomes hot, i.e. is invoked a lot in a short\n     * period of time, it will trip its breaker and transition to an identity\n     * function to avoid garbage collection pauses in V8. See\n     * [V8 issue 2070](https://bugs.chromium.org/p/v8/issues/detail?id=2070)\n     * for more details.\n     *\n     * @private\n     * @param {Function} func The function to associate metadata with.\n     * @param {*} data The metadata.\n     * @returns {Function} Returns `func`.\n     */\n    var setData = shortOut(baseSetData);\n\n    /**\n     * A simple wrapper around the global [`setTimeout`](https://mdn.io/setTimeout).\n     *\n     * @private\n     * @param {Function} func The function to delay.\n     * @param {number} wait The number of milliseconds to delay invocation.\n     * @returns {number|Object} Returns the timer id or timeout object.\n     */\n    var setTimeout = ctxSetTimeout || function(func, wait) {\n      return root.setTimeout(func, wait);\n    };\n\n    /**\n     * Sets the `toString` method of `func` to return `string`.\n     *\n     * @private\n     * @param {Function} func The function to modify.\n     * @param {Function} string The `toString` result.\n     * @returns {Function} Returns `func`.\n     */\n    var setToString = shortOut(baseSetToString);\n\n    /**\n     * Sets the `toString` method of `wrapper` to mimic the source of `reference`\n     * with wrapper details in a comment at the top of the source body.\n     *\n     * @private\n     * @param {Function} wrapper The function to modify.\n     * @param {Function} reference The reference function.\n     * @param {number} bitmask The bitmask flags. See `createWrap` for more details.\n     * @returns {Function} Returns `wrapper`.\n     */\n    function setWrapToString(wrapper, reference, bitmask) {\n      var source = (reference + '');\n      return setToString(wrapper, insertWrapDetails(source, updateWrapDetails(getWrapDetails(source), bitmask)));\n    }\n\n    /**\n     * Creates a function that'll short out and invoke `identity` instead\n     * of `func` when it's called `HOT_COUNT` or more times in `HOT_SPAN`\n     * milliseconds.\n     *\n     * @private\n     * @param {Function} func The function to restrict.\n     * @returns {Function} Returns the new shortable function.\n     */\n    function shortOut(func) {\n      var count = 0,\n          lastCalled = 0;\n\n      return function() {\n        var stamp = nativeNow(),\n            remaining = HOT_SPAN - (stamp - lastCalled);\n\n        lastCalled = stamp;\n        if (remaining > 0) {\n          if (++count >= HOT_COUNT) {\n            return arguments[0];\n          }\n        } else {\n          count = 0;\n        }\n        return func.apply(undefined, arguments);\n      };\n    }\n\n    /**\n     * A specialized version of `_.shuffle` which mutates and sets the size of `array`.\n     *\n     * @private\n     * @param {Array} array The array to shuffle.\n     * @param {number} [size=array.length] The size of `array`.\n     * @returns {Array} Returns `array`.\n     */\n    function shuffleSelf(array, size) {\n      var index = -1,\n          length = array.length,\n          lastIndex = length - 1;\n\n      size = size === undefined ? length : size;\n      while (++index < size) {\n        var rand = baseRandom(index, lastIndex),\n            value = array[rand];\n\n        array[rand] = array[index];\n        array[index] = value;\n      }\n      array.length = size;\n      return array;\n    }\n\n    /**\n     * Converts `string` to a property path array.\n     *\n     * @private\n     * @param {string} string The string to convert.\n     * @returns {Array} Returns the property path array.\n     */\n    var stringToPath = memoizeCapped(function(string) {\n      var result = [];\n      if (reLeadingDot.test(string)) {\n        result.push('');\n      }\n      string.replace(rePropName, function(match, number, quote, string) {\n        result.push(quote ? string.replace(reEscapeChar, '$1') : (number || match));\n      });\n      return result;\n    });\n\n    /**\n     * Converts `value` to a string key if it's not a string or symbol.\n     *\n     * @private\n     * @param {*} value The value to inspect.\n     * @returns {string|symbol} Returns the key.\n     */\n    function toKey(value) {\n      if (typeof value == 'string' || isSymbol(value)) {\n        return value;\n      }\n      var result = (value + '');\n      return (result == '0' && (1 / value) == -INFINITY) ? '-0' : result;\n    }\n\n    /**\n     * Converts `func` to its source code.\n     *\n     * @private\n     * @param {Function} func The function to convert.\n     * @returns {string} Returns the source code.\n     */\n    function toSource(func) {\n      if (func != null) {\n        try {\n          return funcToString.call(func);\n        } catch (e) {}\n        try {\n          return (func + '');\n        } catch (e) {}\n      }\n      return '';\n    }\n\n    /**\n     * Updates wrapper `details` based on `bitmask` flags.\n     *\n     * @private\n     * @returns {Array} details The details to modify.\n     * @param {number} bitmask The bitmask flags. See `createWrap` for more details.\n     * @returns {Array} Returns `details`.\n     */\n    function updateWrapDetails(details, bitmask) {\n      arrayEach(wrapFlags, function(pair) {\n        var value = '_.' + pair[0];\n        if ((bitmask & pair[1]) && !arrayIncludes(details, value)) {\n          details.push(value);\n        }\n      });\n      return details.sort();\n    }\n\n    /**\n     * Creates a clone of `wrapper`.\n     *\n     * @private\n     * @param {Object} wrapper The wrapper to clone.\n     * @returns {Object} Returns the cloned wrapper.\n     */\n    function wrapperClone(wrapper) {\n      if (wrapper instanceof LazyWrapper) {\n        return wrapper.clone();\n      }\n      var result = new LodashWrapper(wrapper.__wrapped__, wrapper.__chain__);\n      result.__actions__ = copyArray(wrapper.__actions__);\n      result.__index__  = wrapper.__index__;\n      result.__values__ = wrapper.__values__;\n      return result;\n    }\n\n    /*------------------------------------------------------------------------*/\n\n    /**\n     * Creates an array of elements split into groups the length of `size`.\n     * If `array` can't be split evenly, the final chunk will be the remaining\n     * elements.\n     *\n     * @static\n     * @memberOf _\n     * @since 3.0.0\n     * @category Array\n     * @param {Array} array The array to process.\n     * @param {number} [size=1] The length of each chunk\n     * @param- {Object} [guard] Enables use as an iteratee for methods like `_.map`.\n     * @returns {Array} Returns the new array of chunks.\n     * @example\n     *\n     * _.chunk(['a', 'b', 'c', 'd'], 2);\n     * // => [['a', 'b'], ['c', 'd']]\n     *\n     * _.chunk(['a', 'b', 'c', 'd'], 3);\n     * // => [['a', 'b', 'c'], ['d']]\n     */\n    function chunk(array, size, guard) {\n      if ((guard ? isIterateeCall(array, size, guard) : size === undefined)) {\n        size = 1;\n      } else {\n        size = nativeMax(toInteger(size), 0);\n      }\n      var length = array == null ? 0 : array.length;\n      if (!length || size < 1) {\n        return [];\n      }\n      var index = 0,\n          resIndex = 0,\n          result = Array(nativeCeil(length / size));\n\n      while (index < length) {\n        result[resIndex++] = baseSlice(array, index, (index += size));\n      }\n      return result;\n    }\n\n    /**\n     * Creates an array with all falsey values removed. The values `false`, `null`,\n     * `0`, `\"\"`, `undefined`, and `NaN` are falsey.\n     *\n     * @static\n     * @memberOf _\n     * @since 0.1.0\n     * @category Array\n     * @param {Array} array The array to compact.\n     * @returns {Array} Returns the new array of filtered values.\n     * @example\n     *\n     * _.compact([0, 1, false, 2, '', 3]);\n     * // => [1, 2, 3]\n     */\n    function compact(array) {\n      var index = -1,\n          length = array == null ? 0 : array.length,\n          resIndex = 0,\n          result = [];\n\n      while (++index < length) {\n        var value = array[index];\n        if (value) {\n          result[resIndex++] = value;\n        }\n      }\n      return result;\n    }\n\n    /**\n     * Creates a new array concatenating `array` with any additional arrays\n     * and/or values.\n     *\n     * @static\n     * @memberOf _\n     * @since 4.0.0\n     * @category Array\n     * @param {Array} array The array to concatenate.\n     * @param {...*} [values] The values to concatenate.\n     * @returns {Array} Returns the new concatenated array.\n     * @example\n     *\n     * var array = [1];\n     * var other = _.concat(array, 2, [3], [[4]]);\n     *\n     * console.log(other);\n     * // => [1, 2, 3, [4]]\n     *\n     * console.log(array);\n     * // => [1]\n     */\n    function concat() {\n      var length = arguments.length;\n      if (!length) {\n        return [];\n      }\n      var args = Array(length - 1),\n          array = arguments[0],\n          index = length;\n\n      while (index--) {\n        args[index - 1] = arguments[index];\n      }\n      return arrayPush(isArray(array) ? copyArray(array) : [array], baseFlatten(args, 1));\n    }\n\n    /**\n     * Creates an array of `array` values not included in the other given arrays\n     * using [`SameValueZero`](http://ecma-international.org/ecma-262/7.0/#sec-samevaluezero)\n     * for equality comparisons. The order and references of result values are\n     * determined by the first array.\n     *\n     * **Note:** Unlike `_.pullAll`, this method returns a new array.\n     *\n     * @static\n     * @memberOf _\n     * @since 0.1.0\n     * @category Array\n     * @param {Array} array The array to inspect.\n     * @param {...Array} [values] The values to exclude.\n     * @returns {Array} Returns the new array of filtered values.\n     * @see _.without, _.xor\n     * @example\n     *\n     * _.difference([2, 1], [2, 3]);\n     * // => [1]\n     */\n    var difference = baseRest(function(array, values) {\n      return isArrayLikeObject(array)\n        ? baseDifference(array, baseFlatten(values, 1, isArrayLikeObject, true))\n        : [];\n    });\n\n    /**\n     * This method is like `_.difference` except that it accepts `iteratee` which\n     * is invoked for each element of `array` and `values` to generate the criterion\n     * by which they're compared. The order and references of result values are\n     * determined by the first array. The iteratee is invoked with one argument:\n     * (value).\n     *\n     * **Note:** Unlike `_.pullAllBy`, this method returns a new array.\n     *\n     * @static\n     * @memberOf _\n     * @since 4.0.0\n     * @category Array\n     * @param {Array} array The array to inspect.\n     * @param {...Array} [values] The values to exclude.\n     * @param {Function} [iteratee=_.identity] The iteratee invoked per element.\n     * @returns {Array} Returns the new array of filtered values.\n     * @example\n     *\n     * _.differenceBy([2.1, 1.2], [2.3, 3.4], Math.floor);\n     * // => [1.2]\n     *\n     * // The `_.property` iteratee shorthand.\n     * _.differenceBy([{ 'x': 2 }, { 'x': 1 }], [{ 'x': 1 }], 'x');\n     * // => [{ 'x': 2 }]\n     */\n    var differenceBy = baseRest(function(array, values) {\n      var iteratee = last(values);\n      if (isArrayLikeObject(iteratee)) {\n        iteratee = undefined;\n      }\n      return isArrayLikeObject(array)\n        ? baseDifference(array, baseFlatten(values, 1, isArrayLikeObject, true), getIteratee(iteratee, 2))\n        : [];\n    });\n\n    /**\n     * This method is like `_.difference` except that it accepts `comparator`\n     * which is invoked to compare elements of `array` to `values`. The order and\n     * references of result values are determined by the first array. The comparator\n     * is invoked with two arguments: (arrVal, othVal).\n     *\n     * **Note:** Unlike `_.pullAllWith`, this method returns a new array.\n     *\n     * @static\n     * @memberOf _\n     * @since 4.0.0\n     * @category Array\n     * @param {Array} array The array to inspect.\n     * @param {...Array} [values] The values to exclude.\n     * @param {Function} [comparator] The comparator invoked per element.\n     * @returns {Array} Returns the new array of filtered values.\n     * @example\n     *\n     * var objects = [{ 'x': 1, 'y': 2 }, { 'x': 2, 'y': 1 }];\n     *\n     * _.differenceWith(objects, [{ 'x': 1, 'y': 2 }], _.isEqual);\n     * // => [{ 'x': 2, 'y': 1 }]\n     */\n    var differenceWith = baseRest(function(array, values) {\n      var comparator = last(values);\n      if (isArrayLikeObject(comparator)) {\n        comparator = undefined;\n      }\n      return isArrayLikeObject(array)\n        ? baseDifference(array, baseFlatten(values, 1, isArrayLikeObject, true), undefined, comparator)\n        : [];\n    });\n\n    /**\n     * Creates a slice of `array` with `n` elements dropped from the beginning.\n     *\n     * @static\n     * @memberOf _\n     * @since 0.5.0\n     * @category Array\n     * @param {Array} array The array to query.\n     * @param {number} [n=1] The number of elements to drop.\n     * @param- {Object} [guard] Enables use as an iteratee for methods like `_.map`.\n     * @returns {Array} Returns the slice of `array`.\n     * @example\n     *\n     * _.drop([1, 2, 3]);\n     * // => [2, 3]\n     *\n     * _.drop([1, 2, 3], 2);\n     * // => [3]\n     *\n     * _.drop([1, 2, 3], 5);\n     * // => []\n     *\n     * _.drop([1, 2, 3], 0);\n     * // => [1, 2, 3]\n     */\n    function drop(array, n, guard) {\n      var length = array == null ? 0 : array.length;\n      if (!length) {\n        return [];\n      }\n      n = (guard || n === undefined) ? 1 : toInteger(n);\n      return baseSlice(array, n < 0 ? 0 : n, length);\n    }\n\n    /**\n     * Creates a slice of `array` with `n` elements dropped from the end.\n     *\n     * @static\n     * @memberOf _\n     * @since 3.0.0\n     * @category Array\n     * @param {Array} array The array to query.\n     * @param {number} [n=1] The number of elements to drop.\n     * @param- {Object} [guard] Enables use as an iteratee for methods like `_.map`.\n     * @returns {Array} Returns the slice of `array`.\n     * @example\n     *\n     * _.dropRight([1, 2, 3]);\n     * // => [1, 2]\n     *\n     * _.dropRight([1, 2, 3], 2);\n     * // => [1]\n     *\n     * _.dropRight([1, 2, 3], 5);\n     * // => []\n     *\n     * _.dropRight([1, 2, 3], 0);\n     * // => [1, 2, 3]\n     */\n    function dropRight(array, n, guard) {\n      var length = array == null ? 0 : array.length;\n      if (!length) {\n        return [];\n      }\n      n = (guard || n === undefined) ? 1 : toInteger(n);\n      n = length - n;\n      return baseSlice(array, 0, n < 0 ? 0 : n);\n    }\n\n    /**\n     * Creates a slice of `array` excluding elements dropped from the end.\n     * Elements are dropped until `predicate` returns falsey. The predicate is\n     * invoked with three arguments: (value, index, array).\n     *\n     * @static\n     * @memberOf _\n     * @since 3.0.0\n     * @category Array\n     * @param {Array} array The array to query.\n     * @param {Function} [predicate=_.identity] The function invoked per iteration.\n     * @returns {Array} Returns the slice of `array`.\n     * @example\n     *\n     * var users = [\n     *   { 'user': 'barney',  'active': true },\n     *   { 'user': 'fred',    'active': false },\n     *   { 'user': 'pebbles', 'active': false }\n     * ];\n     *\n     * _.dropRightWhile(users, function(o) { return !o.active; });\n     * // => objects for ['barney']\n     *\n     * // The `_.matches` iteratee shorthand.\n     * _.dropRightWhile(users, { 'user': 'pebbles', 'active': false });\n     * // => objects for ['barney', 'fred']\n     *\n     * // The `_.matchesProperty` iteratee shorthand.\n     * _.dropRightWhile(users, ['active', false]);\n     * // => objects for ['barney']\n     *\n     * // The `_.property` iteratee shorthand.\n     * _.dropRightWhile(users, 'active');\n     * // => objects for ['barney', 'fred', 'pebbles']\n     */\n    function dropRightWhile(array, predicate) {\n      return (array && array.length)\n        ? baseWhile(array, getIteratee(predicate, 3), true, true)\n        : [];\n    }\n\n    /**\n     * Creates a slice of `array` excluding elements dropped from the beginning.\n     * Elements are dropped until `predicate` returns falsey. The predicate is\n     * invoked with three arguments: (value, index, array).\n     *\n     * @static\n     * @memberOf _\n     * @since 3.0.0\n     * @category Array\n     * @param {Array} array The array to query.\n     * @param {Function} [predicate=_.identity] The function invoked per iteration.\n     * @returns {Array} Returns the slice of `array`.\n     * @example\n     *\n     * var users = [\n     *   { 'user': 'barney',  'active': false },\n     *   { 'user': 'fred',    'active': false },\n     *   { 'user': 'pebbles', 'active': true }\n     * ];\n     *\n     * _.dropWhile(users, function(o) { return !o.active; });\n     * // => objects for ['pebbles']\n     *\n     * // The `_.matches` iteratee shorthand.\n     * _.dropWhile(users, { 'user': 'barney', 'active': false });\n     * // => objects for ['fred', 'pebbles']\n     *\n     * // The `_.matchesProperty` iteratee shorthand.\n     * _.dropWhile(users, ['active', false]);\n     * // => objects for ['pebbles']\n     *\n     * // The `_.property` iteratee shorthand.\n     * _.dropWhile(users, 'active');\n     * // => objects for ['barney', 'fred', 'pebbles']\n     */\n    function dropWhile(array, predicate) {\n      return (array && array.length)\n        ? baseWhile(array, getIteratee(predicate, 3), true)\n        : [];\n    }\n\n    /**\n     * Fills elements of `array` with `value` from `start` up to, but not\n     * including, `end`.\n     *\n     * **Note:** This method mutates `array`.\n     *\n     * @static\n     * @memberOf _\n     * @since 3.2.0\n     * @category Array\n     * @param {Array} array The array to fill.\n     * @param {*} value The value to fill `array` with.\n     * @param {number} [start=0] The start position.\n     * @param {number} [end=array.length] The end position.\n     * @returns {Array} Returns `array`.\n     * @example\n     *\n     * var array = [1, 2, 3];\n     *\n     * _.fill(array, 'a');\n     * console.log(array);\n     * // => ['a', 'a', 'a']\n     *\n     * _.fill(Array(3), 2);\n     * // => [2, 2, 2]\n     *\n     * _.fill([4, 6, 8, 10], '*', 1, 3);\n     * // => [4, '*', '*', 10]\n     */\n    function fill(array, value, start, end) {\n      var length = array == null ? 0 : array.length;\n      if (!length) {\n        return [];\n      }\n      if (start && typeof start != 'number' && isIterateeCall(array, value, start)) {\n        start = 0;\n        end = length;\n      }\n      return baseFill(array, value, start, end);\n    }\n\n    /**\n     * This method is like `_.find` except that it returns the index of the first\n     * element `predicate` returns truthy for instead of the element itself.\n     *\n     * @static\n     * @memberOf _\n     * @since 1.1.0\n     * @category Array\n     * @param {Array} array The array to inspect.\n     * @param {Function} [predicate=_.identity] The function invoked per iteration.\n     * @param {number} [fromIndex=0] The index to search from.\n     * @returns {number} Returns the index of the found element, else `-1`.\n     * @example\n     *\n     * var users = [\n     *   { 'user': 'barney',  'active': false },\n     *   { 'user': 'fred',    'active': false },\n     *   { 'user': 'pebbles', 'active': true }\n     * ];\n     *\n     * _.findIndex(users, function(o) { return o.user == 'barney'; });\n     * // => 0\n     *\n     * // The `_.matches` iteratee shorthand.\n     * _.findIndex(users, { 'user': 'fred', 'active': false });\n     * // => 1\n     *\n     * // The `_.matchesProperty` iteratee shorthand.\n     * _.findIndex(users, ['active', false]);\n     * // => 0\n     *\n     * // The `_.property` iteratee shorthand.\n     * _.findIndex(users, 'active');\n     * // => 2\n     */\n    function findIndex(array, predicate, fromIndex) {\n      var length = array == null ? 0 : array.length;\n      if (!length) {\n        return -1;\n      }\n      var index = fromIndex == null ? 0 : toInteger(fromIndex);\n      if (index < 0) {\n        index = nativeMax(length + index, 0);\n      }\n      return baseFindIndex(array, getIteratee(predicate, 3), index);\n    }\n\n    /**\n     * This method is like `_.findIndex` except that it iterates over elements\n     * of `collection` from right to left.\n     *\n     * @static\n     * @memberOf _\n     * @since 2.0.0\n     * @category Array\n     * @param {Array} array The array to inspect.\n     * @param {Function} [predicate=_.identity] The function invoked per iteration.\n     * @param {number} [fromIndex=array.length-1] The index to search from.\n     * @returns {number} Returns the index of the found element, else `-1`.\n     * @example\n     *\n     * var users = [\n     *   { 'user': 'barney',  'active': true },\n     *   { 'user': 'fred',    'active': false },\n     *   { 'user': 'pebbles', 'active': false }\n     * ];\n     *\n     * _.findLastIndex(users, function(o) { return o.user == 'pebbles'; });\n     * // => 2\n     *\n     * // The `_.matches` iteratee shorthand.\n     * _.findLastIndex(users, { 'user': 'barney', 'active': true });\n     * // => 0\n     *\n     * // The `_.matchesProperty` iteratee shorthand.\n     * _.findLastIndex(users, ['active', false]);\n     * // => 2\n     *\n     * // The `_.property` iteratee shorthand.\n     * _.findLastIndex(users, 'active');\n     * // => 0\n     */\n    function findLastIndex(array, predicate, fromIndex) {\n      var length = array == null ? 0 : array.length;\n      if (!length) {\n        return -1;\n      }\n      var index = length - 1;\n      if (fromIndex !== undefined) {\n        index = toInteger(fromIndex);\n        index = fromIndex < 0\n          ? nativeMax(length + index, 0)\n          : nativeMin(index, length - 1);\n      }\n      return baseFindIndex(array, getIteratee(predicate, 3), index, true);\n    }\n\n    /**\n     * Flattens `array` a single level deep.\n     *\n     * @static\n     * @memberOf _\n     * @since 0.1.0\n     * @category Array\n     * @param {Array} array The array to flatten.\n     * @returns {Array} Returns the new flattened array.\n     * @example\n     *\n     * _.flatten([1, [2, [3, [4]], 5]]);\n     * // => [1, 2, [3, [4]], 5]\n     */\n    function flatten(array) {\n      var length = array == null ? 0 : array.length;\n      return length ? baseFlatten(array, 1) : [];\n    }\n\n    /**\n     * Recursively flattens `array`.\n     *\n     * @static\n     * @memberOf _\n     * @since 3.0.0\n     * @category Array\n     * @param {Array} array The array to flatten.\n     * @returns {Array} Returns the new flattened array.\n     * @example\n     *\n     * _.flattenDeep([1, [2, [3, [4]], 5]]);\n     * // => [1, 2, 3, 4, 5]\n     */\n    function flattenDeep(array) {\n      var length = array == null ? 0 : array.length;\n      return length ? baseFlatten(array, INFINITY) : [];\n    }\n\n    /**\n     * Recursively flatten `array` up to `depth` times.\n     *\n     * @static\n     * @memberOf _\n     * @since 4.4.0\n     * @category Array\n     * @param {Array} array The array to flatten.\n     * @param {number} [depth=1] The maximum recursion depth.\n     * @returns {Array} Returns the new flattened array.\n     * @example\n     *\n     * var array = [1, [2, [3, [4]], 5]];\n     *\n     * _.flattenDepth(array, 1);\n     * // => [1, 2, [3, [4]], 5]\n     *\n     * _.flattenDepth(array, 2);\n     * // => [1, 2, 3, [4], 5]\n     */\n    function flattenDepth(array, depth) {\n      var length = array == null ? 0 : array.length;\n      if (!length) {\n        return [];\n      }\n      depth = depth === undefined ? 1 : toInteger(depth);\n      return baseFlatten(array, depth);\n    }\n\n    /**\n     * The inverse of `_.toPairs`; this method returns an object composed\n     * from key-value `pairs`.\n     *\n     * @static\n     * @memberOf _\n     * @since 4.0.0\n     * @category Array\n     * @param {Array} pairs The key-value pairs.\n     * @returns {Object} Returns the new object.\n     * @example\n     *\n     * _.fromPairs([['a', 1], ['b', 2]]);\n     * // => { 'a': 1, 'b': 2 }\n     */\n    function fromPairs(pairs) {\n      var index = -1,\n          length = pairs == null ? 0 : pairs.length,\n          result = {};\n\n      while (++index < length) {\n        var pair = pairs[index];\n        result[pair[0]] = pair[1];\n      }\n      return result;\n    }\n\n    /**\n     * Gets the first element of `array`.\n     *\n     * @static\n     * @memberOf _\n     * @since 0.1.0\n     * @alias first\n     * @category Array\n     * @param {Array} array The array to query.\n     * @returns {*} Returns the first element of `array`.\n     * @example\n     *\n     * _.head([1, 2, 3]);\n     * // => 1\n     *\n     * _.head([]);\n     * // => undefined\n     */\n    function head(array) {\n      return (array && array.length) ? array[0] : undefined;\n    }\n\n    /**\n     * Gets the index at which the first occurrence of `value` is found in `array`\n     * using [`SameValueZero`](http://ecma-international.org/ecma-262/7.0/#sec-samevaluezero)\n     * for equality comparisons. If `fromIndex` is negative, it's used as the\n     * offset from the end of `array`.\n     *\n     * @static\n     * @memberOf _\n     * @since 0.1.0\n     * @category Array\n     * @param {Array} array The array to inspect.\n     * @param {*} value The value to search for.\n     * @param {number} [fromIndex=0] The index to search from.\n     * @returns {number} Returns the index of the matched value, else `-1`.\n     * @example\n     *\n     * _.indexOf([1, 2, 1, 2], 2);\n     * // => 1\n     *\n     * // Search from the `fromIndex`.\n     * _.indexOf([1, 2, 1, 2], 2, 2);\n     * // => 3\n     */\n    function indexOf(array, value, fromIndex) {\n      var length = array == null ? 0 : array.length;\n      if (!length) {\n        return -1;\n      }\n      var index = fromIndex == null ? 0 : toInteger(fromIndex);\n      if (index < 0) {\n        index = nativeMax(length + index, 0);\n      }\n      return baseIndexOf(array, value, index);\n    }\n\n    /**\n     * Gets all but the last element of `array`.\n     *\n     * @static\n     * @memberOf _\n     * @since 0.1.0\n     * @category Array\n     * @param {Array} array The array to query.\n     * @returns {Array} Returns the slice of `array`.\n     * @example\n     *\n     * _.initial([1, 2, 3]);\n     * // => [1, 2]\n     */\n    function initial(array) {\n      var length = array == null ? 0 : array.length;\n      return length ? baseSlice(array, 0, -1) : [];\n    }\n\n    /**\n     * Creates an array of unique values that are included in all given arrays\n     * using [`SameValueZero`](http://ecma-international.org/ecma-262/7.0/#sec-samevaluezero)\n     * for equality comparisons. The order and references of result values are\n     * determined by the first array.\n     *\n     * @static\n     * @memberOf _\n     * @since 0.1.0\n     * @category Array\n     * @param {...Array} [arrays] The arrays to inspect.\n     * @returns {Array} Returns the new array of intersecting values.\n     * @example\n     *\n     * _.intersection([2, 1], [2, 3]);\n     * // => [2]\n     */\n    var intersection = baseRest(function(arrays) {\n      var mapped = arrayMap(arrays, castArrayLikeObject);\n      return (mapped.length && mapped[0] === arrays[0])\n        ? baseIntersection(mapped)\n        : [];\n    });\n\n    /**\n     * This method is like `_.intersection` except that it accepts `iteratee`\n     * which is invoked for each element of each `arrays` to generate the criterion\n     * by which they're compared. The order and references of result values are\n     * determined by the first array. The iteratee is invoked with one argument:\n     * (value).\n     *\n     * @static\n     * @memberOf _\n     * @since 4.0.0\n     * @category Array\n     * @param {...Array} [arrays] The arrays to inspect.\n     * @param {Function} [iteratee=_.identity] The iteratee invoked per element.\n     * @returns {Array} Returns the new array of intersecting values.\n     * @example\n     *\n     * _.intersectionBy([2.1, 1.2], [2.3, 3.4], Math.floor);\n     * // => [2.1]\n     *\n     * // The `_.property` iteratee shorthand.\n     * _.intersectionBy([{ 'x': 1 }], [{ 'x': 2 }, { 'x': 1 }], 'x');\n     * // => [{ 'x': 1 }]\n     */\n    var intersectionBy = baseRest(function(arrays) {\n      var iteratee = last(arrays),\n          mapped = arrayMap(arrays, castArrayLikeObject);\n\n      if (iteratee === last(mapped)) {\n        iteratee = undefined;\n      } else {\n        mapped.pop();\n      }\n      return (mapped.length && mapped[0] === arrays[0])\n        ? baseIntersection(mapped, getIteratee(iteratee, 2))\n        : [];\n    });\n\n    /**\n     * This method is like `_.intersection` except that it accepts `comparator`\n     * which is invoked to compare elements of `arrays`. The order and references\n     * of result values are determined by the first array. The comparator is\n     * invoked with two arguments: (arrVal, othVal).\n     *\n     * @static\n     * @memberOf _\n     * @since 4.0.0\n     * @category Array\n     * @param {...Array} [arrays] The arrays to inspect.\n     * @param {Function} [comparator] The comparator invoked per element.\n     * @returns {Array} Returns the new array of intersecting values.\n     * @example\n     *\n     * var objects = [{ 'x': 1, 'y': 2 }, { 'x': 2, 'y': 1 }];\n     * var others = [{ 'x': 1, 'y': 1 }, { 'x': 1, 'y': 2 }];\n     *\n     * _.intersectionWith(objects, others, _.isEqual);\n     * // => [{ 'x': 1, 'y': 2 }]\n     */\n    var intersectionWith = baseRest(function(arrays) {\n      var comparator = last(arrays),\n          mapped = arrayMap(arrays, castArrayLikeObject);\n\n      comparator = typeof comparator == 'function' ? comparator : undefined;\n      if (comparator) {\n        mapped.pop();\n      }\n      return (mapped.length && mapped[0] === arrays[0])\n        ? baseIntersection(mapped, undefined, comparator)\n        : [];\n    });\n\n    /**\n     * Converts all elements in `array` into a string separated by `separator`.\n     *\n     * @static\n     * @memberOf _\n     * @since 4.0.0\n     * @category Array\n     * @param {Array} array The array to convert.\n     * @param {string} [separator=','] The element separator.\n     * @returns {string} Returns the joined string.\n     * @example\n     *\n     * _.join(['a', 'b', 'c'], '~');\n     * // => 'a~b~c'\n     */\n    function join(array, separator) {\n      return array == null ? '' : nativeJoin.call(array, separator);\n    }\n\n    /**\n     * Gets the last element of `array`.\n     *\n     * @static\n     * @memberOf _\n     * @since 0.1.0\n     * @category Array\n     * @param {Array} array The array to query.\n     * @returns {*} Returns the last element of `array`.\n     * @example\n     *\n     * _.last([1, 2, 3]);\n     * // => 3\n     */\n    function last(array) {\n      var length = array == null ? 0 : array.length;\n      return length ? array[length - 1] : undefined;\n    }\n\n    /**\n     * This method is like `_.indexOf` except that it iterates over elements of\n     * `array` from right to left.\n     *\n     * @static\n     * @memberOf _\n     * @since 0.1.0\n     * @category Array\n     * @param {Array} array The array to inspect.\n     * @param {*} value The value to search for.\n     * @param {number} [fromIndex=array.length-1] The index to search from.\n     * @returns {number} Returns the index of the matched value, else `-1`.\n     * @example\n     *\n     * _.lastIndexOf([1, 2, 1, 2], 2);\n     * // => 3\n     *\n     * // Search from the `fromIndex`.\n     * _.lastIndexOf([1, 2, 1, 2], 2, 2);\n     * // => 1\n     */\n    function lastIndexOf(array, value, fromIndex) {\n      var length = array == null ? 0 : array.length;\n      if (!length) {\n        return -1;\n      }\n      var index = length;\n      if (fromIndex !== undefined) {\n        index = toInteger(fromIndex);\n        index = index < 0 ? nativeMax(length + index, 0) : nativeMin(index, length - 1);\n      }\n      return value === value\n        ? strictLastIndexOf(array, value, index)\n        : baseFindIndex(array, baseIsNaN, index, true);\n    }\n\n    /**\n     * Gets the element at index `n` of `array`. If `n` is negative, the nth\n     * element from the end is returned.\n     *\n     * @static\n     * @memberOf _\n     * @since 4.11.0\n     * @category Array\n     * @param {Array} array The array to query.\n     * @param {number} [n=0] The index of the element to return.\n     * @returns {*} Returns the nth element of `array`.\n     * @example\n     *\n     * var array = ['a', 'b', 'c', 'd'];\n     *\n     * _.nth(array, 1);\n     * // => 'b'\n     *\n     * _.nth(array, -2);\n     * // => 'c';\n     */\n    function nth(array, n) {\n      return (array && array.length) ? baseNth(array, toInteger(n)) : undefined;\n    }\n\n    /**\n     * Removes all given values from `array` using\n     * [`SameValueZero`](http://ecma-international.org/ecma-262/7.0/#sec-samevaluezero)\n     * for equality comparisons.\n     *\n     * **Note:** Unlike `_.without`, this method mutates `array`. Use `_.remove`\n     * to remove elements from an array by predicate.\n     *\n     * @static\n     * @memberOf _\n     * @since 2.0.0\n     * @category Array\n     * @param {Array} array The array to modify.\n     * @param {...*} [values] The values to remove.\n     * @returns {Array} Returns `array`.\n     * @example\n     *\n     * var array = ['a', 'b', 'c', 'a', 'b', 'c'];\n     *\n     * _.pull(array, 'a', 'c');\n     * console.log(array);\n     * // => ['b', 'b']\n     */\n    var pull = baseRest(pullAll);\n\n    /**\n     * This method is like `_.pull` except that it accepts an array of values to remove.\n     *\n     * **Note:** Unlike `_.difference`, this method mutates `array`.\n     *\n     * @static\n     * @memberOf _\n     * @since 4.0.0\n     * @category Array\n     * @param {Array} array The array to modify.\n     * @param {Array} values The values to remove.\n     * @returns {Array} Returns `array`.\n     * @example\n     *\n     * var array = ['a', 'b', 'c', 'a', 'b', 'c'];\n     *\n     * _.pullAll(array, ['a', 'c']);\n     * console.log(array);\n     * // => ['b', 'b']\n     */\n    function pullAll(array, values) {\n      return (array && array.length && values && values.length)\n        ? basePullAll(array, values)\n        : array;\n    }\n\n    /**\n     * This method is like `_.pullAll` except that it accepts `iteratee` which is\n     * invoked for each element of `array` and `values` to generate the criterion\n     * by which they're compared. The iteratee is invoked with one argument: (value).\n     *\n     * **Note:** Unlike `_.differenceBy`, this method mutates `array`.\n     *\n     * @static\n     * @memberOf _\n     * @since 4.0.0\n     * @category Array\n     * @param {Array} array The array to modify.\n     * @param {Array} values The values to remove.\n     * @param {Function} [iteratee=_.identity] The iteratee invoked per element.\n     * @returns {Array} Returns `array`.\n     * @example\n     *\n     * var array = [{ 'x': 1 }, { 'x': 2 }, { 'x': 3 }, { 'x': 1 }];\n     *\n     * _.pullAllBy(array, [{ 'x': 1 }, { 'x': 3 }], 'x');\n     * console.log(array);\n     * // => [{ 'x': 2 }]\n     */\n    function pullAllBy(array, values, iteratee) {\n      return (array && array.length && values && values.length)\n        ? basePullAll(array, values, getIteratee(iteratee, 2))\n        : array;\n    }\n\n    /**\n     * This method is like `_.pullAll` except that it accepts `comparator` which\n     * is invoked to compare elements of `array` to `values`. The comparator is\n     * invoked with two arguments: (arrVal, othVal).\n     *\n     * **Note:** Unlike `_.differenceWith`, this method mutates `array`.\n     *\n     * @static\n     * @memberOf _\n     * @since 4.6.0\n     * @category Array\n     * @param {Array} array The array to modify.\n     * @param {Array} values The values to remove.\n     * @param {Function} [comparator] The comparator invoked per element.\n     * @returns {Array} Returns `array`.\n     * @example\n     *\n     * var array = [{ 'x': 1, 'y': 2 }, { 'x': 3, 'y': 4 }, { 'x': 5, 'y': 6 }];\n     *\n     * _.pullAllWith(array, [{ 'x': 3, 'y': 4 }], _.isEqual);\n     * console.log(array);\n     * // => [{ 'x': 1, 'y': 2 }, { 'x': 5, 'y': 6 }]\n     */\n    function pullAllWith(array, values, comparator) {\n      return (array && array.length && values && values.length)\n        ? basePullAll(array, values, undefined, comparator)\n        : array;\n    }\n\n    /**\n     * Removes elements from `array` corresponding to `indexes` and returns an\n     * array of removed elements.\n     *\n     * **Note:** Unlike `_.at`, this method mutates `array`.\n     *\n     * @static\n     * @memberOf _\n     * @since 3.0.0\n     * @category Array\n     * @param {Array} array The array to modify.\n     * @param {...(number|number[])} [indexes] The indexes of elements to remove.\n     * @returns {Array} Returns the new array of removed elements.\n     * @example\n     *\n     * var array = ['a', 'b', 'c', 'd'];\n     * var pulled = _.pullAt(array, [1, 3]);\n     *\n     * console.log(array);\n     * // => ['a', 'c']\n     *\n     * console.log(pulled);\n     * // => ['b', 'd']\n     */\n    var pullAt = flatRest(function(array, indexes) {\n      var length = array == null ? 0 : array.length,\n          result = baseAt(array, indexes);\n\n      basePullAt(array, arrayMap(indexes, function(index) {\n        return isIndex(index, length) ? +index : index;\n      }).sort(compareAscending));\n\n      return result;\n    });\n\n    /**\n     * Removes all elements from `array` that `predicate` returns truthy for\n     * and returns an array of the removed elements. The predicate is invoked\n     * with three arguments: (value, index, array).\n     *\n     * **Note:** Unlike `_.filter`, this method mutates `array`. Use `_.pull`\n     * to pull elements from an array by value.\n     *\n     * @static\n     * @memberOf _\n     * @since 2.0.0\n     * @category Array\n     * @param {Array} array The array to modify.\n     * @param {Function} [predicate=_.identity] The function invoked per iteration.\n     * @returns {Array} Returns the new array of removed elements.\n     * @example\n     *\n     * var array = [1, 2, 3, 4];\n     * var evens = _.remove(array, function(n) {\n     *   return n % 2 == 0;\n     * });\n     *\n     * console.log(array);\n     * // => [1, 3]\n     *\n     * console.log(evens);\n     * // => [2, 4]\n     */\n    function remove(array, predicate) {\n      var result = [];\n      if (!(array && array.length)) {\n        return result;\n      }\n      var index = -1,\n          indexes = [],\n          length = array.length;\n\n      predicate = getIteratee(predicate, 3);\n      while (++index < length) {\n        var value = array[index];\n        if (predicate(value, index, array)) {\n          result.push(value);\n          indexes.push(index);\n        }\n      }\n      basePullAt(array, indexes);\n      return result;\n    }\n\n    /**\n     * Reverses `array` so that the first element becomes the last, the second\n     * element becomes the second to last, and so on.\n     *\n     * **Note:** This method mutates `array` and is based on\n     * [`Array#reverse`](https://mdn.io/Array/reverse).\n     *\n     * @static\n     * @memberOf _\n     * @since 4.0.0\n     * @category Array\n     * @param {Array} array The array to modify.\n     * @returns {Array} Returns `array`.\n     * @example\n     *\n     * var array = [1, 2, 3];\n     *\n     * _.reverse(array);\n     * // => [3, 2, 1]\n     *\n     * console.log(array);\n     * // => [3, 2, 1]\n     */\n    function reverse(array) {\n      return array == null ? array : nativeReverse.call(array);\n    }\n\n    /**\n     * Creates a slice of `array` from `start` up to, but not including, `end`.\n     *\n     * **Note:** This method is used instead of\n     * [`Array#slice`](https://mdn.io/Array/slice) to ensure dense arrays are\n     * returned.\n     *\n     * @static\n     * @memberOf _\n     * @since 3.0.0\n     * @category Array\n     * @param {Array} array The array to slice.\n     * @param {number} [start=0] The start position.\n     * @param {number} [end=array.length] The end position.\n     * @returns {Array} Returns the slice of `array`.\n     */\n    function slice(array, start, end) {\n      var length = array == null ? 0 : array.length;\n      if (!length) {\n        return [];\n      }\n      if (end && typeof end != 'number' && isIterateeCall(array, start, end)) {\n        start = 0;\n        end = length;\n      }\n      else {\n        start = start == null ? 0 : toInteger(start);\n        end = end === undefined ? length : toInteger(end);\n      }\n      return baseSlice(array, start, end);\n    }\n\n    /**\n     * Uses a binary search to determine the lowest index at which `value`\n     * should be inserted into `array` in order to maintain its sort order.\n     *\n     * @static\n     * @memberOf _\n     * @since 0.1.0\n     * @category Array\n     * @param {Array} array The sorted array to inspect.\n     * @param {*} value The value to evaluate.\n     * @returns {number} Returns the index at which `value` should be inserted\n     *  into `array`.\n     * @example\n     *\n     * _.sortedIndex([30, 50], 40);\n     * // => 1\n     */\n    function sortedIndex(array, value) {\n      return baseSortedIndex(array, value);\n    }\n\n    /**\n     * This method is like `_.sortedIndex` except that it accepts `iteratee`\n     * which is invoked for `value` and each element of `array` to compute their\n     * sort ranking. The iteratee is invoked with one argument: (value).\n     *\n     * @static\n     * @memberOf _\n     * @since 4.0.0\n     * @category Array\n     * @param {Array} array The sorted array to inspect.\n     * @param {*} value The value to evaluate.\n     * @param {Function} [iteratee=_.identity] The iteratee invoked per element.\n     * @returns {number} Returns the index at which `value` should be inserted\n     *  into `array`.\n     * @example\n     *\n     * var objects = [{ 'x': 4 }, { 'x': 5 }];\n     *\n     * _.sortedIndexBy(objects, { 'x': 4 }, function(o) { return o.x; });\n     * // => 0\n     *\n     * // The `_.property` iteratee shorthand.\n     * _.sortedIndexBy(objects, { 'x': 4 }, 'x');\n     * // => 0\n     */\n    function sortedIndexBy(array, value, iteratee) {\n      return baseSortedIndexBy(array, value, getIteratee(iteratee, 2));\n    }\n\n    /**\n     * This method is like `_.indexOf` except that it performs a binary\n     * search on a sorted `array`.\n     *\n     * @static\n     * @memberOf _\n     * @since 4.0.0\n     * @category Array\n     * @param {Array} array The array to inspect.\n     * @param {*} value The value to search for.\n     * @returns {number} Returns the index of the matched value, else `-1`.\n     * @example\n     *\n     * _.sortedIndexOf([4, 5, 5, 5, 6], 5);\n     * // => 1\n     */\n    function sortedIndexOf(array, value) {\n      var length = array == null ? 0 : array.length;\n      if (length) {\n        var index = baseSortedIndex(array, value);\n        if (index < length && eq(array[index], value)) {\n          return index;\n        }\n      }\n      return -1;\n    }\n\n    /**\n     * This method is like `_.sortedIndex` except that it returns the highest\n     * index at which `value` should be inserted into `array` in order to\n     * maintain its sort order.\n     *\n     * @static\n     * @memberOf _\n     * @since 3.0.0\n     * @category Array\n     * @param {Array} array The sorted array to inspect.\n     * @param {*} value The value to evaluate.\n     * @returns {number} Returns the index at which `value` should be inserted\n     *  into `array`.\n     * @example\n     *\n     * _.sortedLastIndex([4, 5, 5, 5, 6], 5);\n     * // => 4\n     */\n    function sortedLastIndex(array, value) {\n      return baseSortedIndex(array, value, true);\n    }\n\n    /**\n     * This method is like `_.sortedLastIndex` except that it accepts `iteratee`\n     * which is invoked for `value` and each element of `array` to compute their\n     * sort ranking. The iteratee is invoked with one argument: (value).\n     *\n     * @static\n     * @memberOf _\n     * @since 4.0.0\n     * @category Array\n     * @param {Array} array The sorted array to inspect.\n     * @param {*} value The value to evaluate.\n     * @param {Function} [iteratee=_.identity] The iteratee invoked per element.\n     * @returns {number} Returns the index at which `value` should be inserted\n     *  into `array`.\n     * @example\n     *\n     * var objects = [{ 'x': 4 }, { 'x': 5 }];\n     *\n     * _.sortedLastIndexBy(objects, { 'x': 4 }, function(o) { return o.x; });\n     * // => 1\n     *\n     * // The `_.property` iteratee shorthand.\n     * _.sortedLastIndexBy(objects, { 'x': 4 }, 'x');\n     * // => 1\n     */\n    function sortedLastIndexBy(array, value, iteratee) {\n      return baseSortedIndexBy(array, value, getIteratee(iteratee, 2), true);\n    }\n\n    /**\n     * This method is like `_.lastIndexOf` except that it performs a binary\n     * search on a sorted `array`.\n     *\n     * @static\n     * @memberOf _\n     * @since 4.0.0\n     * @category Array\n     * @param {Array} array The array to inspect.\n     * @param {*} value The value to search for.\n     * @returns {number} Returns the index of the matched value, else `-1`.\n     * @example\n     *\n     * _.sortedLastIndexOf([4, 5, 5, 5, 6], 5);\n     * // => 3\n     */\n    function sortedLastIndexOf(array, value) {\n      var length = array == null ? 0 : array.length;\n      if (length) {\n        var index = baseSortedIndex(array, value, true) - 1;\n        if (eq(array[index], value)) {\n          return index;\n        }\n      }\n      return -1;\n    }\n\n    /**\n     * This method is like `_.uniq` except that it's designed and optimized\n     * for sorted arrays.\n     *\n     * @static\n     * @memberOf _\n     * @since 4.0.0\n     * @category Array\n     * @param {Array} array The array to inspect.\n     * @returns {Array} Returns the new duplicate free array.\n     * @example\n     *\n     * _.sortedUniq([1, 1, 2]);\n     * // => [1, 2]\n     */\n    function sortedUniq(array) {\n      return (array && array.length)\n        ? baseSortedUniq(array)\n        : [];\n    }\n\n    /**\n     * This method is like `_.uniqBy` except that it's designed and optimized\n     * for sorted arrays.\n     *\n     * @static\n     * @memberOf _\n     * @since 4.0.0\n     * @category Array\n     * @param {Array} array The array to inspect.\n     * @param {Function} [iteratee] The iteratee invoked per element.\n     * @returns {Array} Returns the new duplicate free array.\n     * @example\n     *\n     * _.sortedUniqBy([1.1, 1.2, 2.3, 2.4], Math.floor);\n     * // => [1.1, 2.3]\n     */\n    function sortedUniqBy(array, iteratee) {\n      return (array && array.length)\n        ? baseSortedUniq(array, getIteratee(iteratee, 2))\n        : [];\n    }\n\n    /**\n     * Gets all but the first element of `array`.\n     *\n     * @static\n     * @memberOf _\n     * @since 4.0.0\n     * @category Array\n     * @param {Array} array The array to query.\n     * @returns {Array} Returns the slice of `array`.\n     * @example\n     *\n     * _.tail([1, 2, 3]);\n     * // => [2, 3]\n     */\n    function tail(array) {\n      var length = array == null ? 0 : array.length;\n      return length ? baseSlice(array, 1, length) : [];\n    }\n\n    /**\n     * Creates a slice of `array` with `n` elements taken from the beginning.\n     *\n     * @static\n     * @memberOf _\n     * @since 0.1.0\n     * @category Array\n     * @param {Array} array The array to query.\n     * @param {number} [n=1] The number of elements to take.\n     * @param- {Object} [guard] Enables use as an iteratee for methods like `_.map`.\n     * @returns {Array} Returns the slice of `array`.\n     * @example\n     *\n     * _.take([1, 2, 3]);\n     * // => [1]\n     *\n     * _.take([1, 2, 3], 2);\n     * // => [1, 2]\n     *\n     * _.take([1, 2, 3], 5);\n     * // => [1, 2, 3]\n     *\n     * _.take([1, 2, 3], 0);\n     * // => []\n     */\n    function take(array, n, guard) {\n      if (!(array && array.length)) {\n        return [];\n      }\n      n = (guard || n === undefined) ? 1 : toInteger(n);\n      return baseSlice(array, 0, n < 0 ? 0 : n);\n    }\n\n    /**\n     * Creates a slice of `array` with `n` elements taken from the end.\n     *\n     * @static\n     * @memberOf _\n     * @since 3.0.0\n     * @category Array\n     * @param {Array} array The array to query.\n     * @param {number} [n=1] The number of elements to take.\n     * @param- {Object} [guard] Enables use as an iteratee for methods like `_.map`.\n     * @returns {Array} Returns the slice of `array`.\n     * @example\n     *\n     * _.takeRight([1, 2, 3]);\n     * // => [3]\n     *\n     * _.takeRight([1, 2, 3], 2);\n     * // => [2, 3]\n     *\n     * _.takeRight([1, 2, 3], 5);\n     * // => [1, 2, 3]\n     *\n     * _.takeRight([1, 2, 3], 0);\n     * // => []\n     */\n    function takeRight(array, n, guard) {\n      var length = array == null ? 0 : array.length;\n      if (!length) {\n        return [];\n      }\n      n = (guard || n === undefined) ? 1 : toInteger(n);\n      n = length - n;\n      return baseSlice(array, n < 0 ? 0 : n, length);\n    }\n\n    /**\n     * Creates a slice of `array` with elements taken from the end. Elements are\n     * taken until `predicate` returns falsey. The predicate is invoked with\n     * three arguments: (value, index, array).\n     *\n     * @static\n     * @memberOf _\n     * @since 3.0.0\n     * @category Array\n     * @param {Array} array The array to query.\n     * @param {Function} [predicate=_.identity] The function invoked per iteration.\n     * @returns {Array} Returns the slice of `array`.\n     * @example\n     *\n     * var users = [\n     *   { 'user': 'barney',  'active': true },\n     *   { 'user': 'fred',    'active': false },\n     *   { 'user': 'pebbles', 'active': false }\n     * ];\n     *\n     * _.takeRightWhile(users, function(o) { return !o.active; });\n     * // => objects for ['fred', 'pebbles']\n     *\n     * // The `_.matches` iteratee shorthand.\n     * _.takeRightWhile(users, { 'user': 'pebbles', 'active': false });\n     * // => objects for ['pebbles']\n     *\n     * // The `_.matchesProperty` iteratee shorthand.\n     * _.takeRightWhile(users, ['active', false]);\n     * // => objects for ['fred', 'pebbles']\n     *\n     * // The `_.property` iteratee shorthand.\n     * _.takeRightWhile(users, 'active');\n     * // => []\n     */\n    function takeRightWhile(array, predicate) {\n      return (array && array.length)\n        ? baseWhile(array, getIteratee(predicate, 3), false, true)\n        : [];\n    }\n\n    /**\n     * Creates a slice of `array` with elements taken from the beginning. Elements\n     * are taken until `predicate` returns falsey. The predicate is invoked with\n     * three arguments: (value, index, array).\n     *\n     * @static\n     * @memberOf _\n     * @since 3.0.0\n     * @category Array\n     * @param {Array} array The array to query.\n     * @param {Function} [predicate=_.identity] The function invoked per iteration.\n     * @returns {Array} Returns the slice of `array`.\n     * @example\n     *\n     * var users = [\n     *   { 'user': 'barney',  'active': false },\n     *   { 'user': 'fred',    'active': false },\n     *   { 'user': 'pebbles', 'active': true }\n     * ];\n     *\n     * _.takeWhile(users, function(o) { return !o.active; });\n     * // => objects for ['barney', 'fred']\n     *\n     * // The `_.matches` iteratee shorthand.\n     * _.takeWhile(users, { 'user': 'barney', 'active': false });\n     * // => objects for ['barney']\n     *\n     * // The `_.matchesProperty` iteratee shorthand.\n     * _.takeWhile(users, ['active', false]);\n     * // => objects for ['barney', 'fred']\n     *\n     * // The `_.property` iteratee shorthand.\n     * _.takeWhile(users, 'active');\n     * // => []\n     */\n    function takeWhile(array, predicate) {\n      return (array && array.length)\n        ? baseWhile(array, getIteratee(predicate, 3))\n        : [];\n    }\n\n    /**\n     * Creates an array of unique values, in order, from all given arrays using\n     * [`SameValueZero`](http://ecma-international.org/ecma-262/7.0/#sec-samevaluezero)\n     * for equality comparisons.\n     *\n     * @static\n     * @memberOf _\n     * @since 0.1.0\n     * @category Array\n     * @param {...Array} [arrays] The arrays to inspect.\n     * @returns {Array} Returns the new array of combined values.\n     * @example\n     *\n     * _.union([2], [1, 2]);\n     * // => [2, 1]\n     */\n    var union = baseRest(function(arrays) {\n      return baseUniq(baseFlatten(arrays, 1, isArrayLikeObject, true));\n    });\n\n    /**\n     * This method is like `_.union` except that it accepts `iteratee` which is\n     * invoked for each element of each `arrays` to generate the criterion by\n     * which uniqueness is computed. Result values are chosen from the first\n     * array in which the value occurs. The iteratee is invoked with one argument:\n     * (value).\n     *\n     * @static\n     * @memberOf _\n     * @since 4.0.0\n     * @category Array\n     * @param {...Array} [arrays] The arrays to inspect.\n     * @param {Function} [iteratee=_.identity] The iteratee invoked per element.\n     * @returns {Array} Returns the new array of combined values.\n     * @example\n     *\n     * _.unionBy([2.1], [1.2, 2.3], Math.floor);\n     * // => [2.1, 1.2]\n     *\n     * // The `_.property` iteratee shorthand.\n     * _.unionBy([{ 'x': 1 }], [{ 'x': 2 }, { 'x': 1 }], 'x');\n     * // => [{ 'x': 1 }, { 'x': 2 }]\n     */\n    var unionBy = baseRest(function(arrays) {\n      var iteratee = last(arrays);\n      if (isArrayLikeObject(iteratee)) {\n        iteratee = undefined;\n      }\n      return baseUniq(baseFlatten(arrays, 1, isArrayLikeObject, true), getIteratee(iteratee, 2));\n    });\n\n    /**\n     * This method is like `_.union` except that it accepts `comparator` which\n     * is invoked to compare elements of `arrays`. Result values are chosen from\n     * the first array in which the value occurs. The comparator is invoked\n     * with two arguments: (arrVal, othVal).\n     *\n     * @static\n     * @memberOf _\n     * @since 4.0.0\n     * @category Array\n     * @param {...Array} [arrays] The arrays to inspect.\n     * @param {Function} [comparator] The comparator invoked per element.\n     * @returns {Array} Returns the new array of combined values.\n     * @example\n     *\n     * var objects = [{ 'x': 1, 'y': 2 }, { 'x': 2, 'y': 1 }];\n     * var others = [{ 'x': 1, 'y': 1 }, { 'x': 1, 'y': 2 }];\n     *\n     * _.unionWith(objects, others, _.isEqual);\n     * // => [{ 'x': 1, 'y': 2 }, { 'x': 2, 'y': 1 }, { 'x': 1, 'y': 1 }]\n     */\n    var unionWith = baseRest(function(arrays) {\n      var comparator = last(arrays);\n      comparator = typeof comparator == 'function' ? comparator : undefined;\n      return baseUniq(baseFlatten(arrays, 1, isArrayLikeObject, true), undefined, comparator);\n    });\n\n    /**\n     * Creates a duplicate-free version of an array, using\n     * [`SameValueZero`](http://ecma-international.org/ecma-262/7.0/#sec-samevaluezero)\n     * for equality comparisons, in which only the first occurrence of each element\n     * is kept. The order of result values is determined by the order they occur\n     * in the array.\n     *\n     * @static\n     * @memberOf _\n     * @since 0.1.0\n     * @category Array\n     * @param {Array} array The array to inspect.\n     * @returns {Array} Returns the new duplicate free array.\n     * @example\n     *\n     * _.uniq([2, 1, 2]);\n     * // => [2, 1]\n     */\n    function uniq(array) {\n      return (array && array.length) ? baseUniq(array) : [];\n    }\n\n    /**\n     * This method is like `_.uniq` except that it accepts `iteratee` which is\n     * invoked for each element in `array` to generate the criterion by which\n     * uniqueness is computed. The order of result values is determined by the\n     * order they occur in the array. The iteratee is invoked with one argument:\n     * (value).\n     *\n     * @static\n     * @memberOf _\n     * @since 4.0.0\n     * @category Array\n     * @param {Array} array The array to inspect.\n     * @param {Function} [iteratee=_.identity] The iteratee invoked per element.\n     * @returns {Array} Returns the new duplicate free array.\n     * @example\n     *\n     * _.uniqBy([2.1, 1.2, 2.3], Math.floor);\n     * // => [2.1, 1.2]\n     *\n     * // The `_.property` iteratee shorthand.\n     * _.uniqBy([{ 'x': 1 }, { 'x': 2 }, { 'x': 1 }], 'x');\n     * // => [{ 'x': 1 }, { 'x': 2 }]\n     */\n    function uniqBy(array, iteratee) {\n      return (array && array.length) ? baseUniq(array, getIteratee(iteratee, 2)) : [];\n    }\n\n    /**\n     * This method is like `_.uniq` except that it accepts `comparator` which\n     * is invoked to compare elements of `array`. The order of result values is\n     * determined by the order they occur in the array.The comparator is invoked\n     * with two arguments: (arrVal, othVal).\n     *\n     * @static\n     * @memberOf _\n     * @since 4.0.0\n     * @category Array\n     * @param {Array} array The array to inspect.\n     * @param {Function} [comparator] The comparator invoked per element.\n     * @returns {Array} Returns the new duplicate free array.\n     * @example\n     *\n     * var objects = [{ 'x': 1, 'y': 2 }, { 'x': 2, 'y': 1 }, { 'x': 1, 'y': 2 }];\n     *\n     * _.uniqWith(objects, _.isEqual);\n     * // => [{ 'x': 1, 'y': 2 }, { 'x': 2, 'y': 1 }]\n     */\n    function uniqWith(array, comparator) {\n      comparator = typeof comparator == 'function' ? comparator : undefined;\n      return (array && array.length) ? baseUniq(array, undefined, comparator) : [];\n    }\n\n    /**\n     * This method is like `_.zip` except that it accepts an array of grouped\n     * elements and creates an array regrouping the elements to their pre-zip\n     * configuration.\n     *\n     * @static\n     * @memberOf _\n     * @since 1.2.0\n     * @category Array\n     * @param {Array} array The array of grouped elements to process.\n     * @returns {Array} Returns the new array of regrouped elements.\n     * @example\n     *\n     * var zipped = _.zip(['a', 'b'], [1, 2], [true, false]);\n     * // => [['a', 1, true], ['b', 2, false]]\n     *\n     * _.unzip(zipped);\n     * // => [['a', 'b'], [1, 2], [true, false]]\n     */\n    function unzip(array) {\n      if (!(array && array.length)) {\n        return [];\n      }\n      var length = 0;\n      array = arrayFilter(array, function(group) {\n        if (isArrayLikeObject(group)) {\n          length = nativeMax(group.length, length);\n          return true;\n        }\n      });\n      return baseTimes(length, function(index) {\n        return arrayMap(array, baseProperty(index));\n      });\n    }\n\n    /**\n     * This method is like `_.unzip` except that it accepts `iteratee` to specify\n     * how regrouped values should be combined. The iteratee is invoked with the\n     * elements of each group: (...group).\n     *\n     * @static\n     * @memberOf _\n     * @since 3.8.0\n     * @category Array\n     * @param {Array} array The array of grouped elements to process.\n     * @param {Function} [iteratee=_.identity] The function to combine\n     *  regrouped values.\n     * @returns {Array} Returns the new array of regrouped elements.\n     * @example\n     *\n     * var zipped = _.zip([1, 2], [10, 20], [100, 200]);\n     * // => [[1, 10, 100], [2, 20, 200]]\n     *\n     * _.unzipWith(zipped, _.add);\n     * // => [3, 30, 300]\n     */\n    function unzipWith(array, iteratee) {\n      if (!(array && array.length)) {\n        return [];\n      }\n      var result = unzip(array);\n      if (iteratee == null) {\n        return result;\n      }\n      return arrayMap(result, function(group) {\n        return apply(iteratee, undefined, group);\n      });\n    }\n\n    /**\n     * Creates an array excluding all given values using\n     * [`SameValueZero`](http://ecma-international.org/ecma-262/7.0/#sec-samevaluezero)\n     * for equality comparisons.\n     *\n     * **Note:** Unlike `_.pull`, this method returns a new array.\n     *\n     * @static\n     * @memberOf _\n     * @since 0.1.0\n     * @category Array\n     * @param {Array} array The array to inspect.\n     * @param {...*} [values] The values to exclude.\n     * @returns {Array} Returns the new array of filtered values.\n     * @see _.difference, _.xor\n     * @example\n     *\n     * _.without([2, 1, 2, 3], 1, 2);\n     * // => [3]\n     */\n    var without = baseRest(function(array, values) {\n      return isArrayLikeObject(array)\n        ? baseDifference(array, values)\n        : [];\n    });\n\n    /**\n     * Creates an array of unique values that is the\n     * [symmetric difference](https://en.wikipedia.org/wiki/Symmetric_difference)\n     * of the given arrays. The order of result values is determined by the order\n     * they occur in the arrays.\n     *\n     * @static\n     * @memberOf _\n     * @since 2.4.0\n     * @category Array\n     * @param {...Array} [arrays] The arrays to inspect.\n     * @returns {Array} Returns the new array of filtered values.\n     * @see _.difference, _.without\n     * @example\n     *\n     * _.xor([2, 1], [2, 3]);\n     * // => [1, 3]\n     */\n    var xor = baseRest(function(arrays) {\n      return baseXor(arrayFilter(arrays, isArrayLikeObject));\n    });\n\n    /**\n     * This method is like `_.xor` except that it accepts `iteratee` which is\n     * invoked for each element of each `arrays` to generate the criterion by\n     * which by which they're compared. The order of result values is determined\n     * by the order they occur in the arrays. The iteratee is invoked with one\n     * argument: (value).\n     *\n     * @static\n     * @memberOf _\n     * @since 4.0.0\n     * @category Array\n     * @param {...Array} [arrays] The arrays to inspect.\n     * @param {Function} [iteratee=_.identity] The iteratee invoked per element.\n     * @returns {Array} Returns the new array of filtered values.\n     * @example\n     *\n     * _.xorBy([2.1, 1.2], [2.3, 3.4], Math.floor);\n     * // => [1.2, 3.4]\n     *\n     * // The `_.property` iteratee shorthand.\n     * _.xorBy([{ 'x': 1 }], [{ 'x': 2 }, { 'x': 1 }], 'x');\n     * // => [{ 'x': 2 }]\n     */\n    var xorBy = baseRest(function(arrays) {\n      var iteratee = last(arrays);\n      if (isArrayLikeObject(iteratee)) {\n        iteratee = undefined;\n      }\n      return baseXor(arrayFilter(arrays, isArrayLikeObject), getIteratee(iteratee, 2));\n    });\n\n    /**\n     * This method is like `_.xor` except that it accepts `comparator` which is\n     * invoked to compare elements of `arrays`. The order of result values is\n     * determined by the order they occur in the arrays. The comparator is invoked\n     * with two arguments: (arrVal, othVal).\n     *\n     * @static\n     * @memberOf _\n     * @since 4.0.0\n     * @category Array\n     * @param {...Array} [arrays] The arrays to inspect.\n     * @param {Function} [comparator] The comparator invoked per element.\n     * @returns {Array} Returns the new array of filtered values.\n     * @example\n     *\n     * var objects = [{ 'x': 1, 'y': 2 }, { 'x': 2, 'y': 1 }];\n     * var others = [{ 'x': 1, 'y': 1 }, { 'x': 1, 'y': 2 }];\n     *\n     * _.xorWith(objects, others, _.isEqual);\n     * // => [{ 'x': 2, 'y': 1 }, { 'x': 1, 'y': 1 }]\n     */\n    var xorWith = baseRest(function(arrays) {\n      var comparator = last(arrays);\n      comparator = typeof comparator == 'function' ? comparator : undefined;\n      return baseXor(arrayFilter(arrays, isArrayLikeObject), undefined, comparator);\n    });\n\n    /**\n     * Creates an array of grouped elements, the first of which contains the\n     * first elements of the given arrays, the second of which contains the\n     * second elements of the given arrays, and so on.\n     *\n     * @static\n     * @memberOf _\n     * @since 0.1.0\n     * @category Array\n     * @param {...Array} [arrays] The arrays to process.\n     * @returns {Array} Returns the new array of grouped elements.\n     * @example\n     *\n     * _.zip(['a', 'b'], [1, 2], [true, false]);\n     * // => [['a', 1, true], ['b', 2, false]]\n     */\n    var zip = baseRest(unzip);\n\n    /**\n     * This method is like `_.fromPairs` except that it accepts two arrays,\n     * one of property identifiers and one of corresponding values.\n     *\n     * @static\n     * @memberOf _\n     * @since 0.4.0\n     * @category Array\n     * @param {Array} [props=[]] The property identifiers.\n     * @param {Array} [values=[]] The property values.\n     * @returns {Object} Returns the new object.\n     * @example\n     *\n     * _.zipObject(['a', 'b'], [1, 2]);\n     * // => { 'a': 1, 'b': 2 }\n     */\n    function zipObject(props, values) {\n      return baseZipObject(props || [], values || [], assignValue);\n    }\n\n    /**\n     * This method is like `_.zipObject` except that it supports property paths.\n     *\n     * @static\n     * @memberOf _\n     * @since 4.1.0\n     * @category Array\n     * @param {Array} [props=[]] The property identifiers.\n     * @param {Array} [values=[]] The property values.\n     * @returns {Object} Returns the new object.\n     * @example\n     *\n     * _.zipObjectDeep(['a.b[0].c', 'a.b[1].d'], [1, 2]);\n     * // => { 'a': { 'b': [{ 'c': 1 }, { 'd': 2 }] } }\n     */\n    function zipObjectDeep(props, values) {\n      return baseZipObject(props || [], values || [], baseSet);\n    }\n\n    /**\n     * This method is like `_.zip` except that it accepts `iteratee` to specify\n     * how grouped values should be combined. The iteratee is invoked with the\n     * elements of each group: (...group).\n     *\n     * @static\n     * @memberOf _\n     * @since 3.8.0\n     * @category Array\n     * @param {...Array} [arrays] The arrays to process.\n     * @param {Function} [iteratee=_.identity] The function to combine\n     *  grouped values.\n     * @returns {Array} Returns the new array of grouped elements.\n     * @example\n     *\n     * _.zipWith([1, 2], [10, 20], [100, 200], function(a, b, c) {\n     *   return a + b + c;\n     * });\n     * // => [111, 222]\n     */\n    var zipWith = baseRest(function(arrays) {\n      var length = arrays.length,\n          iteratee = length > 1 ? arrays[length - 1] : undefined;\n\n      iteratee = typeof iteratee == 'function' ? (arrays.pop(), iteratee) : undefined;\n      return unzipWith(arrays, iteratee);\n    });\n\n    /*------------------------------------------------------------------------*/\n\n    /**\n     * Creates a `lodash` wrapper instance that wraps `value` with explicit method\n     * chain sequences enabled. The result of such sequences must be unwrapped\n     * with `_#value`.\n     *\n     * @static\n     * @memberOf _\n     * @since 1.3.0\n     * @category Seq\n     * @param {*} value The value to wrap.\n     * @returns {Object} Returns the new `lodash` wrapper instance.\n     * @example\n     *\n     * var users = [\n     *   { 'user': 'barney',  'age': 36 },\n     *   { 'user': 'fred',    'age': 40 },\n     *   { 'user': 'pebbles', 'age': 1 }\n     * ];\n     *\n     * var youngest = _\n     *   .chain(users)\n     *   .sortBy('age')\n     *   .map(function(o) {\n     *     return o.user + ' is ' + o.age;\n     *   })\n     *   .head()\n     *   .value();\n     * // => 'pebbles is 1'\n     */\n    function chain(value) {\n      var result = lodash(value);\n      result.__chain__ = true;\n      return result;\n    }\n\n    /**\n     * This method invokes `interceptor` and returns `value`. The interceptor\n     * is invoked with one argument; (value). The purpose of this method is to\n     * \"tap into\" a method chain sequence in order to modify intermediate results.\n     *\n     * @static\n     * @memberOf _\n     * @since 0.1.0\n     * @category Seq\n     * @param {*} value The value to provide to `interceptor`.\n     * @param {Function} interceptor The function to invoke.\n     * @returns {*} Returns `value`.\n     * @example\n     *\n     * _([1, 2, 3])\n     *  .tap(function(array) {\n     *    // Mutate input array.\n     *    array.pop();\n     *  })\n     *  .reverse()\n     *  .value();\n     * // => [2, 1]\n     */\n    function tap(value, interceptor) {\n      interceptor(value);\n      return value;\n    }\n\n    /**\n     * This method is like `_.tap` except that it returns the result of `interceptor`.\n     * The purpose of this method is to \"pass thru\" values replacing intermediate\n     * results in a method chain sequence.\n     *\n     * @static\n     * @memberOf _\n     * @since 3.0.0\n     * @category Seq\n     * @param {*} value The value to provide to `interceptor`.\n     * @param {Function} interceptor The function to invoke.\n     * @returns {*} Returns the result of `interceptor`.\n     * @example\n     *\n     * _('  abc  ')\n     *  .chain()\n     *  .trim()\n     *  .thru(function(value) {\n     *    return [value];\n     *  })\n     *  .value();\n     * // => ['abc']\n     */\n    function thru(value, interceptor) {\n      return interceptor(value);\n    }\n\n    /**\n     * This method is the wrapper version of `_.at`.\n     *\n     * @name at\n     * @memberOf _\n     * @since 1.0.0\n     * @category Seq\n     * @param {...(string|string[])} [paths] The property paths to pick.\n     * @returns {Object} Returns the new `lodash` wrapper instance.\n     * @example\n     *\n     * var object = { 'a': [{ 'b': { 'c': 3 } }, 4] };\n     *\n     * _(object).at(['a[0].b.c', 'a[1]']).value();\n     * // => [3, 4]\n     */\n    var wrapperAt = flatRest(function(paths) {\n      var length = paths.length,\n          start = length ? paths[0] : 0,\n          value = this.__wrapped__,\n          interceptor = function(object) { return baseAt(object, paths); };\n\n      if (length > 1 || this.__actions__.length ||\n          !(value instanceof LazyWrapper) || !isIndex(start)) {\n        return this.thru(interceptor);\n      }\n      value = value.slice(start, +start + (length ? 1 : 0));\n      value.__actions__.push({\n        'func': thru,\n        'args': [interceptor],\n        'thisArg': undefined\n      });\n      return new LodashWrapper(value, this.__chain__).thru(function(array) {\n        if (length && !array.length) {\n          array.push(undefined);\n        }\n        return array;\n      });\n    });\n\n    /**\n     * Creates a `lodash` wrapper instance with explicit method chain sequences enabled.\n     *\n     * @name chain\n     * @memberOf _\n     * @since 0.1.0\n     * @category Seq\n     * @returns {Object} Returns the new `lodash` wrapper instance.\n     * @example\n     *\n     * var users = [\n     *   { 'user': 'barney', 'age': 36 },\n     *   { 'user': 'fred',   'age': 40 }\n     * ];\n     *\n     * // A sequence without explicit chaining.\n     * _(users).head();\n     * // => { 'user': 'barney', 'age': 36 }\n     *\n     * // A sequence with explicit chaining.\n     * _(users)\n     *   .chain()\n     *   .head()\n     *   .pick('user')\n     *   .value();\n     * // => { 'user': 'barney' }\n     */\n    function wrapperChain() {\n      return chain(this);\n    }\n\n    /**\n     * Executes the chain sequence and returns the wrapped result.\n     *\n     * @name commit\n     * @memberOf _\n     * @since 3.2.0\n     * @category Seq\n     * @returns {Object} Returns the new `lodash` wrapper instance.\n     * @example\n     *\n     * var array = [1, 2];\n     * var wrapped = _(array).push(3);\n     *\n     * console.log(array);\n     * // => [1, 2]\n     *\n     * wrapped = wrapped.commit();\n     * console.log(array);\n     * // => [1, 2, 3]\n     *\n     * wrapped.last();\n     * // => 3\n     *\n     * console.log(array);\n     * // => [1, 2, 3]\n     */\n    function wrapperCommit() {\n      return new LodashWrapper(this.value(), this.__chain__);\n    }\n\n    /**\n     * Gets the next value on a wrapped object following the\n     * [iterator protocol](https://mdn.io/iteration_protocols#iterator).\n     *\n     * @name next\n     * @memberOf _\n     * @since 4.0.0\n     * @category Seq\n     * @returns {Object} Returns the next iterator value.\n     * @example\n     *\n     * var wrapped = _([1, 2]);\n     *\n     * wrapped.next();\n     * // => { 'done': false, 'value': 1 }\n     *\n     * wrapped.next();\n     * // => { 'done': false, 'value': 2 }\n     *\n     * wrapped.next();\n     * // => { 'done': true, 'value': undefined }\n     */\n    function wrapperNext() {\n      if (this.__values__ === undefined) {\n        this.__values__ = toArray(this.value());\n      }\n      var done = this.__index__ >= this.__values__.length,\n          value = done ? undefined : this.__values__[this.__index__++];\n\n      return { 'done': done, 'value': value };\n    }\n\n    /**\n     * Enables the wrapper to be iterable.\n     *\n     * @name Symbol.iterator\n     * @memberOf _\n     * @since 4.0.0\n     * @category Seq\n     * @returns {Object} Returns the wrapper object.\n     * @example\n     *\n     * var wrapped = _([1, 2]);\n     *\n     * wrapped[Symbol.iterator]() === wrapped;\n     * // => true\n     *\n     * Array.from(wrapped);\n     * // => [1, 2]\n     */\n    function wrapperToIterator() {\n      return this;\n    }\n\n    /**\n     * Creates a clone of the chain sequence planting `value` as the wrapped value.\n     *\n     * @name plant\n     * @memberOf _\n     * @since 3.2.0\n     * @category Seq\n     * @param {*} value The value to plant.\n     * @returns {Object} Returns the new `lodash` wrapper instance.\n     * @example\n     *\n     * function square(n) {\n     *   return n * n;\n     * }\n     *\n     * var wrapped = _([1, 2]).map(square);\n     * var other = wrapped.plant([3, 4]);\n     *\n     * other.value();\n     * // => [9, 16]\n     *\n     * wrapped.value();\n     * // => [1, 4]\n     */\n    function wrapperPlant(value) {\n      var result,\n          parent = this;\n\n      while (parent instanceof baseLodash) {\n        var clone = wrapperClone(parent);\n        clone.__index__ = 0;\n        clone.__values__ = undefined;\n        if (result) {\n          previous.__wrapped__ = clone;\n        } else {\n          result = clone;\n        }\n        var previous = clone;\n        parent = parent.__wrapped__;\n      }\n      previous.__wrapped__ = value;\n      return result;\n    }\n\n    /**\n     * This method is the wrapper version of `_.reverse`.\n     *\n     * **Note:** This method mutates the wrapped array.\n     *\n     * @name reverse\n     * @memberOf _\n     * @since 0.1.0\n     * @category Seq\n     * @returns {Object} Returns the new `lodash` wrapper instance.\n     * @example\n     *\n     * var array = [1, 2, 3];\n     *\n     * _(array).reverse().value()\n     * // => [3, 2, 1]\n     *\n     * console.log(array);\n     * // => [3, 2, 1]\n     */\n    function wrapperReverse() {\n      var value = this.__wrapped__;\n      if (value instanceof LazyWrapper) {\n        var wrapped = value;\n        if (this.__actions__.length) {\n          wrapped = new LazyWrapper(this);\n        }\n        wrapped = wrapped.reverse();\n        wrapped.__actions__.push({\n          'func': thru,\n          'args': [reverse],\n          'thisArg': undefined\n        });\n        return new LodashWrapper(wrapped, this.__chain__);\n      }\n      return this.thru(reverse);\n    }\n\n    /**\n     * Executes the chain sequence to resolve the unwrapped value.\n     *\n     * @name value\n     * @memberOf _\n     * @since 0.1.0\n     * @alias toJSON, valueOf\n     * @category Seq\n     * @returns {*} Returns the resolved unwrapped value.\n     * @example\n     *\n     * _([1, 2, 3]).value();\n     * // => [1, 2, 3]\n     */\n    function wrapperValue() {\n      return baseWrapperValue(this.__wrapped__, this.__actions__);\n    }\n\n    /*------------------------------------------------------------------------*/\n\n    /**\n     * Creates an object composed of keys generated from the results of running\n     * each element of `collection` thru `iteratee`. The corresponding value of\n     * each key is the number of times the key was returned by `iteratee`. The\n     * iteratee is invoked with one argument: (value).\n     *\n     * @static\n     * @memberOf _\n     * @since 0.5.0\n     * @category Collection\n     * @param {Array|Object} collection The collection to iterate over.\n     * @param {Function} [iteratee=_.identity] The iteratee to transform keys.\n     * @returns {Object} Returns the composed aggregate object.\n     * @example\n     *\n     * _.countBy([6.1, 4.2, 6.3], Math.floor);\n     * // => { '4': 1, '6': 2 }\n     *\n     * // The `_.property` iteratee shorthand.\n     * _.countBy(['one', 'two', 'three'], 'length');\n     * // => { '3': 2, '5': 1 }\n     */\n    var countBy = createAggregator(function(result, value, key) {\n      if (hasOwnProperty.call(result, key)) {\n        ++result[key];\n      } else {\n        baseAssignValue(result, key, 1);\n      }\n    });\n\n    /**\n     * Checks if `predicate` returns truthy for **all** elements of `collection`.\n     * Iteration is stopped once `predicate` returns falsey. The predicate is\n     * invoked with three arguments: (value, index|key, collection).\n     *\n     * **Note:** This method returns `true` for\n     * [empty collections](https://en.wikipedia.org/wiki/Empty_set) because\n     * [everything is true](https://en.wikipedia.org/wiki/Vacuous_truth) of\n     * elements of empty collections.\n     *\n     * @static\n     * @memberOf _\n     * @since 0.1.0\n     * @category Collection\n     * @param {Array|Object} collection The collection to iterate over.\n     * @param {Function} [predicate=_.identity] The function invoked per iteration.\n     * @param- {Object} [guard] Enables use as an iteratee for methods like `_.map`.\n     * @returns {boolean} Returns `true` if all elements pass the predicate check,\n     *  else `false`.\n     * @example\n     *\n     * _.every([true, 1, null, 'yes'], Boolean);\n     * // => false\n     *\n     * var users = [\n     *   { 'user': 'barney', 'age': 36, 'active': false },\n     *   { 'user': 'fred',   'age': 40, 'active': false }\n     * ];\n     *\n     * // The `_.matches` iteratee shorthand.\n     * _.every(users, { 'user': 'barney', 'active': false });\n     * // => false\n     *\n     * // The `_.matchesProperty` iteratee shorthand.\n     * _.every(users, ['active', false]);\n     * // => true\n     *\n     * // The `_.property` iteratee shorthand.\n     * _.every(users, 'active');\n     * // => false\n     */\n    function every(collection, predicate, guard) {\n      var func = isArray(collection) ? arrayEvery : baseEvery;\n      if (guard && isIterateeCall(collection, predicate, guard)) {\n        predicate = undefined;\n      }\n      return func(collection, getIteratee(predicate, 3));\n    }\n\n    /**\n     * Iterates over elements of `collection`, returning an array of all elements\n     * `predicate` returns truthy for. The predicate is invoked with three\n     * arguments: (value, index|key, collection).\n     *\n     * **Note:** Unlike `_.remove`, this method returns a new array.\n     *\n     * @static\n     * @memberOf _\n     * @since 0.1.0\n     * @category Collection\n     * @param {Array|Object} collection The collection to iterate over.\n     * @param {Function} [predicate=_.identity] The function invoked per iteration.\n     * @returns {Array} Returns the new filtered array.\n     * @see _.reject\n     * @example\n     *\n     * var users = [\n     *   { 'user': 'barney', 'age': 36, 'active': true },\n     *   { 'user': 'fred',   'age': 40, 'active': false }\n     * ];\n     *\n     * _.filter(users, function(o) { return !o.active; });\n     * // => objects for ['fred']\n     *\n     * // The `_.matches` iteratee shorthand.\n     * _.filter(users, { 'age': 36, 'active': true });\n     * // => objects for ['barney']\n     *\n     * // The `_.matchesProperty` iteratee shorthand.\n     * _.filter(users, ['active', false]);\n     * // => objects for ['fred']\n     *\n     * // The `_.property` iteratee shorthand.\n     * _.filter(users, 'active');\n     * // => objects for ['barney']\n     */\n    function filter(collection, predicate) {\n      var func = isArray(collection) ? arrayFilter : baseFilter;\n      return func(collection, getIteratee(predicate, 3));\n    }\n\n    /**\n     * Iterates over elements of `collection`, returning the first element\n     * `predicate` returns truthy for. The predicate is invoked with three\n     * arguments: (value, index|key, collection).\n     *\n     * @static\n     * @memberOf _\n     * @since 0.1.0\n     * @category Collection\n     * @param {Array|Object} collection The collection to inspect.\n     * @param {Function} [predicate=_.identity] The function invoked per iteration.\n     * @param {number} [fromIndex=0] The index to search from.\n     * @returns {*} Returns the matched element, else `undefined`.\n     * @example\n     *\n     * var users = [\n     *   { 'user': 'barney',  'age': 36, 'active': true },\n     *   { 'user': 'fred',    'age': 40, 'active': false },\n     *   { 'user': 'pebbles', 'age': 1,  'active': true }\n     * ];\n     *\n     * _.find(users, function(o) { return o.age < 40; });\n     * // => object for 'barney'\n     *\n     * // The `_.matches` iteratee shorthand.\n     * _.find(users, { 'age': 1, 'active': true });\n     * // => object for 'pebbles'\n     *\n     * // The `_.matchesProperty` iteratee shorthand.\n     * _.find(users, ['active', false]);\n     * // => object for 'fred'\n     *\n     * // The `_.property` iteratee shorthand.\n     * _.find(users, 'active');\n     * // => object for 'barney'\n     */\n    var find = createFind(findIndex);\n\n    /**\n     * This method is like `_.find` except that it iterates over elements of\n     * `collection` from right to left.\n     *\n     * @static\n     * @memberOf _\n     * @since 2.0.0\n     * @category Collection\n     * @param {Array|Object} collection The collection to inspect.\n     * @param {Function} [predicate=_.identity] The function invoked per iteration.\n     * @param {number} [fromIndex=collection.length-1] The index to search from.\n     * @returns {*} Returns the matched element, else `undefined`.\n     * @example\n     *\n     * _.findLast([1, 2, 3, 4], function(n) {\n     *   return n % 2 == 1;\n     * });\n     * // => 3\n     */\n    var findLast = createFind(findLastIndex);\n\n    /**\n     * Creates a flattened array of values by running each element in `collection`\n     * thru `iteratee` and flattening the mapped results. The iteratee is invoked\n     * with three arguments: (value, index|key, collection).\n     *\n     * @static\n     * @memberOf _\n     * @since 4.0.0\n     * @category Collection\n     * @param {Array|Object} collection The collection to iterate over.\n     * @param {Function} [iteratee=_.identity] The function invoked per iteration.\n     * @returns {Array} Returns the new flattened array.\n     * @example\n     *\n     * function duplicate(n) {\n     *   return [n, n];\n     * }\n     *\n     * _.flatMap([1, 2], duplicate);\n     * // => [1, 1, 2, 2]\n     */\n    function flatMap(collection, iteratee) {\n      return baseFlatten(map(collection, iteratee), 1);\n    }\n\n    /**\n     * This method is like `_.flatMap` except that it recursively flattens the\n     * mapped results.\n     *\n     * @static\n     * @memberOf _\n     * @since 4.7.0\n     * @category Collection\n     * @param {Array|Object} collection The collection to iterate over.\n     * @param {Function} [iteratee=_.identity] The function invoked per iteration.\n     * @returns {Array} Returns the new flattened array.\n     * @example\n     *\n     * function duplicate(n) {\n     *   return [[[n, n]]];\n     * }\n     *\n     * _.flatMapDeep([1, 2], duplicate);\n     * // => [1, 1, 2, 2]\n     */\n    function flatMapDeep(collection, iteratee) {\n      return baseFlatten(map(collection, iteratee), INFINITY);\n    }\n\n    /**\n     * This method is like `_.flatMap` except that it recursively flattens the\n     * mapped results up to `depth` times.\n     *\n     * @static\n     * @memberOf _\n     * @since 4.7.0\n     * @category Collection\n     * @param {Array|Object} collection The collection to iterate over.\n     * @param {Function} [iteratee=_.identity] The function invoked per iteration.\n     * @param {number} [depth=1] The maximum recursion depth.\n     * @returns {Array} Returns the new flattened array.\n     * @example\n     *\n     * function duplicate(n) {\n     *   return [[[n, n]]];\n     * }\n     *\n     * _.flatMapDepth([1, 2], duplicate, 2);\n     * // => [[1, 1], [2, 2]]\n     */\n    function flatMapDepth(collection, iteratee, depth) {\n      depth = depth === undefined ? 1 : toInteger(depth);\n      return baseFlatten(map(collection, iteratee), depth);\n    }\n\n    /**\n     * Iterates over elements of `collection` and invokes `iteratee` for each element.\n     * The iteratee is invoked with three arguments: (value, index|key, collection).\n     * Iteratee functions may exit iteration early by explicitly returning `false`.\n     *\n     * **Note:** As with other \"Collections\" methods, objects with a \"length\"\n     * property are iterated like arrays. To avoid this behavior use `_.forIn`\n     * or `_.forOwn` for object iteration.\n     *\n     * @static\n     * @memberOf _\n     * @since 0.1.0\n     * @alias each\n     * @category Collection\n     * @param {Array|Object} collection The collection to iterate over.\n     * @param {Function} [iteratee=_.identity] The function invoked per iteration.\n     * @returns {Array|Object} Returns `collection`.\n     * @see _.forEachRight\n     * @example\n     *\n     * _.forEach([1, 2], function(value) {\n     *   console.log(value);\n     * });\n     * // => Logs `1` then `2`.\n     *\n     * _.forEach({ 'a': 1, 'b': 2 }, function(value, key) {\n     *   console.log(key);\n     * });\n     * // => Logs 'a' then 'b' (iteration order is not guaranteed).\n     */\n    function forEach(collection, iteratee) {\n      var func = isArray(collection) ? arrayEach : baseEach;\n      return func(collection, getIteratee(iteratee, 3));\n    }\n\n    /**\n     * This method is like `_.forEach` except that it iterates over elements of\n     * `collection` from right to left.\n     *\n     * @static\n     * @memberOf _\n     * @since 2.0.0\n     * @alias eachRight\n     * @category Collection\n     * @param {Array|Object} collection The collection to iterate over.\n     * @param {Function} [iteratee=_.identity] The function invoked per iteration.\n     * @returns {Array|Object} Returns `collection`.\n     * @see _.forEach\n     * @example\n     *\n     * _.forEachRight([1, 2], function(value) {\n     *   console.log(value);\n     * });\n     * // => Logs `2` then `1`.\n     */\n    function forEachRight(collection, iteratee) {\n      var func = isArray(collection) ? arrayEachRight : baseEachRight;\n      return func(collection, getIteratee(iteratee, 3));\n    }\n\n    /**\n     * Creates an object composed of keys generated from the results of running\n     * each element of `collection` thru `iteratee`. The order of grouped values\n     * is determined by the order they occur in `collection`. The corresponding\n     * value of each key is an array of elements responsible for generating the\n     * key. The iteratee is invoked with one argument: (value).\n     *\n     * @static\n     * @memberOf _\n     * @since 0.1.0\n     * @category Collection\n     * @param {Array|Object} collection The collection to iterate over.\n     * @param {Function} [iteratee=_.identity] The iteratee to transform keys.\n     * @returns {Object} Returns the composed aggregate object.\n     * @example\n     *\n     * _.groupBy([6.1, 4.2, 6.3], Math.floor);\n     * // => { '4': [4.2], '6': [6.1, 6.3] }\n     *\n     * // The `_.property` iteratee shorthand.\n     * _.groupBy(['one', 'two', 'three'], 'length');\n     * // => { '3': ['one', 'two'], '5': ['three'] }\n     */\n    var groupBy = createAggregator(function(result, value, key) {\n      if (hasOwnProperty.call(result, key)) {\n        result[key].push(value);\n      } else {\n        baseAssignValue(result, key, [value]);\n      }\n    });\n\n    /**\n     * Checks if `value` is in `collection`. If `collection` is a string, it's\n     * checked for a substring of `value`, otherwise\n     * [`SameValueZero`](http://ecma-international.org/ecma-262/7.0/#sec-samevaluezero)\n     * is used for equality comparisons. If `fromIndex` is negative, it's used as\n     * the offset from the end of `collection`.\n     *\n     * @static\n     * @memberOf _\n     * @since 0.1.0\n     * @category Collection\n     * @param {Array|Object|string} collection The collection to inspect.\n     * @param {*} value The value to search for.\n     * @param {number} [fromIndex=0] The index to search from.\n     * @param- {Object} [guard] Enables use as an iteratee for methods like `_.reduce`.\n     * @returns {boolean} Returns `true` if `value` is found, else `false`.\n     * @example\n     *\n     * _.includes([1, 2, 3], 1);\n     * // => true\n     *\n     * _.includes([1, 2, 3], 1, 2);\n     * // => false\n     *\n     * _.includes({ 'a': 1, 'b': 2 }, 1);\n     * // => true\n     *\n     * _.includes('abcd', 'bc');\n     * // => true\n     */\n    function includes(collection, value, fromIndex, guard) {\n      collection = isArrayLike(collection) ? collection : values(collection);\n      fromIndex = (fromIndex && !guard) ? toInteger(fromIndex) : 0;\n\n      var length = collection.length;\n      if (fromIndex < 0) {\n        fromIndex = nativeMax(length + fromIndex, 0);\n      }\n      return isString(collection)\n        ? (fromIndex <= length && collection.indexOf(value, fromIndex) > -1)\n        : (!!length && baseIndexOf(collection, value, fromIndex) > -1);\n    }\n\n    /**\n     * Invokes the method at `path` of each element in `collection`, returning\n     * an array of the results of each invoked method. Any additional arguments\n     * are provided to each invoked method. If `path` is a function, it's invoked\n     * for, and `this` bound to, each element in `collection`.\n     *\n     * @static\n     * @memberOf _\n     * @since 4.0.0\n     * @category Collection\n     * @param {Array|Object} collection The collection to iterate over.\n     * @param {Array|Function|string} path The path of the method to invoke or\n     *  the function invoked per iteration.\n     * @param {...*} [args] The arguments to invoke each method with.\n     * @returns {Array} Returns the array of results.\n     * @example\n     *\n     * _.invokeMap([[5, 1, 7], [3, 2, 1]], 'sort');\n     * // => [[1, 5, 7], [1, 2, 3]]\n     *\n     * _.invokeMap([123, 456], String.prototype.split, '');\n     * // => [['1', '2', '3'], ['4', '5', '6']]\n     */\n    var invokeMap = baseRest(function(collection, path, args) {\n      var index = -1,\n          isFunc = typeof path == 'function',\n          result = isArrayLike(collection) ? Array(collection.length) : [];\n\n      baseEach(collection, function(value) {\n        result[++index] = isFunc ? apply(path, value, args) : baseInvoke(value, path, args);\n      });\n      return result;\n    });\n\n    /**\n     * Creates an object composed of keys generated from the results of running\n     * each element of `collection` thru `iteratee`. The corresponding value of\n     * each key is the last element responsible for generating the key. The\n     * iteratee is invoked with one argument: (value).\n     *\n     * @static\n     * @memberOf _\n     * @since 4.0.0\n     * @category Collection\n     * @param {Array|Object} collection The collection to iterate over.\n     * @param {Function} [iteratee=_.identity] The iteratee to transform keys.\n     * @returns {Object} Returns the composed aggregate object.\n     * @example\n     *\n     * var array = [\n     *   { 'dir': 'left', 'code': 97 },\n     *   { 'dir': 'right', 'code': 100 }\n     * ];\n     *\n     * _.keyBy(array, function(o) {\n     *   return String.fromCharCode(o.code);\n     * });\n     * // => { 'a': { 'dir': 'left', 'code': 97 }, 'd': { 'dir': 'right', 'code': 100 } }\n     *\n     * _.keyBy(array, 'dir');\n     * // => { 'left': { 'dir': 'left', 'code': 97 }, 'right': { 'dir': 'right', 'code': 100 } }\n     */\n    var keyBy = createAggregator(function(result, value, key) {\n      baseAssignValue(result, key, value);\n    });\n\n    /**\n     * Creates an array of values by running each element in `collection` thru\n     * `iteratee`. The iteratee is invoked with three arguments:\n     * (value, index|key, collection).\n     *\n     * Many lodash methods are guarded to work as iteratees for methods like\n     * `_.every`, `_.filter`, `_.map`, `_.mapValues`, `_.reject`, and `_.some`.\n     *\n     * The guarded methods are:\n     * `ary`, `chunk`, `curry`, `curryRight`, `drop`, `dropRight`, `every`,\n     * `fill`, `invert`, `parseInt`, `random`, `range`, `rangeRight`, `repeat`,\n     * `sampleSize`, `slice`, `some`, `sortBy`, `split`, `take`, `takeRight`,\n     * `template`, `trim`, `trimEnd`, `trimStart`, and `words`\n     *\n     * @static\n     * @memberOf _\n     * @since 0.1.0\n     * @category Collection\n     * @param {Array|Object} collection The collection to iterate over.\n     * @param {Function} [iteratee=_.identity] The function invoked per iteration.\n     * @returns {Array} Returns the new mapped array.\n     * @example\n     *\n     * function square(n) {\n     *   return n * n;\n     * }\n     *\n     * _.map([4, 8], square);\n     * // => [16, 64]\n     *\n     * _.map({ 'a': 4, 'b': 8 }, square);\n     * // => [16, 64] (iteration order is not guaranteed)\n     *\n     * var users = [\n     *   { 'user': 'barney' },\n     *   { 'user': 'fred' }\n     * ];\n     *\n     * // The `_.property` iteratee shorthand.\n     * _.map(users, 'user');\n     * // => ['barney', 'fred']\n     */\n    function map(collection, iteratee) {\n      var func = isArray(collection) ? arrayMap : baseMap;\n      return func(collection, getIteratee(iteratee, 3));\n    }\n\n    /**\n     * This method is like `_.sortBy` except that it allows specifying the sort\n     * orders of the iteratees to sort by. If `orders` is unspecified, all values\n     * are sorted in ascending order. Otherwise, specify an order of \"desc\" for\n     * descending or \"asc\" for ascending sort order of corresponding values.\n     *\n     * @static\n     * @memberOf _\n     * @since 4.0.0\n     * @category Collection\n     * @param {Array|Object} collection The collection to iterate over.\n     * @param {Array[]|Function[]|Object[]|string[]} [iteratees=[_.identity]]\n     *  The iteratees to sort by.\n     * @param {string[]} [orders] The sort orders of `iteratees`.\n     * @param- {Object} [guard] Enables use as an iteratee for methods like `_.reduce`.\n     * @returns {Array} Returns the new sorted array.\n     * @example\n     *\n     * var users = [\n     *   { 'user': 'fred',   'age': 48 },\n     *   { 'user': 'barney', 'age': 34 },\n     *   { 'user': 'fred',   'age': 40 },\n     *   { 'user': 'barney', 'age': 36 }\n     * ];\n     *\n     * // Sort by `user` in ascending order and by `age` in descending order.\n     * _.orderBy(users, ['user', 'age'], ['asc', 'desc']);\n     * // => objects for [['barney', 36], ['barney', 34], ['fred', 48], ['fred', 40]]\n     */\n    function orderBy(collection, iteratees, orders, guard) {\n      if (collection == null) {\n        return [];\n      }\n      if (!isArray(iteratees)) {\n        iteratees = iteratees == null ? [] : [iteratees];\n      }\n      orders = guard ? undefined : orders;\n      if (!isArray(orders)) {\n        orders = orders == null ? [] : [orders];\n      }\n      return baseOrderBy(collection, iteratees, orders);\n    }\n\n    /**\n     * Creates an array of elements split into two groups, the first of which\n     * contains elements `predicate` returns truthy for, the second of which\n     * contains elements `predicate` returns falsey for. The predicate is\n     * invoked with one argument: (value).\n     *\n     * @static\n     * @memberOf _\n     * @since 3.0.0\n     * @category Collection\n     * @param {Array|Object} collection The collection to iterate over.\n     * @param {Function} [predicate=_.identity] The function invoked per iteration.\n     * @returns {Array} Returns the array of grouped elements.\n     * @example\n     *\n     * var users = [\n     *   { 'user': 'barney',  'age': 36, 'active': false },\n     *   { 'user': 'fred',    'age': 40, 'active': true },\n     *   { 'user': 'pebbles', 'age': 1,  'active': false }\n     * ];\n     *\n     * _.partition(users, function(o) { return o.active; });\n     * // => objects for [['fred'], ['barney', 'pebbles']]\n     *\n     * // The `_.matches` iteratee shorthand.\n     * _.partition(users, { 'age': 1, 'active': false });\n     * // => objects for [['pebbles'], ['barney', 'fred']]\n     *\n     * // The `_.matchesProperty` iteratee shorthand.\n     * _.partition(users, ['active', false]);\n     * // => objects for [['barney', 'pebbles'], ['fred']]\n     *\n     * // The `_.property` iteratee shorthand.\n     * _.partition(users, 'active');\n     * // => objects for [['fred'], ['barney', 'pebbles']]\n     */\n    var partition = createAggregator(function(result, value, key) {\n      result[key ? 0 : 1].push(value);\n    }, function() { return [[], []]; });\n\n    /**\n     * Reduces `collection` to a value which is the accumulated result of running\n     * each element in `collection` thru `iteratee`, where each successive\n     * invocation is supplied the return value of the previous. If `accumulator`\n     * is not given, the first element of `collection` is used as the initial\n     * value. The iteratee is invoked with four arguments:\n     * (accumulator, value, index|key, collection).\n     *\n     * Many lodash methods are guarded to work as iteratees for methods like\n     * `_.reduce`, `_.reduceRight`, and `_.transform`.\n     *\n     * The guarded methods are:\n     * `assign`, `defaults`, `defaultsDeep`, `includes`, `merge`, `orderBy`,\n     * and `sortBy`\n     *\n     * @static\n     * @memberOf _\n     * @since 0.1.0\n     * @category Collection\n     * @param {Array|Object} collection The collection to iterate over.\n     * @param {Function} [iteratee=_.identity] The function invoked per iteration.\n     * @param {*} [accumulator] The initial value.\n     * @returns {*} Returns the accumulated value.\n     * @see _.reduceRight\n     * @example\n     *\n     * _.reduce([1, 2], function(sum, n) {\n     *   return sum + n;\n     * }, 0);\n     * // => 3\n     *\n     * _.reduce({ 'a': 1, 'b': 2, 'c': 1 }, function(result, value, key) {\n     *   (result[value] || (result[value] = [])).push(key);\n     *   return result;\n     * }, {});\n     * // => { '1': ['a', 'c'], '2': ['b'] } (iteration order is not guaranteed)\n     */\n    function reduce(collection, iteratee, accumulator) {\n      var func = isArray(collection) ? arrayReduce : baseReduce,\n          initAccum = arguments.length < 3;\n\n      return func(collection, getIteratee(iteratee, 4), accumulator, initAccum, baseEach);\n    }\n\n    /**\n     * This method is like `_.reduce` except that it iterates over elements of\n     * `collection` from right to left.\n     *\n     * @static\n     * @memberOf _\n     * @since 0.1.0\n     * @category Collection\n     * @param {Array|Object} collection The collection to iterate over.\n     * @param {Function} [iteratee=_.identity] The function invoked per iteration.\n     * @param {*} [accumulator] The initial value.\n     * @returns {*} Returns the accumulated value.\n     * @see _.reduce\n     * @example\n     *\n     * var array = [[0, 1], [2, 3], [4, 5]];\n     *\n     * _.reduceRight(array, function(flattened, other) {\n     *   return flattened.concat(other);\n     * }, []);\n     * // => [4, 5, 2, 3, 0, 1]\n     */\n    function reduceRight(collection, iteratee, accumulator) {\n      var func = isArray(collection) ? arrayReduceRight : baseReduce,\n          initAccum = arguments.length < 3;\n\n      return func(collection, getIteratee(iteratee, 4), accumulator, initAccum, baseEachRight);\n    }\n\n    /**\n     * The opposite of `_.filter`; this method returns the elements of `collection`\n     * that `predicate` does **not** return truthy for.\n     *\n     * @static\n     * @memberOf _\n     * @since 0.1.0\n     * @category Collection\n     * @param {Array|Object} collection The collection to iterate over.\n     * @param {Function} [predicate=_.identity] The function invoked per iteration.\n     * @returns {Array} Returns the new filtered array.\n     * @see _.filter\n     * @example\n     *\n     * var users = [\n     *   { 'user': 'barney', 'age': 36, 'active': false },\n     *   { 'user': 'fred',   'age': 40, 'active': true }\n     * ];\n     *\n     * _.reject(users, function(o) { return !o.active; });\n     * // => objects for ['fred']\n     *\n     * // The `_.matches` iteratee shorthand.\n     * _.reject(users, { 'age': 40, 'active': true });\n     * // => objects for ['barney']\n     *\n     * // The `_.matchesProperty` iteratee shorthand.\n     * _.reject(users, ['active', false]);\n     * // => objects for ['fred']\n     *\n     * // The `_.property` iteratee shorthand.\n     * _.reject(users, 'active');\n     * // => objects for ['barney']\n     */\n    function reject(collection, predicate) {\n      var func = isArray(collection) ? arrayFilter : baseFilter;\n      return func(collection, negate(getIteratee(predicate, 3)));\n    }\n\n    /**\n     * Gets a random element from `collection`.\n     *\n     * @static\n     * @memberOf _\n     * @since 2.0.0\n     * @category Collection\n     * @param {Array|Object} collection The collection to sample.\n     * @returns {*} Returns the random element.\n     * @example\n     *\n     * _.sample([1, 2, 3, 4]);\n     * // => 2\n     */\n    function sample(collection) {\n      var func = isArray(collection) ? arraySample : baseSample;\n      return func(collection);\n    }\n\n    /**\n     * Gets `n` random elements at unique keys from `collection` up to the\n     * size of `collection`.\n     *\n     * @static\n     * @memberOf _\n     * @since 4.0.0\n     * @category Collection\n     * @param {Array|Object} collection The collection to sample.\n     * @param {number} [n=1] The number of elements to sample.\n     * @param- {Object} [guard] Enables use as an iteratee for methods like `_.map`.\n     * @returns {Array} Returns the random elements.\n     * @example\n     *\n     * _.sampleSize([1, 2, 3], 2);\n     * // => [3, 1]\n     *\n     * _.sampleSize([1, 2, 3], 4);\n     * // => [2, 3, 1]\n     */\n    function sampleSize(collection, n, guard) {\n      if ((guard ? isIterateeCall(collection, n, guard) : n === undefined)) {\n        n = 1;\n      } else {\n        n = toInteger(n);\n      }\n      var func = isArray(collection) ? arraySampleSize : baseSampleSize;\n      return func(collection, n);\n    }\n\n    /**\n     * Creates an array of shuffled values, using a version of the\n     * [Fisher-Yates shuffle](https://en.wikipedia.org/wiki/Fisher-Yates_shuffle).\n     *\n     * @static\n     * @memberOf _\n     * @since 0.1.0\n     * @category Collection\n     * @param {Array|Object} collection The collection to shuffle.\n     * @returns {Array} Returns the new shuffled array.\n     * @example\n     *\n     * _.shuffle([1, 2, 3, 4]);\n     * // => [4, 1, 3, 2]\n     */\n    function shuffle(collection) {\n      var func = isArray(collection) ? arrayShuffle : baseShuffle;\n      return func(collection);\n    }\n\n    /**\n     * Gets the size of `collection` by returning its length for array-like\n     * values or the number of own enumerable string keyed properties for objects.\n     *\n     * @static\n     * @memberOf _\n     * @since 0.1.0\n     * @category Collection\n     * @param {Array|Object|string} collection The collection to inspect.\n     * @returns {number} Returns the collection size.\n     * @example\n     *\n     * _.size([1, 2, 3]);\n     * // => 3\n     *\n     * _.size({ 'a': 1, 'b': 2 });\n     * // => 2\n     *\n     * _.size('pebbles');\n     * // => 7\n     */\n    function size(collection) {\n      if (collection == null) {\n        return 0;\n      }\n      if (isArrayLike(collection)) {\n        return isString(collection) ? stringSize(collection) : collection.length;\n      }\n      var tag = getTag(collection);\n      if (tag == mapTag || tag == setTag) {\n        return collection.size;\n      }\n      return baseKeys(collection).length;\n    }\n\n    /**\n     * Checks if `predicate` returns truthy for **any** element of `collection`.\n     * Iteration is stopped once `predicate` returns truthy. The predicate is\n     * invoked with three arguments: (value, index|key, collection).\n     *\n     * @static\n     * @memberOf _\n     * @since 0.1.0\n     * @category Collection\n     * @param {Array|Object} collection The collection to iterate over.\n     * @param {Function} [predicate=_.identity] The function invoked per iteration.\n     * @param- {Object} [guard] Enables use as an iteratee for methods like `_.map`.\n     * @returns {boolean} Returns `true` if any element passes the predicate check,\n     *  else `false`.\n     * @example\n     *\n     * _.some([null, 0, 'yes', false], Boolean);\n     * // => true\n     *\n     * var users = [\n     *   { 'user': 'barney', 'active': true },\n     *   { 'user': 'fred',   'active': false }\n     * ];\n     *\n     * // The `_.matches` iteratee shorthand.\n     * _.some(users, { 'user': 'barney', 'active': false });\n     * // => false\n     *\n     * // The `_.matchesProperty` iteratee shorthand.\n     * _.some(users, ['active', false]);\n     * // => true\n     *\n     * // The `_.property` iteratee shorthand.\n     * _.some(users, 'active');\n     * // => true\n     */\n    function some(collection, predicate, guard) {\n      var func = isArray(collection) ? arraySome : baseSome;\n      if (guard && isIterateeCall(collection, predicate, guard)) {\n        predicate = undefined;\n      }\n      return func(collection, getIteratee(predicate, 3));\n    }\n\n    /**\n     * Creates an array of elements, sorted in ascending order by the results of\n     * running each element in a collection thru each iteratee. This method\n     * performs a stable sort, that is, it preserves the original sort order of\n     * equal elements. The iteratees are invoked with one argument: (value).\n     *\n     * @static\n     * @memberOf _\n     * @since 0.1.0\n     * @category Collection\n     * @param {Array|Object} collection The collection to iterate over.\n     * @param {...(Function|Function[])} [iteratees=[_.identity]]\n     *  The iteratees to sort by.\n     * @returns {Array} Returns the new sorted array.\n     * @example\n     *\n     * var users = [\n     *   { 'user': 'fred',   'age': 48 },\n     *   { 'user': 'barney', 'age': 36 },\n     *   { 'user': 'fred',   'age': 40 },\n     *   { 'user': 'barney', 'age': 34 }\n     * ];\n     *\n     * _.sortBy(users, [function(o) { return o.user; }]);\n     * // => objects for [['barney', 36], ['barney', 34], ['fred', 48], ['fred', 40]]\n     *\n     * _.sortBy(users, ['user', 'age']);\n     * // => objects for [['barney', 34], ['barney', 36], ['fred', 40], ['fred', 48]]\n     */\n    var sortBy = baseRest(function(collection, iteratees) {\n      if (collection == null) {\n        return [];\n      }\n      var length = iteratees.length;\n      if (length > 1 && isIterateeCall(collection, iteratees[0], iteratees[1])) {\n        iteratees = [];\n      } else if (length > 2 && isIterateeCall(iteratees[0], iteratees[1], iteratees[2])) {\n        iteratees = [iteratees[0]];\n      }\n      return baseOrderBy(collection, baseFlatten(iteratees, 1), []);\n    });\n\n    /*------------------------------------------------------------------------*/\n\n    /**\n     * Gets the timestamp of the number of milliseconds that have elapsed since\n     * the Unix epoch (1 January 1970 00:00:00 UTC).\n     *\n     * @static\n     * @memberOf _\n     * @since 2.4.0\n     * @category Date\n     * @returns {number} Returns the timestamp.\n     * @example\n     *\n     * _.defer(function(stamp) {\n     *   console.log(_.now() - stamp);\n     * }, _.now());\n     * // => Logs the number of milliseconds it took for the deferred invocation.\n     */\n    var now = ctxNow || function() {\n      return root.Date.now();\n    };\n\n    /*------------------------------------------------------------------------*/\n\n    /**\n     * The opposite of `_.before`; this method creates a function that invokes\n     * `func` once it's called `n` or more times.\n     *\n     * @static\n     * @memberOf _\n     * @since 0.1.0\n     * @category Function\n     * @param {number} n The number of calls before `func` is invoked.\n     * @param {Function} func The function to restrict.\n     * @returns {Function} Returns the new restricted function.\n     * @example\n     *\n     * var saves = ['profile', 'settings'];\n     *\n     * var done = _.after(saves.length, function() {\n     *   console.log('done saving!');\n     * });\n     *\n     * _.forEach(saves, function(type) {\n     *   asyncSave({ 'type': type, 'complete': done });\n     * });\n     * // => Logs 'done saving!' after the two async saves have completed.\n     */\n    function after(n, func) {\n      if (typeof func != 'function') {\n        throw new TypeError(FUNC_ERROR_TEXT);\n      }\n      n = toInteger(n);\n      return function() {\n        if (--n < 1) {\n          return func.apply(this, arguments);\n        }\n      };\n    }\n\n    /**\n     * Creates a function that invokes `func`, with up to `n` arguments,\n     * ignoring any additional arguments.\n     *\n     * @static\n     * @memberOf _\n     * @since 3.0.0\n     * @category Function\n     * @param {Function} func The function to cap arguments for.\n     * @param {number} [n=func.length] The arity cap.\n     * @param- {Object} [guard] Enables use as an iteratee for methods like `_.map`.\n     * @returns {Function} Returns the new capped function.\n     * @example\n     *\n     * _.map(['6', '8', '10'], _.ary(parseInt, 1));\n     * // => [6, 8, 10]\n     */\n    function ary(func, n, guard) {\n      n = guard ? undefined : n;\n      n = (func && n == null) ? func.length : n;\n      return createWrap(func, WRAP_ARY_FLAG, undefined, undefined, undefined, undefined, n);\n    }\n\n    /**\n     * Creates a function that invokes `func`, with the `this` binding and arguments\n     * of the created function, while it's called less than `n` times. Subsequent\n     * calls to the created function return the result of the last `func` invocation.\n     *\n     * @static\n     * @memberOf _\n     * @since 3.0.0\n     * @category Function\n     * @param {number} n The number of calls at which `func` is no longer invoked.\n     * @param {Function} func The function to restrict.\n     * @returns {Function} Returns the new restricted function.\n     * @example\n     *\n     * jQuery(element).on('click', _.before(5, addContactToList));\n     * // => Allows adding up to 4 contacts to the list.\n     */\n    function before(n, func) {\n      var result;\n      if (typeof func != 'function') {\n        throw new TypeError(FUNC_ERROR_TEXT);\n      }\n      n = toInteger(n);\n      return function() {\n        if (--n > 0) {\n          result = func.apply(this, arguments);\n        }\n        if (n <= 1) {\n          func = undefined;\n        }\n        return result;\n      };\n    }\n\n    /**\n     * Creates a function that invokes `func` with the `this` binding of `thisArg`\n     * and `partials` prepended to the arguments it receives.\n     *\n     * The `_.bind.placeholder` value, which defaults to `_` in monolithic builds,\n     * may be used as a placeholder for partially applied arguments.\n     *\n     * **Note:** Unlike native `Function#bind`, this method doesn't set the \"length\"\n     * property of bound functions.\n     *\n     * @static\n     * @memberOf _\n     * @since 0.1.0\n     * @category Function\n     * @param {Function} func The function to bind.\n     * @param {*} thisArg The `this` binding of `func`.\n     * @param {...*} [partials] The arguments to be partially applied.\n     * @returns {Function} Returns the new bound function.\n     * @example\n     *\n     * function greet(greeting, punctuation) {\n     *   return greeting + ' ' + this.user + punctuation;\n     * }\n     *\n     * var object = { 'user': 'fred' };\n     *\n     * var bound = _.bind(greet, object, 'hi');\n     * bound('!');\n     * // => 'hi fred!'\n     *\n     * // Bound with placeholders.\n     * var bound = _.bind(greet, object, _, '!');\n     * bound('hi');\n     * // => 'hi fred!'\n     */\n    var bind = baseRest(function(func, thisArg, partials) {\n      var bitmask = WRAP_BIND_FLAG;\n      if (partials.length) {\n        var holders = replaceHolders(partials, getHolder(bind));\n        bitmask |= WRAP_PARTIAL_FLAG;\n      }\n      return createWrap(func, bitmask, thisArg, partials, holders);\n    });\n\n    /**\n     * Creates a function that invokes the method at `object[key]` with `partials`\n     * prepended to the arguments it receives.\n     *\n     * This method differs from `_.bind` by allowing bound functions to reference\n     * methods that may be redefined or don't yet exist. See\n     * [Peter Michaux's article](http://peter.michaux.ca/articles/lazy-function-definition-pattern)\n     * for more details.\n     *\n     * The `_.bindKey.placeholder` value, which defaults to `_` in monolithic\n     * builds, may be used as a placeholder for partially applied arguments.\n     *\n     * @static\n     * @memberOf _\n     * @since 0.10.0\n     * @category Function\n     * @param {Object} object The object to invoke the method on.\n     * @param {string} key The key of the method.\n     * @param {...*} [partials] The arguments to be partially applied.\n     * @returns {Function} Returns the new bound function.\n     * @example\n     *\n     * var object = {\n     *   'user': 'fred',\n     *   'greet': function(greeting, punctuation) {\n     *     return greeting + ' ' + this.user + punctuation;\n     *   }\n     * };\n     *\n     * var bound = _.bindKey(object, 'greet', 'hi');\n     * bound('!');\n     * // => 'hi fred!'\n     *\n     * object.greet = function(greeting, punctuation) {\n     *   return greeting + 'ya ' + this.user + punctuation;\n     * };\n     *\n     * bound('!');\n     * // => 'hiya fred!'\n     *\n     * // Bound with placeholders.\n     * var bound = _.bindKey(object, 'greet', _, '!');\n     * bound('hi');\n     * // => 'hiya fred!'\n     */\n    var bindKey = baseRest(function(object, key, partials) {\n      var bitmask = WRAP_BIND_FLAG | WRAP_BIND_KEY_FLAG;\n      if (partials.length) {\n        var holders = replaceHolders(partials, getHolder(bindKey));\n        bitmask |= WRAP_PARTIAL_FLAG;\n      }\n      return createWrap(key, bitmask, object, partials, holders);\n    });\n\n    /**\n     * Creates a function that accepts arguments of `func` and either invokes\n     * `func` returning its result, if at least `arity` number of arguments have\n     * been provided, or returns a function that accepts the remaining `func`\n     * arguments, and so on. The arity of `func` may be specified if `func.length`\n     * is not sufficient.\n     *\n     * The `_.curry.placeholder` value, which defaults to `_` in monolithic builds,\n     * may be used as a placeholder for provided arguments.\n     *\n     * **Note:** This method doesn't set the \"length\" property of curried functions.\n     *\n     * @static\n     * @memberOf _\n     * @since 2.0.0\n     * @category Function\n     * @param {Function} func The function to curry.\n     * @param {number} [arity=func.length] The arity of `func`.\n     * @param- {Object} [guard] Enables use as an iteratee for methods like `_.map`.\n     * @returns {Function} Returns the new curried function.\n     * @example\n     *\n     * var abc = function(a, b, c) {\n     *   return [a, b, c];\n     * };\n     *\n     * var curried = _.curry(abc);\n     *\n     * curried(1)(2)(3);\n     * // => [1, 2, 3]\n     *\n     * curried(1, 2)(3);\n     * // => [1, 2, 3]\n     *\n     * curried(1, 2, 3);\n     * // => [1, 2, 3]\n     *\n     * // Curried with placeholders.\n     * curried(1)(_, 3)(2);\n     * // => [1, 2, 3]\n     */\n    function curry(func, arity, guard) {\n      arity = guard ? undefined : arity;\n      var result = createWrap(func, WRAP_CURRY_FLAG, undefined, undefined, undefined, undefined, undefined, arity);\n      result.placeholder = curry.placeholder;\n      return result;\n    }\n\n    /**\n     * This method is like `_.curry` except that arguments are applied to `func`\n     * in the manner of `_.partialRight` instead of `_.partial`.\n     *\n     * The `_.curryRight.placeholder` value, which defaults to `_` in monolithic\n     * builds, may be used as a placeholder for provided arguments.\n     *\n     * **Note:** This method doesn't set the \"length\" property of curried functions.\n     *\n     * @static\n     * @memberOf _\n     * @since 3.0.0\n     * @category Function\n     * @param {Function} func The function to curry.\n     * @param {number} [arity=func.length] The arity of `func`.\n     * @param- {Object} [guard] Enables use as an iteratee for methods like `_.map`.\n     * @returns {Function} Returns the new curried function.\n     * @example\n     *\n     * var abc = function(a, b, c) {\n     *   return [a, b, c];\n     * };\n     *\n     * var curried = _.curryRight(abc);\n     *\n     * curried(3)(2)(1);\n     * // => [1, 2, 3]\n     *\n     * curried(2, 3)(1);\n     * // => [1, 2, 3]\n     *\n     * curried(1, 2, 3);\n     * // => [1, 2, 3]\n     *\n     * // Curried with placeholders.\n     * curried(3)(1, _)(2);\n     * // => [1, 2, 3]\n     */\n    function curryRight(func, arity, guard) {\n      arity = guard ? undefined : arity;\n      var result = createWrap(func, WRAP_CURRY_RIGHT_FLAG, undefined, undefined, undefined, undefined, undefined, arity);\n      result.placeholder = curryRight.placeholder;\n      return result;\n    }\n\n    /**\n     * Creates a debounced function that delays invoking `func` until after `wait`\n     * milliseconds have elapsed since the last time the debounced function was\n     * invoked. The debounced function comes with a `cancel` method to cancel\n     * delayed `func` invocations and a `flush` method to immediately invoke them.\n     * Provide `options` to indicate whether `func` should be invoked on the\n     * leading and/or trailing edge of the `wait` timeout. The `func` is invoked\n     * with the last arguments provided to the debounced function. Subsequent\n     * calls to the debounced function return the result of the last `func`\n     * invocation.\n     *\n     * **Note:** If `leading` and `trailing` options are `true`, `func` is\n     * invoked on the trailing edge of the timeout only if the debounced function\n     * is invoked more than once during the `wait` timeout.\n     *\n     * If `wait` is `0` and `leading` is `false`, `func` invocation is deferred\n     * until to the next tick, similar to `setTimeout` with a timeout of `0`.\n     *\n     * See [David Corbacho's article](https://css-tricks.com/debouncing-throttling-explained-examples/)\n     * for details over the differences between `_.debounce` and `_.throttle`.\n     *\n     * @static\n     * @memberOf _\n     * @since 0.1.0\n     * @category Function\n     * @param {Function} func The function to debounce.\n     * @param {number} [wait=0] The number of milliseconds to delay.\n     * @param {Object} [options={}] The options object.\n     * @param {boolean} [options.leading=false]\n     *  Specify invoking on the leading edge of the timeout.\n     * @param {number} [options.maxWait]\n     *  The maximum time `func` is allowed to be delayed before it's invoked.\n     * @param {boolean} [options.trailing=true]\n     *  Specify invoking on the trailing edge of the timeout.\n     * @returns {Function} Returns the new debounced function.\n     * @example\n     *\n     * // Avoid costly calculations while the window size is in flux.\n     * jQuery(window).on('resize', _.debounce(calculateLayout, 150));\n     *\n     * // Invoke `sendMail` when clicked, debouncing subsequent calls.\n     * jQuery(element).on('click', _.debounce(sendMail, 300, {\n     *   'leading': true,\n     *   'trailing': false\n     * }));\n     *\n     * // Ensure `batchLog` is invoked once after 1 second of debounced calls.\n     * var debounced = _.debounce(batchLog, 250, { 'maxWait': 1000 });\n     * var source = new EventSource('/stream');\n     * jQuery(source).on('message', debounced);\n     *\n     * // Cancel the trailing debounced invocation.\n     * jQuery(window).on('popstate', debounced.cancel);\n     */\n    function debounce(func, wait, options) {\n      var lastArgs,\n          lastThis,\n          maxWait,\n          result,\n          timerId,\n          lastCallTime,\n          lastInvokeTime = 0,\n          leading = false,\n          maxing = false,\n          trailing = true;\n\n      if (typeof func != 'function') {\n        throw new TypeError(FUNC_ERROR_TEXT);\n      }\n      wait = toNumber(wait) || 0;\n      if (isObject(options)) {\n        leading = !!options.leading;\n        maxing = 'maxWait' in options;\n        maxWait = maxing ? nativeMax(toNumber(options.maxWait) || 0, wait) : maxWait;\n        trailing = 'trailing' in options ? !!options.trailing : trailing;\n      }\n\n      function invokeFunc(time) {\n        var args = lastArgs,\n            thisArg = lastThis;\n\n        lastArgs = lastThis = undefined;\n        lastInvokeTime = time;\n        result = func.apply(thisArg, args);\n        return result;\n      }\n\n      function leadingEdge(time) {\n        // Reset any `maxWait` timer.\n        lastInvokeTime = time;\n        // Start the timer for the trailing edge.\n        timerId = setTimeout(timerExpired, wait);\n        // Invoke the leading edge.\n        return leading ? invokeFunc(time) : result;\n      }\n\n      function remainingWait(time) {\n        var timeSinceLastCall = time - lastCallTime,\n            timeSinceLastInvoke = time - lastInvokeTime,\n            result = wait - timeSinceLastCall;\n\n        return maxing ? nativeMin(result, maxWait - timeSinceLastInvoke) : result;\n      }\n\n      function shouldInvoke(time) {\n        var timeSinceLastCall = time - lastCallTime,\n            timeSinceLastInvoke = time - lastInvokeTime;\n\n        // Either this is the first call, activity has stopped and we're at the\n        // trailing edge, the system time has gone backwards and we're treating\n        // it as the trailing edge, or we've hit the `maxWait` limit.\n        return (lastCallTime === undefined || (timeSinceLastCall >= wait) ||\n          (timeSinceLastCall < 0) || (maxing && timeSinceLastInvoke >= maxWait));\n      }\n\n      function timerExpired() {\n        var time = now();\n        if (shouldInvoke(time)) {\n          return trailingEdge(time);\n        }\n        // Restart the timer.\n        timerId = setTimeout(timerExpired, remainingWait(time));\n      }\n\n      function trailingEdge(time) {\n        timerId = undefined;\n\n        // Only invoke if we have `lastArgs` which means `func` has been\n        // debounced at least once.\n        if (trailing && lastArgs) {\n          return invokeFunc(time);\n        }\n        lastArgs = lastThis = undefined;\n        return result;\n      }\n\n      function cancel() {\n        if (timerId !== undefined) {\n          clearTimeout(timerId);\n        }\n        lastInvokeTime = 0;\n        lastArgs = lastCallTime = lastThis = timerId = undefined;\n      }\n\n      function flush() {\n        return timerId === undefined ? result : trailingEdge(now());\n      }\n\n      function debounced() {\n        var time = now(),\n            isInvoking = shouldInvoke(time);\n\n        lastArgs = arguments;\n        lastThis = this;\n        lastCallTime = time;\n\n        if (isInvoking) {\n          if (timerId === undefined) {\n            return leadingEdge(lastCallTime);\n          }\n          if (maxing) {\n            // Handle invocations in a tight loop.\n            timerId = setTimeout(timerExpired, wait);\n            return invokeFunc(lastCallTime);\n          }\n        }\n        if (timerId === undefined) {\n          timerId = setTimeout(timerExpired, wait);\n        }\n        return result;\n      }\n      debounced.cancel = cancel;\n      debounced.flush = flush;\n      return debounced;\n    }\n\n    /**\n     * Defers invoking the `func` until the current call stack has cleared. Any\n     * additional arguments are provided to `func` when it's invoked.\n     *\n     * @static\n     * @memberOf _\n     * @since 0.1.0\n     * @category Function\n     * @param {Function} func The function to defer.\n     * @param {...*} [args] The arguments to invoke `func` with.\n     * @returns {number} Returns the timer id.\n     * @example\n     *\n     * _.defer(function(text) {\n     *   console.log(text);\n     * }, 'deferred');\n     * // => Logs 'deferred' after one millisecond.\n     */\n    var defer = baseRest(function(func, args) {\n      return baseDelay(func, 1, args);\n    });\n\n    /**\n     * Invokes `func` after `wait` milliseconds. Any additional arguments are\n     * provided to `func` when it's invoked.\n     *\n     * @static\n     * @memberOf _\n     * @since 0.1.0\n     * @category Function\n     * @param {Function} func The function to delay.\n     * @param {number} wait The number of milliseconds to delay invocation.\n     * @param {...*} [args] The arguments to invoke `func` with.\n     * @returns {number} Returns the timer id.\n     * @example\n     *\n     * _.delay(function(text) {\n     *   console.log(text);\n     * }, 1000, 'later');\n     * // => Logs 'later' after one second.\n     */\n    var delay = baseRest(function(func, wait, args) {\n      return baseDelay(func, toNumber(wait) || 0, args);\n    });\n\n    /**\n     * Creates a function that invokes `func` with arguments reversed.\n     *\n     * @static\n     * @memberOf _\n     * @since 4.0.0\n     * @category Function\n     * @param {Function} func The function to flip arguments for.\n     * @returns {Function} Returns the new flipped function.\n     * @example\n     *\n     * var flipped = _.flip(function() {\n     *   return _.toArray(arguments);\n     * });\n     *\n     * flipped('a', 'b', 'c', 'd');\n     * // => ['d', 'c', 'b', 'a']\n     */\n    function flip(func) {\n      return createWrap(func, WRAP_FLIP_FLAG);\n    }\n\n    /**\n     * Creates a function that memoizes the result of `func`. If `resolver` is\n     * provided, it determines the cache key for storing the result based on the\n     * arguments provided to the memoized function. By default, the first argument\n     * provided to the memoized function is used as the map cache key. The `func`\n     * is invoked with the `this` binding of the memoized function.\n     *\n     * **Note:** The cache is exposed as the `cache` property on the memoized\n     * function. Its creation may be customized by replacing the `_.memoize.Cache`\n     * constructor with one whose instances implement the\n     * [`Map`](http://ecma-international.org/ecma-262/7.0/#sec-properties-of-the-map-prototype-object)\n     * method interface of `clear`, `delete`, `get`, `has`, and `set`.\n     *\n     * @static\n     * @memberOf _\n     * @since 0.1.0\n     * @category Function\n     * @param {Function} func The function to have its output memoized.\n     * @param {Function} [resolver] The function to resolve the cache key.\n     * @returns {Function} Returns the new memoized function.\n     * @example\n     *\n     * var object = { 'a': 1, 'b': 2 };\n     * var other = { 'c': 3, 'd': 4 };\n     *\n     * var values = _.memoize(_.values);\n     * values(object);\n     * // => [1, 2]\n     *\n     * values(other);\n     * // => [3, 4]\n     *\n     * object.a = 2;\n     * values(object);\n     * // => [1, 2]\n     *\n     * // Modify the result cache.\n     * values.cache.set(object, ['a', 'b']);\n     * values(object);\n     * // => ['a', 'b']\n     *\n     * // Replace `_.memoize.Cache`.\n     * _.memoize.Cache = WeakMap;\n     */\n    function memoize(func, resolver) {\n      if (typeof func != 'function' || (resolver != null && typeof resolver != 'function')) {\n        throw new TypeError(FUNC_ERROR_TEXT);\n      }\n      var memoized = function() {\n        var args = arguments,\n            key = resolver ? resolver.apply(this, args) : args[0],\n            cache = memoized.cache;\n\n        if (cache.has(key)) {\n          return cache.get(key);\n        }\n        var result = func.apply(this, args);\n        memoized.cache = cache.set(key, result) || cache;\n        return result;\n      };\n      memoized.cache = new (memoize.Cache || MapCache);\n      return memoized;\n    }\n\n    // Expose `MapCache`.\n    memoize.Cache = MapCache;\n\n    /**\n     * Creates a function that negates the result of the predicate `func`. The\n     * `func` predicate is invoked with the `this` binding and arguments of the\n     * created function.\n     *\n     * @static\n     * @memberOf _\n     * @since 3.0.0\n     * @category Function\n     * @param {Function} predicate The predicate to negate.\n     * @returns {Function} Returns the new negated function.\n     * @example\n     *\n     * function isEven(n) {\n     *   return n % 2 == 0;\n     * }\n     *\n     * _.filter([1, 2, 3, 4, 5, 6], _.negate(isEven));\n     * // => [1, 3, 5]\n     */\n    function negate(predicate) {\n      if (typeof predicate != 'function') {\n        throw new TypeError(FUNC_ERROR_TEXT);\n      }\n      return function() {\n        var args = arguments;\n        switch (args.length) {\n          case 0: return !predicate.call(this);\n          case 1: return !predicate.call(this, args[0]);\n          case 2: return !predicate.call(this, args[0], args[1]);\n          case 3: return !predicate.call(this, args[0], args[1], args[2]);\n        }\n        return !predicate.apply(this, args);\n      };\n    }\n\n    /**\n     * Creates a function that is restricted to invoking `func` once. Repeat calls\n     * to the function return the value of the first invocation. The `func` is\n     * invoked with the `this` binding and arguments of the created function.\n     *\n     * @static\n     * @memberOf _\n     * @since 0.1.0\n     * @category Function\n     * @param {Function} func The function to restrict.\n     * @returns {Function} Returns the new restricted function.\n     * @example\n     *\n     * var initialize = _.once(createApplication);\n     * initialize();\n     * initialize();\n     * // => `createApplication` is invoked once\n     */\n    function once(func) {\n      return before(2, func);\n    }\n\n    /**\n     * Creates a function that invokes `func` with its arguments transformed.\n     *\n     * @static\n     * @since 4.0.0\n     * @memberOf _\n     * @category Function\n     * @param {Function} func The function to wrap.\n     * @param {...(Function|Function[])} [transforms=[_.identity]]\n     *  The argument transforms.\n     * @returns {Function} Returns the new function.\n     * @example\n     *\n     * function doubled(n) {\n     *   return n * 2;\n     * }\n     *\n     * function square(n) {\n     *   return n * n;\n     * }\n     *\n     * var func = _.overArgs(function(x, y) {\n     *   return [x, y];\n     * }, [square, doubled]);\n     *\n     * func(9, 3);\n     * // => [81, 6]\n     *\n     * func(10, 5);\n     * // => [100, 10]\n     */\n    var overArgs = castRest(function(func, transforms) {\n      transforms = (transforms.length == 1 && isArray(transforms[0]))\n        ? arrayMap(transforms[0], baseUnary(getIteratee()))\n        : arrayMap(baseFlatten(transforms, 1), baseUnary(getIteratee()));\n\n      var funcsLength = transforms.length;\n      return baseRest(function(args) {\n        var index = -1,\n            length = nativeMin(args.length, funcsLength);\n\n        while (++index < length) {\n          args[index] = transforms[index].call(this, args[index]);\n        }\n        return apply(func, this, args);\n      });\n    });\n\n    /**\n     * Creates a function that invokes `func` with `partials` prepended to the\n     * arguments it receives. This method is like `_.bind` except it does **not**\n     * alter the `this` binding.\n     *\n     * The `_.partial.placeholder` value, which defaults to `_` in monolithic\n     * builds, may be used as a placeholder for partially applied arguments.\n     *\n     * **Note:** This method doesn't set the \"length\" property of partially\n     * applied functions.\n     *\n     * @static\n     * @memberOf _\n     * @since 0.2.0\n     * @category Function\n     * @param {Function} func The function to partially apply arguments to.\n     * @param {...*} [partials] The arguments to be partially applied.\n     * @returns {Function} Returns the new partially applied function.\n     * @example\n     *\n     * function greet(greeting, name) {\n     *   return greeting + ' ' + name;\n     * }\n     *\n     * var sayHelloTo = _.partial(greet, 'hello');\n     * sayHelloTo('fred');\n     * // => 'hello fred'\n     *\n     * // Partially applied with placeholders.\n     * var greetFred = _.partial(greet, _, 'fred');\n     * greetFred('hi');\n     * // => 'hi fred'\n     */\n    var partial = baseRest(function(func, partials) {\n      var holders = replaceHolders(partials, getHolder(partial));\n      return createWrap(func, WRAP_PARTIAL_FLAG, undefined, partials, holders);\n    });\n\n    /**\n     * This method is like `_.partial` except that partially applied arguments\n     * are appended to the arguments it receives.\n     *\n     * The `_.partialRight.placeholder` value, which defaults to `_` in monolithic\n     * builds, may be used as a placeholder for partially applied arguments.\n     *\n     * **Note:** This method doesn't set the \"length\" property of partially\n     * applied functions.\n     *\n     * @static\n     * @memberOf _\n     * @since 1.0.0\n     * @category Function\n     * @param {Function} func The function to partially apply arguments to.\n     * @param {...*} [partials] The arguments to be partially applied.\n     * @returns {Function} Returns the new partially applied function.\n     * @example\n     *\n     * function greet(greeting, name) {\n     *   return greeting + ' ' + name;\n     * }\n     *\n     * var greetFred = _.partialRight(greet, 'fred');\n     * greetFred('hi');\n     * // => 'hi fred'\n     *\n     * // Partially applied with placeholders.\n     * var sayHelloTo = _.partialRight(greet, 'hello', _);\n     * sayHelloTo('fred');\n     * // => 'hello fred'\n     */\n    var partialRight = baseRest(function(func, partials) {\n      var holders = replaceHolders(partials, getHolder(partialRight));\n      return createWrap(func, WRAP_PARTIAL_RIGHT_FLAG, undefined, partials, holders);\n    });\n\n    /**\n     * Creates a function that invokes `func` with arguments arranged according\n     * to the specified `indexes` where the argument value at the first index is\n     * provided as the first argument, the argument value at the second index is\n     * provided as the second argument, and so on.\n     *\n     * @static\n     * @memberOf _\n     * @since 3.0.0\n     * @category Function\n     * @param {Function} func The function to rearrange arguments for.\n     * @param {...(number|number[])} indexes The arranged argument indexes.\n     * @returns {Function} Returns the new function.\n     * @example\n     *\n     * var rearged = _.rearg(function(a, b, c) {\n     *   return [a, b, c];\n     * }, [2, 0, 1]);\n     *\n     * rearged('b', 'c', 'a')\n     * // => ['a', 'b', 'c']\n     */\n    var rearg = flatRest(function(func, indexes) {\n      return createWrap(func, WRAP_REARG_FLAG, undefined, undefined, undefined, indexes);\n    });\n\n    /**\n     * Creates a function that invokes `func` with the `this` binding of the\n     * created function and arguments from `start` and beyond provided as\n     * an array.\n     *\n     * **Note:** This method is based on the\n     * [rest parameter](https://mdn.io/rest_parameters).\n     *\n     * @static\n     * @memberOf _\n     * @since 4.0.0\n     * @category Function\n     * @param {Function} func The function to apply a rest parameter to.\n     * @param {number} [start=func.length-1] The start position of the rest parameter.\n     * @returns {Function} Returns the new function.\n     * @example\n     *\n     * var say = _.rest(function(what, names) {\n     *   return what + ' ' + _.initial(names).join(', ') +\n     *     (_.size(names) > 1 ? ', & ' : '') + _.last(names);\n     * });\n     *\n     * say('hello', 'fred', 'barney', 'pebbles');\n     * // => 'hello fred, barney, & pebbles'\n     */\n    function rest(func, start) {\n      if (typeof func != 'function') {\n        throw new TypeError(FUNC_ERROR_TEXT);\n      }\n      start = start === undefined ? start : toInteger(start);\n      return baseRest(func, start);\n    }\n\n    /**\n     * Creates a function that invokes `func` with the `this` binding of the\n     * create function and an array of arguments much like\n     * [`Function#apply`](http://www.ecma-international.org/ecma-262/7.0/#sec-function.prototype.apply).\n     *\n     * **Note:** This method is based on the\n     * [spread operator](https://mdn.io/spread_operator).\n     *\n     * @static\n     * @memberOf _\n     * @since 3.2.0\n     * @category Function\n     * @param {Function} func The function to spread arguments over.\n     * @param {number} [start=0] The start position of the spread.\n     * @returns {Function} Returns the new function.\n     * @example\n     *\n     * var say = _.spread(function(who, what) {\n     *   return who + ' says ' + what;\n     * });\n     *\n     * say(['fred', 'hello']);\n     * // => 'fred says hello'\n     *\n     * var numbers = Promise.all([\n     *   Promise.resolve(40),\n     *   Promise.resolve(36)\n     * ]);\n     *\n     * numbers.then(_.spread(function(x, y) {\n     *   return x + y;\n     * }));\n     * // => a Promise of 76\n     */\n    function spread(func, start) {\n      if (typeof func != 'function') {\n        throw new TypeError(FUNC_ERROR_TEXT);\n      }\n      start = start == null ? 0 : nativeMax(toInteger(start), 0);\n      return baseRest(function(args) {\n        var array = args[start],\n            otherArgs = castSlice(args, 0, start);\n\n        if (array) {\n          arrayPush(otherArgs, array);\n        }\n        return apply(func, this, otherArgs);\n      });\n    }\n\n    /**\n     * Creates a throttled function that only invokes `func` at most once per\n     * every `wait` milliseconds. The throttled function comes with a `cancel`\n     * method to cancel delayed `func` invocations and a `flush` method to\n     * immediately invoke them. Provide `options` to indicate whether `func`\n     * should be invoked on the leading and/or trailing edge of the `wait`\n     * timeout. The `func` is invoked with the last arguments provided to the\n     * throttled function. Subsequent calls to the throttled function return the\n     * result of the last `func` invocation.\n     *\n     * **Note:** If `leading` and `trailing` options are `true`, `func` is\n     * invoked on the trailing edge of the timeout only if the throttled function\n     * is invoked more than once during the `wait` timeout.\n     *\n     * If `wait` is `0` and `leading` is `false`, `func` invocation is deferred\n     * until to the next tick, similar to `setTimeout` with a timeout of `0`.\n     *\n     * See [David Corbacho's article](https://css-tricks.com/debouncing-throttling-explained-examples/)\n     * for details over the differences between `_.throttle` and `_.debounce`.\n     *\n     * @static\n     * @memberOf _\n     * @since 0.1.0\n     * @category Function\n     * @param {Function} func The function to throttle.\n     * @param {number} [wait=0] The number of milliseconds to throttle invocations to.\n     * @param {Object} [options={}] The options object.\n     * @param {boolean} [options.leading=true]\n     *  Specify invoking on the leading edge of the timeout.\n     * @param {boolean} [options.trailing=true]\n     *  Specify invoking on the trailing edge of the timeout.\n     * @returns {Function} Returns the new throttled function.\n     * @example\n     *\n     * // Avoid excessively updating the position while scrolling.\n     * jQuery(window).on('scroll', _.throttle(updatePosition, 100));\n     *\n     * // Invoke `renewToken` when the click event is fired, but not more than once every 5 minutes.\n     * var throttled = _.throttle(renewToken, 300000, { 'trailing': false });\n     * jQuery(element).on('click', throttled);\n     *\n     * // Cancel the trailing throttled invocation.\n     * jQuery(window).on('popstate', throttled.cancel);\n     */\n    function throttle(func, wait, options) {\n      var leading = true,\n          trailing = true;\n\n      if (typeof func != 'function') {\n        throw new TypeError(FUNC_ERROR_TEXT);\n      }\n      if (isObject(options)) {\n        leading = 'leading' in options ? !!options.leading : leading;\n        trailing = 'trailing' in options ? !!options.trailing : trailing;\n      }\n      return debounce(func, wait, {\n        'leading': leading,\n        'maxWait': wait,\n        'trailing': trailing\n      });\n    }\n\n    /**\n     * Creates a function that accepts up to one argument, ignoring any\n     * additional arguments.\n     *\n     * @static\n     * @memberOf _\n     * @since 4.0.0\n     * @category Function\n     * @param {Function} func The function to cap arguments for.\n     * @returns {Function} Returns the new capped function.\n     * @example\n     *\n     * _.map(['6', '8', '10'], _.unary(parseInt));\n     * // => [6, 8, 10]\n     */\n    function unary(func) {\n      return ary(func, 1);\n    }\n\n    /**\n     * Creates a function that provides `value` to `wrapper` as its first\n     * argument. Any additional arguments provided to the function are appended\n     * to those provided to the `wrapper`. The wrapper is invoked with the `this`\n     * binding of the created function.\n     *\n     * @static\n     * @memberOf _\n     * @since 0.1.0\n     * @category Function\n     * @param {*} value The value to wrap.\n     * @param {Function} [wrapper=identity] The wrapper function.\n     * @returns {Function} Returns the new function.\n     * @example\n     *\n     * var p = _.wrap(_.escape, function(func, text) {\n     *   return '<p>' + func(text) + '</p>';\n     * });\n     *\n     * p('fred, barney, & pebbles');\n     * // => '<p>fred, barney, &amp; pebbles</p>'\n     */\n    function wrap(value, wrapper) {\n      return partial(castFunction(wrapper), value);\n    }\n\n    /*------------------------------------------------------------------------*/\n\n    /**\n     * Casts `value` as an array if it's not one.\n     *\n     * @static\n     * @memberOf _\n     * @since 4.4.0\n     * @category Lang\n     * @param {*} value The value to inspect.\n     * @returns {Array} Returns the cast array.\n     * @example\n     *\n     * _.castArray(1);\n     * // => [1]\n     *\n     * _.castArray({ 'a': 1 });\n     * // => [{ 'a': 1 }]\n     *\n     * _.castArray('abc');\n     * // => ['abc']\n     *\n     * _.castArray(null);\n     * // => [null]\n     *\n     * _.castArray(undefined);\n     * // => [undefined]\n     *\n     * _.castArray();\n     * // => []\n     *\n     * var array = [1, 2, 3];\n     * console.log(_.castArray(array) === array);\n     * // => true\n     */\n    function castArray() {\n      if (!arguments.length) {\n        return [];\n      }\n      var value = arguments[0];\n      return isArray(value) ? value : [value];\n    }\n\n    /**\n     * Creates a shallow clone of `value`.\n     *\n     * **Note:** This method is loosely based on the\n     * [structured clone algorithm](https://mdn.io/Structured_clone_algorithm)\n     * and supports cloning arrays, array buffers, booleans, date objects, maps,\n     * numbers, `Object` objects, regexes, sets, strings, symbols, and typed\n     * arrays. The own enumerable properties of `arguments` objects are cloned\n     * as plain objects. An empty object is returned for uncloneable values such\n     * as error objects, functions, DOM nodes, and WeakMaps.\n     *\n     * @static\n     * @memberOf _\n     * @since 0.1.0\n     * @category Lang\n     * @param {*} value The value to clone.\n     * @returns {*} Returns the cloned value.\n     * @see _.cloneDeep\n     * @example\n     *\n     * var objects = [{ 'a': 1 }, { 'b': 2 }];\n     *\n     * var shallow = _.clone(objects);\n     * console.log(shallow[0] === objects[0]);\n     * // => true\n     */\n    function clone(value) {\n      return baseClone(value, CLONE_SYMBOLS_FLAG);\n    }\n\n    /**\n     * This method is like `_.clone` except that it accepts `customizer` which\n     * is invoked to produce the cloned value. If `customizer` returns `undefined`,\n     * cloning is handled by the method instead. The `customizer` is invoked with\n     * up to four arguments; (value [, index|key, object, stack]).\n     *\n     * @static\n     * @memberOf _\n     * @since 4.0.0\n     * @category Lang\n     * @param {*} value The value to clone.\n     * @param {Function} [customizer] The function to customize cloning.\n     * @returns {*} Returns the cloned value.\n     * @see _.cloneDeepWith\n     * @example\n     *\n     * function customizer(value) {\n     *   if (_.isElement(value)) {\n     *     return value.cloneNode(false);\n     *   }\n     * }\n     *\n     * var el = _.cloneWith(document.body, customizer);\n     *\n     * console.log(el === document.body);\n     * // => false\n     * console.log(el.nodeName);\n     * // => 'BODY'\n     * console.log(el.childNodes.length);\n     * // => 0\n     */\n    function cloneWith(value, customizer) {\n      customizer = typeof customizer == 'function' ? customizer : undefined;\n      return baseClone(value, CLONE_SYMBOLS_FLAG, customizer);\n    }\n\n    /**\n     * This method is like `_.clone` except that it recursively clones `value`.\n     *\n     * @static\n     * @memberOf _\n     * @since 1.0.0\n     * @category Lang\n     * @param {*} value The value to recursively clone.\n     * @returns {*} Returns the deep cloned value.\n     * @see _.clone\n     * @example\n     *\n     * var objects = [{ 'a': 1 }, { 'b': 2 }];\n     *\n     * var deep = _.cloneDeep(objects);\n     * console.log(deep[0] === objects[0]);\n     * // => false\n     */\n    function cloneDeep(value) {\n      return baseClone(value, CLONE_DEEP_FLAG | CLONE_SYMBOLS_FLAG);\n    }\n\n    /**\n     * This method is like `_.cloneWith` except that it recursively clones `value`.\n     *\n     * @static\n     * @memberOf _\n     * @since 4.0.0\n     * @category Lang\n     * @param {*} value The value to recursively clone.\n     * @param {Function} [customizer] The function to customize cloning.\n     * @returns {*} Returns the deep cloned value.\n     * @see _.cloneWith\n     * @example\n     *\n     * function customizer(value) {\n     *   if (_.isElement(value)) {\n     *     return value.cloneNode(true);\n     *   }\n     * }\n     *\n     * var el = _.cloneDeepWith(document.body, customizer);\n     *\n     * console.log(el === document.body);\n     * // => false\n     * console.log(el.nodeName);\n     * // => 'BODY'\n     * console.log(el.childNodes.length);\n     * // => 20\n     */\n    function cloneDeepWith(value, customizer) {\n      customizer = typeof customizer == 'function' ? customizer : undefined;\n      return baseClone(value, CLONE_DEEP_FLAG | CLONE_SYMBOLS_FLAG, customizer);\n    }\n\n    /**\n     * Checks if `object` conforms to `source` by invoking the predicate\n     * properties of `source` with the corresponding property values of `object`.\n     *\n     * **Note:** This method is equivalent to `_.conforms` when `source` is\n     * partially applied.\n     *\n     * @static\n     * @memberOf _\n     * @since 4.14.0\n     * @category Lang\n     * @param {Object} object The object to inspect.\n     * @param {Object} source The object of property predicates to conform to.\n     * @returns {boolean} Returns `true` if `object` conforms, else `false`.\n     * @example\n     *\n     * var object = { 'a': 1, 'b': 2 };\n     *\n     * _.conformsTo(object, { 'b': function(n) { return n > 1; } });\n     * // => true\n     *\n     * _.conformsTo(object, { 'b': function(n) { return n > 2; } });\n     * // => false\n     */\n    function conformsTo(object, source) {\n      return source == null || baseConformsTo(object, source, keys(source));\n    }\n\n    /**\n     * Performs a\n     * [`SameValueZero`](http://ecma-international.org/ecma-262/7.0/#sec-samevaluezero)\n     * comparison between two values to determine if they are equivalent.\n     *\n     * @static\n     * @memberOf _\n     * @since 4.0.0\n     * @category Lang\n     * @param {*} value The value to compare.\n     * @param {*} other The other value to compare.\n     * @returns {boolean} Returns `true` if the values are equivalent, else `false`.\n     * @example\n     *\n     * var object = { 'a': 1 };\n     * var other = { 'a': 1 };\n     *\n     * _.eq(object, object);\n     * // => true\n     *\n     * _.eq(object, other);\n     * // => false\n     *\n     * _.eq('a', 'a');\n     * // => true\n     *\n     * _.eq('a', Object('a'));\n     * // => false\n     *\n     * _.eq(NaN, NaN);\n     * // => true\n     */\n    function eq(value, other) {\n      return value === other || (value !== value && other !== other);\n    }\n\n    /**\n     * Checks if `value` is greater than `other`.\n     *\n     * @static\n     * @memberOf _\n     * @since 3.9.0\n     * @category Lang\n     * @param {*} value The value to compare.\n     * @param {*} other The other value to compare.\n     * @returns {boolean} Returns `true` if `value` is greater than `other`,\n     *  else `false`.\n     * @see _.lt\n     * @example\n     *\n     * _.gt(3, 1);\n     * // => true\n     *\n     * _.gt(3, 3);\n     * // => false\n     *\n     * _.gt(1, 3);\n     * // => false\n     */\n    var gt = createRelationalOperation(baseGt);\n\n    /**\n     * Checks if `value` is greater than or equal to `other`.\n     *\n     * @static\n     * @memberOf _\n     * @since 3.9.0\n     * @category Lang\n     * @param {*} value The value to compare.\n     * @param {*} other The other value to compare.\n     * @returns {boolean} Returns `true` if `value` is greater than or equal to\n     *  `other`, else `false`.\n     * @see _.lte\n     * @example\n     *\n     * _.gte(3, 1);\n     * // => true\n     *\n     * _.gte(3, 3);\n     * // => true\n     *\n     * _.gte(1, 3);\n     * // => false\n     */\n    var gte = createRelationalOperation(function(value, other) {\n      return value >= other;\n    });\n\n    /**\n     * Checks if `value` is likely an `arguments` object.\n     *\n     * @static\n     * @memberOf _\n     * @since 0.1.0\n     * @category Lang\n     * @param {*} value The value to check.\n     * @returns {boolean} Returns `true` if `value` is an `arguments` object,\n     *  else `false`.\n     * @example\n     *\n     * _.isArguments(function() { return arguments; }());\n     * // => true\n     *\n     * _.isArguments([1, 2, 3]);\n     * // => false\n     */\n    var isArguments = baseIsArguments(function() { return arguments; }()) ? baseIsArguments : function(value) {\n      return isObjectLike(value) && hasOwnProperty.call(value, 'callee') &&\n        !propertyIsEnumerable.call(value, 'callee');\n    };\n\n    /**\n     * Checks if `value` is classified as an `Array` object.\n     *\n     * @static\n     * @memberOf _\n     * @since 0.1.0\n     * @category Lang\n     * @param {*} value The value to check.\n     * @returns {boolean} Returns `true` if `value` is an array, else `false`.\n     * @example\n     *\n     * _.isArray([1, 2, 3]);\n     * // => true\n     *\n     * _.isArray(document.body.children);\n     * // => false\n     *\n     * _.isArray('abc');\n     * // => false\n     *\n     * _.isArray(_.noop);\n     * // => false\n     */\n    var isArray = Array.isArray;\n\n    /**\n     * Checks if `value` is classified as an `ArrayBuffer` object.\n     *\n     * @static\n     * @memberOf _\n     * @since 4.3.0\n     * @category Lang\n     * @param {*} value The value to check.\n     * @returns {boolean} Returns `true` if `value` is an array buffer, else `false`.\n     * @example\n     *\n     * _.isArrayBuffer(new ArrayBuffer(2));\n     * // => true\n     *\n     * _.isArrayBuffer(new Array(2));\n     * // => false\n     */\n    var isArrayBuffer = nodeIsArrayBuffer ? baseUnary(nodeIsArrayBuffer) : baseIsArrayBuffer;\n\n    /**\n     * Checks if `value` is array-like. A value is considered array-like if it's\n     * not a function and has a `value.length` that's an integer greater than or\n     * equal to `0` and less than or equal to `Number.MAX_SAFE_INTEGER`.\n     *\n     * @static\n     * @memberOf _\n     * @since 4.0.0\n     * @category Lang\n     * @param {*} value The value to check.\n     * @returns {boolean} Returns `true` if `value` is array-like, else `false`.\n     * @example\n     *\n     * _.isArrayLike([1, 2, 3]);\n     * // => true\n     *\n     * _.isArrayLike(document.body.children);\n     * // => true\n     *\n     * _.isArrayLike('abc');\n     * // => true\n     *\n     * _.isArrayLike(_.noop);\n     * // => false\n     */\n    function isArrayLike(value) {\n      return value != null && isLength(value.length) && !isFunction(value);\n    }\n\n    /**\n     * This method is like `_.isArrayLike` except that it also checks if `value`\n     * is an object.\n     *\n     * @static\n     * @memberOf _\n     * @since 4.0.0\n     * @category Lang\n     * @param {*} value The value to check.\n     * @returns {boolean} Returns `true` if `value` is an array-like object,\n     *  else `false`.\n     * @example\n     *\n     * _.isArrayLikeObject([1, 2, 3]);\n     * // => true\n     *\n     * _.isArrayLikeObject(document.body.children);\n     * // => true\n     *\n     * _.isArrayLikeObject('abc');\n     * // => false\n     *\n     * _.isArrayLikeObject(_.noop);\n     * // => false\n     */\n    function isArrayLikeObject(value) {\n      return isObjectLike(value) && isArrayLike(value);\n    }\n\n    /**\n     * Checks if `value` is classified as a boolean primitive or object.\n     *\n     * @static\n     * @memberOf _\n     * @since 0.1.0\n     * @category Lang\n     * @param {*} value The value to check.\n     * @returns {boolean} Returns `true` if `value` is a boolean, else `false`.\n     * @example\n     *\n     * _.isBoolean(false);\n     * // => true\n     *\n     * _.isBoolean(null);\n     * // => false\n     */\n    function isBoolean(value) {\n      return value === true || value === false ||\n        (isObjectLike(value) && baseGetTag(value) == boolTag);\n    }\n\n    /**\n     * Checks if `value` is a buffer.\n     *\n     * @static\n     * @memberOf _\n     * @since 4.3.0\n     * @category Lang\n     * @param {*} value The value to check.\n     * @returns {boolean} Returns `true` if `value` is a buffer, else `false`.\n     * @example\n     *\n     * _.isBuffer(new Buffer(2));\n     * // => true\n     *\n     * _.isBuffer(new Uint8Array(2));\n     * // => false\n     */\n    var isBuffer = nativeIsBuffer || stubFalse;\n\n    /**\n     * Checks if `value` is classified as a `Date` object.\n     *\n     * @static\n     * @memberOf _\n     * @since 0.1.0\n     * @category Lang\n     * @param {*} value The value to check.\n     * @returns {boolean} Returns `true` if `value` is a date object, else `false`.\n     * @example\n     *\n     * _.isDate(new Date);\n     * // => true\n     *\n     * _.isDate('Mon April 23 2012');\n     * // => false\n     */\n    var isDate = nodeIsDate ? baseUnary(nodeIsDate) : baseIsDate;\n\n    /**\n     * Checks if `value` is likely a DOM element.\n     *\n     * @static\n     * @memberOf _\n     * @since 0.1.0\n     * @category Lang\n     * @param {*} value The value to check.\n     * @returns {boolean} Returns `true` if `value` is a DOM element, else `false`.\n     * @example\n     *\n     * _.isElement(document.body);\n     * // => true\n     *\n     * _.isElement('<body>');\n     * // => false\n     */\n    function isElement(value) {\n      return isObjectLike(value) && value.nodeType === 1 && !isPlainObject(value);\n    }\n\n    /**\n     * Checks if `value` is an empty object, collection, map, or set.\n     *\n     * Objects are considered empty if they have no own enumerable string keyed\n     * properties.\n     *\n     * Array-like values such as `arguments` objects, arrays, buffers, strings, or\n     * jQuery-like collections are considered empty if they have a `length` of `0`.\n     * Similarly, maps and sets are considered empty if they have a `size` of `0`.\n     *\n     * @static\n     * @memberOf _\n     * @since 0.1.0\n     * @category Lang\n     * @param {*} value The value to check.\n     * @returns {boolean} Returns `true` if `value` is empty, else `false`.\n     * @example\n     *\n     * _.isEmpty(null);\n     * // => true\n     *\n     * _.isEmpty(true);\n     * // => true\n     *\n     * _.isEmpty(1);\n     * // => true\n     *\n     * _.isEmpty([1, 2, 3]);\n     * // => false\n     *\n     * _.isEmpty({ 'a': 1 });\n     * // => false\n     */\n    function isEmpty(value) {\n      if (value == null) {\n        return true;\n      }\n      if (isArrayLike(value) &&\n          (isArray(value) || typeof value == 'string' || typeof value.splice == 'function' ||\n            isBuffer(value) || isTypedArray(value) || isArguments(value))) {\n        return !value.length;\n      }\n      var tag = getTag(value);\n      if (tag == mapTag || tag == setTag) {\n        return !value.size;\n      }\n      if (isPrototype(value)) {\n        return !baseKeys(value).length;\n      }\n      for (var key in value) {\n        if (hasOwnProperty.call(value, key)) {\n          return false;\n        }\n      }\n      return true;\n    }\n\n    /**\n     * Performs a deep comparison between two values to determine if they are\n     * equivalent.\n     *\n     * **Note:** This method supports comparing arrays, array buffers, booleans,\n     * date objects, error objects, maps, numbers, `Object` objects, regexes,\n     * sets, strings, symbols, and typed arrays. `Object` objects are compared\n     * by their own, not inherited, enumerable properties. Functions and DOM\n     * nodes are compared by strict equality, i.e. `===`.\n     *\n     * @static\n     * @memberOf _\n     * @since 0.1.0\n     * @category Lang\n     * @param {*} value The value to compare.\n     * @param {*} other The other value to compare.\n     * @returns {boolean} Returns `true` if the values are equivalent, else `false`.\n     * @example\n     *\n     * var object = { 'a': 1 };\n     * var other = { 'a': 1 };\n     *\n     * _.isEqual(object, other);\n     * // => true\n     *\n     * object === other;\n     * // => false\n     */\n    function isEqual(value, other) {\n      return baseIsEqual(value, other);\n    }\n\n    /**\n     * This method is like `_.isEqual` except that it accepts `customizer` which\n     * is invoked to compare values. If `customizer` returns `undefined`, comparisons\n     * are handled by the method instead. The `customizer` is invoked with up to\n     * six arguments: (objValue, othValue [, index|key, object, other, stack]).\n     *\n     * @static\n     * @memberOf _\n     * @since 4.0.0\n     * @category Lang\n     * @param {*} value The value to compare.\n     * @param {*} other The other value to compare.\n     * @param {Function} [customizer] The function to customize comparisons.\n     * @returns {boolean} Returns `true` if the values are equivalent, else `false`.\n     * @example\n     *\n     * function isGreeting(value) {\n     *   return /^h(?:i|ello)$/.test(value);\n     * }\n     *\n     * function customizer(objValue, othValue) {\n     *   if (isGreeting(objValue) && isGreeting(othValue)) {\n     *     return true;\n     *   }\n     * }\n     *\n     * var array = ['hello', 'goodbye'];\n     * var other = ['hi', 'goodbye'];\n     *\n     * _.isEqualWith(array, other, customizer);\n     * // => true\n     */\n    function isEqualWith(value, other, customizer) {\n      customizer = typeof customizer == 'function' ? customizer : undefined;\n      var result = customizer ? customizer(value, other) : undefined;\n      return result === undefined ? baseIsEqual(value, other, undefined, customizer) : !!result;\n    }\n\n    /**\n     * Checks if `value` is an `Error`, `EvalError`, `RangeError`, `ReferenceError`,\n     * `SyntaxError`, `TypeError`, or `URIError` object.\n     *\n     * @static\n     * @memberOf _\n     * @since 3.0.0\n     * @category Lang\n     * @param {*} value The value to check.\n     * @returns {boolean} Returns `true` if `value` is an error object, else `false`.\n     * @example\n     *\n     * _.isError(new Error);\n     * // => true\n     *\n     * _.isError(Error);\n     * // => false\n     */\n    function isError(value) {\n      if (!isObjectLike(value)) {\n        return false;\n      }\n      var tag = baseGetTag(value);\n      return tag == errorTag || tag == domExcTag ||\n        (typeof value.message == 'string' && typeof value.name == 'string' && !isPlainObject(value));\n    }\n\n    /**\n     * Checks if `value` is a finite primitive number.\n     *\n     * **Note:** This method is based on\n     * [`Number.isFinite`](https://mdn.io/Number/isFinite).\n     *\n     * @static\n     * @memberOf _\n     * @since 0.1.0\n     * @category Lang\n     * @param {*} value The value to check.\n     * @returns {boolean} Returns `true` if `value` is a finite number, else `false`.\n     * @example\n     *\n     * _.isFinite(3);\n     * // => true\n     *\n     * _.isFinite(Number.MIN_VALUE);\n     * // => true\n     *\n     * _.isFinite(Infinity);\n     * // => false\n     *\n     * _.isFinite('3');\n     * // => false\n     */\n    function isFinite(value) {\n      return typeof value == 'number' && nativeIsFinite(value);\n    }\n\n    /**\n     * Checks if `value` is classified as a `Function` object.\n     *\n     * @static\n     * @memberOf _\n     * @since 0.1.0\n     * @category Lang\n     * @param {*} value The value to check.\n     * @returns {boolean} Returns `true` if `value` is a function, else `false`.\n     * @example\n     *\n     * _.isFunction(_);\n     * // => true\n     *\n     * _.isFunction(/abc/);\n     * // => false\n     */\n    function isFunction(value) {\n      if (!isObject(value)) {\n        return false;\n      }\n      // The use of `Object#toString` avoids issues with the `typeof` operator\n      // in Safari 9 which returns 'object' for typed arrays and other constructors.\n      var tag = baseGetTag(value);\n      return tag == funcTag || tag == genTag || tag == asyncTag || tag == proxyTag;\n    }\n\n    /**\n     * Checks if `value` is an integer.\n     *\n     * **Note:** This method is based on\n     * [`Number.isInteger`](https://mdn.io/Number/isInteger).\n     *\n     * @static\n     * @memberOf _\n     * @since 4.0.0\n     * @category Lang\n     * @param {*} value The value to check.\n     * @returns {boolean} Returns `true` if `value` is an integer, else `false`.\n     * @example\n     *\n     * _.isInteger(3);\n     * // => true\n     *\n     * _.isInteger(Number.MIN_VALUE);\n     * // => false\n     *\n     * _.isInteger(Infinity);\n     * // => false\n     *\n     * _.isInteger('3');\n     * // => false\n     */\n    function isInteger(value) {\n      return typeof value == 'number' && value == toInteger(value);\n    }\n\n    /**\n     * Checks if `value` is a valid array-like length.\n     *\n     * **Note:** This method is loosely based on\n     * [`ToLength`](http://ecma-international.org/ecma-262/7.0/#sec-tolength).\n     *\n     * @static\n     * @memberOf _\n     * @since 4.0.0\n     * @category Lang\n     * @param {*} value The value to check.\n     * @returns {boolean} Returns `true` if `value` is a valid length, else `false`.\n     * @example\n     *\n     * _.isLength(3);\n     * // => true\n     *\n     * _.isLength(Number.MIN_VALUE);\n     * // => false\n     *\n     * _.isLength(Infinity);\n     * // => false\n     *\n     * _.isLength('3');\n     * // => false\n     */\n    function isLength(value) {\n      return typeof value == 'number' &&\n        value > -1 && value % 1 == 0 && value <= MAX_SAFE_INTEGER;\n    }\n\n    /**\n     * Checks if `value` is the\n     * [language type](http://www.ecma-international.org/ecma-262/7.0/#sec-ecmascript-language-types)\n     * of `Object`. (e.g. arrays, functions, objects, regexes, `new Number(0)`, and `new String('')`)\n     *\n     * @static\n     * @memberOf _\n     * @since 0.1.0\n     * @category Lang\n     * @param {*} value The value to check.\n     * @returns {boolean} Returns `true` if `value` is an object, else `false`.\n     * @example\n     *\n     * _.isObject({});\n     * // => true\n     *\n     * _.isObject([1, 2, 3]);\n     * // => true\n     *\n     * _.isObject(_.noop);\n     * // => true\n     *\n     * _.isObject(null);\n     * // => false\n     */\n    function isObject(value) {\n      var type = typeof value;\n      return value != null && (type == 'object' || type == 'function');\n    }\n\n    /**\n     * Checks if `value` is object-like. A value is object-like if it's not `null`\n     * and has a `typeof` result of \"object\".\n     *\n     * @static\n     * @memberOf _\n     * @since 4.0.0\n     * @category Lang\n     * @param {*} value The value to check.\n     * @returns {boolean} Returns `true` if `value` is object-like, else `false`.\n     * @example\n     *\n     * _.isObjectLike({});\n     * // => true\n     *\n     * _.isObjectLike([1, 2, 3]);\n     * // => true\n     *\n     * _.isObjectLike(_.noop);\n     * // => false\n     *\n     * _.isObjectLike(null);\n     * // => false\n     */\n    function isObjectLike(value) {\n      return value != null && typeof value == 'object';\n    }\n\n    /**\n     * Checks if `value` is classified as a `Map` object.\n     *\n     * @static\n     * @memberOf _\n     * @since 4.3.0\n     * @category Lang\n     * @param {*} value The value to check.\n     * @returns {boolean} Returns `true` if `value` is a map, else `false`.\n     * @example\n     *\n     * _.isMap(new Map);\n     * // => true\n     *\n     * _.isMap(new WeakMap);\n     * // => false\n     */\n    var isMap = nodeIsMap ? baseUnary(nodeIsMap) : baseIsMap;\n\n    /**\n     * Performs a partial deep comparison between `object` and `source` to\n     * determine if `object` contains equivalent property values.\n     *\n     * **Note:** This method is equivalent to `_.matches` when `source` is\n     * partially applied.\n     *\n     * Partial comparisons will match empty array and empty object `source`\n     * values against any array or object value, respectively. See `_.isEqual`\n     * for a list of supported value comparisons.\n     *\n     * @static\n     * @memberOf _\n     * @since 3.0.0\n     * @category Lang\n     * @param {Object} object The object to inspect.\n     * @param {Object} source The object of property values to match.\n     * @returns {boolean} Returns `true` if `object` is a match, else `false`.\n     * @example\n     *\n     * var object = { 'a': 1, 'b': 2 };\n     *\n     * _.isMatch(object, { 'b': 2 });\n     * // => true\n     *\n     * _.isMatch(object, { 'b': 1 });\n     * // => false\n     */\n    function isMatch(object, source) {\n      return object === source || baseIsMatch(object, source, getMatchData(source));\n    }\n\n    /**\n     * This method is like `_.isMatch` except that it accepts `customizer` which\n     * is invoked to compare values. If `customizer` returns `undefined`, comparisons\n     * are handled by the method instead. The `customizer` is invoked with five\n     * arguments: (objValue, srcValue, index|key, object, source).\n     *\n     * @static\n     * @memberOf _\n     * @since 4.0.0\n     * @category Lang\n     * @param {Object} object The object to inspect.\n     * @param {Object} source The object of property values to match.\n     * @param {Function} [customizer] The function to customize comparisons.\n     * @returns {boolean} Returns `true` if `object` is a match, else `false`.\n     * @example\n     *\n     * function isGreeting(value) {\n     *   return /^h(?:i|ello)$/.test(value);\n     * }\n     *\n     * function customizer(objValue, srcValue) {\n     *   if (isGreeting(objValue) && isGreeting(srcValue)) {\n     *     return true;\n     *   }\n     * }\n     *\n     * var object = { 'greeting': 'hello' };\n     * var source = { 'greeting': 'hi' };\n     *\n     * _.isMatchWith(object, source, customizer);\n     * // => true\n     */\n    function isMatchWith(object, source, customizer) {\n      customizer = typeof customizer == 'function' ? customizer : undefined;\n      return baseIsMatch(object, source, getMatchData(source), customizer);\n    }\n\n    /**\n     * Checks if `value` is `NaN`.\n     *\n     * **Note:** This method is based on\n     * [`Number.isNaN`](https://mdn.io/Number/isNaN) and is not the same as\n     * global [`isNaN`](https://mdn.io/isNaN) which returns `true` for\n     * `undefined` and other non-number values.\n     *\n     * @static\n     * @memberOf _\n     * @since 0.1.0\n     * @category Lang\n     * @param {*} value The value to check.\n     * @returns {boolean} Returns `true` if `value` is `NaN`, else `false`.\n     * @example\n     *\n     * _.isNaN(NaN);\n     * // => true\n     *\n     * _.isNaN(new Number(NaN));\n     * // => true\n     *\n     * isNaN(undefined);\n     * // => true\n     *\n     * _.isNaN(undefined);\n     * // => false\n     */\n    function isNaN(value) {\n      // An `NaN` primitive is the only value that is not equal to itself.\n      // Perform the `toStringTag` check first to avoid errors with some\n      // ActiveX objects in IE.\n      return isNumber(value) && value != +value;\n    }\n\n    /**\n     * Checks if `value` is a pristine native function.\n     *\n     * **Note:** This method can't reliably detect native functions in the presence\n     * of the core-js package because core-js circumvents this kind of detection.\n     * Despite multiple requests, the core-js maintainer has made it clear: any\n     * attempt to fix the detection will be obstructed. As a result, we're left\n     * with little choice but to throw an error. Unfortunately, this also affects\n     * packages, like [babel-polyfill](https://www.npmjs.com/package/babel-polyfill),\n     * which rely on core-js.\n     *\n     * @static\n     * @memberOf _\n     * @since 3.0.0\n     * @category Lang\n     * @param {*} value The value to check.\n     * @returns {boolean} Returns `true` if `value` is a native function,\n     *  else `false`.\n     * @example\n     *\n     * _.isNative(Array.prototype.push);\n     * // => true\n     *\n     * _.isNative(_);\n     * // => false\n     */\n    function isNative(value) {\n      if (isMaskable(value)) {\n        throw new Error(CORE_ERROR_TEXT);\n      }\n      return baseIsNative(value);\n    }\n\n    /**\n     * Checks if `value` is `null`.\n     *\n     * @static\n     * @memberOf _\n     * @since 0.1.0\n     * @category Lang\n     * @param {*} value The value to check.\n     * @returns {boolean} Returns `true` if `value` is `null`, else `false`.\n     * @example\n     *\n     * _.isNull(null);\n     * // => true\n     *\n     * _.isNull(void 0);\n     * // => false\n     */\n    function isNull(value) {\n      return value === null;\n    }\n\n    /**\n     * Checks if `value` is `null` or `undefined`.\n     *\n     * @static\n     * @memberOf _\n     * @since 4.0.0\n     * @category Lang\n     * @param {*} value The value to check.\n     * @returns {boolean} Returns `true` if `value` is nullish, else `false`.\n     * @example\n     *\n     * _.isNil(null);\n     * // => true\n     *\n     * _.isNil(void 0);\n     * // => true\n     *\n     * _.isNil(NaN);\n     * // => false\n     */\n    function isNil(value) {\n      return value == null;\n    }\n\n    /**\n     * Checks if `value` is classified as a `Number` primitive or object.\n     *\n     * **Note:** To exclude `Infinity`, `-Infinity`, and `NaN`, which are\n     * classified as numbers, use the `_.isFinite` method.\n     *\n     * @static\n     * @memberOf _\n     * @since 0.1.0\n     * @category Lang\n     * @param {*} value The value to check.\n     * @returns {boolean} Returns `true` if `value` is a number, else `false`.\n     * @example\n     *\n     * _.isNumber(3);\n     * // => true\n     *\n     * _.isNumber(Number.MIN_VALUE);\n     * // => true\n     *\n     * _.isNumber(Infinity);\n     * // => true\n     *\n     * _.isNumber('3');\n     * // => false\n     */\n    function isNumber(value) {\n      return typeof value == 'number' ||\n        (isObjectLike(value) && baseGetTag(value) == numberTag);\n    }\n\n    /**\n     * Checks if `value` is a plain object, that is, an object created by the\n     * `Object` constructor or one with a `[[Prototype]]` of `null`.\n     *\n     * @static\n     * @memberOf _\n     * @since 0.8.0\n     * @category Lang\n     * @param {*} value The value to check.\n     * @returns {boolean} Returns `true` if `value` is a plain object, else `false`.\n     * @example\n     *\n     * function Foo() {\n     *   this.a = 1;\n     * }\n     *\n     * _.isPlainObject(new Foo);\n     * // => false\n     *\n     * _.isPlainObject([1, 2, 3]);\n     * // => false\n     *\n     * _.isPlainObject({ 'x': 0, 'y': 0 });\n     * // => true\n     *\n     * _.isPlainObject(Object.create(null));\n     * // => true\n     */\n    function isPlainObject(value) {\n      if (!isObjectLike(value) || baseGetTag(value) != objectTag) {\n        return false;\n      }\n      var proto = getPrototype(value);\n      if (proto === null) {\n        return true;\n      }\n      var Ctor = hasOwnProperty.call(proto, 'constructor') && proto.constructor;\n      return typeof Ctor == 'function' && Ctor instanceof Ctor &&\n        funcToString.call(Ctor) == objectCtorString;\n    }\n\n    /**\n     * Checks if `value` is classified as a `RegExp` object.\n     *\n     * @static\n     * @memberOf _\n     * @since 0.1.0\n     * @category Lang\n     * @param {*} value The value to check.\n     * @returns {boolean} Returns `true` if `value` is a regexp, else `false`.\n     * @example\n     *\n     * _.isRegExp(/abc/);\n     * // => true\n     *\n     * _.isRegExp('/abc/');\n     * // => false\n     */\n    var isRegExp = nodeIsRegExp ? baseUnary(nodeIsRegExp) : baseIsRegExp;\n\n    /**\n     * Checks if `value` is a safe integer. An integer is safe if it's an IEEE-754\n     * double precision number which isn't the result of a rounded unsafe integer.\n     *\n     * **Note:** This method is based on\n     * [`Number.isSafeInteger`](https://mdn.io/Number/isSafeInteger).\n     *\n     * @static\n     * @memberOf _\n     * @since 4.0.0\n     * @category Lang\n     * @param {*} value The value to check.\n     * @returns {boolean} Returns `true` if `value` is a safe integer, else `false`.\n     * @example\n     *\n     * _.isSafeInteger(3);\n     * // => true\n     *\n     * _.isSafeInteger(Number.MIN_VALUE);\n     * // => false\n     *\n     * _.isSafeInteger(Infinity);\n     * // => false\n     *\n     * _.isSafeInteger('3');\n     * // => false\n     */\n    function isSafeInteger(value) {\n      return isInteger(value) && value >= -MAX_SAFE_INTEGER && value <= MAX_SAFE_INTEGER;\n    }\n\n    /**\n     * Checks if `value` is classified as a `Set` object.\n     *\n     * @static\n     * @memberOf _\n     * @since 4.3.0\n     * @category Lang\n     * @param {*} value The value to check.\n     * @returns {boolean} Returns `true` if `value` is a set, else `false`.\n     * @example\n     *\n     * _.isSet(new Set);\n     * // => true\n     *\n     * _.isSet(new WeakSet);\n     * // => false\n     */\n    var isSet = nodeIsSet ? baseUnary(nodeIsSet) : baseIsSet;\n\n    /**\n     * Checks if `value` is classified as a `String` primitive or object.\n     *\n     * @static\n     * @since 0.1.0\n     * @memberOf _\n     * @category Lang\n     * @param {*} value The value to check.\n     * @returns {boolean} Returns `true` if `value` is a string, else `false`.\n     * @example\n     *\n     * _.isString('abc');\n     * // => true\n     *\n     * _.isString(1);\n     * // => false\n     */\n    function isString(value) {\n      return typeof value == 'string' ||\n        (!isArray(value) && isObjectLike(value) && baseGetTag(value) == stringTag);\n    }\n\n    /**\n     * Checks if `value` is classified as a `Symbol` primitive or object.\n     *\n     * @static\n     * @memberOf _\n     * @since 4.0.0\n     * @category Lang\n     * @param {*} value The value to check.\n     * @returns {boolean} Returns `true` if `value` is a symbol, else `false`.\n     * @example\n     *\n     * _.isSymbol(Symbol.iterator);\n     * // => true\n     *\n     * _.isSymbol('abc');\n     * // => false\n     */\n    function isSymbol(value) {\n      return typeof value == 'symbol' ||\n        (isObjectLike(value) && baseGetTag(value) == symbolTag);\n    }\n\n    /**\n     * Checks if `value` is classified as a typed array.\n     *\n     * @static\n     * @memberOf _\n     * @since 3.0.0\n     * @category Lang\n     * @param {*} value The value to check.\n     * @returns {boolean} Returns `true` if `value` is a typed array, else `false`.\n     * @example\n     *\n     * _.isTypedArray(new Uint8Array);\n     * // => true\n     *\n     * _.isTypedArray([]);\n     * // => false\n     */\n    var isTypedArray = nodeIsTypedArray ? baseUnary(nodeIsTypedArray) : baseIsTypedArray;\n\n    /**\n     * Checks if `value` is `undefined`.\n     *\n     * @static\n     * @since 0.1.0\n     * @memberOf _\n     * @category Lang\n     * @param {*} value The value to check.\n     * @returns {boolean} Returns `true` if `value` is `undefined`, else `false`.\n     * @example\n     *\n     * _.isUndefined(void 0);\n     * // => true\n     *\n     * _.isUndefined(null);\n     * // => false\n     */\n    function isUndefined(value) {\n      return value === undefined;\n    }\n\n    /**\n     * Checks if `value` is classified as a `WeakMap` object.\n     *\n     * @static\n     * @memberOf _\n     * @since 4.3.0\n     * @category Lang\n     * @param {*} value The value to check.\n     * @returns {boolean} Returns `true` if `value` is a weak map, else `false`.\n     * @example\n     *\n     * _.isWeakMap(new WeakMap);\n     * // => true\n     *\n     * _.isWeakMap(new Map);\n     * // => false\n     */\n    function isWeakMap(value) {\n      return isObjectLike(value) && getTag(value) == weakMapTag;\n    }\n\n    /**\n     * Checks if `value` is classified as a `WeakSet` object.\n     *\n     * @static\n     * @memberOf _\n     * @since 4.3.0\n     * @category Lang\n     * @param {*} value The value to check.\n     * @returns {boolean} Returns `true` if `value` is a weak set, else `false`.\n     * @example\n     *\n     * _.isWeakSet(new WeakSet);\n     * // => true\n     *\n     * _.isWeakSet(new Set);\n     * // => false\n     */\n    function isWeakSet(value) {\n      return isObjectLike(value) && baseGetTag(value) == weakSetTag;\n    }\n\n    /**\n     * Checks if `value` is less than `other`.\n     *\n     * @static\n     * @memberOf _\n     * @since 3.9.0\n     * @category Lang\n     * @param {*} value The value to compare.\n     * @param {*} other The other value to compare.\n     * @returns {boolean} Returns `true` if `value` is less than `other`,\n     *  else `false`.\n     * @see _.gt\n     * @example\n     *\n     * _.lt(1, 3);\n     * // => true\n     *\n     * _.lt(3, 3);\n     * // => false\n     *\n     * _.lt(3, 1);\n     * // => false\n     */\n    var lt = createRelationalOperation(baseLt);\n\n    /**\n     * Checks if `value` is less than or equal to `other`.\n     *\n     * @static\n     * @memberOf _\n     * @since 3.9.0\n     * @category Lang\n     * @param {*} value The value to compare.\n     * @param {*} other The other value to compare.\n     * @returns {boolean} Returns `true` if `value` is less than or equal to\n     *  `other`, else `false`.\n     * @see _.gte\n     * @example\n     *\n     * _.lte(1, 3);\n     * // => true\n     *\n     * _.lte(3, 3);\n     * // => true\n     *\n     * _.lte(3, 1);\n     * // => false\n     */\n    var lte = createRelationalOperation(function(value, other) {\n      return value <= other;\n    });\n\n    /**\n     * Converts `value` to an array.\n     *\n     * @static\n     * @since 0.1.0\n     * @memberOf _\n     * @category Lang\n     * @param {*} value The value to convert.\n     * @returns {Array} Returns the converted array.\n     * @example\n     *\n     * _.toArray({ 'a': 1, 'b': 2 });\n     * // => [1, 2]\n     *\n     * _.toArray('abc');\n     * // => ['a', 'b', 'c']\n     *\n     * _.toArray(1);\n     * // => []\n     *\n     * _.toArray(null);\n     * // => []\n     */\n    function toArray(value) {\n      if (!value) {\n        return [];\n      }\n      if (isArrayLike(value)) {\n        return isString(value) ? stringToArray(value) : copyArray(value);\n      }\n      if (symIterator && value[symIterator]) {\n        return iteratorToArray(value[symIterator]());\n      }\n      var tag = getTag(value),\n          func = tag == mapTag ? mapToArray : (tag == setTag ? setToArray : values);\n\n      return func(value);\n    }\n\n    /**\n     * Converts `value` to a finite number.\n     *\n     * @static\n     * @memberOf _\n     * @since 4.12.0\n     * @category Lang\n     * @param {*} value The value to convert.\n     * @returns {number} Returns the converted number.\n     * @example\n     *\n     * _.toFinite(3.2);\n     * // => 3.2\n     *\n     * _.toFinite(Number.MIN_VALUE);\n     * // => 5e-324\n     *\n     * _.toFinite(Infinity);\n     * // => 1.7976931348623157e+308\n     *\n     * _.toFinite('3.2');\n     * // => 3.2\n     */\n    function toFinite(value) {\n      if (!value) {\n        return value === 0 ? value : 0;\n      }\n      value = toNumber(value);\n      if (value === INFINITY || value === -INFINITY) {\n        var sign = (value < 0 ? -1 : 1);\n        return sign * MAX_INTEGER;\n      }\n      return value === value ? value : 0;\n    }\n\n    /**\n     * Converts `value` to an integer.\n     *\n     * **Note:** This method is loosely based on\n     * [`ToInteger`](http://www.ecma-international.org/ecma-262/7.0/#sec-tointeger).\n     *\n     * @static\n     * @memberOf _\n     * @since 4.0.0\n     * @category Lang\n     * @param {*} value The value to convert.\n     * @returns {number} Returns the converted integer.\n     * @example\n     *\n     * _.toInteger(3.2);\n     * // => 3\n     *\n     * _.toInteger(Number.MIN_VALUE);\n     * // => 0\n     *\n     * _.toInteger(Infinity);\n     * // => 1.7976931348623157e+308\n     *\n     * _.toInteger('3.2');\n     * // => 3\n     */\n    function toInteger(value) {\n      var result = toFinite(value),\n          remainder = result % 1;\n\n      return result === result ? (remainder ? result - remainder : result) : 0;\n    }\n\n    /**\n     * Converts `value` to an integer suitable for use as the length of an\n     * array-like object.\n     *\n     * **Note:** This method is based on\n     * [`ToLength`](http://ecma-international.org/ecma-262/7.0/#sec-tolength).\n     *\n     * @static\n     * @memberOf _\n     * @since 4.0.0\n     * @category Lang\n     * @param {*} value The value to convert.\n     * @returns {number} Returns the converted integer.\n     * @example\n     *\n     * _.toLength(3.2);\n     * // => 3\n     *\n     * _.toLength(Number.MIN_VALUE);\n     * // => 0\n     *\n     * _.toLength(Infinity);\n     * // => 4294967295\n     *\n     * _.toLength('3.2');\n     * // => 3\n     */\n    function toLength(value) {\n      return value ? baseClamp(toInteger(value), 0, MAX_ARRAY_LENGTH) : 0;\n    }\n\n    /**\n     * Converts `value` to a number.\n     *\n     * @static\n     * @memberOf _\n     * @since 4.0.0\n     * @category Lang\n     * @param {*} value The value to process.\n     * @returns {number} Returns the number.\n     * @example\n     *\n     * _.toNumber(3.2);\n     * // => 3.2\n     *\n     * _.toNumber(Number.MIN_VALUE);\n     * // => 5e-324\n     *\n     * _.toNumber(Infinity);\n     * // => Infinity\n     *\n     * _.toNumber('3.2');\n     * // => 3.2\n     */\n    function toNumber(value) {\n      if (typeof value == 'number') {\n        return value;\n      }\n      if (isSymbol(value)) {\n        return NAN;\n      }\n      if (isObject(value)) {\n        var other = typeof value.valueOf == 'function' ? value.valueOf() : value;\n        value = isObject(other) ? (other + '') : other;\n      }\n      if (typeof value != 'string') {\n        return value === 0 ? value : +value;\n      }\n      value = value.replace(reTrim, '');\n      var isBinary = reIsBinary.test(value);\n      return (isBinary || reIsOctal.test(value))\n        ? freeParseInt(value.slice(2), isBinary ? 2 : 8)\n        : (reIsBadHex.test(value) ? NAN : +value);\n    }\n\n    /**\n     * Converts `value` to a plain object flattening inherited enumerable string\n     * keyed properties of `value` to own properties of the plain object.\n     *\n     * @static\n     * @memberOf _\n     * @since 3.0.0\n     * @category Lang\n     * @param {*} value The value to convert.\n     * @returns {Object} Returns the converted plain object.\n     * @example\n     *\n     * function Foo() {\n     *   this.b = 2;\n     * }\n     *\n     * Foo.prototype.c = 3;\n     *\n     * _.assign({ 'a': 1 }, new Foo);\n     * // => { 'a': 1, 'b': 2 }\n     *\n     * _.assign({ 'a': 1 }, _.toPlainObject(new Foo));\n     * // => { 'a': 1, 'b': 2, 'c': 3 }\n     */\n    function toPlainObject(value) {\n      return copyObject(value, keysIn(value));\n    }\n\n    /**\n     * Converts `value` to a safe integer. A safe integer can be compared and\n     * represented correctly.\n     *\n     * @static\n     * @memberOf _\n     * @since 4.0.0\n     * @category Lang\n     * @param {*} value The value to convert.\n     * @returns {number} Returns the converted integer.\n     * @example\n     *\n     * _.toSafeInteger(3.2);\n     * // => 3\n     *\n     * _.toSafeInteger(Number.MIN_VALUE);\n     * // => 0\n     *\n     * _.toSafeInteger(Infinity);\n     * // => 9007199254740991\n     *\n     * _.toSafeInteger('3.2');\n     * // => 3\n     */\n    function toSafeInteger(value) {\n      return value\n        ? baseClamp(toInteger(value), -MAX_SAFE_INTEGER, MAX_SAFE_INTEGER)\n        : (value === 0 ? value : 0);\n    }\n\n    /**\n     * Converts `value` to a string. An empty string is returned for `null`\n     * and `undefined` values. The sign of `-0` is preserved.\n     *\n     * @static\n     * @memberOf _\n     * @since 4.0.0\n     * @category Lang\n     * @param {*} value The value to convert.\n     * @returns {string} Returns the converted string.\n     * @example\n     *\n     * _.toString(null);\n     * // => ''\n     *\n     * _.toString(-0);\n     * // => '-0'\n     *\n     * _.toString([1, 2, 3]);\n     * // => '1,2,3'\n     */\n    function toString(value) {\n      return value == null ? '' : baseToString(value);\n    }\n\n    /*------------------------------------------------------------------------*/\n\n    /**\n     * Assigns own enumerable string keyed properties of source objects to the\n     * destination object. Source objects are applied from left to right.\n     * Subsequent sources overwrite property assignments of previous sources.\n     *\n     * **Note:** This method mutates `object` and is loosely based on\n     * [`Object.assign`](https://mdn.io/Object/assign).\n     *\n     * @static\n     * @memberOf _\n     * @since 0.10.0\n     * @category Object\n     * @param {Object} object The destination object.\n     * @param {...Object} [sources] The source objects.\n     * @returns {Object} Returns `object`.\n     * @see _.assignIn\n     * @example\n     *\n     * function Foo() {\n     *   this.a = 1;\n     * }\n     *\n     * function Bar() {\n     *   this.c = 3;\n     * }\n     *\n     * Foo.prototype.b = 2;\n     * Bar.prototype.d = 4;\n     *\n     * _.assign({ 'a': 0 }, new Foo, new Bar);\n     * // => { 'a': 1, 'c': 3 }\n     */\n    var assign = createAssigner(function(object, source) {\n      if (isPrototype(source) || isArrayLike(source)) {\n        copyObject(source, keys(source), object);\n        return;\n      }\n      for (var key in source) {\n        if (hasOwnProperty.call(source, key)) {\n          assignValue(object, key, source[key]);\n        }\n      }\n    });\n\n    /**\n     * This method is like `_.assign` except that it iterates over own and\n     * inherited source properties.\n     *\n     * **Note:** This method mutates `object`.\n     *\n     * @static\n     * @memberOf _\n     * @since 4.0.0\n     * @alias extend\n     * @category Object\n     * @param {Object} object The destination object.\n     * @param {...Object} [sources] The source objects.\n     * @returns {Object} Returns `object`.\n     * @see _.assign\n     * @example\n     *\n     * function Foo() {\n     *   this.a = 1;\n     * }\n     *\n     * function Bar() {\n     *   this.c = 3;\n     * }\n     *\n     * Foo.prototype.b = 2;\n     * Bar.prototype.d = 4;\n     *\n     * _.assignIn({ 'a': 0 }, new Foo, new Bar);\n     * // => { 'a': 1, 'b': 2, 'c': 3, 'd': 4 }\n     */\n    var assignIn = createAssigner(function(object, source) {\n      copyObject(source, keysIn(source), object);\n    });\n\n    /**\n     * This method is like `_.assignIn` except that it accepts `customizer`\n     * which is invoked to produce the assigned values. If `customizer` returns\n     * `undefined`, assignment is handled by the method instead. The `customizer`\n     * is invoked with five arguments: (objValue, srcValue, key, object, source).\n     *\n     * **Note:** This method mutates `object`.\n     *\n     * @static\n     * @memberOf _\n     * @since 4.0.0\n     * @alias extendWith\n     * @category Object\n     * @param {Object} object The destination object.\n     * @param {...Object} sources The source objects.\n     * @param {Function} [customizer] The function to customize assigned values.\n     * @returns {Object} Returns `object`.\n     * @see _.assignWith\n     * @example\n     *\n     * function customizer(objValue, srcValue) {\n     *   return _.isUndefined(objValue) ? srcValue : objValue;\n     * }\n     *\n     * var defaults = _.partialRight(_.assignInWith, customizer);\n     *\n     * defaults({ 'a': 1 }, { 'b': 2 }, { 'a': 3 });\n     * // => { 'a': 1, 'b': 2 }\n     */\n    var assignInWith = createAssigner(function(object, source, srcIndex, customizer) {\n      copyObject(source, keysIn(source), object, customizer);\n    });\n\n    /**\n     * This method is like `_.assign` except that it accepts `customizer`\n     * which is invoked to produce the assigned values. If `customizer` returns\n     * `undefined`, assignment is handled by the method instead. The `customizer`\n     * is invoked with five arguments: (objValue, srcValue, key, object, source).\n     *\n     * **Note:** This method mutates `object`.\n     *\n     * @static\n     * @memberOf _\n     * @since 4.0.0\n     * @category Object\n     * @param {Object} object The destination object.\n     * @param {...Object} sources The source objects.\n     * @param {Function} [customizer] The function to customize assigned values.\n     * @returns {Object} Returns `object`.\n     * @see _.assignInWith\n     * @example\n     *\n     * function customizer(objValue, srcValue) {\n     *   return _.isUndefined(objValue) ? srcValue : objValue;\n     * }\n     *\n     * var defaults = _.partialRight(_.assignWith, customizer);\n     *\n     * defaults({ 'a': 1 }, { 'b': 2 }, { 'a': 3 });\n     * // => { 'a': 1, 'b': 2 }\n     */\n    var assignWith = createAssigner(function(object, source, srcIndex, customizer) {\n      copyObject(source, keys(source), object, customizer);\n    });\n\n    /**\n     * Creates an array of values corresponding to `paths` of `object`.\n     *\n     * @static\n     * @memberOf _\n     * @since 1.0.0\n     * @category Object\n     * @param {Object} object The object to iterate over.\n     * @param {...(string|string[])} [paths] The property paths to pick.\n     * @returns {Array} Returns the picked values.\n     * @example\n     *\n     * var object = { 'a': [{ 'b': { 'c': 3 } }, 4] };\n     *\n     * _.at(object, ['a[0].b.c', 'a[1]']);\n     * // => [3, 4]\n     */\n    var at = flatRest(baseAt);\n\n    /**\n     * Creates an object that inherits from the `prototype` object. If a\n     * `properties` object is given, its own enumerable string keyed properties\n     * are assigned to the created object.\n     *\n     * @static\n     * @memberOf _\n     * @since 2.3.0\n     * @category Object\n     * @param {Object} prototype The object to inherit from.\n     * @param {Object} [properties] The properties to assign to the object.\n     * @returns {Object} Returns the new object.\n     * @example\n     *\n     * function Shape() {\n     *   this.x = 0;\n     *   this.y = 0;\n     * }\n     *\n     * function Circle() {\n     *   Shape.call(this);\n     * }\n     *\n     * Circle.prototype = _.create(Shape.prototype, {\n     *   'constructor': Circle\n     * });\n     *\n     * var circle = new Circle;\n     * circle instanceof Circle;\n     * // => true\n     *\n     * circle instanceof Shape;\n     * // => true\n     */\n    function create(prototype, properties) {\n      var result = baseCreate(prototype);\n      return properties == null ? result : baseAssign(result, properties);\n    }\n\n    /**\n     * Assigns own and inherited enumerable string keyed properties of source\n     * objects to the destination object for all destination properties that\n     * resolve to `undefined`. Source objects are applied from left to right.\n     * Once a property is set, additional values of the same property are ignored.\n     *\n     * **Note:** This method mutates `object`.\n     *\n     * @static\n     * @since 0.1.0\n     * @memberOf _\n     * @category Object\n     * @param {Object} object The destination object.\n     * @param {...Object} [sources] The source objects.\n     * @returns {Object} Returns `object`.\n     * @see _.defaultsDeep\n     * @example\n     *\n     * _.defaults({ 'a': 1 }, { 'b': 2 }, { 'a': 3 });\n     * // => { 'a': 1, 'b': 2 }\n     */\n    var defaults = baseRest(function(args) {\n      args.push(undefined, customDefaultsAssignIn);\n      return apply(assignInWith, undefined, args);\n    });\n\n    /**\n     * This method is like `_.defaults` except that it recursively assigns\n     * default properties.\n     *\n     * **Note:** This method mutates `object`.\n     *\n     * @static\n     * @memberOf _\n     * @since 3.10.0\n     * @category Object\n     * @param {Object} object The destination object.\n     * @param {...Object} [sources] The source objects.\n     * @returns {Object} Returns `object`.\n     * @see _.defaults\n     * @example\n     *\n     * _.defaultsDeep({ 'a': { 'b': 2 } }, { 'a': { 'b': 1, 'c': 3 } });\n     * // => { 'a': { 'b': 2, 'c': 3 } }\n     */\n    var defaultsDeep = baseRest(function(args) {\n      args.push(undefined, customDefaultsMerge);\n      return apply(mergeWith, undefined, args);\n    });\n\n    /**\n     * This method is like `_.find` except that it returns the key of the first\n     * element `predicate` returns truthy for instead of the element itself.\n     *\n     * @static\n     * @memberOf _\n     * @since 1.1.0\n     * @category Object\n     * @param {Object} object The object to inspect.\n     * @param {Function} [predicate=_.identity] The function invoked per iteration.\n     * @returns {string|undefined} Returns the key of the matched element,\n     *  else `undefined`.\n     * @example\n     *\n     * var users = {\n     *   'barney':  { 'age': 36, 'active': true },\n     *   'fred':    { 'age': 40, 'active': false },\n     *   'pebbles': { 'age': 1,  'active': true }\n     * };\n     *\n     * _.findKey(users, function(o) { return o.age < 40; });\n     * // => 'barney' (iteration order is not guaranteed)\n     *\n     * // The `_.matches` iteratee shorthand.\n     * _.findKey(users, { 'age': 1, 'active': true });\n     * // => 'pebbles'\n     *\n     * // The `_.matchesProperty` iteratee shorthand.\n     * _.findKey(users, ['active', false]);\n     * // => 'fred'\n     *\n     * // The `_.property` iteratee shorthand.\n     * _.findKey(users, 'active');\n     * // => 'barney'\n     */\n    function findKey(object, predicate) {\n      return baseFindKey(object, getIteratee(predicate, 3), baseForOwn);\n    }\n\n    /**\n     * This method is like `_.findKey` except that it iterates over elements of\n     * a collection in the opposite order.\n     *\n     * @static\n     * @memberOf _\n     * @since 2.0.0\n     * @category Object\n     * @param {Object} object The object to inspect.\n     * @param {Function} [predicate=_.identity] The function invoked per iteration.\n     * @returns {string|undefined} Returns the key of the matched element,\n     *  else `undefined`.\n     * @example\n     *\n     * var users = {\n     *   'barney':  { 'age': 36, 'active': true },\n     *   'fred':    { 'age': 40, 'active': false },\n     *   'pebbles': { 'age': 1,  'active': true }\n     * };\n     *\n     * _.findLastKey(users, function(o) { return o.age < 40; });\n     * // => returns 'pebbles' assuming `_.findKey` returns 'barney'\n     *\n     * // The `_.matches` iteratee shorthand.\n     * _.findLastKey(users, { 'age': 36, 'active': true });\n     * // => 'barney'\n     *\n     * // The `_.matchesProperty` iteratee shorthand.\n     * _.findLastKey(users, ['active', false]);\n     * // => 'fred'\n     *\n     * // The `_.property` iteratee shorthand.\n     * _.findLastKey(users, 'active');\n     * // => 'pebbles'\n     */\n    function findLastKey(object, predicate) {\n      return baseFindKey(object, getIteratee(predicate, 3), baseForOwnRight);\n    }\n\n    /**\n     * Iterates over own and inherited enumerable string keyed properties of an\n     * object and invokes `iteratee` for each property. The iteratee is invoked\n     * with three arguments: (value, key, object). Iteratee functions may exit\n     * iteration early by explicitly returning `false`.\n     *\n     * @static\n     * @memberOf _\n     * @since 0.3.0\n     * @category Object\n     * @param {Object} object The object to iterate over.\n     * @param {Function} [iteratee=_.identity] The function invoked per iteration.\n     * @returns {Object} Returns `object`.\n     * @see _.forInRight\n     * @example\n     *\n     * function Foo() {\n     *   this.a = 1;\n     *   this.b = 2;\n     * }\n     *\n     * Foo.prototype.c = 3;\n     *\n     * _.forIn(new Foo, function(value, key) {\n     *   console.log(key);\n     * });\n     * // => Logs 'a', 'b', then 'c' (iteration order is not guaranteed).\n     */\n    function forIn(object, iteratee) {\n      return object == null\n        ? object\n        : baseFor(object, getIteratee(iteratee, 3), keysIn);\n    }\n\n    /**\n     * This method is like `_.forIn` except that it iterates over properties of\n     * `object` in the opposite order.\n     *\n     * @static\n     * @memberOf _\n     * @since 2.0.0\n     * @category Object\n     * @param {Object} object The object to iterate over.\n     * @param {Function} [iteratee=_.identity] The function invoked per iteration.\n     * @returns {Object} Returns `object`.\n     * @see _.forIn\n     * @example\n     *\n     * function Foo() {\n     *   this.a = 1;\n     *   this.b = 2;\n     * }\n     *\n     * Foo.prototype.c = 3;\n     *\n     * _.forInRight(new Foo, function(value, key) {\n     *   console.log(key);\n     * });\n     * // => Logs 'c', 'b', then 'a' assuming `_.forIn` logs 'a', 'b', then 'c'.\n     */\n    function forInRight(object, iteratee) {\n      return object == null\n        ? object\n        : baseForRight(object, getIteratee(iteratee, 3), keysIn);\n    }\n\n    /**\n     * Iterates over own enumerable string keyed properties of an object and\n     * invokes `iteratee` for each property. The iteratee is invoked with three\n     * arguments: (value, key, object). Iteratee functions may exit iteration\n     * early by explicitly returning `false`.\n     *\n     * @static\n     * @memberOf _\n     * @since 0.3.0\n     * @category Object\n     * @param {Object} object The object to iterate over.\n     * @param {Function} [iteratee=_.identity] The function invoked per iteration.\n     * @returns {Object} Returns `object`.\n     * @see _.forOwnRight\n     * @example\n     *\n     * function Foo() {\n     *   this.a = 1;\n     *   this.b = 2;\n     * }\n     *\n     * Foo.prototype.c = 3;\n     *\n     * _.forOwn(new Foo, function(value, key) {\n     *   console.log(key);\n     * });\n     * // => Logs 'a' then 'b' (iteration order is not guaranteed).\n     */\n    function forOwn(object, iteratee) {\n      return object && baseForOwn(object, getIteratee(iteratee, 3));\n    }\n\n    /**\n     * This method is like `_.forOwn` except that it iterates over properties of\n     * `object` in the opposite order.\n     *\n     * @static\n     * @memberOf _\n     * @since 2.0.0\n     * @category Object\n     * @param {Object} object The object to iterate over.\n     * @param {Function} [iteratee=_.identity] The function invoked per iteration.\n     * @returns {Object} Returns `object`.\n     * @see _.forOwn\n     * @example\n     *\n     * function Foo() {\n     *   this.a = 1;\n     *   this.b = 2;\n     * }\n     *\n     * Foo.prototype.c = 3;\n     *\n     * _.forOwnRight(new Foo, function(value, key) {\n     *   console.log(key);\n     * });\n     * // => Logs 'b' then 'a' assuming `_.forOwn` logs 'a' then 'b'.\n     */\n    function forOwnRight(object, iteratee) {\n      return object && baseForOwnRight(object, getIteratee(iteratee, 3));\n    }\n\n    /**\n     * Creates an array of function property names from own enumerable properties\n     * of `object`.\n     *\n     * @static\n     * @since 0.1.0\n     * @memberOf _\n     * @category Object\n     * @param {Object} object The object to inspect.\n     * @returns {Array} Returns the function names.\n     * @see _.functionsIn\n     * @example\n     *\n     * function Foo() {\n     *   this.a = _.constant('a');\n     *   this.b = _.constant('b');\n     * }\n     *\n     * Foo.prototype.c = _.constant('c');\n     *\n     * _.functions(new Foo);\n     * // => ['a', 'b']\n     */\n    function functions(object) {\n      return object == null ? [] : baseFunctions(object, keys(object));\n    }\n\n    /**\n     * Creates an array of function property names from own and inherited\n     * enumerable properties of `object`.\n     *\n     * @static\n     * @memberOf _\n     * @since 4.0.0\n     * @category Object\n     * @param {Object} object The object to inspect.\n     * @returns {Array} Returns the function names.\n     * @see _.functions\n     * @example\n     *\n     * function Foo() {\n     *   this.a = _.constant('a');\n     *   this.b = _.constant('b');\n     * }\n     *\n     * Foo.prototype.c = _.constant('c');\n     *\n     * _.functionsIn(new Foo);\n     * // => ['a', 'b', 'c']\n     */\n    function functionsIn(object) {\n      return object == null ? [] : baseFunctions(object, keysIn(object));\n    }\n\n    /**\n     * Gets the value at `path` of `object`. If the resolved value is\n     * `undefined`, the `defaultValue` is returned in its place.\n     *\n     * @static\n     * @memberOf _\n     * @since 3.7.0\n     * @category Object\n     * @param {Object} object The object to query.\n     * @param {Array|string} path The path of the property to get.\n     * @param {*} [defaultValue] The value returned for `undefined` resolved values.\n     * @returns {*} Returns the resolved value.\n     * @example\n     *\n     * var object = { 'a': [{ 'b': { 'c': 3 } }] };\n     *\n     * _.get(object, 'a[0].b.c');\n     * // => 3\n     *\n     * _.get(object, ['a', '0', 'b', 'c']);\n     * // => 3\n     *\n     * _.get(object, 'a.b.c', 'default');\n     * // => 'default'\n     */\n    function get(object, path, defaultValue) {\n      var result = object == null ? undefined : baseGet(object, path);\n      return result === undefined ? defaultValue : result;\n    }\n\n    /**\n     * Checks if `path` is a direct property of `object`.\n     *\n     * @static\n     * @since 0.1.0\n     * @memberOf _\n     * @category Object\n     * @param {Object} object The object to query.\n     * @param {Array|string} path The path to check.\n     * @returns {boolean} Returns `true` if `path` exists, else `false`.\n     * @example\n     *\n     * var object = { 'a': { 'b': 2 } };\n     * var other = _.create({ 'a': _.create({ 'b': 2 }) });\n     *\n     * _.has(object, 'a');\n     * // => true\n     *\n     * _.has(object, 'a.b');\n     * // => true\n     *\n     * _.has(object, ['a', 'b']);\n     * // => true\n     *\n     * _.has(other, 'a');\n     * // => false\n     */\n    function has(object, path) {\n      return object != null && hasPath(object, path, baseHas);\n    }\n\n    /**\n     * Checks if `path` is a direct or inherited property of `object`.\n     *\n     * @static\n     * @memberOf _\n     * @since 4.0.0\n     * @category Object\n     * @param {Object} object The object to query.\n     * @param {Array|string} path The path to check.\n     * @returns {boolean} Returns `true` if `path` exists, else `false`.\n     * @example\n     *\n     * var object = _.create({ 'a': _.create({ 'b': 2 }) });\n     *\n     * _.hasIn(object, 'a');\n     * // => true\n     *\n     * _.hasIn(object, 'a.b');\n     * // => true\n     *\n     * _.hasIn(object, ['a', 'b']);\n     * // => true\n     *\n     * _.hasIn(object, 'b');\n     * // => false\n     */\n    function hasIn(object, path) {\n      return object != null && hasPath(object, path, baseHasIn);\n    }\n\n    /**\n     * Creates an object composed of the inverted keys and values of `object`.\n     * If `object` contains duplicate values, subsequent values overwrite\n     * property assignments of previous values.\n     *\n     * @static\n     * @memberOf _\n     * @since 0.7.0\n     * @category Object\n     * @param {Object} object The object to invert.\n     * @returns {Object} Returns the new inverted object.\n     * @example\n     *\n     * var object = { 'a': 1, 'b': 2, 'c': 1 };\n     *\n     * _.invert(object);\n     * // => { '1': 'c', '2': 'b' }\n     */\n    var invert = createInverter(function(result, value, key) {\n      result[value] = key;\n    }, constant(identity));\n\n    /**\n     * This method is like `_.invert` except that the inverted object is generated\n     * from the results of running each element of `object` thru `iteratee`. The\n     * corresponding inverted value of each inverted key is an array of keys\n     * responsible for generating the inverted value. The iteratee is invoked\n     * with one argument: (value).\n     *\n     * @static\n     * @memberOf _\n     * @since 4.1.0\n     * @category Object\n     * @param {Object} object The object to invert.\n     * @param {Function} [iteratee=_.identity] The iteratee invoked per element.\n     * @returns {Object} Returns the new inverted object.\n     * @example\n     *\n     * var object = { 'a': 1, 'b': 2, 'c': 1 };\n     *\n     * _.invertBy(object);\n     * // => { '1': ['a', 'c'], '2': ['b'] }\n     *\n     * _.invertBy(object, function(value) {\n     *   return 'group' + value;\n     * });\n     * // => { 'group1': ['a', 'c'], 'group2': ['b'] }\n     */\n    var invertBy = createInverter(function(result, value, key) {\n      if (hasOwnProperty.call(result, value)) {\n        result[value].push(key);\n      } else {\n        result[value] = [key];\n      }\n    }, getIteratee);\n\n    /**\n     * Invokes the method at `path` of `object`.\n     *\n     * @static\n     * @memberOf _\n     * @since 4.0.0\n     * @category Object\n     * @param {Object} object The object to query.\n     * @param {Array|string} path The path of the method to invoke.\n     * @param {...*} [args] The arguments to invoke the method with.\n     * @returns {*} Returns the result of the invoked method.\n     * @example\n     *\n     * var object = { 'a': [{ 'b': { 'c': [1, 2, 3, 4] } }] };\n     *\n     * _.invoke(object, 'a[0].b.c.slice', 1, 3);\n     * // => [2, 3]\n     */\n    var invoke = baseRest(baseInvoke);\n\n    /**\n     * Creates an array of the own enumerable property names of `object`.\n     *\n     * **Note:** Non-object values are coerced to objects. See the\n     * [ES spec](http://ecma-international.org/ecma-262/7.0/#sec-object.keys)\n     * for more details.\n     *\n     * @static\n     * @since 0.1.0\n     * @memberOf _\n     * @category Object\n     * @param {Object} object The object to query.\n     * @returns {Array} Returns the array of property names.\n     * @example\n     *\n     * function Foo() {\n     *   this.a = 1;\n     *   this.b = 2;\n     * }\n     *\n     * Foo.prototype.c = 3;\n     *\n     * _.keys(new Foo);\n     * // => ['a', 'b'] (iteration order is not guaranteed)\n     *\n     * _.keys('hi');\n     * // => ['0', '1']\n     */\n    function keys(object) {\n      return isArrayLike(object) ? arrayLikeKeys(object) : baseKeys(object);\n    }\n\n    /**\n     * Creates an array of the own and inherited enumerable property names of `object`.\n     *\n     * **Note:** Non-object values are coerced to objects.\n     *\n     * @static\n     * @memberOf _\n     * @since 3.0.0\n     * @category Object\n     * @param {Object} object The object to query.\n     * @returns {Array} Returns the array of property names.\n     * @example\n     *\n     * function Foo() {\n     *   this.a = 1;\n     *   this.b = 2;\n     * }\n     *\n     * Foo.prototype.c = 3;\n     *\n     * _.keysIn(new Foo);\n     * // => ['a', 'b', 'c'] (iteration order is not guaranteed)\n     */\n    function keysIn(object) {\n      return isArrayLike(object) ? arrayLikeKeys(object, true) : baseKeysIn(object);\n    }\n\n    /**\n     * The opposite of `_.mapValues`; this method creates an object with the\n     * same values as `object` and keys generated by running each own enumerable\n     * string keyed property of `object` thru `iteratee`. The iteratee is invoked\n     * with three arguments: (value, key, object).\n     *\n     * @static\n     * @memberOf _\n     * @since 3.8.0\n     * @category Object\n     * @param {Object} object The object to iterate over.\n     * @param {Function} [iteratee=_.identity] The function invoked per iteration.\n     * @returns {Object} Returns the new mapped object.\n     * @see _.mapValues\n     * @example\n     *\n     * _.mapKeys({ 'a': 1, 'b': 2 }, function(value, key) {\n     *   return key + value;\n     * });\n     * // => { 'a1': 1, 'b2': 2 }\n     */\n    function mapKeys(object, iteratee) {\n      var result = {};\n      iteratee = getIteratee(iteratee, 3);\n\n      baseForOwn(object, function(value, key, object) {\n        baseAssignValue(result, iteratee(value, key, object), value);\n      });\n      return result;\n    }\n\n    /**\n     * Creates an object with the same keys as `object` and values generated\n     * by running each own enumerable string keyed property of `object` thru\n     * `iteratee`. The iteratee is invoked with three arguments:\n     * (value, key, object).\n     *\n     * @static\n     * @memberOf _\n     * @since 2.4.0\n     * @category Object\n     * @param {Object} object The object to iterate over.\n     * @param {Function} [iteratee=_.identity] The function invoked per iteration.\n     * @returns {Object} Returns the new mapped object.\n     * @see _.mapKeys\n     * @example\n     *\n     * var users = {\n     *   'fred':    { 'user': 'fred',    'age': 40 },\n     *   'pebbles': { 'user': 'pebbles', 'age': 1 }\n     * };\n     *\n     * _.mapValues(users, function(o) { return o.age; });\n     * // => { 'fred': 40, 'pebbles': 1 } (iteration order is not guaranteed)\n     *\n     * // The `_.property` iteratee shorthand.\n     * _.mapValues(users, 'age');\n     * // => { 'fred': 40, 'pebbles': 1 } (iteration order is not guaranteed)\n     */\n    function mapValues(object, iteratee) {\n      var result = {};\n      iteratee = getIteratee(iteratee, 3);\n\n      baseForOwn(object, function(value, key, object) {\n        baseAssignValue(result, key, iteratee(value, key, object));\n      });\n      return result;\n    }\n\n    /**\n     * This method is like `_.assign` except that it recursively merges own and\n     * inherited enumerable string keyed properties of source objects into the\n     * destination object. Source properties that resolve to `undefined` are\n     * skipped if a destination value exists. Array and plain object properties\n     * are merged recursively. Other objects and value types are overridden by\n     * assignment. Source objects are applied from left to right. Subsequent\n     * sources overwrite property assignments of previous sources.\n     *\n     * **Note:** This method mutates `object`.\n     *\n     * @static\n     * @memberOf _\n     * @since 0.5.0\n     * @category Object\n     * @param {Object} object The destination object.\n     * @param {...Object} [sources] The source objects.\n     * @returns {Object} Returns `object`.\n     * @example\n     *\n     * var object = {\n     *   'a': [{ 'b': 2 }, { 'd': 4 }]\n     * };\n     *\n     * var other = {\n     *   'a': [{ 'c': 3 }, { 'e': 5 }]\n     * };\n     *\n     * _.merge(object, other);\n     * // => { 'a': [{ 'b': 2, 'c': 3 }, { 'd': 4, 'e': 5 }] }\n     */\n    var merge = createAssigner(function(object, source, srcIndex) {\n      baseMerge(object, source, srcIndex);\n    });\n\n    /**\n     * This method is like `_.merge` except that it accepts `customizer` which\n     * is invoked to produce the merged values of the destination and source\n     * properties. If `customizer` returns `undefined`, merging is handled by the\n     * method instead. The `customizer` is invoked with six arguments:\n     * (objValue, srcValue, key, object, source, stack).\n     *\n     * **Note:** This method mutates `object`.\n     *\n     * @static\n     * @memberOf _\n     * @since 4.0.0\n     * @category Object\n     * @param {Object} object The destination object.\n     * @param {...Object} sources The source objects.\n     * @param {Function} customizer The function to customize assigned values.\n     * @returns {Object} Returns `object`.\n     * @example\n     *\n     * function customizer(objValue, srcValue) {\n     *   if (_.isArray(objValue)) {\n     *     return objValue.concat(srcValue);\n     *   }\n     * }\n     *\n     * var object = { 'a': [1], 'b': [2] };\n     * var other = { 'a': [3], 'b': [4] };\n     *\n     * _.mergeWith(object, other, customizer);\n     * // => { 'a': [1, 3], 'b': [2, 4] }\n     */\n    var mergeWith = createAssigner(function(object, source, srcIndex, customizer) {\n      baseMerge(object, source, srcIndex, customizer);\n    });\n\n    /**\n     * The opposite of `_.pick`; this method creates an object composed of the\n     * own and inherited enumerable property paths of `object` that are not omitted.\n     *\n     * **Note:** This method is considerably slower than `_.pick`.\n     *\n     * @static\n     * @since 0.1.0\n     * @memberOf _\n     * @category Object\n     * @param {Object} object The source object.\n     * @param {...(string|string[])} [paths] The property paths to omit.\n     * @returns {Object} Returns the new object.\n     * @example\n     *\n     * var object = { 'a': 1, 'b': '2', 'c': 3 };\n     *\n     * _.omit(object, ['a', 'c']);\n     * // => { 'b': '2' }\n     */\n    var omit = flatRest(function(object, paths) {\n      var result = {};\n      if (object == null) {\n        return result;\n      }\n      var isDeep = false;\n      paths = arrayMap(paths, function(path) {\n        path = castPath(path, object);\n        isDeep || (isDeep = path.length > 1);\n        return path;\n      });\n      copyObject(object, getAllKeysIn(object), result);\n      if (isDeep) {\n        result = baseClone(result, CLONE_DEEP_FLAG | CLONE_FLAT_FLAG | CLONE_SYMBOLS_FLAG, customOmitClone);\n      }\n      var length = paths.length;\n      while (length--) {\n        baseUnset(result, paths[length]);\n      }\n      return result;\n    });\n\n    /**\n     * The opposite of `_.pickBy`; this method creates an object composed of\n     * the own and inherited enumerable string keyed properties of `object` that\n     * `predicate` doesn't return truthy for. The predicate is invoked with two\n     * arguments: (value, key).\n     *\n     * @static\n     * @memberOf _\n     * @since 4.0.0\n     * @category Object\n     * @param {Object} object The source object.\n     * @param {Function} [predicate=_.identity] The function invoked per property.\n     * @returns {Object} Returns the new object.\n     * @example\n     *\n     * var object = { 'a': 1, 'b': '2', 'c': 3 };\n     *\n     * _.omitBy(object, _.isNumber);\n     * // => { 'b': '2' }\n     */\n    function omitBy(object, predicate) {\n      return pickBy(object, negate(getIteratee(predicate)));\n    }\n\n    /**\n     * Creates an object composed of the picked `object` properties.\n     *\n     * @static\n     * @since 0.1.0\n     * @memberOf _\n     * @category Object\n     * @param {Object} object The source object.\n     * @param {...(string|string[])} [paths] The property paths to pick.\n     * @returns {Object} Returns the new object.\n     * @example\n     *\n     * var object = { 'a': 1, 'b': '2', 'c': 3 };\n     *\n     * _.pick(object, ['a', 'c']);\n     * // => { 'a': 1, 'c': 3 }\n     */\n    var pick = flatRest(function(object, paths) {\n      return object == null ? {} : basePick(object, paths);\n    });\n\n    /**\n     * Creates an object composed of the `object` properties `predicate` returns\n     * truthy for. The predicate is invoked with two arguments: (value, key).\n     *\n     * @static\n     * @memberOf _\n     * @since 4.0.0\n     * @category Object\n     * @param {Object} object The source object.\n     * @param {Function} [predicate=_.identity] The function invoked per property.\n     * @returns {Object} Returns the new object.\n     * @example\n     *\n     * var object = { 'a': 1, 'b': '2', 'c': 3 };\n     *\n     * _.pickBy(object, _.isNumber);\n     * // => { 'a': 1, 'c': 3 }\n     */\n    function pickBy(object, predicate) {\n      if (object == null) {\n        return {};\n      }\n      var props = arrayMap(getAllKeysIn(object), function(prop) {\n        return [prop];\n      });\n      predicate = getIteratee(predicate);\n      return basePickBy(object, props, function(value, path) {\n        return predicate(value, path[0]);\n      });\n    }\n\n    /**\n     * This method is like `_.get` except that if the resolved value is a\n     * function it's invoked with the `this` binding of its parent object and\n     * its result is returned.\n     *\n     * @static\n     * @since 0.1.0\n     * @memberOf _\n     * @category Object\n     * @param {Object} object The object to query.\n     * @param {Array|string} path The path of the property to resolve.\n     * @param {*} [defaultValue] The value returned for `undefined` resolved values.\n     * @returns {*} Returns the resolved value.\n     * @example\n     *\n     * var object = { 'a': [{ 'b': { 'c1': 3, 'c2': _.constant(4) } }] };\n     *\n     * _.result(object, 'a[0].b.c1');\n     * // => 3\n     *\n     * _.result(object, 'a[0].b.c2');\n     * // => 4\n     *\n     * _.result(object, 'a[0].b.c3', 'default');\n     * // => 'default'\n     *\n     * _.result(object, 'a[0].b.c3', _.constant('default'));\n     * // => 'default'\n     */\n    function result(object, path, defaultValue) {\n      path = castPath(path, object);\n\n      var index = -1,\n          length = path.length;\n\n      // Ensure the loop is entered when path is empty.\n      if (!length) {\n        length = 1;\n        object = undefined;\n      }\n      while (++index < length) {\n        var value = object == null ? undefined : object[toKey(path[index])];\n        if (value === undefined) {\n          index = length;\n          value = defaultValue;\n        }\n        object = isFunction(value) ? value.call(object) : value;\n      }\n      return object;\n    }\n\n    /**\n     * Sets the value at `path` of `object`. If a portion of `path` doesn't exist,\n     * it's created. Arrays are created for missing index properties while objects\n     * are created for all other missing properties. Use `_.setWith` to customize\n     * `path` creation.\n     *\n     * **Note:** This method mutates `object`.\n     *\n     * @static\n     * @memberOf _\n     * @since 3.7.0\n     * @category Object\n     * @param {Object} object The object to modify.\n     * @param {Array|string} path The path of the property to set.\n     * @param {*} value The value to set.\n     * @returns {Object} Returns `object`.\n     * @example\n     *\n     * var object = { 'a': [{ 'b': { 'c': 3 } }] };\n     *\n     * _.set(object, 'a[0].b.c', 4);\n     * console.log(object.a[0].b.c);\n     * // => 4\n     *\n     * _.set(object, ['x', '0', 'y', 'z'], 5);\n     * console.log(object.x[0].y.z);\n     * // => 5\n     */\n    function set(object, path, value) {\n      return object == null ? object : baseSet(object, path, value);\n    }\n\n    /**\n     * This method is like `_.set` except that it accepts `customizer` which is\n     * invoked to produce the objects of `path`.  If `customizer` returns `undefined`\n     * path creation is handled by the method instead. The `customizer` is invoked\n     * with three arguments: (nsValue, key, nsObject).\n     *\n     * **Note:** This method mutates `object`.\n     *\n     * @static\n     * @memberOf _\n     * @since 4.0.0\n     * @category Object\n     * @param {Object} object The object to modify.\n     * @param {Array|string} path The path of the property to set.\n     * @param {*} value The value to set.\n     * @param {Function} [customizer] The function to customize assigned values.\n     * @returns {Object} Returns `object`.\n     * @example\n     *\n     * var object = {};\n     *\n     * _.setWith(object, '[0][1]', 'a', Object);\n     * // => { '0': { '1': 'a' } }\n     */\n    function setWith(object, path, value, customizer) {\n      customizer = typeof customizer == 'function' ? customizer : undefined;\n      return object == null ? object : baseSet(object, path, value, customizer);\n    }\n\n    /**\n     * Creates an array of own enumerable string keyed-value pairs for `object`\n     * which can be consumed by `_.fromPairs`. If `object` is a map or set, its\n     * entries are returned.\n     *\n     * @static\n     * @memberOf _\n     * @since 4.0.0\n     * @alias entries\n     * @category Object\n     * @param {Object} object The object to query.\n     * @returns {Array} Returns the key-value pairs.\n     * @example\n     *\n     * function Foo() {\n     *   this.a = 1;\n     *   this.b = 2;\n     * }\n     *\n     * Foo.prototype.c = 3;\n     *\n     * _.toPairs(new Foo);\n     * // => [['a', 1], ['b', 2]] (iteration order is not guaranteed)\n     */\n    var toPairs = createToPairs(keys);\n\n    /**\n     * Creates an array of own and inherited enumerable string keyed-value pairs\n     * for `object` which can be consumed by `_.fromPairs`. If `object` is a map\n     * or set, its entries are returned.\n     *\n     * @static\n     * @memberOf _\n     * @since 4.0.0\n     * @alias entriesIn\n     * @category Object\n     * @param {Object} object The object to query.\n     * @returns {Array} Returns the key-value pairs.\n     * @example\n     *\n     * function Foo() {\n     *   this.a = 1;\n     *   this.b = 2;\n     * }\n     *\n     * Foo.prototype.c = 3;\n     *\n     * _.toPairsIn(new Foo);\n     * // => [['a', 1], ['b', 2], ['c', 3]] (iteration order is not guaranteed)\n     */\n    var toPairsIn = createToPairs(keysIn);\n\n    /**\n     * An alternative to `_.reduce`; this method transforms `object` to a new\n     * `accumulator` object which is the result of running each of its own\n     * enumerable string keyed properties thru `iteratee`, with each invocation\n     * potentially mutating the `accumulator` object. If `accumulator` is not\n     * provided, a new object with the same `[[Prototype]]` will be used. The\n     * iteratee is invoked with four arguments: (accumulator, value, key, object).\n     * Iteratee functions may exit iteration early by explicitly returning `false`.\n     *\n     * @static\n     * @memberOf _\n     * @since 1.3.0\n     * @category Object\n     * @param {Object} object The object to iterate over.\n     * @param {Function} [iteratee=_.identity] The function invoked per iteration.\n     * @param {*} [accumulator] The custom accumulator value.\n     * @returns {*} Returns the accumulated value.\n     * @example\n     *\n     * _.transform([2, 3, 4], function(result, n) {\n     *   result.push(n *= n);\n     *   return n % 2 == 0;\n     * }, []);\n     * // => [4, 9]\n     *\n     * _.transform({ 'a': 1, 'b': 2, 'c': 1 }, function(result, value, key) {\n     *   (result[value] || (result[value] = [])).push(key);\n     * }, {});\n     * // => { '1': ['a', 'c'], '2': ['b'] }\n     */\n    function transform(object, iteratee, accumulator) {\n      var isArr = isArray(object),\n          isArrLike = isArr || isBuffer(object) || isTypedArray(object);\n\n      iteratee = getIteratee(iteratee, 4);\n      if (accumulator == null) {\n        var Ctor = object && object.constructor;\n        if (isArrLike) {\n          accumulator = isArr ? new Ctor : [];\n        }\n        else if (isObject(object)) {\n          accumulator = isFunction(Ctor) ? baseCreate(getPrototype(object)) : {};\n        }\n        else {\n          accumulator = {};\n        }\n      }\n      (isArrLike ? arrayEach : baseForOwn)(object, function(value, index, object) {\n        return iteratee(accumulator, value, index, object);\n      });\n      return accumulator;\n    }\n\n    /**\n     * Removes the property at `path` of `object`.\n     *\n     * **Note:** This method mutates `object`.\n     *\n     * @static\n     * @memberOf _\n     * @since 4.0.0\n     * @category Object\n     * @param {Object} object The object to modify.\n     * @param {Array|string} path The path of the property to unset.\n     * @returns {boolean} Returns `true` if the property is deleted, else `false`.\n     * @example\n     *\n     * var object = { 'a': [{ 'b': { 'c': 7 } }] };\n     * _.unset(object, 'a[0].b.c');\n     * // => true\n     *\n     * console.log(object);\n     * // => { 'a': [{ 'b': {} }] };\n     *\n     * _.unset(object, ['a', '0', 'b', 'c']);\n     * // => true\n     *\n     * console.log(object);\n     * // => { 'a': [{ 'b': {} }] };\n     */\n    function unset(object, path) {\n      return object == null ? true : baseUnset(object, path);\n    }\n\n    /**\n     * This method is like `_.set` except that accepts `updater` to produce the\n     * value to set. Use `_.updateWith` to customize `path` creation. The `updater`\n     * is invoked with one argument: (value).\n     *\n     * **Note:** This method mutates `object`.\n     *\n     * @static\n     * @memberOf _\n     * @since 4.6.0\n     * @category Object\n     * @param {Object} object The object to modify.\n     * @param {Array|string} path The path of the property to set.\n     * @param {Function} updater The function to produce the updated value.\n     * @returns {Object} Returns `object`.\n     * @example\n     *\n     * var object = { 'a': [{ 'b': { 'c': 3 } }] };\n     *\n     * _.update(object, 'a[0].b.c', function(n) { return n * n; });\n     * console.log(object.a[0].b.c);\n     * // => 9\n     *\n     * _.update(object, 'x[0].y.z', function(n) { return n ? n + 1 : 0; });\n     * console.log(object.x[0].y.z);\n     * // => 0\n     */\n    function update(object, path, updater) {\n      return object == null ? object : baseUpdate(object, path, castFunction(updater));\n    }\n\n    /**\n     * This method is like `_.update` except that it accepts `customizer` which is\n     * invoked to produce the objects of `path`.  If `customizer` returns `undefined`\n     * path creation is handled by the method instead. The `customizer` is invoked\n     * with three arguments: (nsValue, key, nsObject).\n     *\n     * **Note:** This method mutates `object`.\n     *\n     * @static\n     * @memberOf _\n     * @since 4.6.0\n     * @category Object\n     * @param {Object} object The object to modify.\n     * @param {Array|string} path The path of the property to set.\n     * @param {Function} updater The function to produce the updated value.\n     * @param {Function} [customizer] The function to customize assigned values.\n     * @returns {Object} Returns `object`.\n     * @example\n     *\n     * var object = {};\n     *\n     * _.updateWith(object, '[0][1]', _.constant('a'), Object);\n     * // => { '0': { '1': 'a' } }\n     */\n    function updateWith(object, path, updater, customizer) {\n      customizer = typeof customizer == 'function' ? customizer : undefined;\n      return object == null ? object : baseUpdate(object, path, castFunction(updater), customizer);\n    }\n\n    /**\n     * Creates an array of the own enumerable string keyed property values of `object`.\n     *\n     * **Note:** Non-object values are coerced to objects.\n     *\n     * @static\n     * @since 0.1.0\n     * @memberOf _\n     * @category Object\n     * @param {Object} object The object to query.\n     * @returns {Array} Returns the array of property values.\n     * @example\n     *\n     * function Foo() {\n     *   this.a = 1;\n     *   this.b = 2;\n     * }\n     *\n     * Foo.prototype.c = 3;\n     *\n     * _.values(new Foo);\n     * // => [1, 2] (iteration order is not guaranteed)\n     *\n     * _.values('hi');\n     * // => ['h', 'i']\n     */\n    function values(object) {\n      return object == null ? [] : baseValues(object, keys(object));\n    }\n\n    /**\n     * Creates an array of the own and inherited enumerable string keyed property\n     * values of `object`.\n     *\n     * **Note:** Non-object values are coerced to objects.\n     *\n     * @static\n     * @memberOf _\n     * @since 3.0.0\n     * @category Object\n     * @param {Object} object The object to query.\n     * @returns {Array} Returns the array of property values.\n     * @example\n     *\n     * function Foo() {\n     *   this.a = 1;\n     *   this.b = 2;\n     * }\n     *\n     * Foo.prototype.c = 3;\n     *\n     * _.valuesIn(new Foo);\n     * // => [1, 2, 3] (iteration order is not guaranteed)\n     */\n    function valuesIn(object) {\n      return object == null ? [] : baseValues(object, keysIn(object));\n    }\n\n    /*------------------------------------------------------------------------*/\n\n    /**\n     * Clamps `number` within the inclusive `lower` and `upper` bounds.\n     *\n     * @static\n     * @memberOf _\n     * @since 4.0.0\n     * @category Number\n     * @param {number} number The number to clamp.\n     * @param {number} [lower] The lower bound.\n     * @param {number} upper The upper bound.\n     * @returns {number} Returns the clamped number.\n     * @example\n     *\n     * _.clamp(-10, -5, 5);\n     * // => -5\n     *\n     * _.clamp(10, -5, 5);\n     * // => 5\n     */\n    function clamp(number, lower, upper) {\n      if (upper === undefined) {\n        upper = lower;\n        lower = undefined;\n      }\n      if (upper !== undefined) {\n        upper = toNumber(upper);\n        upper = upper === upper ? upper : 0;\n      }\n      if (lower !== undefined) {\n        lower = toNumber(lower);\n        lower = lower === lower ? lower : 0;\n      }\n      return baseClamp(toNumber(number), lower, upper);\n    }\n\n    /**\n     * Checks if `n` is between `start` and up to, but not including, `end`. If\n     * `end` is not specified, it's set to `start` with `start` then set to `0`.\n     * If `start` is greater than `end` the params are swapped to support\n     * negative ranges.\n     *\n     * @static\n     * @memberOf _\n     * @since 3.3.0\n     * @category Number\n     * @param {number} number The number to check.\n     * @param {number} [start=0] The start of the range.\n     * @param {number} end The end of the range.\n     * @returns {boolean} Returns `true` if `number` is in the range, else `false`.\n     * @see _.range, _.rangeRight\n     * @example\n     *\n     * _.inRange(3, 2, 4);\n     * // => true\n     *\n     * _.inRange(4, 8);\n     * // => true\n     *\n     * _.inRange(4, 2);\n     * // => false\n     *\n     * _.inRange(2, 2);\n     * // => false\n     *\n     * _.inRange(1.2, 2);\n     * // => true\n     *\n     * _.inRange(5.2, 4);\n     * // => false\n     *\n     * _.inRange(-3, -2, -6);\n     * // => true\n     */\n    function inRange(number, start, end) {\n      start = toFinite(start);\n      if (end === undefined) {\n        end = start;\n        start = 0;\n      } else {\n        end = toFinite(end);\n      }\n      number = toNumber(number);\n      return baseInRange(number, start, end);\n    }\n\n    /**\n     * Produces a random number between the inclusive `lower` and `upper` bounds.\n     * If only one argument is provided a number between `0` and the given number\n     * is returned. If `floating` is `true`, or either `lower` or `upper` are\n     * floats, a floating-point number is returned instead of an integer.\n     *\n     * **Note:** JavaScript follows the IEEE-754 standard for resolving\n     * floating-point values which can produce unexpected results.\n     *\n     * @static\n     * @memberOf _\n     * @since 0.7.0\n     * @category Number\n     * @param {number} [lower=0] The lower bound.\n     * @param {number} [upper=1] The upper bound.\n     * @param {boolean} [floating] Specify returning a floating-point number.\n     * @returns {number} Returns the random number.\n     * @example\n     *\n     * _.random(0, 5);\n     * // => an integer between 0 and 5\n     *\n     * _.random(5);\n     * // => also an integer between 0 and 5\n     *\n     * _.random(5, true);\n     * // => a floating-point number between 0 and 5\n     *\n     * _.random(1.2, 5.2);\n     * // => a floating-point number between 1.2 and 5.2\n     */\n    function random(lower, upper, floating) {\n      if (floating && typeof floating != 'boolean' && isIterateeCall(lower, upper, floating)) {\n        upper = floating = undefined;\n      }\n      if (floating === undefined) {\n        if (typeof upper == 'boolean') {\n          floating = upper;\n          upper = undefined;\n        }\n        else if (typeof lower == 'boolean') {\n          floating = lower;\n          lower = undefined;\n        }\n      }\n      if (lower === undefined && upper === undefined) {\n        lower = 0;\n        upper = 1;\n      }\n      else {\n        lower = toFinite(lower);\n        if (upper === undefined) {\n          upper = lower;\n          lower = 0;\n        } else {\n          upper = toFinite(upper);\n        }\n      }\n      if (lower > upper) {\n        var temp = lower;\n        lower = upper;\n        upper = temp;\n      }\n      if (floating || lower % 1 || upper % 1) {\n        var rand = nativeRandom();\n        return nativeMin(lower + (rand * (upper - lower + freeParseFloat('1e-' + ((rand + '').length - 1)))), upper);\n      }\n      return baseRandom(lower, upper);\n    }\n\n    /*------------------------------------------------------------------------*/\n\n    /**\n     * Converts `string` to [camel case](https://en.wikipedia.org/wiki/CamelCase).\n     *\n     * @static\n     * @memberOf _\n     * @since 3.0.0\n     * @category String\n     * @param {string} [string=''] The string to convert.\n     * @returns {string} Returns the camel cased string.\n     * @example\n     *\n     * _.camelCase('Foo Bar');\n     * // => 'fooBar'\n     *\n     * _.camelCase('--foo-bar--');\n     * // => 'fooBar'\n     *\n     * _.camelCase('__FOO_BAR__');\n     * // => 'fooBar'\n     */\n    var camelCase = createCompounder(function(result, word, index) {\n      word = word.toLowerCase();\n      return result + (index ? capitalize(word) : word);\n    });\n\n    /**\n     * Converts the first character of `string` to upper case and the remaining\n     * to lower case.\n     *\n     * @static\n     * @memberOf _\n     * @since 3.0.0\n     * @category String\n     * @param {string} [string=''] The string to capitalize.\n     * @returns {string} Returns the capitalized string.\n     * @example\n     *\n     * _.capitalize('FRED');\n     * // => 'Fred'\n     */\n    function capitalize(string) {\n      return upperFirst(toString(string).toLowerCase());\n    }\n\n    /**\n     * Deburrs `string` by converting\n     * [Latin-1 Supplement](https://en.wikipedia.org/wiki/Latin-1_Supplement_(Unicode_block)#Character_table)\n     * and [Latin Extended-A](https://en.wikipedia.org/wiki/Latin_Extended-A)\n     * letters to basic Latin letters and removing\n     * [combining diacritical marks](https://en.wikipedia.org/wiki/Combining_Diacritical_Marks).\n     *\n     * @static\n     * @memberOf _\n     * @since 3.0.0\n     * @category String\n     * @param {string} [string=''] The string to deburr.\n     * @returns {string} Returns the deburred string.\n     * @example\n     *\n     * _.deburr('déjà vu');\n     * // => 'deja vu'\n     */\n    function deburr(string) {\n      string = toString(string);\n      return string && string.replace(reLatin, deburrLetter).replace(reComboMark, '');\n    }\n\n    /**\n     * Checks if `string` ends with the given target string.\n     *\n     * @static\n     * @memberOf _\n     * @since 3.0.0\n     * @category String\n     * @param {string} [string=''] The string to inspect.\n     * @param {string} [target] The string to search for.\n     * @param {number} [position=string.length] The position to search up to.\n     * @returns {boolean} Returns `true` if `string` ends with `target`,\n     *  else `false`.\n     * @example\n     *\n     * _.endsWith('abc', 'c');\n     * // => true\n     *\n     * _.endsWith('abc', 'b');\n     * // => false\n     *\n     * _.endsWith('abc', 'b', 2);\n     * // => true\n     */\n    function endsWith(string, target, position) {\n      string = toString(string);\n      target = baseToString(target);\n\n      var length = string.length;\n      position = position === undefined\n        ? length\n        : baseClamp(toInteger(position), 0, length);\n\n      var end = position;\n      position -= target.length;\n      return position >= 0 && string.slice(position, end) == target;\n    }\n\n    /**\n     * Converts the characters \"&\", \"<\", \">\", '\"', and \"'\" in `string` to their\n     * corresponding HTML entities.\n     *\n     * **Note:** No other characters are escaped. To escape additional\n     * characters use a third-party library like [_he_](https://mths.be/he).\n     *\n     * Though the \">\" character is escaped for symmetry, characters like\n     * \">\" and \"/\" don't need escaping in HTML and have no special meaning\n     * unless they're part of a tag or unquoted attribute value. See\n     * [Mathias Bynens's article](https://mathiasbynens.be/notes/ambiguous-ampersands)\n     * (under \"semi-related fun fact\") for more details.\n     *\n     * When working with HTML you should always\n     * [quote attribute values](http://wonko.com/post/html-escaping) to reduce\n     * XSS vectors.\n     *\n     * @static\n     * @since 0.1.0\n     * @memberOf _\n     * @category String\n     * @param {string} [string=''] The string to escape.\n     * @returns {string} Returns the escaped string.\n     * @example\n     *\n     * _.escape('fred, barney, & pebbles');\n     * // => 'fred, barney, &amp; pebbles'\n     */\n    function escape(string) {\n      string = toString(string);\n      return (string && reHasUnescapedHtml.test(string))\n        ? string.replace(reUnescapedHtml, escapeHtmlChar)\n        : string;\n    }\n\n    /**\n     * Escapes the `RegExp` special characters \"^\", \"$\", \"\\\", \".\", \"*\", \"+\",\n     * \"?\", \"(\", \")\", \"[\", \"]\", \"{\", \"}\", and \"|\" in `string`.\n     *\n     * @static\n     * @memberOf _\n     * @since 3.0.0\n     * @category String\n     * @param {string} [string=''] The string to escape.\n     * @returns {string} Returns the escaped string.\n     * @example\n     *\n     * _.escapeRegExp('[lodash](https://lodash.com/)');\n     * // => '\\[lodash\\]\\(https://lodash\\.com/\\)'\n     */\n    function escapeRegExp(string) {\n      string = toString(string);\n      return (string && reHasRegExpChar.test(string))\n        ? string.replace(reRegExpChar, '\\\\$&')\n        : string;\n    }\n\n    /**\n     * Converts `string` to\n     * [kebab case](https://en.wikipedia.org/wiki/Letter_case#Special_case_styles).\n     *\n     * @static\n     * @memberOf _\n     * @since 3.0.0\n     * @category String\n     * @param {string} [string=''] The string to convert.\n     * @returns {string} Returns the kebab cased string.\n     * @example\n     *\n     * _.kebabCase('Foo Bar');\n     * // => 'foo-bar'\n     *\n     * _.kebabCase('fooBar');\n     * // => 'foo-bar'\n     *\n     * _.kebabCase('__FOO_BAR__');\n     * // => 'foo-bar'\n     */\n    var kebabCase = createCompounder(function(result, word, index) {\n      return result + (index ? '-' : '') + word.toLowerCase();\n    });\n\n    /**\n     * Converts `string`, as space separated words, to lower case.\n     *\n     * @static\n     * @memberOf _\n     * @since 4.0.0\n     * @category String\n     * @param {string} [string=''] The string to convert.\n     * @returns {string} Returns the lower cased string.\n     * @example\n     *\n     * _.lowerCase('--Foo-Bar--');\n     * // => 'foo bar'\n     *\n     * _.lowerCase('fooBar');\n     * // => 'foo bar'\n     *\n     * _.lowerCase('__FOO_BAR__');\n     * // => 'foo bar'\n     */\n    var lowerCase = createCompounder(function(result, word, index) {\n      return result + (index ? ' ' : '') + word.toLowerCase();\n    });\n\n    /**\n     * Converts the first character of `string` to lower case.\n     *\n     * @static\n     * @memberOf _\n     * @since 4.0.0\n     * @category String\n     * @param {string} [string=''] The string to convert.\n     * @returns {string} Returns the converted string.\n     * @example\n     *\n     * _.lowerFirst('Fred');\n     * // => 'fred'\n     *\n     * _.lowerFirst('FRED');\n     * // => 'fRED'\n     */\n    var lowerFirst = createCaseFirst('toLowerCase');\n\n    /**\n     * Pads `string` on the left and right sides if it's shorter than `length`.\n     * Padding characters are truncated if they can't be evenly divided by `length`.\n     *\n     * @static\n     * @memberOf _\n     * @since 3.0.0\n     * @category String\n     * @param {string} [string=''] The string to pad.\n     * @param {number} [length=0] The padding length.\n     * @param {string} [chars=' '] The string used as padding.\n     * @returns {string} Returns the padded string.\n     * @example\n     *\n     * _.pad('abc', 8);\n     * // => '  abc   '\n     *\n     * _.pad('abc', 8, '_-');\n     * // => '_-abc_-_'\n     *\n     * _.pad('abc', 3);\n     * // => 'abc'\n     */\n    function pad(string, length, chars) {\n      string = toString(string);\n      length = toInteger(length);\n\n      var strLength = length ? stringSize(string) : 0;\n      if (!length || strLength >= length) {\n        return string;\n      }\n      var mid = (length - strLength) / 2;\n      return (\n        createPadding(nativeFloor(mid), chars) +\n        string +\n        createPadding(nativeCeil(mid), chars)\n      );\n    }\n\n    /**\n     * Pads `string` on the right side if it's shorter than `length`. Padding\n     * characters are truncated if they exceed `length`.\n     *\n     * @static\n     * @memberOf _\n     * @since 4.0.0\n     * @category String\n     * @param {string} [string=''] The string to pad.\n     * @param {number} [length=0] The padding length.\n     * @param {string} [chars=' '] The string used as padding.\n     * @returns {string} Returns the padded string.\n     * @example\n     *\n     * _.padEnd('abc', 6);\n     * // => 'abc   '\n     *\n     * _.padEnd('abc', 6, '_-');\n     * // => 'abc_-_'\n     *\n     * _.padEnd('abc', 3);\n     * // => 'abc'\n     */\n    function padEnd(string, length, chars) {\n      string = toString(string);\n      length = toInteger(length);\n\n      var strLength = length ? stringSize(string) : 0;\n      return (length && strLength < length)\n        ? (string + createPadding(length - strLength, chars))\n        : string;\n    }\n\n    /**\n     * Pads `string` on the left side if it's shorter than `length`. Padding\n     * characters are truncated if they exceed `length`.\n     *\n     * @static\n     * @memberOf _\n     * @since 4.0.0\n     * @category String\n     * @param {string} [string=''] The string to pad.\n     * @param {number} [length=0] The padding length.\n     * @param {string} [chars=' '] The string used as padding.\n     * @returns {string} Returns the padded string.\n     * @example\n     *\n     * _.padStart('abc', 6);\n     * // => '   abc'\n     *\n     * _.padStart('abc', 6, '_-');\n     * // => '_-_abc'\n     *\n     * _.padStart('abc', 3);\n     * // => 'abc'\n     */\n    function padStart(string, length, chars) {\n      string = toString(string);\n      length = toInteger(length);\n\n      var strLength = length ? stringSize(string) : 0;\n      return (length && strLength < length)\n        ? (createPadding(length - strLength, chars) + string)\n        : string;\n    }\n\n    /**\n     * Converts `string` to an integer of the specified radix. If `radix` is\n     * `undefined` or `0`, a `radix` of `10` is used unless `value` is a\n     * hexadecimal, in which case a `radix` of `16` is used.\n     *\n     * **Note:** This method aligns with the\n     * [ES5 implementation](https://es5.github.io/#x15.1.2.2) of `parseInt`.\n     *\n     * @static\n     * @memberOf _\n     * @since 1.1.0\n     * @category String\n     * @param {string} string The string to convert.\n     * @param {number} [radix=10] The radix to interpret `value` by.\n     * @param- {Object} [guard] Enables use as an iteratee for methods like `_.map`.\n     * @returns {number} Returns the converted integer.\n     * @example\n     *\n     * _.parseInt('08');\n     * // => 8\n     *\n     * _.map(['6', '08', '10'], _.parseInt);\n     * // => [6, 8, 10]\n     */\n    function parseInt(string, radix, guard) {\n      if (guard || radix == null) {\n        radix = 0;\n      } else if (radix) {\n        radix = +radix;\n      }\n      return nativeParseInt(toString(string).replace(reTrimStart, ''), radix || 0);\n    }\n\n    /**\n     * Repeats the given string `n` times.\n     *\n     * @static\n     * @memberOf _\n     * @since 3.0.0\n     * @category String\n     * @param {string} [string=''] The string to repeat.\n     * @param {number} [n=1] The number of times to repeat the string.\n     * @param- {Object} [guard] Enables use as an iteratee for methods like `_.map`.\n     * @returns {string} Returns the repeated string.\n     * @example\n     *\n     * _.repeat('*', 3);\n     * // => '***'\n     *\n     * _.repeat('abc', 2);\n     * // => 'abcabc'\n     *\n     * _.repeat('abc', 0);\n     * // => ''\n     */\n    function repeat(string, n, guard) {\n      if ((guard ? isIterateeCall(string, n, guard) : n === undefined)) {\n        n = 1;\n      } else {\n        n = toInteger(n);\n      }\n      return baseRepeat(toString(string), n);\n    }\n\n    /**\n     * Replaces matches for `pattern` in `string` with `replacement`.\n     *\n     * **Note:** This method is based on\n     * [`String#replace`](https://mdn.io/String/replace).\n     *\n     * @static\n     * @memberOf _\n     * @since 4.0.0\n     * @category String\n     * @param {string} [string=''] The string to modify.\n     * @param {RegExp|string} pattern The pattern to replace.\n     * @param {Function|string} replacement The match replacement.\n     * @returns {string} Returns the modified string.\n     * @example\n     *\n     * _.replace('Hi Fred', 'Fred', 'Barney');\n     * // => 'Hi Barney'\n     */\n    function replace() {\n      var args = arguments,\n          string = toString(args[0]);\n\n      return args.length < 3 ? string : string.replace(args[1], args[2]);\n    }\n\n    /**\n     * Converts `string` to\n     * [snake case](https://en.wikipedia.org/wiki/Snake_case).\n     *\n     * @static\n     * @memberOf _\n     * @since 3.0.0\n     * @category String\n     * @param {string} [string=''] The string to convert.\n     * @returns {string} Returns the snake cased string.\n     * @example\n     *\n     * _.snakeCase('Foo Bar');\n     * // => 'foo_bar'\n     *\n     * _.snakeCase('fooBar');\n     * // => 'foo_bar'\n     *\n     * _.snakeCase('--FOO-BAR--');\n     * // => 'foo_bar'\n     */\n    var snakeCase = createCompounder(function(result, word, index) {\n      return result + (index ? '_' : '') + word.toLowerCase();\n    });\n\n    /**\n     * Splits `string` by `separator`.\n     *\n     * **Note:** This method is based on\n     * [`String#split`](https://mdn.io/String/split).\n     *\n     * @static\n     * @memberOf _\n     * @since 4.0.0\n     * @category String\n     * @param {string} [string=''] The string to split.\n     * @param {RegExp|string} separator The separator pattern to split by.\n     * @param {number} [limit] The length to truncate results to.\n     * @returns {Array} Returns the string segments.\n     * @example\n     *\n     * _.split('a-b-c', '-', 2);\n     * // => ['a', 'b']\n     */\n    function split(string, separator, limit) {\n      if (limit && typeof limit != 'number' && isIterateeCall(string, separator, limit)) {\n        separator = limit = undefined;\n      }\n      limit = limit === undefined ? MAX_ARRAY_LENGTH : limit >>> 0;\n      if (!limit) {\n        return [];\n      }\n      string = toString(string);\n      if (string && (\n            typeof separator == 'string' ||\n            (separator != null && !isRegExp(separator))\n          )) {\n        separator = baseToString(separator);\n        if (!separator && hasUnicode(string)) {\n          return castSlice(stringToArray(string), 0, limit);\n        }\n      }\n      return string.split(separator, limit);\n    }\n\n    /**\n     * Converts `string` to\n     * [start case](https://en.wikipedia.org/wiki/Letter_case#Stylistic_or_specialised_usage).\n     *\n     * @static\n     * @memberOf _\n     * @since 3.1.0\n     * @category String\n     * @param {string} [string=''] The string to convert.\n     * @returns {string} Returns the start cased string.\n     * @example\n     *\n     * _.startCase('--foo-bar--');\n     * // => 'Foo Bar'\n     *\n     * _.startCase('fooBar');\n     * // => 'Foo Bar'\n     *\n     * _.startCase('__FOO_BAR__');\n     * // => 'FOO BAR'\n     */\n    var startCase = createCompounder(function(result, word, index) {\n      return result + (index ? ' ' : '') + upperFirst(word);\n    });\n\n    /**\n     * Checks if `string` starts with the given target string.\n     *\n     * @static\n     * @memberOf _\n     * @since 3.0.0\n     * @category String\n     * @param {string} [string=''] The string to inspect.\n     * @param {string} [target] The string to search for.\n     * @param {number} [position=0] The position to search from.\n     * @returns {boolean} Returns `true` if `string` starts with `target`,\n     *  else `false`.\n     * @example\n     *\n     * _.startsWith('abc', 'a');\n     * // => true\n     *\n     * _.startsWith('abc', 'b');\n     * // => false\n     *\n     * _.startsWith('abc', 'b', 1);\n     * // => true\n     */\n    function startsWith(string, target, position) {\n      string = toString(string);\n      position = position == null\n        ? 0\n        : baseClamp(toInteger(position), 0, string.length);\n\n      target = baseToString(target);\n      return string.slice(position, position + target.length) == target;\n    }\n\n    /**\n     * Creates a compiled template function that can interpolate data properties\n     * in \"interpolate\" delimiters, HTML-escape interpolated data properties in\n     * \"escape\" delimiters, and execute JavaScript in \"evaluate\" delimiters. Data\n     * properties may be accessed as free variables in the template. If a setting\n     * object is given, it takes precedence over `_.templateSettings` values.\n     *\n     * **Note:** In the development build `_.template` utilizes\n     * [sourceURLs](http://www.html5rocks.com/en/tutorials/developertools/sourcemaps/#toc-sourceurl)\n     * for easier debugging.\n     *\n     * For more information on precompiling templates see\n     * [lodash's custom builds documentation](https://lodash.com/custom-builds).\n     *\n     * For more information on Chrome extension sandboxes see\n     * [Chrome's extensions documentation](https://developer.chrome.com/extensions/sandboxingEval).\n     *\n     * @static\n     * @since 0.1.0\n     * @memberOf _\n     * @category String\n     * @param {string} [string=''] The template string.\n     * @param {Object} [options={}] The options object.\n     * @param {RegExp} [options.escape=_.templateSettings.escape]\n     *  The HTML \"escape\" delimiter.\n     * @param {RegExp} [options.evaluate=_.templateSettings.evaluate]\n     *  The \"evaluate\" delimiter.\n     * @param {Object} [options.imports=_.templateSettings.imports]\n     *  An object to import into the template as free variables.\n     * @param {RegExp} [options.interpolate=_.templateSettings.interpolate]\n     *  The \"interpolate\" delimiter.\n     * @param {string} [options.sourceURL='lodash.templateSources[n]']\n     *  The sourceURL of the compiled template.\n     * @param {string} [options.variable='obj']\n     *  The data object variable name.\n     * @param- {Object} [guard] Enables use as an iteratee for methods like `_.map`.\n     * @returns {Function} Returns the compiled template function.\n     * @example\n     *\n     * // Use the \"interpolate\" delimiter to create a compiled template.\n     * var compiled = _.template('hello <%= user %>!');\n     * compiled({ 'user': 'fred' });\n     * // => 'hello fred!'\n     *\n     * // Use the HTML \"escape\" delimiter to escape data property values.\n     * var compiled = _.template('<b><%- value %></b>');\n     * compiled({ 'value': '<script>' });\n     * // => '<b>&lt;script&gt;</b>'\n     *\n     * // Use the \"evaluate\" delimiter to execute JavaScript and generate HTML.\n     * var compiled = _.template('<% _.forEach(users, function(user) { %><li><%- user %></li><% }); %>');\n     * compiled({ 'users': ['fred', 'barney'] });\n     * // => '<li>fred</li><li>barney</li>'\n     *\n     * // Use the internal `print` function in \"evaluate\" delimiters.\n     * var compiled = _.template('<% print(\"hello \" + user); %>!');\n     * compiled({ 'user': 'barney' });\n     * // => 'hello barney!'\n     *\n     * // Use the ES template literal delimiter as an \"interpolate\" delimiter.\n     * // Disable support by replacing the \"interpolate\" delimiter.\n     * var compiled = _.template('hello ${ user }!');\n     * compiled({ 'user': 'pebbles' });\n     * // => 'hello pebbles!'\n     *\n     * // Use backslashes to treat delimiters as plain text.\n     * var compiled = _.template('<%= \"\\\\<%- value %\\\\>\" %>');\n     * compiled({ 'value': 'ignored' });\n     * // => '<%- value %>'\n     *\n     * // Use the `imports` option to import `jQuery` as `jq`.\n     * var text = '<% jq.each(users, function(user) { %><li><%- user %></li><% }); %>';\n     * var compiled = _.template(text, { 'imports': { 'jq': jQuery } });\n     * compiled({ 'users': ['fred', 'barney'] });\n     * // => '<li>fred</li><li>barney</li>'\n     *\n     * // Use the `sourceURL` option to specify a custom sourceURL for the template.\n     * var compiled = _.template('hello <%= user %>!', { 'sourceURL': '/basic/greeting.jst' });\n     * compiled(data);\n     * // => Find the source of \"greeting.jst\" under the Sources tab or Resources panel of the web inspector.\n     *\n     * // Use the `variable` option to ensure a with-statement isn't used in the compiled template.\n     * var compiled = _.template('hi <%= data.user %>!', { 'variable': 'data' });\n     * compiled.source;\n     * // => function(data) {\n     * //   var __t, __p = '';\n     * //   __p += 'hi ' + ((__t = ( data.user )) == null ? '' : __t) + '!';\n     * //   return __p;\n     * // }\n     *\n     * // Use custom template delimiters.\n     * _.templateSettings.interpolate = /{{([\\s\\S]+?)}}/g;\n     * var compiled = _.template('hello {{ user }}!');\n     * compiled({ 'user': 'mustache' });\n     * // => 'hello mustache!'\n     *\n     * // Use the `source` property to inline compiled templates for meaningful\n     * // line numbers in error messages and stack traces.\n     * fs.writeFileSync(path.join(process.cwd(), 'jst.js'), '\\\n     *   var JST = {\\\n     *     \"main\": ' + _.template(mainText).source + '\\\n     *   };\\\n     * ');\n     */\n    function template(string, options, guard) {\n      // Based on John Resig's `tmpl` implementation\n      // (http://ejohn.org/blog/javascript-micro-templating/)\n      // and Laura Doktorova's doT.js (https://github.com/olado/doT).\n      var settings = lodash.templateSettings;\n\n      if (guard && isIterateeCall(string, options, guard)) {\n        options = undefined;\n      }\n      string = toString(string);\n      options = assignInWith({}, options, settings, customDefaultsAssignIn);\n\n      var imports = assignInWith({}, options.imports, settings.imports, customDefaultsAssignIn),\n          importsKeys = keys(imports),\n          importsValues = baseValues(imports, importsKeys);\n\n      var isEscaping,\n          isEvaluating,\n          index = 0,\n          interpolate = options.interpolate || reNoMatch,\n          source = \"__p += '\";\n\n      // Compile the regexp to match each delimiter.\n      var reDelimiters = RegExp(\n        (options.escape || reNoMatch).source + '|' +\n        interpolate.source + '|' +\n        (interpolate === reInterpolate ? reEsTemplate : reNoMatch).source + '|' +\n        (options.evaluate || reNoMatch).source + '|$'\n      , 'g');\n\n      // Use a sourceURL for easier debugging.\n      var sourceURL = '//# sourceURL=' +\n        ('sourceURL' in options\n          ? options.sourceURL\n          : ('lodash.templateSources[' + (++templateCounter) + ']')\n        ) + '\\n';\n\n      string.replace(reDelimiters, function(match, escapeValue, interpolateValue, esTemplateValue, evaluateValue, offset) {\n        interpolateValue || (interpolateValue = esTemplateValue);\n\n        // Escape characters that can't be included in string literals.\n        source += string.slice(index, offset).replace(reUnescapedString, escapeStringChar);\n\n        // Replace delimiters with snippets.\n        if (escapeValue) {\n          isEscaping = true;\n          source += \"' +\\n__e(\" + escapeValue + \") +\\n'\";\n        }\n        if (evaluateValue) {\n          isEvaluating = true;\n          source += \"';\\n\" + evaluateValue + \";\\n__p += '\";\n        }\n        if (interpolateValue) {\n          source += \"' +\\n((__t = (\" + interpolateValue + \")) == null ? '' : __t) +\\n'\";\n        }\n        index = offset + match.length;\n\n        // The JS engine embedded in Adobe products needs `match` returned in\n        // order to produce the correct `offset` value.\n        return match;\n      });\n\n      source += \"';\\n\";\n\n      // If `variable` is not specified wrap a with-statement around the generated\n      // code to add the data object to the top of the scope chain.\n      var variable = options.variable;\n      if (!variable) {\n        source = 'with (obj) {\\n' + source + '\\n}\\n';\n      }\n      // Cleanup code by stripping empty strings.\n      source = (isEvaluating ? source.replace(reEmptyStringLeading, '') : source)\n        .replace(reEmptyStringMiddle, '$1')\n        .replace(reEmptyStringTrailing, '$1;');\n\n      // Frame code as the function body.\n      source = 'function(' + (variable || 'obj') + ') {\\n' +\n        (variable\n          ? ''\n          : 'obj || (obj = {});\\n'\n        ) +\n        \"var __t, __p = ''\" +\n        (isEscaping\n           ? ', __e = _.escape'\n           : ''\n        ) +\n        (isEvaluating\n          ? ', __j = Array.prototype.join;\\n' +\n            \"function print() { __p += __j.call(arguments, '') }\\n\"\n          : ';\\n'\n        ) +\n        source +\n        'return __p\\n}';\n\n      var result = attempt(function() {\n        return Function(importsKeys, sourceURL + 'return ' + source)\n          .apply(undefined, importsValues);\n      });\n\n      // Provide the compiled function's source by its `toString` method or\n      // the `source` property as a convenience for inlining compiled templates.\n      result.source = source;\n      if (isError(result)) {\n        throw result;\n      }\n      return result;\n    }\n\n    /**\n     * Converts `string`, as a whole, to lower case just like\n     * [String#toLowerCase](https://mdn.io/toLowerCase).\n     *\n     * @static\n     * @memberOf _\n     * @since 4.0.0\n     * @category String\n     * @param {string} [string=''] The string to convert.\n     * @returns {string} Returns the lower cased string.\n     * @example\n     *\n     * _.toLower('--Foo-Bar--');\n     * // => '--foo-bar--'\n     *\n     * _.toLower('fooBar');\n     * // => 'foobar'\n     *\n     * _.toLower('__FOO_BAR__');\n     * // => '__foo_bar__'\n     */\n    function toLower(value) {\n      return toString(value).toLowerCase();\n    }\n\n    /**\n     * Converts `string`, as a whole, to upper case just like\n     * [String#toUpperCase](https://mdn.io/toUpperCase).\n     *\n     * @static\n     * @memberOf _\n     * @since 4.0.0\n     * @category String\n     * @param {string} [string=''] The string to convert.\n     * @returns {string} Returns the upper cased string.\n     * @example\n     *\n     * _.toUpper('--foo-bar--');\n     * // => '--FOO-BAR--'\n     *\n     * _.toUpper('fooBar');\n     * // => 'FOOBAR'\n     *\n     * _.toUpper('__foo_bar__');\n     * // => '__FOO_BAR__'\n     */\n    function toUpper(value) {\n      return toString(value).toUpperCase();\n    }\n\n    /**\n     * Removes leading and trailing whitespace or specified characters from `string`.\n     *\n     * @static\n     * @memberOf _\n     * @since 3.0.0\n     * @category String\n     * @param {string} [string=''] The string to trim.\n     * @param {string} [chars=whitespace] The characters to trim.\n     * @param- {Object} [guard] Enables use as an iteratee for methods like `_.map`.\n     * @returns {string} Returns the trimmed string.\n     * @example\n     *\n     * _.trim('  abc  ');\n     * // => 'abc'\n     *\n     * _.trim('-_-abc-_-', '_-');\n     * // => 'abc'\n     *\n     * _.map(['  foo  ', '  bar  '], _.trim);\n     * // => ['foo', 'bar']\n     */\n    function trim(string, chars, guard) {\n      string = toString(string);\n      if (string && (guard || chars === undefined)) {\n        return string.replace(reTrim, '');\n      }\n      if (!string || !(chars = baseToString(chars))) {\n        return string;\n      }\n      var strSymbols = stringToArray(string),\n          chrSymbols = stringToArray(chars),\n          start = charsStartIndex(strSymbols, chrSymbols),\n          end = charsEndIndex(strSymbols, chrSymbols) + 1;\n\n      return castSlice(strSymbols, start, end).join('');\n    }\n\n    /**\n     * Removes trailing whitespace or specified characters from `string`.\n     *\n     * @static\n     * @memberOf _\n     * @since 4.0.0\n     * @category String\n     * @param {string} [string=''] The string to trim.\n     * @param {string} [chars=whitespace] The characters to trim.\n     * @param- {Object} [guard] Enables use as an iteratee for methods like `_.map`.\n     * @returns {string} Returns the trimmed string.\n     * @example\n     *\n     * _.trimEnd('  abc  ');\n     * // => '  abc'\n     *\n     * _.trimEnd('-_-abc-_-', '_-');\n     * // => '-_-abc'\n     */\n    function trimEnd(string, chars, guard) {\n      string = toString(string);\n      if (string && (guard || chars === undefined)) {\n        return string.replace(reTrimEnd, '');\n      }\n      if (!string || !(chars = baseToString(chars))) {\n        return string;\n      }\n      var strSymbols = stringToArray(string),\n          end = charsEndIndex(strSymbols, stringToArray(chars)) + 1;\n\n      return castSlice(strSymbols, 0, end).join('');\n    }\n\n    /**\n     * Removes leading whitespace or specified characters from `string`.\n     *\n     * @static\n     * @memberOf _\n     * @since 4.0.0\n     * @category String\n     * @param {string} [string=''] The string to trim.\n     * @param {string} [chars=whitespace] The characters to trim.\n     * @param- {Object} [guard] Enables use as an iteratee for methods like `_.map`.\n     * @returns {string} Returns the trimmed string.\n     * @example\n     *\n     * _.trimStart('  abc  ');\n     * // => 'abc  '\n     *\n     * _.trimStart('-_-abc-_-', '_-');\n     * // => 'abc-_-'\n     */\n    function trimStart(string, chars, guard) {\n      string = toString(string);\n      if (string && (guard || chars === undefined)) {\n        return string.replace(reTrimStart, '');\n      }\n      if (!string || !(chars = baseToString(chars))) {\n        return string;\n      }\n      var strSymbols = stringToArray(string),\n          start = charsStartIndex(strSymbols, stringToArray(chars));\n\n      return castSlice(strSymbols, start).join('');\n    }\n\n    /**\n     * Truncates `string` if it's longer than the given maximum string length.\n     * The last characters of the truncated string are replaced with the omission\n     * string which defaults to \"...\".\n     *\n     * @static\n     * @memberOf _\n     * @since 4.0.0\n     * @category String\n     * @param {string} [string=''] The string to truncate.\n     * @param {Object} [options={}] The options object.\n     * @param {number} [options.length=30] The maximum string length.\n     * @param {string} [options.omission='...'] The string to indicate text is omitted.\n     * @param {RegExp|string} [options.separator] The separator pattern to truncate to.\n     * @returns {string} Returns the truncated string.\n     * @example\n     *\n     * _.truncate('hi-diddly-ho there, neighborino');\n     * // => 'hi-diddly-ho there, neighbo...'\n     *\n     * _.truncate('hi-diddly-ho there, neighborino', {\n     *   'length': 24,\n     *   'separator': ' '\n     * });\n     * // => 'hi-diddly-ho there,...'\n     *\n     * _.truncate('hi-diddly-ho there, neighborino', {\n     *   'length': 24,\n     *   'separator': /,? +/\n     * });\n     * // => 'hi-diddly-ho there...'\n     *\n     * _.truncate('hi-diddly-ho there, neighborino', {\n     *   'omission': ' [...]'\n     * });\n     * // => 'hi-diddly-ho there, neig [...]'\n     */\n    function truncate(string, options) {\n      var length = DEFAULT_TRUNC_LENGTH,\n          omission = DEFAULT_TRUNC_OMISSION;\n\n      if (isObject(options)) {\n        var separator = 'separator' in options ? options.separator : separator;\n        length = 'length' in options ? toInteger(options.length) : length;\n        omission = 'omission' in options ? baseToString(options.omission) : omission;\n      }\n      string = toString(string);\n\n      var strLength = string.length;\n      if (hasUnicode(string)) {\n        var strSymbols = stringToArray(string);\n        strLength = strSymbols.length;\n      }\n      if (length >= strLength) {\n        return string;\n      }\n      var end = length - stringSize(omission);\n      if (end < 1) {\n        return omission;\n      }\n      var result = strSymbols\n        ? castSlice(strSymbols, 0, end).join('')\n        : string.slice(0, end);\n\n      if (separator === undefined) {\n        return result + omission;\n      }\n      if (strSymbols) {\n        end += (result.length - end);\n      }\n      if (isRegExp(separator)) {\n        if (string.slice(end).search(separator)) {\n          var match,\n              substring = result;\n\n          if (!separator.global) {\n            separator = RegExp(separator.source, toString(reFlags.exec(separator)) + 'g');\n          }\n          separator.lastIndex = 0;\n          while ((match = separator.exec(substring))) {\n            var newEnd = match.index;\n          }\n          result = result.slice(0, newEnd === undefined ? end : newEnd);\n        }\n      } else if (string.indexOf(baseToString(separator), end) != end) {\n        var index = result.lastIndexOf(separator);\n        if (index > -1) {\n          result = result.slice(0, index);\n        }\n      }\n      return result + omission;\n    }\n\n    /**\n     * The inverse of `_.escape`; this method converts the HTML entities\n     * `&amp;`, `&lt;`, `&gt;`, `&quot;`, and `&#39;` in `string` to\n     * their corresponding characters.\n     *\n     * **Note:** No other HTML entities are unescaped. To unescape additional\n     * HTML entities use a third-party library like [_he_](https://mths.be/he).\n     *\n     * @static\n     * @memberOf _\n     * @since 0.6.0\n     * @category String\n     * @param {string} [string=''] The string to unescape.\n     * @returns {string} Returns the unescaped string.\n     * @example\n     *\n     * _.unescape('fred, barney, &amp; pebbles');\n     * // => 'fred, barney, & pebbles'\n     */\n    function unescape(string) {\n      string = toString(string);\n      return (string && reHasEscapedHtml.test(string))\n        ? string.replace(reEscapedHtml, unescapeHtmlChar)\n        : string;\n    }\n\n    /**\n     * Converts `string`, as space separated words, to upper case.\n     *\n     * @static\n     * @memberOf _\n     * @since 4.0.0\n     * @category String\n     * @param {string} [string=''] The string to convert.\n     * @returns {string} Returns the upper cased string.\n     * @example\n     *\n     * _.upperCase('--foo-bar');\n     * // => 'FOO BAR'\n     *\n     * _.upperCase('fooBar');\n     * // => 'FOO BAR'\n     *\n     * _.upperCase('__foo_bar__');\n     * // => 'FOO BAR'\n     */\n    var upperCase = createCompounder(function(result, word, index) {\n      return result + (index ? ' ' : '') + word.toUpperCase();\n    });\n\n    /**\n     * Converts the first character of `string` to upper case.\n     *\n     * @static\n     * @memberOf _\n     * @since 4.0.0\n     * @category String\n     * @param {string} [string=''] The string to convert.\n     * @returns {string} Returns the converted string.\n     * @example\n     *\n     * _.upperFirst('fred');\n     * // => 'Fred'\n     *\n     * _.upperFirst('FRED');\n     * // => 'FRED'\n     */\n    var upperFirst = createCaseFirst('toUpperCase');\n\n    /**\n     * Splits `string` into an array of its words.\n     *\n     * @static\n     * @memberOf _\n     * @since 3.0.0\n     * @category String\n     * @param {string} [string=''] The string to inspect.\n     * @param {RegExp|string} [pattern] The pattern to match words.\n     * @param- {Object} [guard] Enables use as an iteratee for methods like `_.map`.\n     * @returns {Array} Returns the words of `string`.\n     * @example\n     *\n     * _.words('fred, barney, & pebbles');\n     * // => ['fred', 'barney', 'pebbles']\n     *\n     * _.words('fred, barney, & pebbles', /[^, ]+/g);\n     * // => ['fred', 'barney', '&', 'pebbles']\n     */\n    function words(string, pattern, guard) {\n      string = toString(string);\n      pattern = guard ? undefined : pattern;\n\n      if (pattern === undefined) {\n        return hasUnicodeWord(string) ? unicodeWords(string) : asciiWords(string);\n      }\n      return string.match(pattern) || [];\n    }\n\n    /*------------------------------------------------------------------------*/\n\n    /**\n     * Attempts to invoke `func`, returning either the result or the caught error\n     * object. Any additional arguments are provided to `func` when it's invoked.\n     *\n     * @static\n     * @memberOf _\n     * @since 3.0.0\n     * @category Util\n     * @param {Function} func The function to attempt.\n     * @param {...*} [args] The arguments to invoke `func` with.\n     * @returns {*} Returns the `func` result or error object.\n     * @example\n     *\n     * // Avoid throwing errors for invalid selectors.\n     * var elements = _.attempt(function(selector) {\n     *   return document.querySelectorAll(selector);\n     * }, '>_>');\n     *\n     * if (_.isError(elements)) {\n     *   elements = [];\n     * }\n     */\n    var attempt = baseRest(function(func, args) {\n      try {\n        return apply(func, undefined, args);\n      } catch (e) {\n        return isError(e) ? e : new Error(e);\n      }\n    });\n\n    /**\n     * Binds methods of an object to the object itself, overwriting the existing\n     * method.\n     *\n     * **Note:** This method doesn't set the \"length\" property of bound functions.\n     *\n     * @static\n     * @since 0.1.0\n     * @memberOf _\n     * @category Util\n     * @param {Object} object The object to bind and assign the bound methods to.\n     * @param {...(string|string[])} methodNames The object method names to bind.\n     * @returns {Object} Returns `object`.\n     * @example\n     *\n     * var view = {\n     *   'label': 'docs',\n     *   'click': function() {\n     *     console.log('clicked ' + this.label);\n     *   }\n     * };\n     *\n     * _.bindAll(view, ['click']);\n     * jQuery(element).on('click', view.click);\n     * // => Logs 'clicked docs' when clicked.\n     */\n    var bindAll = flatRest(function(object, methodNames) {\n      arrayEach(methodNames, function(key) {\n        key = toKey(key);\n        baseAssignValue(object, key, bind(object[key], object));\n      });\n      return object;\n    });\n\n    /**\n     * Creates a function that iterates over `pairs` and invokes the corresponding\n     * function of the first predicate to return truthy. The predicate-function\n     * pairs are invoked with the `this` binding and arguments of the created\n     * function.\n     *\n     * @static\n     * @memberOf _\n     * @since 4.0.0\n     * @category Util\n     * @param {Array} pairs The predicate-function pairs.\n     * @returns {Function} Returns the new composite function.\n     * @example\n     *\n     * var func = _.cond([\n     *   [_.matches({ 'a': 1 }),           _.constant('matches A')],\n     *   [_.conforms({ 'b': _.isNumber }), _.constant('matches B')],\n     *   [_.stubTrue,                      _.constant('no match')]\n     * ]);\n     *\n     * func({ 'a': 1, 'b': 2 });\n     * // => 'matches A'\n     *\n     * func({ 'a': 0, 'b': 1 });\n     * // => 'matches B'\n     *\n     * func({ 'a': '1', 'b': '2' });\n     * // => 'no match'\n     */\n    function cond(pairs) {\n      var length = pairs == null ? 0 : pairs.length,\n          toIteratee = getIteratee();\n\n      pairs = !length ? [] : arrayMap(pairs, function(pair) {\n        if (typeof pair[1] != 'function') {\n          throw new TypeError(FUNC_ERROR_TEXT);\n        }\n        return [toIteratee(pair[0]), pair[1]];\n      });\n\n      return baseRest(function(args) {\n        var index = -1;\n        while (++index < length) {\n          var pair = pairs[index];\n          if (apply(pair[0], this, args)) {\n            return apply(pair[1], this, args);\n          }\n        }\n      });\n    }\n\n    /**\n     * Creates a function that invokes the predicate properties of `source` with\n     * the corresponding property values of a given object, returning `true` if\n     * all predicates return truthy, else `false`.\n     *\n     * **Note:** The created function is equivalent to `_.conformsTo` with\n     * `source` partially applied.\n     *\n     * @static\n     * @memberOf _\n     * @since 4.0.0\n     * @category Util\n     * @param {Object} source The object of property predicates to conform to.\n     * @returns {Function} Returns the new spec function.\n     * @example\n     *\n     * var objects = [\n     *   { 'a': 2, 'b': 1 },\n     *   { 'a': 1, 'b': 2 }\n     * ];\n     *\n     * _.filter(objects, _.conforms({ 'b': function(n) { return n > 1; } }));\n     * // => [{ 'a': 1, 'b': 2 }]\n     */\n    function conforms(source) {\n      return baseConforms(baseClone(source, CLONE_DEEP_FLAG));\n    }\n\n    /**\n     * Creates a function that returns `value`.\n     *\n     * @static\n     * @memberOf _\n     * @since 2.4.0\n     * @category Util\n     * @param {*} value The value to return from the new function.\n     * @returns {Function} Returns the new constant function.\n     * @example\n     *\n     * var objects = _.times(2, _.constant({ 'a': 1 }));\n     *\n     * console.log(objects);\n     * // => [{ 'a': 1 }, { 'a': 1 }]\n     *\n     * console.log(objects[0] === objects[1]);\n     * // => true\n     */\n    function constant(value) {\n      return function() {\n        return value;\n      };\n    }\n\n    /**\n     * Checks `value` to determine whether a default value should be returned in\n     * its place. The `defaultValue` is returned if `value` is `NaN`, `null`,\n     * or `undefined`.\n     *\n     * @static\n     * @memberOf _\n     * @since 4.14.0\n     * @category Util\n     * @param {*} value The value to check.\n     * @param {*} defaultValue The default value.\n     * @returns {*} Returns the resolved value.\n     * @example\n     *\n     * _.defaultTo(1, 10);\n     * // => 1\n     *\n     * _.defaultTo(undefined, 10);\n     * // => 10\n     */\n    function defaultTo(value, defaultValue) {\n      return (value == null || value !== value) ? defaultValue : value;\n    }\n\n    /**\n     * Creates a function that returns the result of invoking the given functions\n     * with the `this` binding of the created function, where each successive\n     * invocation is supplied the return value of the previous.\n     *\n     * @static\n     * @memberOf _\n     * @since 3.0.0\n     * @category Util\n     * @param {...(Function|Function[])} [funcs] The functions to invoke.\n     * @returns {Function} Returns the new composite function.\n     * @see _.flowRight\n     * @example\n     *\n     * function square(n) {\n     *   return n * n;\n     * }\n     *\n     * var addSquare = _.flow([_.add, square]);\n     * addSquare(1, 2);\n     * // => 9\n     */\n    var flow = createFlow();\n\n    /**\n     * This method is like `_.flow` except that it creates a function that\n     * invokes the given functions from right to left.\n     *\n     * @static\n     * @since 3.0.0\n     * @memberOf _\n     * @category Util\n     * @param {...(Function|Function[])} [funcs] The functions to invoke.\n     * @returns {Function} Returns the new composite function.\n     * @see _.flow\n     * @example\n     *\n     * function square(n) {\n     *   return n * n;\n     * }\n     *\n     * var addSquare = _.flowRight([square, _.add]);\n     * addSquare(1, 2);\n     * // => 9\n     */\n    var flowRight = createFlow(true);\n\n    /**\n     * This method returns the first argument it receives.\n     *\n     * @static\n     * @since 0.1.0\n     * @memberOf _\n     * @category Util\n     * @param {*} value Any value.\n     * @returns {*} Returns `value`.\n     * @example\n     *\n     * var object = { 'a': 1 };\n     *\n     * console.log(_.identity(object) === object);\n     * // => true\n     */\n    function identity(value) {\n      return value;\n    }\n\n    /**\n     * Creates a function that invokes `func` with the arguments of the created\n     * function. If `func` is a property name, the created function returns the\n     * property value for a given element. If `func` is an array or object, the\n     * created function returns `true` for elements that contain the equivalent\n     * source properties, otherwise it returns `false`.\n     *\n     * @static\n     * @since 4.0.0\n     * @memberOf _\n     * @category Util\n     * @param {*} [func=_.identity] The value to convert to a callback.\n     * @returns {Function} Returns the callback.\n     * @example\n     *\n     * var users = [\n     *   { 'user': 'barney', 'age': 36, 'active': true },\n     *   { 'user': 'fred',   'age': 40, 'active': false }\n     * ];\n     *\n     * // The `_.matches` iteratee shorthand.\n     * _.filter(users, _.iteratee({ 'user': 'barney', 'active': true }));\n     * // => [{ 'user': 'barney', 'age': 36, 'active': true }]\n     *\n     * // The `_.matchesProperty` iteratee shorthand.\n     * _.filter(users, _.iteratee(['user', 'fred']));\n     * // => [{ 'user': 'fred', 'age': 40 }]\n     *\n     * // The `_.property` iteratee shorthand.\n     * _.map(users, _.iteratee('user'));\n     * // => ['barney', 'fred']\n     *\n     * // Create custom iteratee shorthands.\n     * _.iteratee = _.wrap(_.iteratee, function(iteratee, func) {\n     *   return !_.isRegExp(func) ? iteratee(func) : function(string) {\n     *     return func.test(string);\n     *   };\n     * });\n     *\n     * _.filter(['abc', 'def'], /ef/);\n     * // => ['def']\n     */\n    function iteratee(func) {\n      return baseIteratee(typeof func == 'function' ? func : baseClone(func, CLONE_DEEP_FLAG));\n    }\n\n    /**\n     * Creates a function that performs a partial deep comparison between a given\n     * object and `source`, returning `true` if the given object has equivalent\n     * property values, else `false`.\n     *\n     * **Note:** The created function is equivalent to `_.isMatch` with `source`\n     * partially applied.\n     *\n     * Partial comparisons will match empty array and empty object `source`\n     * values against any array or object value, respectively. See `_.isEqual`\n     * for a list of supported value comparisons.\n     *\n     * @static\n     * @memberOf _\n     * @since 3.0.0\n     * @category Util\n     * @param {Object} source The object of property values to match.\n     * @returns {Function} Returns the new spec function.\n     * @example\n     *\n     * var objects = [\n     *   { 'a': 1, 'b': 2, 'c': 3 },\n     *   { 'a': 4, 'b': 5, 'c': 6 }\n     * ];\n     *\n     * _.filter(objects, _.matches({ 'a': 4, 'c': 6 }));\n     * // => [{ 'a': 4, 'b': 5, 'c': 6 }]\n     */\n    function matches(source) {\n      return baseMatches(baseClone(source, CLONE_DEEP_FLAG));\n    }\n\n    /**\n     * Creates a function that performs a partial deep comparison between the\n     * value at `path` of a given object to `srcValue`, returning `true` if the\n     * object value is equivalent, else `false`.\n     *\n     * **Note:** Partial comparisons will match empty array and empty object\n     * `srcValue` values against any array or object value, respectively. See\n     * `_.isEqual` for a list of supported value comparisons.\n     *\n     * @static\n     * @memberOf _\n     * @since 3.2.0\n     * @category Util\n     * @param {Array|string} path The path of the property to get.\n     * @param {*} srcValue The value to match.\n     * @returns {Function} Returns the new spec function.\n     * @example\n     *\n     * var objects = [\n     *   { 'a': 1, 'b': 2, 'c': 3 },\n     *   { 'a': 4, 'b': 5, 'c': 6 }\n     * ];\n     *\n     * _.find(objects, _.matchesProperty('a', 4));\n     * // => { 'a': 4, 'b': 5, 'c': 6 }\n     */\n    function matchesProperty(path, srcValue) {\n      return baseMatchesProperty(path, baseClone(srcValue, CLONE_DEEP_FLAG));\n    }\n\n    /**\n     * Creates a function that invokes the method at `path` of a given object.\n     * Any additional arguments are provided to the invoked method.\n     *\n     * @static\n     * @memberOf _\n     * @since 3.7.0\n     * @category Util\n     * @param {Array|string} path The path of the method to invoke.\n     * @param {...*} [args] The arguments to invoke the method with.\n     * @returns {Function} Returns the new invoker function.\n     * @example\n     *\n     * var objects = [\n     *   { 'a': { 'b': _.constant(2) } },\n     *   { 'a': { 'b': _.constant(1) } }\n     * ];\n     *\n     * _.map(objects, _.method('a.b'));\n     * // => [2, 1]\n     *\n     * _.map(objects, _.method(['a', 'b']));\n     * // => [2, 1]\n     */\n    var method = baseRest(function(path, args) {\n      return function(object) {\n        return baseInvoke(object, path, args);\n      };\n    });\n\n    /**\n     * The opposite of `_.method`; this method creates a function that invokes\n     * the method at a given path of `object`. Any additional arguments are\n     * provided to the invoked method.\n     *\n     * @static\n     * @memberOf _\n     * @since 3.7.0\n     * @category Util\n     * @param {Object} object The object to query.\n     * @param {...*} [args] The arguments to invoke the method with.\n     * @returns {Function} Returns the new invoker function.\n     * @example\n     *\n     * var array = _.times(3, _.constant),\n     *     object = { 'a': array, 'b': array, 'c': array };\n     *\n     * _.map(['a[2]', 'c[0]'], _.methodOf(object));\n     * // => [2, 0]\n     *\n     * _.map([['a', '2'], ['c', '0']], _.methodOf(object));\n     * // => [2, 0]\n     */\n    var methodOf = baseRest(function(object, args) {\n      return function(path) {\n        return baseInvoke(object, path, args);\n      };\n    });\n\n    /**\n     * Adds all own enumerable string keyed function properties of a source\n     * object to the destination object. If `object` is a function, then methods\n     * are added to its prototype as well.\n     *\n     * **Note:** Use `_.runInContext` to create a pristine `lodash` function to\n     * avoid conflicts caused by modifying the original.\n     *\n     * @static\n     * @since 0.1.0\n     * @memberOf _\n     * @category Util\n     * @param {Function|Object} [object=lodash] The destination object.\n     * @param {Object} source The object of functions to add.\n     * @param {Object} [options={}] The options object.\n     * @param {boolean} [options.chain=true] Specify whether mixins are chainable.\n     * @returns {Function|Object} Returns `object`.\n     * @example\n     *\n     * function vowels(string) {\n     *   return _.filter(string, function(v) {\n     *     return /[aeiou]/i.test(v);\n     *   });\n     * }\n     *\n     * _.mixin({ 'vowels': vowels });\n     * _.vowels('fred');\n     * // => ['e']\n     *\n     * _('fred').vowels().value();\n     * // => ['e']\n     *\n     * _.mixin({ 'vowels': vowels }, { 'chain': false });\n     * _('fred').vowels();\n     * // => ['e']\n     */\n    function mixin(object, source, options) {\n      var props = keys(source),\n          methodNames = baseFunctions(source, props);\n\n      if (options == null &&\n          !(isObject(source) && (methodNames.length || !props.length))) {\n        options = source;\n        source = object;\n        object = this;\n        methodNames = baseFunctions(source, keys(source));\n      }\n      var chain = !(isObject(options) && 'chain' in options) || !!options.chain,\n          isFunc = isFunction(object);\n\n      arrayEach(methodNames, function(methodName) {\n        var func = source[methodName];\n        object[methodName] = func;\n        if (isFunc) {\n          object.prototype[methodName] = function() {\n            var chainAll = this.__chain__;\n            if (chain || chainAll) {\n              var result = object(this.__wrapped__),\n                  actions = result.__actions__ = copyArray(this.__actions__);\n\n              actions.push({ 'func': func, 'args': arguments, 'thisArg': object });\n              result.__chain__ = chainAll;\n              return result;\n            }\n            return func.apply(object, arrayPush([this.value()], arguments));\n          };\n        }\n      });\n\n      return object;\n    }\n\n    /**\n     * Reverts the `_` variable to its previous value and returns a reference to\n     * the `lodash` function.\n     *\n     * @static\n     * @since 0.1.0\n     * @memberOf _\n     * @category Util\n     * @returns {Function} Returns the `lodash` function.\n     * @example\n     *\n     * var lodash = _.noConflict();\n     */\n    function noConflict() {\n      if (root._ === this) {\n        root._ = oldDash;\n      }\n      return this;\n    }\n\n    /**\n     * This method returns `undefined`.\n     *\n     * @static\n     * @memberOf _\n     * @since 2.3.0\n     * @category Util\n     * @example\n     *\n     * _.times(2, _.noop);\n     * // => [undefined, undefined]\n     */\n    function noop() {\n      // No operation performed.\n    }\n\n    /**\n     * Creates a function that gets the argument at index `n`. If `n` is negative,\n     * the nth argument from the end is returned.\n     *\n     * @static\n     * @memberOf _\n     * @since 4.0.0\n     * @category Util\n     * @param {number} [n=0] The index of the argument to return.\n     * @returns {Function} Returns the new pass-thru function.\n     * @example\n     *\n     * var func = _.nthArg(1);\n     * func('a', 'b', 'c', 'd');\n     * // => 'b'\n     *\n     * var func = _.nthArg(-2);\n     * func('a', 'b', 'c', 'd');\n     * // => 'c'\n     */\n    function nthArg(n) {\n      n = toInteger(n);\n      return baseRest(function(args) {\n        return baseNth(args, n);\n      });\n    }\n\n    /**\n     * Creates a function that invokes `iteratees` with the arguments it receives\n     * and returns their results.\n     *\n     * @static\n     * @memberOf _\n     * @since 4.0.0\n     * @category Util\n     * @param {...(Function|Function[])} [iteratees=[_.identity]]\n     *  The iteratees to invoke.\n     * @returns {Function} Returns the new function.\n     * @example\n     *\n     * var func = _.over([Math.max, Math.min]);\n     *\n     * func(1, 2, 3, 4);\n     * // => [4, 1]\n     */\n    var over = createOver(arrayMap);\n\n    /**\n     * Creates a function that checks if **all** of the `predicates` return\n     * truthy when invoked with the arguments it receives.\n     *\n     * @static\n     * @memberOf _\n     * @since 4.0.0\n     * @category Util\n     * @param {...(Function|Function[])} [predicates=[_.identity]]\n     *  The predicates to check.\n     * @returns {Function} Returns the new function.\n     * @example\n     *\n     * var func = _.overEvery([Boolean, isFinite]);\n     *\n     * func('1');\n     * // => true\n     *\n     * func(null);\n     * // => false\n     *\n     * func(NaN);\n     * // => false\n     */\n    var overEvery = createOver(arrayEvery);\n\n    /**\n     * Creates a function that checks if **any** of the `predicates` return\n     * truthy when invoked with the arguments it receives.\n     *\n     * @static\n     * @memberOf _\n     * @since 4.0.0\n     * @category Util\n     * @param {...(Function|Function[])} [predicates=[_.identity]]\n     *  The predicates to check.\n     * @returns {Function} Returns the new function.\n     * @example\n     *\n     * var func = _.overSome([Boolean, isFinite]);\n     *\n     * func('1');\n     * // => true\n     *\n     * func(null);\n     * // => true\n     *\n     * func(NaN);\n     * // => false\n     */\n    var overSome = createOver(arraySome);\n\n    /**\n     * Creates a function that returns the value at `path` of a given object.\n     *\n     * @static\n     * @memberOf _\n     * @since 2.4.0\n     * @category Util\n     * @param {Array|string} path The path of the property to get.\n     * @returns {Function} Returns the new accessor function.\n     * @example\n     *\n     * var objects = [\n     *   { 'a': { 'b': 2 } },\n     *   { 'a': { 'b': 1 } }\n     * ];\n     *\n     * _.map(objects, _.property('a.b'));\n     * // => [2, 1]\n     *\n     * _.map(_.sortBy(objects, _.property(['a', 'b'])), 'a.b');\n     * // => [1, 2]\n     */\n    function property(path) {\n      return isKey(path) ? baseProperty(toKey(path)) : basePropertyDeep(path);\n    }\n\n    /**\n     * The opposite of `_.property`; this method creates a function that returns\n     * the value at a given path of `object`.\n     *\n     * @static\n     * @memberOf _\n     * @since 3.0.0\n     * @category Util\n     * @param {Object} object The object to query.\n     * @returns {Function} Returns the new accessor function.\n     * @example\n     *\n     * var array = [0, 1, 2],\n     *     object = { 'a': array, 'b': array, 'c': array };\n     *\n     * _.map(['a[2]', 'c[0]'], _.propertyOf(object));\n     * // => [2, 0]\n     *\n     * _.map([['a', '2'], ['c', '0']], _.propertyOf(object));\n     * // => [2, 0]\n     */\n    function propertyOf(object) {\n      return function(path) {\n        return object == null ? undefined : baseGet(object, path);\n      };\n    }\n\n    /**\n     * Creates an array of numbers (positive and/or negative) progressing from\n     * `start` up to, but not including, `end`. A step of `-1` is used if a negative\n     * `start` is specified without an `end` or `step`. If `end` is not specified,\n     * it's set to `start` with `start` then set to `0`.\n     *\n     * **Note:** JavaScript follows the IEEE-754 standard for resolving\n     * floating-point values which can produce unexpected results.\n     *\n     * @static\n     * @since 0.1.0\n     * @memberOf _\n     * @category Util\n     * @param {number} [start=0] The start of the range.\n     * @param {number} end The end of the range.\n     * @param {number} [step=1] The value to increment or decrement by.\n     * @returns {Array} Returns the range of numbers.\n     * @see _.inRange, _.rangeRight\n     * @example\n     *\n     * _.range(4);\n     * // => [0, 1, 2, 3]\n     *\n     * _.range(-4);\n     * // => [0, -1, -2, -3]\n     *\n     * _.range(1, 5);\n     * // => [1, 2, 3, 4]\n     *\n     * _.range(0, 20, 5);\n     * // => [0, 5, 10, 15]\n     *\n     * _.range(0, -4, -1);\n     * // => [0, -1, -2, -3]\n     *\n     * _.range(1, 4, 0);\n     * // => [1, 1, 1]\n     *\n     * _.range(0);\n     * // => []\n     */\n    var range = createRange();\n\n    /**\n     * This method is like `_.range` except that it populates values in\n     * descending order.\n     *\n     * @static\n     * @memberOf _\n     * @since 4.0.0\n     * @category Util\n     * @param {number} [start=0] The start of the range.\n     * @param {number} end The end of the range.\n     * @param {number} [step=1] The value to increment or decrement by.\n     * @returns {Array} Returns the range of numbers.\n     * @see _.inRange, _.range\n     * @example\n     *\n     * _.rangeRight(4);\n     * // => [3, 2, 1, 0]\n     *\n     * _.rangeRight(-4);\n     * // => [-3, -2, -1, 0]\n     *\n     * _.rangeRight(1, 5);\n     * // => [4, 3, 2, 1]\n     *\n     * _.rangeRight(0, 20, 5);\n     * // => [15, 10, 5, 0]\n     *\n     * _.rangeRight(0, -4, -1);\n     * // => [-3, -2, -1, 0]\n     *\n     * _.rangeRight(1, 4, 0);\n     * // => [1, 1, 1]\n     *\n     * _.rangeRight(0);\n     * // => []\n     */\n    var rangeRight = createRange(true);\n\n    /**\n     * This method returns a new empty array.\n     *\n     * @static\n     * @memberOf _\n     * @since 4.13.0\n     * @category Util\n     * @returns {Array} Returns the new empty array.\n     * @example\n     *\n     * var arrays = _.times(2, _.stubArray);\n     *\n     * console.log(arrays);\n     * // => [[], []]\n     *\n     * console.log(arrays[0] === arrays[1]);\n     * // => false\n     */\n    function stubArray() {\n      return [];\n    }\n\n    /**\n     * This method returns `false`.\n     *\n     * @static\n     * @memberOf _\n     * @since 4.13.0\n     * @category Util\n     * @returns {boolean} Returns `false`.\n     * @example\n     *\n     * _.times(2, _.stubFalse);\n     * // => [false, false]\n     */\n    function stubFalse() {\n      return false;\n    }\n\n    /**\n     * This method returns a new empty object.\n     *\n     * @static\n     * @memberOf _\n     * @since 4.13.0\n     * @category Util\n     * @returns {Object} Returns the new empty object.\n     * @example\n     *\n     * var objects = _.times(2, _.stubObject);\n     *\n     * console.log(objects);\n     * // => [{}, {}]\n     *\n     * console.log(objects[0] === objects[1]);\n     * // => false\n     */\n    function stubObject() {\n      return {};\n    }\n\n    /**\n     * This method returns an empty string.\n     *\n     * @static\n     * @memberOf _\n     * @since 4.13.0\n     * @category Util\n     * @returns {string} Returns the empty string.\n     * @example\n     *\n     * _.times(2, _.stubString);\n     * // => ['', '']\n     */\n    function stubString() {\n      return '';\n    }\n\n    /**\n     * This method returns `true`.\n     *\n     * @static\n     * @memberOf _\n     * @since 4.13.0\n     * @category Util\n     * @returns {boolean} Returns `true`.\n     * @example\n     *\n     * _.times(2, _.stubTrue);\n     * // => [true, true]\n     */\n    function stubTrue() {\n      return true;\n    }\n\n    /**\n     * Invokes the iteratee `n` times, returning an array of the results of\n     * each invocation. The iteratee is invoked with one argument; (index).\n     *\n     * @static\n     * @since 0.1.0\n     * @memberOf _\n     * @category Util\n     * @param {number} n The number of times to invoke `iteratee`.\n     * @param {Function} [iteratee=_.identity] The function invoked per iteration.\n     * @returns {Array} Returns the array of results.\n     * @example\n     *\n     * _.times(3, String);\n     * // => ['0', '1', '2']\n     *\n     *  _.times(4, _.constant(0));\n     * // => [0, 0, 0, 0]\n     */\n    function times(n, iteratee) {\n      n = toInteger(n);\n      if (n < 1 || n > MAX_SAFE_INTEGER) {\n        return [];\n      }\n      var index = MAX_ARRAY_LENGTH,\n          length = nativeMin(n, MAX_ARRAY_LENGTH);\n\n      iteratee = getIteratee(iteratee);\n      n -= MAX_ARRAY_LENGTH;\n\n      var result = baseTimes(length, iteratee);\n      while (++index < n) {\n        iteratee(index);\n      }\n      return result;\n    }\n\n    /**\n     * Converts `value` to a property path array.\n     *\n     * @static\n     * @memberOf _\n     * @since 4.0.0\n     * @category Util\n     * @param {*} value The value to convert.\n     * @returns {Array} Returns the new property path array.\n     * @example\n     *\n     * _.toPath('a.b.c');\n     * // => ['a', 'b', 'c']\n     *\n     * _.toPath('a[0].b.c');\n     * // => ['a', '0', 'b', 'c']\n     */\n    function toPath(value) {\n      if (isArray(value)) {\n        return arrayMap(value, toKey);\n      }\n      return isSymbol(value) ? [value] : copyArray(stringToPath(toString(value)));\n    }\n\n    /**\n     * Generates a unique ID. If `prefix` is given, the ID is appended to it.\n     *\n     * @static\n     * @since 0.1.0\n     * @memberOf _\n     * @category Util\n     * @param {string} [prefix=''] The value to prefix the ID with.\n     * @returns {string} Returns the unique ID.\n     * @example\n     *\n     * _.uniqueId('contact_');\n     * // => 'contact_104'\n     *\n     * _.uniqueId();\n     * // => '105'\n     */\n    function uniqueId(prefix) {\n      var id = ++idCounter;\n      return toString(prefix) + id;\n    }\n\n    /*------------------------------------------------------------------------*/\n\n    /**\n     * Adds two numbers.\n     *\n     * @static\n     * @memberOf _\n     * @since 3.4.0\n     * @category Math\n     * @param {number} augend The first number in an addition.\n     * @param {number} addend The second number in an addition.\n     * @returns {number} Returns the total.\n     * @example\n     *\n     * _.add(6, 4);\n     * // => 10\n     */\n    var add = createMathOperation(function(augend, addend) {\n      return augend + addend;\n    }, 0);\n\n    /**\n     * Computes `number` rounded up to `precision`.\n     *\n     * @static\n     * @memberOf _\n     * @since 3.10.0\n     * @category Math\n     * @param {number} number The number to round up.\n     * @param {number} [precision=0] The precision to round up to.\n     * @returns {number} Returns the rounded up number.\n     * @example\n     *\n     * _.ceil(4.006);\n     * // => 5\n     *\n     * _.ceil(6.004, 2);\n     * // => 6.01\n     *\n     * _.ceil(6040, -2);\n     * // => 6100\n     */\n    var ceil = createRound('ceil');\n\n    /**\n     * Divide two numbers.\n     *\n     * @static\n     * @memberOf _\n     * @since 4.7.0\n     * @category Math\n     * @param {number} dividend The first number in a division.\n     * @param {number} divisor The second number in a division.\n     * @returns {number} Returns the quotient.\n     * @example\n     *\n     * _.divide(6, 4);\n     * // => 1.5\n     */\n    var divide = createMathOperation(function(dividend, divisor) {\n      return dividend / divisor;\n    }, 1);\n\n    /**\n     * Computes `number` rounded down to `precision`.\n     *\n     * @static\n     * @memberOf _\n     * @since 3.10.0\n     * @category Math\n     * @param {number} number The number to round down.\n     * @param {number} [precision=0] The precision to round down to.\n     * @returns {number} Returns the rounded down number.\n     * @example\n     *\n     * _.floor(4.006);\n     * // => 4\n     *\n     * _.floor(0.046, 2);\n     * // => 0.04\n     *\n     * _.floor(4060, -2);\n     * // => 4000\n     */\n    var floor = createRound('floor');\n\n    /**\n     * Computes the maximum value of `array`. If `array` is empty or falsey,\n     * `undefined` is returned.\n     *\n     * @static\n     * @since 0.1.0\n     * @memberOf _\n     * @category Math\n     * @param {Array} array The array to iterate over.\n     * @returns {*} Returns the maximum value.\n     * @example\n     *\n     * _.max([4, 2, 8, 6]);\n     * // => 8\n     *\n     * _.max([]);\n     * // => undefined\n     */\n    function max(array) {\n      return (array && array.length)\n        ? baseExtremum(array, identity, baseGt)\n        : undefined;\n    }\n\n    /**\n     * This method is like `_.max` except that it accepts `iteratee` which is\n     * invoked for each element in `array` to generate the criterion by which\n     * the value is ranked. The iteratee is invoked with one argument: (value).\n     *\n     * @static\n     * @memberOf _\n     * @since 4.0.0\n     * @category Math\n     * @param {Array} array The array to iterate over.\n     * @param {Function} [iteratee=_.identity] The iteratee invoked per element.\n     * @returns {*} Returns the maximum value.\n     * @example\n     *\n     * var objects = [{ 'n': 1 }, { 'n': 2 }];\n     *\n     * _.maxBy(objects, function(o) { return o.n; });\n     * // => { 'n': 2 }\n     *\n     * // The `_.property` iteratee shorthand.\n     * _.maxBy(objects, 'n');\n     * // => { 'n': 2 }\n     */\n    function maxBy(array, iteratee) {\n      return (array && array.length)\n        ? baseExtremum(array, getIteratee(iteratee, 2), baseGt)\n        : undefined;\n    }\n\n    /**\n     * Computes the mean of the values in `array`.\n     *\n     * @static\n     * @memberOf _\n     * @since 4.0.0\n     * @category Math\n     * @param {Array} array The array to iterate over.\n     * @returns {number} Returns the mean.\n     * @example\n     *\n     * _.mean([4, 2, 8, 6]);\n     * // => 5\n     */\n    function mean(array) {\n      return baseMean(array, identity);\n    }\n\n    /**\n     * This method is like `_.mean` except that it accepts `iteratee` which is\n     * invoked for each element in `array` to generate the value to be averaged.\n     * The iteratee is invoked with one argument: (value).\n     *\n     * @static\n     * @memberOf _\n     * @since 4.7.0\n     * @category Math\n     * @param {Array} array The array to iterate over.\n     * @param {Function} [iteratee=_.identity] The iteratee invoked per element.\n     * @returns {number} Returns the mean.\n     * @example\n     *\n     * var objects = [{ 'n': 4 }, { 'n': 2 }, { 'n': 8 }, { 'n': 6 }];\n     *\n     * _.meanBy(objects, function(o) { return o.n; });\n     * // => 5\n     *\n     * // The `_.property` iteratee shorthand.\n     * _.meanBy(objects, 'n');\n     * // => 5\n     */\n    function meanBy(array, iteratee) {\n      return baseMean(array, getIteratee(iteratee, 2));\n    }\n\n    /**\n     * Computes the minimum value of `array`. If `array` is empty or falsey,\n     * `undefined` is returned.\n     *\n     * @static\n     * @since 0.1.0\n     * @memberOf _\n     * @category Math\n     * @param {Array} array The array to iterate over.\n     * @returns {*} Returns the minimum value.\n     * @example\n     *\n     * _.min([4, 2, 8, 6]);\n     * // => 2\n     *\n     * _.min([]);\n     * // => undefined\n     */\n    function min(array) {\n      return (array && array.length)\n        ? baseExtremum(array, identity, baseLt)\n        : undefined;\n    }\n\n    /**\n     * This method is like `_.min` except that it accepts `iteratee` which is\n     * invoked for each element in `array` to generate the criterion by which\n     * the value is ranked. The iteratee is invoked with one argument: (value).\n     *\n     * @static\n     * @memberOf _\n     * @since 4.0.0\n     * @category Math\n     * @param {Array} array The array to iterate over.\n     * @param {Function} [iteratee=_.identity] The iteratee invoked per element.\n     * @returns {*} Returns the minimum value.\n     * @example\n     *\n     * var objects = [{ 'n': 1 }, { 'n': 2 }];\n     *\n     * _.minBy(objects, function(o) { return o.n; });\n     * // => { 'n': 1 }\n     *\n     * // The `_.property` iteratee shorthand.\n     * _.minBy(objects, 'n');\n     * // => { 'n': 1 }\n     */\n    function minBy(array, iteratee) {\n      return (array && array.length)\n        ? baseExtremum(array, getIteratee(iteratee, 2), baseLt)\n        : undefined;\n    }\n\n    /**\n     * Multiply two numbers.\n     *\n     * @static\n     * @memberOf _\n     * @since 4.7.0\n     * @category Math\n     * @param {number} multiplier The first number in a multiplication.\n     * @param {number} multiplicand The second number in a multiplication.\n     * @returns {number} Returns the product.\n     * @example\n     *\n     * _.multiply(6, 4);\n     * // => 24\n     */\n    var multiply = createMathOperation(function(multiplier, multiplicand) {\n      return multiplier * multiplicand;\n    }, 1);\n\n    /**\n     * Computes `number` rounded to `precision`.\n     *\n     * @static\n     * @memberOf _\n     * @since 3.10.0\n     * @category Math\n     * @param {number} number The number to round.\n     * @param {number} [precision=0] The precision to round to.\n     * @returns {number} Returns the rounded number.\n     * @example\n     *\n     * _.round(4.006);\n     * // => 4\n     *\n     * _.round(4.006, 2);\n     * // => 4.01\n     *\n     * _.round(4060, -2);\n     * // => 4100\n     */\n    var round = createRound('round');\n\n    /**\n     * Subtract two numbers.\n     *\n     * @static\n     * @memberOf _\n     * @since 4.0.0\n     * @category Math\n     * @param {number} minuend The first number in a subtraction.\n     * @param {number} subtrahend The second number in a subtraction.\n     * @returns {number} Returns the difference.\n     * @example\n     *\n     * _.subtract(6, 4);\n     * // => 2\n     */\n    var subtract = createMathOperation(function(minuend, subtrahend) {\n      return minuend - subtrahend;\n    }, 0);\n\n    /**\n     * Computes the sum of the values in `array`.\n     *\n     * @static\n     * @memberOf _\n     * @since 3.4.0\n     * @category Math\n     * @param {Array} array The array to iterate over.\n     * @returns {number} Returns the sum.\n     * @example\n     *\n     * _.sum([4, 2, 8, 6]);\n     * // => 20\n     */\n    function sum(array) {\n      return (array && array.length)\n        ? baseSum(array, identity)\n        : 0;\n    }\n\n    /**\n     * This method is like `_.sum` except that it accepts `iteratee` which is\n     * invoked for each element in `array` to generate the value to be summed.\n     * The iteratee is invoked with one argument: (value).\n     *\n     * @static\n     * @memberOf _\n     * @since 4.0.0\n     * @category Math\n     * @param {Array} array The array to iterate over.\n     * @param {Function} [iteratee=_.identity] The iteratee invoked per element.\n     * @returns {number} Returns the sum.\n     * @example\n     *\n     * var objects = [{ 'n': 4 }, { 'n': 2 }, { 'n': 8 }, { 'n': 6 }];\n     *\n     * _.sumBy(objects, function(o) { return o.n; });\n     * // => 20\n     *\n     * // The `_.property` iteratee shorthand.\n     * _.sumBy(objects, 'n');\n     * // => 20\n     */\n    function sumBy(array, iteratee) {\n      return (array && array.length)\n        ? baseSum(array, getIteratee(iteratee, 2))\n        : 0;\n    }\n\n    /*------------------------------------------------------------------------*/\n\n    // Add methods that return wrapped values in chain sequences.\n    lodash.after = after;\n    lodash.ary = ary;\n    lodash.assign = assign;\n    lodash.assignIn = assignIn;\n    lodash.assignInWith = assignInWith;\n    lodash.assignWith = assignWith;\n    lodash.at = at;\n    lodash.before = before;\n    lodash.bind = bind;\n    lodash.bindAll = bindAll;\n    lodash.bindKey = bindKey;\n    lodash.castArray = castArray;\n    lodash.chain = chain;\n    lodash.chunk = chunk;\n    lodash.compact = compact;\n    lodash.concat = concat;\n    lodash.cond = cond;\n    lodash.conforms = conforms;\n    lodash.constant = constant;\n    lodash.countBy = countBy;\n    lodash.create = create;\n    lodash.curry = curry;\n    lodash.curryRight = curryRight;\n    lodash.debounce = debounce;\n    lodash.defaults = defaults;\n    lodash.defaultsDeep = defaultsDeep;\n    lodash.defer = defer;\n    lodash.delay = delay;\n    lodash.difference = difference;\n    lodash.differenceBy = differenceBy;\n    lodash.differenceWith = differenceWith;\n    lodash.drop = drop;\n    lodash.dropRight = dropRight;\n    lodash.dropRightWhile = dropRightWhile;\n    lodash.dropWhile = dropWhile;\n    lodash.fill = fill;\n    lodash.filter = filter;\n    lodash.flatMap = flatMap;\n    lodash.flatMapDeep = flatMapDeep;\n    lodash.flatMapDepth = flatMapDepth;\n    lodash.flatten = flatten;\n    lodash.flattenDeep = flattenDeep;\n    lodash.flattenDepth = flattenDepth;\n    lodash.flip = flip;\n    lodash.flow = flow;\n    lodash.flowRight = flowRight;\n    lodash.fromPairs = fromPairs;\n    lodash.functions = functions;\n    lodash.functionsIn = functionsIn;\n    lodash.groupBy = groupBy;\n    lodash.initial = initial;\n    lodash.intersection = intersection;\n    lodash.intersectionBy = intersectionBy;\n    lodash.intersectionWith = intersectionWith;\n    lodash.invert = invert;\n    lodash.invertBy = invertBy;\n    lodash.invokeMap = invokeMap;\n    lodash.iteratee = iteratee;\n    lodash.keyBy = keyBy;\n    lodash.keys = keys;\n    lodash.keysIn = keysIn;\n    lodash.map = map;\n    lodash.mapKeys = mapKeys;\n    lodash.mapValues = mapValues;\n    lodash.matches = matches;\n    lodash.matchesProperty = matchesProperty;\n    lodash.memoize = memoize;\n    lodash.merge = merge;\n    lodash.mergeWith = mergeWith;\n    lodash.method = method;\n    lodash.methodOf = methodOf;\n    lodash.mixin = mixin;\n    lodash.negate = negate;\n    lodash.nthArg = nthArg;\n    lodash.omit = omit;\n    lodash.omitBy = omitBy;\n    lodash.once = once;\n    lodash.orderBy = orderBy;\n    lodash.over = over;\n    lodash.overArgs = overArgs;\n    lodash.overEvery = overEvery;\n    lodash.overSome = overSome;\n    lodash.partial = partial;\n    lodash.partialRight = partialRight;\n    lodash.partition = partition;\n    lodash.pick = pick;\n    lodash.pickBy = pickBy;\n    lodash.property = property;\n    lodash.propertyOf = propertyOf;\n    lodash.pull = pull;\n    lodash.pullAll = pullAll;\n    lodash.pullAllBy = pullAllBy;\n    lodash.pullAllWith = pullAllWith;\n    lodash.pullAt = pullAt;\n    lodash.range = range;\n    lodash.rangeRight = rangeRight;\n    lodash.rearg = rearg;\n    lodash.reject = reject;\n    lodash.remove = remove;\n    lodash.rest = rest;\n    lodash.reverse = reverse;\n    lodash.sampleSize = sampleSize;\n    lodash.set = set;\n    lodash.setWith = setWith;\n    lodash.shuffle = shuffle;\n    lodash.slice = slice;\n    lodash.sortBy = sortBy;\n    lodash.sortedUniq = sortedUniq;\n    lodash.sortedUniqBy = sortedUniqBy;\n    lodash.split = split;\n    lodash.spread = spread;\n    lodash.tail = tail;\n    lodash.take = take;\n    lodash.takeRight = takeRight;\n    lodash.takeRightWhile = takeRightWhile;\n    lodash.takeWhile = takeWhile;\n    lodash.tap = tap;\n    lodash.throttle = throttle;\n    lodash.thru = thru;\n    lodash.toArray = toArray;\n    lodash.toPairs = toPairs;\n    lodash.toPairsIn = toPairsIn;\n    lodash.toPath = toPath;\n    lodash.toPlainObject = toPlainObject;\n    lodash.transform = transform;\n    lodash.unary = unary;\n    lodash.union = union;\n    lodash.unionBy = unionBy;\n    lodash.unionWith = unionWith;\n    lodash.uniq = uniq;\n    lodash.uniqBy = uniqBy;\n    lodash.uniqWith = uniqWith;\n    lodash.unset = unset;\n    lodash.unzip = unzip;\n    lodash.unzipWith = unzipWith;\n    lodash.update = update;\n    lodash.updateWith = updateWith;\n    lodash.values = values;\n    lodash.valuesIn = valuesIn;\n    lodash.without = without;\n    lodash.words = words;\n    lodash.wrap = wrap;\n    lodash.xor = xor;\n    lodash.xorBy = xorBy;\n    lodash.xorWith = xorWith;\n    lodash.zip = zip;\n    lodash.zipObject = zipObject;\n    lodash.zipObjectDeep = zipObjectDeep;\n    lodash.zipWith = zipWith;\n\n    // Add aliases.\n    lodash.entries = toPairs;\n    lodash.entriesIn = toPairsIn;\n    lodash.extend = assignIn;\n    lodash.extendWith = assignInWith;\n\n    // Add methods to `lodash.prototype`.\n    mixin(lodash, lodash);\n\n    /*------------------------------------------------------------------------*/\n\n    // Add methods that return unwrapped values in chain sequences.\n    lodash.add = add;\n    lodash.attempt = attempt;\n    lodash.camelCase = camelCase;\n    lodash.capitalize = capitalize;\n    lodash.ceil = ceil;\n    lodash.clamp = clamp;\n    lodash.clone = clone;\n    lodash.cloneDeep = cloneDeep;\n    lodash.cloneDeepWith = cloneDeepWith;\n    lodash.cloneWith = cloneWith;\n    lodash.conformsTo = conformsTo;\n    lodash.deburr = deburr;\n    lodash.defaultTo = defaultTo;\n    lodash.divide = divide;\n    lodash.endsWith = endsWith;\n    lodash.eq = eq;\n    lodash.escape = escape;\n    lodash.escapeRegExp = escapeRegExp;\n    lodash.every = every;\n    lodash.find = find;\n    lodash.findIndex = findIndex;\n    lodash.findKey = findKey;\n    lodash.findLast = findLast;\n    lodash.findLastIndex = findLastIndex;\n    lodash.findLastKey = findLastKey;\n    lodash.floor = floor;\n    lodash.forEach = forEach;\n    lodash.forEachRight = forEachRight;\n    lodash.forIn = forIn;\n    lodash.forInRight = forInRight;\n    lodash.forOwn = forOwn;\n    lodash.forOwnRight = forOwnRight;\n    lodash.get = get;\n    lodash.gt = gt;\n    lodash.gte = gte;\n    lodash.has = has;\n    lodash.hasIn = hasIn;\n    lodash.head = head;\n    lodash.identity = identity;\n    lodash.includes = includes;\n    lodash.indexOf = indexOf;\n    lodash.inRange = inRange;\n    lodash.invoke = invoke;\n    lodash.isArguments = isArguments;\n    lodash.isArray = isArray;\n    lodash.isArrayBuffer = isArrayBuffer;\n    lodash.isArrayLike = isArrayLike;\n    lodash.isArrayLikeObject = isArrayLikeObject;\n    lodash.isBoolean = isBoolean;\n    lodash.isBuffer = isBuffer;\n    lodash.isDate = isDate;\n    lodash.isElement = isElement;\n    lodash.isEmpty = isEmpty;\n    lodash.isEqual = isEqual;\n    lodash.isEqualWith = isEqualWith;\n    lodash.isError = isError;\n    lodash.isFinite = isFinite;\n    lodash.isFunction = isFunction;\n    lodash.isInteger = isInteger;\n    lodash.isLength = isLength;\n    lodash.isMap = isMap;\n    lodash.isMatch = isMatch;\n    lodash.isMatchWith = isMatchWith;\n    lodash.isNaN = isNaN;\n    lodash.isNative = isNative;\n    lodash.isNil = isNil;\n    lodash.isNull = isNull;\n    lodash.isNumber = isNumber;\n    lodash.isObject = isObject;\n    lodash.isObjectLike = isObjectLike;\n    lodash.isPlainObject = isPlainObject;\n    lodash.isRegExp = isRegExp;\n    lodash.isSafeInteger = isSafeInteger;\n    lodash.isSet = isSet;\n    lodash.isString = isString;\n    lodash.isSymbol = isSymbol;\n    lodash.isTypedArray = isTypedArray;\n    lodash.isUndefined = isUndefined;\n    lodash.isWeakMap = isWeakMap;\n    lodash.isWeakSet = isWeakSet;\n    lodash.join = join;\n    lodash.kebabCase = kebabCase;\n    lodash.last = last;\n    lodash.lastIndexOf = lastIndexOf;\n    lodash.lowerCase = lowerCase;\n    lodash.lowerFirst = lowerFirst;\n    lodash.lt = lt;\n    lodash.lte = lte;\n    lodash.max = max;\n    lodash.maxBy = maxBy;\n    lodash.mean = mean;\n    lodash.meanBy = meanBy;\n    lodash.min = min;\n    lodash.minBy = minBy;\n    lodash.stubArray = stubArray;\n    lodash.stubFalse = stubFalse;\n    lodash.stubObject = stubObject;\n    lodash.stubString = stubString;\n    lodash.stubTrue = stubTrue;\n    lodash.multiply = multiply;\n    lodash.nth = nth;\n    lodash.noConflict = noConflict;\n    lodash.noop = noop;\n    lodash.now = now;\n    lodash.pad = pad;\n    lodash.padEnd = padEnd;\n    lodash.padStart = padStart;\n    lodash.parseInt = parseInt;\n    lodash.random = random;\n    lodash.reduce = reduce;\n    lodash.reduceRight = reduceRight;\n    lodash.repeat = repeat;\n    lodash.replace = replace;\n    lodash.result = result;\n    lodash.round = round;\n    lodash.runInContext = runInContext;\n    lodash.sample = sample;\n    lodash.size = size;\n    lodash.snakeCase = snakeCase;\n    lodash.some = some;\n    lodash.sortedIndex = sortedIndex;\n    lodash.sortedIndexBy = sortedIndexBy;\n    lodash.sortedIndexOf = sortedIndexOf;\n    lodash.sortedLastIndex = sortedLastIndex;\n    lodash.sortedLastIndexBy = sortedLastIndexBy;\n    lodash.sortedLastIndexOf = sortedLastIndexOf;\n    lodash.startCase = startCase;\n    lodash.startsWith = startsWith;\n    lodash.subtract = subtract;\n    lodash.sum = sum;\n    lodash.sumBy = sumBy;\n    lodash.template = template;\n    lodash.times = times;\n    lodash.toFinite = toFinite;\n    lodash.toInteger = toInteger;\n    lodash.toLength = toLength;\n    lodash.toLower = toLower;\n    lodash.toNumber = toNumber;\n    lodash.toSafeInteger = toSafeInteger;\n    lodash.toString = toString;\n    lodash.toUpper = toUpper;\n    lodash.trim = trim;\n    lodash.trimEnd = trimEnd;\n    lodash.trimStart = trimStart;\n    lodash.truncate = truncate;\n    lodash.unescape = unescape;\n    lodash.uniqueId = uniqueId;\n    lodash.upperCase = upperCase;\n    lodash.upperFirst = upperFirst;\n\n    // Add aliases.\n    lodash.each = forEach;\n    lodash.eachRight = forEachRight;\n    lodash.first = head;\n\n    mixin(lodash, (function() {\n      var source = {};\n      baseForOwn(lodash, function(func, methodName) {\n        if (!hasOwnProperty.call(lodash.prototype, methodName)) {\n          source[methodName] = func;\n        }\n      });\n      return source;\n    }()), { 'chain': false });\n\n    /*------------------------------------------------------------------------*/\n\n    /**\n     * The semantic version number.\n     *\n     * @static\n     * @memberOf _\n     * @type {string}\n     */\n    lodash.VERSION = VERSION;\n\n    // Assign default placeholders.\n    arrayEach(['bind', 'bindKey', 'curry', 'curryRight', 'partial', 'partialRight'], function(methodName) {\n      lodash[methodName].placeholder = lodash;\n    });\n\n    // Add `LazyWrapper` methods for `_.drop` and `_.take` variants.\n    arrayEach(['drop', 'take'], function(methodName, index) {\n      LazyWrapper.prototype[methodName] = function(n) {\n        n = n === undefined ? 1 : nativeMax(toInteger(n), 0);\n\n        var result = (this.__filtered__ && !index)\n          ? new LazyWrapper(this)\n          : this.clone();\n\n        if (result.__filtered__) {\n          result.__takeCount__ = nativeMin(n, result.__takeCount__);\n        } else {\n          result.__views__.push({\n            'size': nativeMin(n, MAX_ARRAY_LENGTH),\n            'type': methodName + (result.__dir__ < 0 ? 'Right' : '')\n          });\n        }\n        return result;\n      };\n\n      LazyWrapper.prototype[methodName + 'Right'] = function(n) {\n        return this.reverse()[methodName](n).reverse();\n      };\n    });\n\n    // Add `LazyWrapper` methods that accept an `iteratee` value.\n    arrayEach(['filter', 'map', 'takeWhile'], function(methodName, index) {\n      var type = index + 1,\n          isFilter = type == LAZY_FILTER_FLAG || type == LAZY_WHILE_FLAG;\n\n      LazyWrapper.prototype[methodName] = function(iteratee) {\n        var result = this.clone();\n        result.__iteratees__.push({\n          'iteratee': getIteratee(iteratee, 3),\n          'type': type\n        });\n        result.__filtered__ = result.__filtered__ || isFilter;\n        return result;\n      };\n    });\n\n    // Add `LazyWrapper` methods for `_.head` and `_.last`.\n    arrayEach(['head', 'last'], function(methodName, index) {\n      var takeName = 'take' + (index ? 'Right' : '');\n\n      LazyWrapper.prototype[methodName] = function() {\n        return this[takeName](1).value()[0];\n      };\n    });\n\n    // Add `LazyWrapper` methods for `_.initial` and `_.tail`.\n    arrayEach(['initial', 'tail'], function(methodName, index) {\n      var dropName = 'drop' + (index ? '' : 'Right');\n\n      LazyWrapper.prototype[methodName] = function() {\n        return this.__filtered__ ? new LazyWrapper(this) : this[dropName](1);\n      };\n    });\n\n    LazyWrapper.prototype.compact = function() {\n      return this.filter(identity);\n    };\n\n    LazyWrapper.prototype.find = function(predicate) {\n      return this.filter(predicate).head();\n    };\n\n    LazyWrapper.prototype.findLast = function(predicate) {\n      return this.reverse().find(predicate);\n    };\n\n    LazyWrapper.prototype.invokeMap = baseRest(function(path, args) {\n      if (typeof path == 'function') {\n        return new LazyWrapper(this);\n      }\n      return this.map(function(value) {\n        return baseInvoke(value, path, args);\n      });\n    });\n\n    LazyWrapper.prototype.reject = function(predicate) {\n      return this.filter(negate(getIteratee(predicate)));\n    };\n\n    LazyWrapper.prototype.slice = function(start, end) {\n      start = toInteger(start);\n\n      var result = this;\n      if (result.__filtered__ && (start > 0 || end < 0)) {\n        return new LazyWrapper(result);\n      }\n      if (start < 0) {\n        result = result.takeRight(-start);\n      } else if (start) {\n        result = result.drop(start);\n      }\n      if (end !== undefined) {\n        end = toInteger(end);\n        result = end < 0 ? result.dropRight(-end) : result.take(end - start);\n      }\n      return result;\n    };\n\n    LazyWrapper.prototype.takeRightWhile = function(predicate) {\n      return this.reverse().takeWhile(predicate).reverse();\n    };\n\n    LazyWrapper.prototype.toArray = function() {\n      return this.take(MAX_ARRAY_LENGTH);\n    };\n\n    // Add `LazyWrapper` methods to `lodash.prototype`.\n    baseForOwn(LazyWrapper.prototype, function(func, methodName) {\n      var checkIteratee = /^(?:filter|find|map|reject)|While$/.test(methodName),\n          isTaker = /^(?:head|last)$/.test(methodName),\n          lodashFunc = lodash[isTaker ? ('take' + (methodName == 'last' ? 'Right' : '')) : methodName],\n          retUnwrapped = isTaker || /^find/.test(methodName);\n\n      if (!lodashFunc) {\n        return;\n      }\n      lodash.prototype[methodName] = function() {\n        var value = this.__wrapped__,\n            args = isTaker ? [1] : arguments,\n            isLazy = value instanceof LazyWrapper,\n            iteratee = args[0],\n            useLazy = isLazy || isArray(value);\n\n        var interceptor = function(value) {\n          var result = lodashFunc.apply(lodash, arrayPush([value], args));\n          return (isTaker && chainAll) ? result[0] : result;\n        };\n\n        if (useLazy && checkIteratee && typeof iteratee == 'function' && iteratee.length != 1) {\n          // Avoid lazy use if the iteratee has a \"length\" value other than `1`.\n          isLazy = useLazy = false;\n        }\n        var chainAll = this.__chain__,\n            isHybrid = !!this.__actions__.length,\n            isUnwrapped = retUnwrapped && !chainAll,\n            onlyLazy = isLazy && !isHybrid;\n\n        if (!retUnwrapped && useLazy) {\n          value = onlyLazy ? value : new LazyWrapper(this);\n          var result = func.apply(value, args);\n          result.__actions__.push({ 'func': thru, 'args': [interceptor], 'thisArg': undefined });\n          return new LodashWrapper(result, chainAll);\n        }\n        if (isUnwrapped && onlyLazy) {\n          return func.apply(this, args);\n        }\n        result = this.thru(interceptor);\n        return isUnwrapped ? (isTaker ? result.value()[0] : result.value()) : result;\n      };\n    });\n\n    // Add `Array` methods to `lodash.prototype`.\n    arrayEach(['pop', 'push', 'shift', 'sort', 'splice', 'unshift'], function(methodName) {\n      var func = arrayProto[methodName],\n          chainName = /^(?:push|sort|unshift)$/.test(methodName) ? 'tap' : 'thru',\n          retUnwrapped = /^(?:pop|shift)$/.test(methodName);\n\n      lodash.prototype[methodName] = function() {\n        var args = arguments;\n        if (retUnwrapped && !this.__chain__) {\n          var value = this.value();\n          return func.apply(isArray(value) ? value : [], args);\n        }\n        return this[chainName](function(value) {\n          return func.apply(isArray(value) ? value : [], args);\n        });\n      };\n    });\n\n    // Map minified method names to their real names.\n    baseForOwn(LazyWrapper.prototype, function(func, methodName) {\n      var lodashFunc = lodash[methodName];\n      if (lodashFunc) {\n        var key = (lodashFunc.name + ''),\n            names = realNames[key] || (realNames[key] = []);\n\n        names.push({ 'name': methodName, 'func': lodashFunc });\n      }\n    });\n\n    realNames[createHybrid(undefined, WRAP_BIND_KEY_FLAG).name] = [{\n      'name': 'wrapper',\n      'func': undefined\n    }];\n\n    // Add methods to `LazyWrapper`.\n    LazyWrapper.prototype.clone = lazyClone;\n    LazyWrapper.prototype.reverse = lazyReverse;\n    LazyWrapper.prototype.value = lazyValue;\n\n    // Add chain sequence methods to the `lodash` wrapper.\n    lodash.prototype.at = wrapperAt;\n    lodash.prototype.chain = wrapperChain;\n    lodash.prototype.commit = wrapperCommit;\n    lodash.prototype.next = wrapperNext;\n    lodash.prototype.plant = wrapperPlant;\n    lodash.prototype.reverse = wrapperReverse;\n    lodash.prototype.toJSON = lodash.prototype.valueOf = lodash.prototype.value = wrapperValue;\n\n    // Add lazy aliases.\n    lodash.prototype.first = lodash.prototype.head;\n\n    if (symIterator) {\n      lodash.prototype[symIterator] = wrapperToIterator;\n    }\n    return lodash;\n  });\n\n  /*--------------------------------------------------------------------------*/\n\n  // Export lodash.\n  var _ = runInContext();\n\n  // Some AMD build optimizers, like r.js, check for condition patterns like:\n  if (typeof define == 'function' && typeof define.amd == 'object' && define.amd) {\n    // Expose Lodash on the global object to prevent errors when Lodash is\n    // loaded by a script tag in the presence of an AMD loader.\n    // See http://requirejs.org/docs/errors.html#mismatch for more details.\n    // Use `_.noConflict` to remove Lodash from the global object.\n    root._ = _;\n\n    // Define as an anonymous module so, through path mapping, it can be\n    // referenced as the \"underscore\" module.\n    define(function() {\n      return _;\n    });\n  }\n  // Check for `exports` after `define` in case a build optimizer adds it.\n  else if (freeModule) {\n    // Export for Node.js.\n    (freeModule.exports = _)._ = _;\n    // Export for CommonJS support.\n    freeExports._ = _;\n  }\n  else {\n    // Export to the global object.\n    root._ = _;\n  }\n}.call(this));\n\n\n\n//////////////////\n// WEBPACK FOOTER\n// ./node_modules/lodash/lodash.js\n// module id = 267\n// module chunks = 0 1 2 3 4 5 6 7 8 9","module.exports = function(module) {\r\n\tif(!module.webpackPolyfill) {\r\n\t\tmodule.deprecate = function() {};\r\n\t\tmodule.paths = [];\r\n\t\t// module.parent = undefined by default\r\n\t\tif(!module.children) module.children = [];\r\n\t\tObject.defineProperty(module, \"loaded\", {\r\n\t\t\tenumerable: true,\r\n\t\t\tget: function() {\r\n\t\t\t\treturn module.l;\r\n\t\t\t}\r\n\t\t});\r\n\t\tObject.defineProperty(module, \"id\", {\r\n\t\t\tenumerable: true,\r\n\t\t\tget: function() {\r\n\t\t\t\treturn module.i;\r\n\t\t\t}\r\n\t\t});\r\n\t\tmodule.webpackPolyfill = 1;\r\n\t}\r\n\treturn module;\r\n};\r\n\n\n\n//////////////////\n// WEBPACK FOOTER\n// (webpack)/buildin/module.js\n// module id = 268\n// module chunks = 0 1 2 3 4 5 6 7 8 9","module.exports = [{\"id\":\"18U.S.C.§3551\",\"content\":\"<p><strong>§ 3551. Authorized sentences</strong></p><p><strong>(a) In general.</strong>—Except as otherwise specifically provided, a defendant who has been found guilty of an offense described in any Federal statute, including sections 13 and 1153 of this title, other than an Act of Congress applicable exclusively in the District of Columbia or the Uniform Code of Military Justice, shall be sentenced in accordance with the provisions of this chapter so as to achieve the purposes set forth in subparagraphs (A) through (D) of section 3553(a)(2) to the extent that they are applicable in light of all the circumstances of the case.</p><p><strong>(b) Individuals.</strong>—An individual found guilty of an offense shall be sentenced, in accordance with the provisions of section 3553, to—</p><blockquote><p><strong>(1)</strong> a term of probation as authorized by subchapter B;</p><p><strong>(2)</strong> a fine as authorized by subchapter C; or</p><p><strong>(3)</strong> a term of imprisonment as authorized by subchapter D.</p></blockquote><p>A sentence to pay a fine may be imposed in addition to any other sentence. A sanction authorized by section 3554, 3555, or 3556 may be imposed in addition to the sentence required by this subsection.</p><p><strong>(c) Organizations.</strong>—An organization found guilty of an offense shall be sentenced, in accordance with the provisions of section 3553, to—</p><blockquote><p><strong>(1)</strong> a term of probation as authorized by subchapter B; or</p><p><strong>(2)</strong> a fine as authorized by subchapter C.</p></blockquote><p>A sentence to pay a fine may be imposed in addition to a sentence to probation. A sanction authorized by section 3554, 3555, or 3556 may be imposed in addition to the sentence required by this subsection.</p><p>(Added Pub.L. 98–473, Title II, § 212(a)(2), Oct. 12, 1984, 98 Stat. 1988, and amended Pub.L. 101–647, Title XVI, § 1602, Nov. 29, 1990, 104 Stat. 4843.)</p><p><strong>EDITORIAL NOTES</strong></p><p><strong>Effective Date and Savings Provisions of Sentencing Reform Act of 1984 (Pub.L. 98–473, Title II, c. II, §§ 211 to 239); Terms of Members of U.S. Sentencing Commission and U.S. Parole Commission; Parole Release Dates; Membership of National Institute of Corrections, Advisory Corrections Council, and U.S. Sentencing Commission.</strong> Section 235 of Pub.L. 98–473, Title II, c. II, Oct. 12, 1984, 98 Stat. 2031, as amended by Pub.L. 99–217, §§ 2, 4, Dec. 26, 1985, 99 Stat. 1728; Pub.L. 99–646, § 35, Nov. 10, 1986, 100 Stat. 3599; Pub.L. 100–182, § 2, Dec. 7, 1987, 101 Stat. 1266; Pub.L. 104–232, § 4, Oct. 2, 1996, 110 Stat. 3056, provided:</p><p>“<strong>(a)(1)</strong> This chapter [chapter II, §§ 211–239, of Title II of Pub.L. 98–473] shall take effect on the first day of the first calendar month beginning 36 months after the date of enactment [Oct. 12, 1984] and shall apply only to offenses committed after the taking effect of this chapter, except that—</p><p><strong>(A)</strong> the repeal of chapter 402 of title 18, United States Code, shall take effect on the date of enactment;</p><p><strong>(B)(i)</strong> chapter 58 of title 28, United States Code, shall take effect on the date of enactment of this Act or October 1, 1983, whichever occurs later, and the United States Sentencing Commission shall submit the initial sentencing guidelines promulgated under section 994(a)(1) of title 28 to the Congress within 30 months of the effective date of such chapter 58; and</p><p><strong>(ii)</strong> the sentencing guidelines promulgated pursuant to section 994(a)(1) shall not go into effect until—</p><blockquote><p><strong>(I)</strong> the United States Sentencing Commission has submitted the initial set of sentencing guidelines to the Congress pursuant to subparagraph (B)(i), along with a report stating the reasons for the Commission’s recommendations;</p><p><strong>(II)</strong> the General Accounting Office has undertaken a study of the guidelines, and their potential impact in comparison with the operation of the existing sentencing and parole release system, and has, within one hundred and fifty days of submission of the guidelines, reported to the Congress the results of its study; and</p><p><strong>(III)</strong> the day after the Congress has had six months after the date described in subclause (I) in which to examine the guidelines and consider the reports; and</p><p><strong>(IV)</strong> section 212(a)(2) [enacting chapter 227, sentences, comprised of sections 3551 to 3559, 3561 to 3566, 3571 to 3574, and 3581 to 3586; and chapter 229, postsentence administration, comprised of sections 3601 to 3607, 3611 to 3615, and 3621 to 3625 of this title; and repealing former chapter 227, sentence, judgment, and execution, comprised of sections 3561 to 3580; former chapter 229, fines, penalties, and forfeitures, comprised of sections 3611 to 3620; and former chapter 231, probation, comprised of sections 3651 to 3656 of this title] takes effect, in the case of the initial sentencing guidelines so promulgated.</p></blockquote><p><strong>(2)</strong> For the purposes of section 992(a) of title 28, the terms of the first members of the United States Sentencing Commission shall not begin to run until the sentencing guidelines go into effect pursuant to paragraph (1)(B)(ii).</p><p><strong>(b)(1)</strong> The following provisions of law in effect on the day before the effective date of this Act shall remain in effect for five years after the effective date as to an individual who committed an offense or an act of juvenile delinquency before the effective date and as to a term of imprisonment during the period described in subsection (a)(1)(B):</p><blockquote><p><strong>(A)</strong> Chapter 311 of title 18, United States Code.</p><p><strong>(B)</strong> Chapter 309 of title 18, United States Code.</p><p><strong>(C)</strong> Sections 4251 through 4255 of title 18, United States Code.</p><p><strong>(D)</strong> Sections 5041 and 5042 of title 18, United States Code.</p><p><strong>(E)</strong> Sections 5017 through 5020 of title 18, United States Code, as to a sentence imposed before the date of enactment.</p><p><strong>(F)</strong> The maximum term of imprisonment in effect on the effective date for an offense committed before the effective date.</p><p><strong>(G)</strong> Any other law relating to a violation of a condition of release or to arrest authority with regard to a person who violates a condition of release.</p></blockquote><p><strong>[(2)</strong> Repealed. Pub.L. 104–232, § 4, Oct. 2, 1996, 110 Stat. 3056.<strong>]</strong></p><p><strong>(3)</strong> The United States Parole Commission shall set a release date, for an individual who will be in its jurisdiction the day before the expiration of five years after the effective date of this Act, pursuant to section 4206 of title 18, United States Code. A release date set pursuant to this paragraph shall be set early enough to permit consideration of an appeal of the release date, in accordance with Parole Commission procedures, before the expiration of five years following the effective date of this Act.</p><p><strong>(4)</strong> Notwithstanding the other provisions of this subsection, all laws in effect on the day before the effective date of this Act pertaining to an individual who is—</p><blockquote><p><strong>(A)</strong> released pursuant to a provision listed in paragraph (1); and</p><p><strong>(B)(i)</strong> subject to supervision on the day before the expiration of the five‑year period following the effective date of this Act; or</p><p><strong>(ii)</strong> released on a date set pursuant to paragraph (3);</p></blockquote><p>including laws pertaining to terms and conditions of release, revocation of release, provision of counsel, and payment of transportation costs, shall remain in effect as to the individual until the expiration of his sentence, except that the district court shall determine, in accord with the Federal Rules of Criminal Procedure, whether release should be revoked or the conditions of release amended for violation of a condition of release.</p><p><strong>(5)</strong> Notwithstanding the provisions of section 991 of title 28, United States Code, and sections 4351 and 5002 of title 18, United States Code, the Chairman of the United States Parole Commission or his designee shall be a member of the National Institute of Corrections, and the Chairman of the United States Parole Commission shall be a member of the Advisory Corrections Council and a nonvoting member of the United States Sentencing Commission, ex officio, until the expiration of the five‑year period following the effective date of this Act. Notwithstanding the provisions of section 4351 of title 18, during the five‑year period the National Institute of Corrections shall have seventeen members, including seven ex officio members. Notwithstanding the provisions of section 991 of title 28, during the five‑year period the United States Sentencing Commission shall consist of nine members, including two ex officio, nonvoting members.”</p><p>[Pub.L. 113–47, § 2, Oct. 31, 2013, 127 Stat. 572, provided that: “For purposes of section 235(b) of the Sentencing Reform Act of 1984 (18 U.S.C. 3551 note; Public Law 98–473; 98 Stat. 2032), as such section relates to chapter 311 of title 18, United States Code, and the United States Parole Commission, each reference in such section to ‘26 years’ or ‘26‑year period’ shall be deemed a reference to ‘31 years’ or ‘31‑year period’, respectively.”]</p><p>[Pub.L. 112–44, § 2, Oct. 21, 2011, 125 Stat. 532, provided that: “For purposes of section 235(b) of the Sentencing Reform Act of 1984 (18 U.S.C. 3551 note; Public Law 98–473; 98 Stat. 2032), as such section relates to chapter 311 of title 18, United States Code, and the United States Parole Commission, each reference in such section to ‘24 years’ or ‘24‑year period’ shall be deemed a reference to ‘26 years’ or ‘26‑year period’, respectively.”]</p><p>[Pub.L. 110–312, § 2, Aug. 12, 2008, 122 Stat. 3013, provided that: “For purposes of section 235(b) of the Sentencing Reform Act of 1984 (18 U.S.C. 3551 note; Public Law 98–473; 98 Stat. 2032) [set out in an Effective and Applicability Provisions note under this section], as such section relates to chapter 311 of title 18, United States Code [18 U.S.C.A. § 4201 et seq.], and the United States Parole Commission, each reference in such section to ‘21 years’ or ‘21‑year period’ shall be deemed a reference to ‘24 years’ or ‘24‑year period’, respectively.”]</p><p>[Pub.L. 109–76, § 2, Sept. 29, 2005, 119 Stat. 2035, provided that: “For purposes of section 235(b) of the Sentencing Reform Act of 1984 (98 Stat. 2032) [Pub.L. 98–473, Title II, § 235, Oct. 12, 1984, 98 Stat. 2032, as amended, set out as a note under this section] as such section relates to chapter 311 of title 18, United States Code, [18 U.S.C.A. § 4201 et seq.] and the United States Parole Commission, each reference in such section to ‘eighteen years’ or ‘eighteen‑year period’ shall be deemed a reference to ‘21 years’ or ‘21‑year period’, respectively.”]</p><p>[Pub.L. 107–273, Div. C, Title I, § 11017(a), Nov. 2, 2002, 116 Stat. 1824, provided that: “For purposes of section 235(b) of the Sentencing Reform Act of 1984 (98 Stat. 2032) [section 235(b) of Pub.L. 98–473, set out as a note under this section], as such section relates to chapter 311 of title 18, United States Code [18 U.S.C.A. § 4201 et seq. (repealed)], and the Parole Commission, each reference in such section to ‘fifteen years’ or ‘fifteen‑year period’ shall be deemed to be a reference to ‘eighteen years’ or ‘eighteen‑year period’, respectively.” See also section 11017(b) and (c) of Pub.L. 107–273, set out as a note under 18 U.S.C.A. § 4202]</p><p>[Pub.L. 104–232, § 3(b)(2), Oct. 2, 1996, 110 Stat. 3056, provided that: “Effective on the date such plan [an alternative plan by the Attorney General for the transfer of the United States Parole Commission’s functions to another entity within the Department of Justice pursuant to section 3 of Pub.L. 104–232, set out as a note under section 4201 of this title] takes effect, paragraphs (3) and (4) of section 235(b) of the Sentencing Reform Act of 1984 (98 Stat. 2032) [section 235(b)(3) and (4) of Pub.L. 98–473, set out above] are repealed.”]</p><p>[Pub.L. 104–232, § 2(a), Oct. 2, 1996, 110 Stat. 3055, provided that: “For purposes of section 235(b) of the Sentencing Reform Act of 1984 (98 Stat. 2032) [section 235(b) of Pub.L. 98–473, set out as a note under this section], as it related to chapter 311 of title 18, United States Code [section 4201 et seq. of this title], and the Parole Commission, each reference in such section to ‘ten years’ or ‘ten-year period’ shall be deemed to be a reference to ‘fifteen years’ or ‘fifteen-year period’, respectively.”]</p><p>[Pub.L. 101–650, Title III, § 316, Dec. 1, 1990, 104 Stat. 5115, provided that: “For the purposes of section 235(b) of Public Law 98–473 [set out as a note under this section] as it relates to chapter 311 of title 18, United States Code [section 4201 et seq. of this title], and the United States Parole Commission, each reference in such section to ‘five years’ or a ‘five-year period’ shall be deemed a reference to ‘ten years’ or a ‘ten-year period’, respectively.”]</p><p><strong>Sentencing Considerations Prior to Enactment of Guidelines.</strong> Section 239 of Pub.L. 98–473, Title II, c. II, Oct. 12, 1984, 98 Stat. 2039, provided:</p><p>“Since, due to an impending crisis in prison over‑crowding, available Federal prison space must be treated as a scarce resource in the sentencing of criminal defendants;</p><p>“Since, sentencing decisions should be designed to ensure that prison resources are, first and foremost, reserved for those violent and serious criminal offenders who pose the most dangerous threat to society;</p><p>“Since, in cases of nonviolent and nonserious offenders, the interests of society as a whole as well as individual victims of crime can continue to be served through the imposition of alternative sentences, such as restitution and community service;</p><p>“Since, in the two years preceding the enactment of sentencing guidelines, Federal sentencing practice should ensure that scarce prison resources are available to house violent and serious criminal offenders by the increased use of restitution, community service, and other alternative sentences in cases of nonviolent and nonserious offenders: Now, therefore, be it</p><p>“Declared, That it is the sense of the Senate that in the two years preceding the enactment of the sentencing guidelines, Federal judges, in determining the particular sentence to be imposed, consider—</p><blockquote><p><strong>(1)</strong> the nature and circumstances of the offense and the history and characteristics of the defendant;</p><p><strong>(2)</strong> the general appropriateness of imposing a sentence other than imprisonment in cases in which the defendant has not been convicted of a crime of violence or otherwise serious offense; and</p><p><strong>(3)</strong> the general appropriateness of imposing a sentence of imprisonment in cases in which the defendant has been convicted of a crime of violence or otherwise serious offense.”</p></blockquote>\"},{\"id\":\"18U.S.C.§3552\",\"content\":\"<p><strong>§ 3552. Presentence reports</strong></p><p><strong>(a) Presentence investigation and report by probation officer.</strong>—A United States probation officer shall make a presentence investigation of a defendant that is required pursuant to the provisions of Rule 32(c) of the Federal Rules of Criminal Procedure, and shall, before the imposition of sentence, report the results of the investigation to the court.</p><p><strong>(b) Presentence study and report by bureau of prisons.</strong>—If the court, before or after its receipt of a report specified in subsection (a) or (c), desires more information than is otherwise available to it as a basis for determining the sentence to be imposed on a defendant found guilty of a misdemeanor or felony, it may order a study of the defendant. The study shall be conducted in the local community by qualified consultants unless the sentencing judge finds that there is a compelling reason for the study to be done by the Bureau of Prisons or there are no adequate professional resources available in the local community to perform the study. The period of the study shall be no more than sixty days. The order shall specify the additional information that the court needs before determining the sentence to be imposed. Such an order shall be treated for administrative purposes as a provisional sentence of imprisonment for the maximum term authorized by section 3581(b) for the offense committed. The study shall inquire into such matters as are specified by the court and any other matters that the Bureau of Prisons or the professional consultants believe are pertinent to the factors set forth in section 3553(a). The period of the study may, in the discretion of the court, be extended for an additional period of not more than sixty days. By the expiration of the period of the study, or by the expiration of any extension granted by the court, the United States marshal shall, if the defendant is in custody, return the defendant to the court for final sentencing. The Bureau of Prisons or the professional consultants shall provide the court with a written report of the pertinent results of the study and make to the court whatever recommendations the Bureau or the consultants believe will be helpful to a proper resolution of the case. The report shall include recommendations of the Bureau or the consultants concerning the guidelines and policy statements, promulgated by the Sentencing Commission pursuant to 28 U.S.C. 994(a), that they believe are applicable to the defendant’s case. After receiving the report and the recommendations, the court shall proceed finally to sentence the defendant in accordance with the sentencing alternatives and procedures available under this chapter.</p><p><strong>(c) Presentence examination and report by psychiatric or psychological examiners.</strong>—If the court, before or after its receipt of a report specified in subsection (a) or (b) desires more information than is otherwise available to it as a basis for determining the mental condition of the defendant, the court may order the same psychiatric or psychological examination and report thereon as may be ordered under section 4244(b) of this title.</p><p><strong>(d) Disclosure of presentence reports.</strong>—The court shall assure that a report filed pursuant to this section is disclosed to the defendant, the counsel for the defendant, and the attorney for the Government at least ten days prior to the date set for sentencing, unless this minimum period is waived by the defendant. The court shall provide a copy of the presentence report to the attorney for the Government to use in collecting an assessment, criminal fine, forfeiture or restitution imposed.</p><p>(Added Pub.L. 98–473, Title II, § 212(a)(2), Oct. 12, 1984, 98 Stat. 1988, and amended Pub.L. 99–646, § 7(a), Nov. 10, 1986, 100 Stat. 3593; Pub.L. 101–647, Title XXXVI, § 3625, Nov. 29, 1990, 104 Stat. 4965).</p><p><strong>EDITORIAL NOTES</strong></p><p><strong>Use of Certain Technology to Facilitate Criminal Conduct.</strong> Pub.L. 104–294, Title V, § 501, Oct. 11, 1996, 110 Stat. 3497, provided that:</p><p>“<strong>(a) Information.—</strong>The Administrative Office of the United States courts shall establish policies and procedures for the inclusion in all presentence reports of information that specifically identifies and describes any use of encryption or scrambling technology that would be relevant to an enhancement under section 3C1.1 (dealing with Obstructing or Impeding the Administration of Justice) of the Sentencing Guidelines [set out in this title] or to offense conduct under the Sentencing Guidelines.</p><p><strong>(b) Compiling and report.—</strong>The United States Sentencing Commission shall—</p><blockquote><p><strong>(1)</strong> compile and analyze any information contained in documentation described in subsection (a) relating to the use of encryption or scrambling technology to facilitate or conceal criminal conduct; and</p><p><strong>(2)</strong> based on the information compiled and analyzed under paragraph (1), annually report to the Congress on the nature and extent of the use of encryption or scrambling technology to facilitate or conceal criminal conduct.”</p></blockquote>\"},{\"id\":\"18U.S.C.§3553\",\"content\":\"<p><strong>§ 3553. Imposition of a sentence</strong></p><p><strong>(a) Factors to be considered in imposing a sentence.</strong>—The court shall impose a sentence sufficient, but not greater than necessary, to comply with the purposes set forth in paragraph (2) of this subsection. The court, in determining the particular sentence to be imposed, shall consider—</p><blockquote><p><strong>(1)</strong> the nature and circumstances of the offense and the history and characteristics of the defendant;</p><p><strong>(2)</strong> the need for the sentence imposed—</p><p><strong>(A)</strong> to reflect the seriousness of the offense, to promote respect for the law, and to provide just punishment for the offense;</p><p><strong>(B)</strong> to afford adequate deterrence to criminal conduct;</p><p><strong>(C)</strong> to protect the public from further crimes of the defendant; and</p><p><strong>(D)</strong> to provide the defendant with needed educational or vocational training, medical care, or other correctional treatment in the most effective manner;</p><p><strong>(3)</strong> the kinds of sentences available;</p><p><strong>(4)</strong> the kinds of sentence and the sentencing range established for—</p><p><strong>(A)</strong> the applicable category of offense committed by the applicable category of defendant as set forth in the guidelines—</p><p><strong>(i)</strong> issued by the Sentencing Commission pursuant to section 994(a)(1) of title 28, United States Code, subject to any amendments made to such guidelines by act of Congress (regardless of whether such amendments have yet to be incorporated by the Sentencing Commission into amendments issued under section 994(p) of title 28); and</p><p><strong>(ii)</strong> that, except as provided in section 3742(g), are in effect on the date the defendant is sentenced; or</p><p><strong>(B)</strong> in the case of a violation of probation or supervised release, the applicable guidelines or policy statements issued by the Sentencing Commission pursuant to section 994(a)(3) of title 28, United States Code, taking into account any amendments made to such guidelines or policy statements by act of Congress (regardless of whether such amendments have yet to be incorporated by the Sentencing Commission into amendments issued under section 994(p) of title 28);</p><p><strong>(5)</strong> any pertinent policy statement—</p><p><strong>(A)</strong> issued by the Sentencing Commission pursuant to section 994(a)(2) of title 28, United States Code , subject to any amendments made to such policy statement by act of Congress (regardless of whether such amendments have yet to be incorporated by the Sentencing Commission into amendments issued under section 994(p) of title 28); and</p><p><strong>(B)</strong> that, except as provided in section 3742(g), is in effect on the date the defendant is sentenced.</p><p><strong>(6)</strong> the need to avoid unwarranted sentence disparities among defendants with similar records who have been found guilty of similar conduct; and</p><p><strong>(7)</strong> the need to provide restitution to any victims of the offense.</p></blockquote><p><strong>(b) Application of guidelines in imposing a sentence.</strong>—<strong>(1) In general.—</strong>Except as provided in paragraph (2), the court shall impose a sentence of the kind, and within the range, referred to in subsection (a)(4) unless the court finds that there exists an aggravating or mitigating circumstance of a kind, or to a degree, not adequately taken into consideration by the Sentencing Commission in formulating the guidelines that should result in a sentence different from that described. In determining whether a circumstance was adequately taken into consideration, the court shall consider only the sentencing guidelines, policy statements, and official commentary of the Sentencing Commission. In the absence of an applicable sentencing guideline, the court shall impose an appropriate sentence, having due regard for the purposes set forth in subsection (a)(2). In the absence of an applicable sentencing guideline in the case of an offense other than a petty offense, the court shall also have due regard for the relationship of the sentence imposed to sentences prescribed by guidelines applicable to similar offenses and offenders, and to the applicable policy statements of the Sentencing Commission.</p><blockquote><p><strong>(2) Child crimes and sexual offenses.—</strong></p><p><strong>(A) Sentencing.—</strong>In sentencing a defendant convicted of an offense under section 1201 involving a minor victim, an offense under section 1591, or an offense under chapter 71, 109A, 110, or 117, the court shall impose a sentence of the kind, and within the range, referred to in subsection (a)(4) unless—</p><p><strong>(i)</strong> the court finds that there exists an aggravating circumstance of a kind, or to a degree, not adequately taken into consideration by the Sentencing Commission in formulating the guidelines that should result in a sentence greater than that described;</p><p><strong>(ii)</strong> the court finds that there exists a mitigating circumstance of a kind or to a degree, that—</p><p><strong>(I)</strong> has been affirmatively and specifically identified as a permissible ground of downward departure in the sentencing guidelines or policy statements issued under section 994(a) of title 28, taking account of any amendments to such sentencing guidelines or policy statements by Congress;</p><p><strong>(II)</strong> has not been taken into consideration by the Sentencing Commission in formulating the guidelines; and</p><p><strong>(III)</strong> should result in a sentence different from that described; or</p><p><strong>(iii)</strong> the court finds, on motion of the Government, that the defendant has provided substantial assistance in the investigation or prosecution of another person who has committed an offense and that this assistance established a mitigating circumstance of a kind, or to a degree, not adequately taken into consideration by the Sentencing Commission in formulating the guidelines that should result in a sentence lower than that described.</p></blockquote><p>In determining whether a circumstance was adequately taken into consideration, the court shall consider only the sentencing guidelines, policy statements, and official commentary of the Sentencing Commission, together with any amendments thereto by act of Congress. In the absence of an applicable sentencing guideline, the court shall impose an appropriate sentence, having due regard for the purposes set forth in subsection (a)(2). In the absence of an applicable sentencing guideline in the case of an offense other than a petty offense, the court shall also have due regard for the relationship of the sentence imposed to sentences prescribed by guidelines applicable to similar offenses and offenders, and to the applicable policy statements of the Sentencing Commission, together with any amendments to such guidelines or policy statements by act of Congress.</p><p><strong>(c) Statement of reasons for imposing a sentence.</strong>—The court, at the time of sentencing, shall state in open court the reasons for its imposition of the particular sentence, and, if the sentence—</p><blockquote><p><strong>(1)</strong> is of the kind, and within the range, described in subsection (a)(4), and that range exceeds 24 months, the reason for imposing a sentence at a particular point within the range; or</p><p><strong>(2)</strong> is not of the kind, or is outside the range, described in subsection (a)(4), the specific reason for the imposition of a sentence different from that described, which reasons must also be stated with specificity in a statement of reasons form issued under section 994(w)(1)(B) of title 28, except to the extent that the court relies upon statements received in camera in accordance with Federal Rule of Criminal Procedure 32. In the event that the court relies upon statements received in camera in accordance with Federal Rule of Criminal Procedure 32 the court shall state that such statement were so received and that it relied upon the content of such statements.</p></blockquote><p>If the court does not order restitution, or orders only partial restitution, the court shall include in the statement the reason therefor. The court shall provide a transcription or other appropriate public record of the court’s statement of reasons, together with the order of judgement and commitment, to the Probation System and to the Sentencing Commission,<a href='#fn1' class='footnoteRef' id='fnref1'><sup>1</sup></a> and, if the sentence includes a term of imprisonment, to the Bureau of Prisons.</p><p><strong>(d) Presentence procedure for an order of notice.</strong>—Prior to imposing an order of notice pursuant to section 3555, the court shall give notice to the defendant and the Government that it is considering imposing such an order. Upon motion of the defendant or the Government, or on its own motion, the court shall—</p><blockquote><p><strong>(1)</strong> permit the defendant and the Government to submit affidavits and written memoranda addressing matters relevant to the imposition of such an order;</p><p><strong>(2)</strong> afford counsel an opportunity in open court to address orally the appropriateness of the imposition of such an order; and</p><p><strong>(3)</strong> include in its statement of reasons pursuant to subsection (c) specific reasons underlying its determinations regarding the nature of such an order.</p></blockquote><p>Upon motion of the defendant or the Government, or on its own motion, the court may in its discretion employ any additional procedures that it concludes will not unduly complicate or prolong the sentencing process.</p><p><strong>(e) Limited authority to impose a sentence below a statutory minimum.</strong>—Upon motion of the Government, the court shall have the authority to impose a sentence below a level established by statute as a minimum sentence so as to reflect a defendant’s substantial assistance in the investigation or prosecution of another person who has committed an offense. Such sentence shall be imposed in accordance with the guidelines and policy statements issued by the Sentencing Commission pursuant to section 994 of title 28, United States Code.</p><p><strong>(f) Limitation on applicability of statutory minimums in certain cases.</strong>—Notwithstanding any other provision of law, in the case of an offense under section 401, 404, or 406 of the Controlled Substances Act (21 U.S.C. 841, 844, 846) or section 1010 or 1013 of the Controlled Substances Import and Export Act (21 U.S.C. 960, 963), the court shall impose a sentence pursuant to guidelines promulgated by the United States Sentencing Commission under section 994 of title 28 without regard to any statutory minimum sentence, if the court finds at sentencing, after the Government has been afforded the opportunity to make a recommendation, that—</p><blockquote><p><strong>(1)</strong> the defendant does not have more than 1 criminal history point, as determined under the sentencing guidelines;</p><p><strong>(2)</strong> the defendant did not use violence or credible threats of violence or possess a firearm or other dangerous weapon (or induce another participant to do so) in connection with the offense;</p><p><strong>(3)</strong> the offense did not result in death or serious bodily injury to any person;</p><p><strong>(4)</strong> the defendant was not an organizer, leader, manager, or supervisor of others in the offense, as determined under the sentencing guidelines and was not engaged in a continuing criminal enterprise, as defined in section 408 of the Controlled Substances Act; and</p><p><strong>(5)</strong> not later than the time of the sentencing hearing, the defendant has truthfully provided to the Government all information and evidence the defendant has concerning the offense or offenses that were part of the same course of conduct or of a common scheme or plan, but the fact that the defendant has no relevant or useful other information to provide or that the Government is already aware of the information shall not preclude a determination by the court that the defendant has complied with this requirement.</p></blockquote><p>(Added Pub.L. 98–473, Title II, § 212(a)(2), Oct. 12, 1984, 98 Stat. 1989, and amended Pub.L. 99–570, Title I, § 1007(b), Oct. 27, 1986, 100 Stat. 3707–7; Pub.L. 99–646, §§ 8(a), 9(a), 80(a), 81(a), Nov. 10, 1986, 100 Stat. 3593, 3619; Pub.L. 100–182, §§ 3, 16(a), (17), Dec. 7, 1987, 101 Stat. 1266, 1269, 1270; Pub.L. 100–690, Title VII, § 7102, Nov. 18, 1988, 102 Stat. 4416; Pub.L. 103–322, Title VIII, § 80001(a), Title XXVIII, § 280001, Sept. 13, 1994, 108 Stat. 1985, 2095; Pub.L. 104–294, Title VI, § 601(b)(5), (6), (h), Oct. 11, 1996, 110 Stat. 3499, 3500; Pub.L. 107–273, Div. B, Title IV, §4002(a)(8), Nov. 2, 2002, 116 Stat. 1807; Pub.L. 107–273, Div. B, Title IV, § 4002(a)(8), Nov. 2, 2002, 116 Stat. 1807; Pub.L. 108–21, Title IV, § 401(a), (c), (j)(5), Apr. 30, 2003, 117 Stat. 667, 669, 673; Pub.L. 111–174, § 4, May 27, 2010, 124 Stat. 1216.)</p><p><strong>EDITORIAL NOTES</strong></p><p><strong>Unconstitutionality of Subsection (b).</strong> Mandatory aspect of subsection (b) of this section held unconstitutional by <em>United States v. Booker</em>, 543 U.S. 220, 125 S. Ct. 738 (2005).</p><p><strong>Authority to Lower Sentences Below Statutory Minimum for Old Offenses.</strong> Section 24 of Pub.L. 100–182 provided that: “Notwithstanding section 235 of the Comprehensive Crime Control Act of 1984 [section 235 of Pub.L. 98–473, set out as a note under section 3551 of this title]—</p><blockquote><p><strong>(1)</strong> section 3553(e) of title 18, United States Code [subsec. (e) of this section];</p><p><strong>(2)</strong> rule 35(b) of the Federal Rules of Criminal Procedure as amended by section 215(b) of such Act; and</p><p><strong>(3)</strong> rule 35(b) as in effect before the taking effect of the initial set of guidelines promulgated by the United States Sentencing Commission pursuant to chapter 58 of title 28, United States Code [sections 991 et seq. of Title 28, Judiciary and Judicial Procedure],</p></blockquote><p>shall apply in the case of an offense committed before the taking effect of such guidelines.”</p>\"},{\"id\":\"18U.S.C.§3554\",\"content\":\"<p><strong>§ 3554. Order of criminal forfeiture</strong></p><p>The court, in imposing a sentence on a defendant who has been found guilty of an offense described in section 1962 of this title or in title II or III of the Comprehensive Drug Abuse Prevention and Control Act of 1970 shall order, in addition to the sentence that is imposed pursuant to the provisions of section 3551, that the defendant forfeit property to the United States in accordance with the provisions of section 1963 of this title or section 413 of the Comprehensive Drug Abuse and Control Act of 1970.</p><p>(Added Pub.L. 98–473, Title II, § 212(a)(2), Oct. 12, 1984, 98 Stat. 1990.)</p><p><strong>EDITORIAL NOTES</strong></p><p><strong>References in Text.</strong> Title II or III of the Comprehensive Drug Abuse Prevention and Control Act of 1970, referred to in text, are Titles II and III of Pub.L. 91–513, Oct. 27, 1970, 84 Stat. 1242, which are principally classified to subchapters I and II of chapter 13 of Title 21, Food and Drugs.</p><p>Section 413 of such Act, referred to in text, is section 413 of Pub.L. 91–513, added Pub.L. 98–473, Title II, c. III, part B, § 303, Oct. 12, 1984, 98 Stat. 2044, which is classified to section 853 of Title 21.</p>\"},{\"id\":\"18U.S.C.§3555\",\"content\":\"<p><strong>§ 3555. Order of notice to victims</strong></p><p>The court, in imposing a sentence on a defendant who has been found guilty of an offense involving fraud or other intentionally deceptive practices, may order, in addition to the sentence that is imposed pursuant to the provisions of section 3551, that the defendant give reasonable notice and explanation of the conviction, in such form as the court may approve, to the victims of the offense. The notice may be ordered to be given by mail, by advertising in designated areas or through designated media, or by other appropriate means. In determining whether to require the defendant to give such notice, the court shall consider the factors set forth in section 3553(a) to the extent that they are applicable and shall consider the cost involved in giving the notice as it relates to the loss caused by the offense, and shall not require the defendant to bear the costs of notice in excess of $20,000.</p><p>(Added Pub.L. 98–473, Title II, § 212(a)(2), Oct. 12, 1984, 98 Stat. 1991.)</p>\"},{\"id\":\"18U.S.C.§3556\",\"content\":\"<p><strong>§ 3556. Order of restitution</strong></p><p>The court, in imposing a sentence on a defendant who has been found guilty of an offense shall order restitution in accordance with section 3663A, and may order restitution in accordance with section 3663. The procedures under section 3664 shall apply to all orders of restitution under this section.</p><p>(Added Pub.L. 98–473, Title II, § 212(a)(2), Oct. 12, 1984, 98 Stat. 1991, and amended Pub.L. 99–646, § 20(b), Nov. 10, 1986, 100 Stat. 3596; Pub.L. 104–132, Title II, § 202, Apr. 24, 1996, 110 Stat. 1227.)</p>\"},{\"id\":\"18U.S.C.§3557\",\"content\":\"<p><strong>§ 3557. Review of a sentence</strong></p><p>The review of a sentence imposed pursuant to section 3551 is governed by the provisions of section 3742.</p><p>(Added Pub.L. 98–473, Title II, § 212(a)(2), Oct. 12, 1984, 98 Stat. 1991.)</p>\"},{\"id\":\"18U.S.C.§3558\",\"content\":\"<p><strong>§ 3558. Implementation of a sentence</strong></p><p>The implementation of a sentence imposed pursuant to section 3551 is governed by the provisions of chapter 229.</p><p>(Added Pub.L. 98–473, Title II, § 212(a)(2), Oct. 12, 1984, 98 Stat. 1991.)</p>\"},{\"id\":\"18U.S.C.§3559\",\"content\":\"<p><strong>§ 3559. Sentencing classification of offenses</strong></p><p><strong>(a) Classification.</strong>—An offense that is not specifically classified by a letter grade in the section defining it, is classified if the maximum term of imprisonment authorized is—</p><blockquote><p><strong>(1)</strong> life imprisonment, or if the maximum penalty is death, as a Class A felony;</p><p><strong>(2)</strong> twenty‑five years or more, as a Class B felony;</p><p><strong>(3)</strong> less than twenty‑five years but ten or more years, as a Class C felony;</p><p><strong>(4)</strong> less than ten years but five or more years, as a Class D felony;</p><p><strong>(5)</strong> less than five years but more than one year, as a Class E felony;</p><p><strong>(6)</strong> one year or less but more than six months, as a Class A misdemeanor;</p><p><strong>(7)</strong> six months or less but more than thirty days, as a Class B misdemeanor;</p><p><strong>(8)</strong> thirty days or less but more than five days, as a Class C misdemeanor; or</p><p><strong>(9)</strong> five days or less, or if no imprisonment is authorized, as an infraction.</p></blockquote><p><strong>(b) Effect of classification.</strong>—Except as provided in subsection (c), an offense classified under subsection (a) carries all the incidents assigned to the applicable letter designation, except that the maximum term of imprisonment is the term authorized by the law describing the offense.</p><p><strong>(c) Imprisonment of certain violent felons.</strong>—</p><blockquote><p><strong>(1) Mandatory life imprisonment.</strong>—Notwithstanding any other provision of law, a person who is convicted in a court of the United States of a serious violent felony shall be sentenced to life imprisonment if—</p><p><strong>(A)</strong> the person has been convicted (and those convictions have become final) on separate prior occasions in a court of the United States or of a State of—</p><p><strong>(i)</strong> 2 or more serious violent felonies; or</p><p><strong>(ii)</strong> one or more serious violent felonies and one or more serious drug offenses; and</p><p><strong>(B)</strong> each serious violent felony or serious drug offense used as a basis for sentencing under this subsection, other than the first, was committed after the defendant’s conviction of the preceding serious violent felony or serious drug offense.</p><p><strong>(2) Definitions.</strong>—For purposes of this subsection—</p><p><strong>(A)</strong> the term “assault with the intent to commit rape” means an offense that has as its elements engaging in physical contact with another person or using or brandishing a weapon against another person with intent to commit aggravated sexual abuse or sexual abuse (as described in sections 2241 and 2242);</p><p><strong>(B)</strong> the term “arson” means an offense that has as its elements maliciously damaging or destroying any building, inhabited structure, vehicle, vessel, or real property by means of fire or an explosive;</p><p><strong>(C)</strong> the term “extortion” means an offense that has as its elements the extraction of anything of value from another person by threatening or placing that person in fear of injury to any person or kidnapping of any person;</p><p><strong>(D)</strong> the term “firearms use” means an offense that has as its elements those described in section 924(c) or 929(a), if the firearm was brandished, discharged, or otherwise used as a weapon and the crime of violence or drug trafficking crime during and relation<a href='#fn2' class='footnoteRef' id='fnref2'><sup>2</sup></a> to which the firearm was used was subject to prosecution in a court of the United States or a court of a State, or both;</p><p><strong>(E)</strong> the term “kidnapping” means an offense that has as its elements the abduction, restraining, confining, or carrying away of another person by force or threat of force;</p><p><strong>(F)</strong> the term “serious violent felony” means—</p><p><strong>(i)</strong> a Federal or State offense, by whatever designation and wherever committed, consisting of murder (as described in section 1111); manslaughter other than involuntary manslaughter (as described in section 1112); assault with intent to commit murder (as described in section 113(a)); assault with intent to commit rape; aggravated sexual abuse and sexual abuse (as described in sections 2241 and 2242); abusive sexual contact (as described in sections 2244 (a)(1) and (a)(2)); kidnapping; aircraft piracy (as described in section 46502 of Title 49); robbery (as described in section 2111, 2113, or 2118); carjacking (as described in section 2119); extortion; arson; firearms use; firearms possession (as described in section 924(c)); or attempt, conspiracy, or solicitation to commit any of the above offenses; and</p><p><strong>(ii)</strong> any other offense punishable by a maximum term of imprisonment of 10 years or more that has as an element the use, attempted use, or threatened use of physical force against the person of another or that, by its nature, involves a substantial risk that physical force against the person of another may be used in the course of committing the offense;</p><p><strong>(G)</strong> the term “State” means a State of the United States, the District of Columbia, and a commonwealth, territory, or possession of the United States; and</p><p><strong>(H)</strong> the term “serious drug offense” means—</p><p><strong>(i)</strong> an offense that is punishable under section 401(b)(1)(A) or 408 of the Controlled Substances Act (21 U.S.C. 841(b)(1)(A), 848) or section 1010(b)(1)(A) of the Controlled Substances Import and Export Act (21 U.S.C. § 960(b)(1)(A)); or</p><p><strong>(ii)</strong> an offense under State law that, had the offense been prosecuted in a court of the United States, would have been punishable under section 401(b)(1)(A) or 408 of the Controlled Substances Act (21 U.S.C. 841(b)(1)(A), 848) or section 1010(b)(1)(A) of the Controlled Substances Import and Export Act (21 U.S.C. 960(b)(1)(A)).</p><p><strong>(3)</strong> <strong>Nonqualifying</strong> <strong>felonies.</strong>—</p><p><strong>(A) Robbery in certain cases.—</strong>Robbery, an attempt, conspiracy, or solicitation to commit robbery; or an offense described in paragraph (2)(F)(ii) shall not serve as a basis for sentencing under this subsection if the defendant establishes by clear and convincing evidence that—</p><p><strong>(i)</strong> no firearm or other dangerous weapon was used in the offense and no threat of use of a firearm or other dangerous weapon was involved in the offense; and</p><p><strong>(ii)</strong> the offense did not result in death or serious bodily injury (as defined in section 1365) to any person.</p><p><strong>(B) Arson in certain cases.—</strong>Arson shall not serve as a basis for sentencing under this subsection if the defendant establishes by clear and convincing evidence that—</p><p><strong>(i)</strong> the offense posed no threat to human life; and</p><p><strong>(ii)</strong> the defendant reasonably believed the offense posed no threat to human life.</p><p><strong>(4) Information filed by United States Attorney.—</strong>The provisions of section 411(a) of the Controlled Substances Act (21 U.S.C. § 851(a)) shall apply to the imposition of sentence under this subsection.</p><p><strong>(5) Rule of construction.—</strong>This subsection shall not be construed to preclude imposition of the death penalty.</p><p><strong>(6) Special provision for Indian country.—</strong>No person subject to the criminal jurisdiction of an Indian tribal government shall be subject to this subsection for any offense for which Federal jurisdiction is solely predicated on Indian country (as defined in section 1151) and which occurs within the boundaries of such Indian country unless the governing body of the tribe has elected that this subsection have effect over land and persons subject to the criminal jurisdiction of the tribe.</p><p><strong>(7) Resentencing upon overturning of prior conviction.—</strong>If the conviction for a serous violent felony or serious drug offense that was a basis for sentencing under this subsection is found, pursuant to any appropriate State or Federal procedure, to be unconstitutional or is vitiated on the explicit basis of innocence, or if the convicted person is pardoned on the explicit basis of innocence, the person serving a sentence imposed under this subsection shall be resentenced to any sentence that was available at the time of the original sentencing.</p></blockquote><p><strong>(d)</strong> <strong>Death or imprisonment for crimes against children.— </strong></p><blockquote><p><strong>(1) In general.—</strong> Subject to paragraph (2) and notwithstanding any other provision of law, a person who is convicted of a federal offense that is a serious violent felony (as defined in subsection (c)) or a violation of section 2422, 2423, or 2251 shall, unless the sentence of death is imposed, be sentenced to imprisonment for life, if—</p><p><strong>(A)</strong> the victim of the offense has not attained the age of 14 years;</p><p><strong>(B)</strong> the victim dies as a result of the offense; and</p><p><strong>(C)</strong> the defendant, in the course of the offense, engages in conduct described in section 3591(a)(2).</p><p><strong>(2) Exception.—</strong>With respect to a person convicted of a federal offense described in paragraph (1), the court may impose any lesser sentence that is authorized by law to take into account any substantial assistance provided by the defendant in the investigation or prosecution of another person who has committed an offense, in accordance with the federal sentencing guidelines and the policy statements of the federal sentencing commission pursuant to section 994(p) of title 28, or for other good cause.</p></blockquote><p><strong>(e) Mandatory life imprisonment for repeated sex offenses against children.—</strong></p><blockquote><p><strong>(1) In general.—</strong>A person who is convicted of a Federal sex offense in which a minor is the victim shall be sentenced to life imprisonment if the person has a prior sex conviction in which a minor was the victim, unless the sentence of death is imposed.</p><p><strong>(2) Definitions.—</strong>For the purposes of this subsection—</p><p><strong>(A)</strong> the term “Federal sex offense” means an offense under section 1591 (relating to sex trafficking of children), 2241 (relating to aggravated sexual abuse), 2242 (relating to sexual abuse), 2244(a)(1) (relating to abusive sexual contact), 2245 (relating to sexual abuse resulting in death), 2251 (relating to sexual exploitation of children), 2251A (relating to selling or buying of children), 2422(b) (relating to coercion and enticement of a minor into prostitution), or 2423(a) (relating to transportation of minors);</p><p><strong>(B)</strong> the term “State sex offense” means an offense under State law that is punishable by more than one year in prison and consists of conduct that would be a Federal sex offense if, to the extent or in the manner specified in the applicable provision of this title—</p><p><strong>(i)</strong> the offense involved interstate or foreign commerce, or the use of the mails; or</p><p><strong>(ii)</strong> the conduct occurred in any commonwealth, territory, or possession of the United States, within the special maritime and territorial jurisdiction of the United States, in a Federal prison, on any land or building owned by, leased to, or otherwise used by or under the control of the Government of the United States, or in the Indian country (as defined in section 1151);</p><p><strong>(C)</strong> the term “prior sex conviction” means a conviction for which the sentence was imposed before the conduct occurred constituting the subsequent Federal sex offense, and which was for a Federal sex offense or a State sex offense;</p><p><strong>(D)</strong> the term “minor” means an individual who has not attained the age of 17 years; and</p><p><strong>(E)</strong> the term “state” has the meaning given that term in subsection (c)(2).</p><p><strong>(3) Nonqualifying felonies.—</strong>An offense described in section 2422(b) or 2423(a) shall not serve as a basis for sentencing under this subsection if the defendant establishes by clear and convincing evidence that—</p><p><strong>(A)</strong> the sexual act or activity was consensual and not for the purpose of commercial or pecuniary gain;</p><p><strong>(B)</strong> the sexual act or activity would not be punishable by more than one year in prison under the law of the State in which it occurred; or</p><p><strong>(C)</strong> no sexual act or activity occurred.</p></blockquote><p><strong>(f) Mandatory Minimum Terms of Imprisonment for Violent Crimes Against Children.—</strong>A person who is convicted of a Federal offense that is a crime of violence against the person of an individual who has not attained the age of 18 years shall, unless a greater mandatory minimum sentence of imprisonment is otherwise provided by law and regardless of any maximum term of imprisonment otherwise provided for the offense—</p><blockquote><p><strong>(1)</strong> if the crime of violence is murder, be imprisoned for life or for any term of years not less than 30, except that such person shall be punished by death or life imprisonment if the circumstances satisfy any of subparagraphs (A) through (D) of section 3591(a)(2) of this title;</p><p><strong>(2)</strong> if the crime of violence is kidnapping (as defined in section 1201) or maiming (as defined in section 114), be imprisoned for life or any term of years not less than 25; and</p><p><strong>(3)</strong> if the crime of violence results in serious bodily injury (as defined in section 1365), or if a dangerous weapon was used during and in relation to the crime of violence, be imprisoned for life or for any term of years not less than 10.</p></blockquote><p><strong>(g)(1)</strong> If a defendant who is convicted of a felony offense (other than offense of which an element is the false registration of a domain name) knowingly falsely registered a domain name and knowingly used that domain name in the course of that offense, the maximum imprisonment otherwise provided by law for that offense shall be doubled or increased by 7 years, whichever is less.</p><p><strong>(2)</strong> As used in this section—</p><blockquote><p><strong>(A)</strong> the term “falsely registers” means registers in a manner that prevents the effective identification of or contact with the person who registers; and</p><p><strong>(B)</strong> the term “domain name” has the meaning given that term is section 45 of the Act entitled “An Act to provide for the registration and protection of trademarks used in commerce, to carry out the provisions of certain international conventions, and for other purposes” approved July 5, 1946 (commonly referred to as the “Trademark Act of 1946”) (15 U.S.C. 1127).</p></blockquote><p>(Added Pub.L. 98–473, Title II, § 212(a)(2), Oct. 12, 1984, 98 Stat. 1991, and amended Pub.L. 100–185, § 5, Dec. 11, 1987, 101 Stat. 1279; Pub.L. 100–690, Title VII, § 7041, Nov. 18, 1988, 102 Stat. 4399); Pub.L. 103–322, Title VII § 70001, Sept. 13, 1994, 108 Stat. 1982; Pub.L. 105–314, Title V, § 501, Oct. 30, 1998, 112 Stat. 2980; Pub.L. 105–386, § 1(b), Nov. 13, 1998, 112 Stat. 3470; Pub.L. 108–21, Title I, § 106(a), Apr. 30, 2003, 117 Stat. 654; Pub.L. 108–482, Title II, § 204(a), Dec. 23, 2004, 118 Stat. 3917; Pub.L. 109–248, Title II, §§ 202, 206(c), July 27, 2006, 120 Stat. 612, 614.)</p>\"},{\"id\":\"18U.S.C.§3561\",\"content\":\"<p><strong>§ 3561. Sentence of probation</strong></p><p><strong>(a) In general.</strong>—A defendant who has been found guilty of an offense may be sentenced to a term of probation unless—</p><blockquote><p><strong>(1)</strong> the offense is a Class A or Class B felony and the defendant is an individual;</p><p><strong>(2)</strong> the offense is an offense for which probation has been expressly precluded; or</p><p><strong>(3)</strong> the defendant is sentenced at the same time to a term of imprisonment for the same or a different offense that is not a petty offense.</p></blockquote><p><strong>(b) Domestic violence offenders.</strong>—A defendant who has been convicted for the first time of a domestic violence crime shall be sentenced to a term of probation if not sentenced to a term of imprisonment. The term “domestic violence crime” means a crime of violence for which the defendant may be prosecuted in a court of the United States in which the victim or intended victim is the spouse, former spouse, intimate partner, former intimate partner, child, or former child of the defendant, or any other relative of the defendant.</p><p><strong>(c) Authorized terms.</strong>—The authorized terms of probation are—</p><blockquote><p><strong>(1)</strong> for a felony, not less than one nor more than five years;</p><p><strong>(2)</strong> for a misdemeanor, not more than five years; and</p><p><strong>(3)</strong> for an infraction, not more than one year.</p></blockquote><p>(Added Pub.L. 98–473, Title II, § 212(a)(2), Oct. 12, 1984, 98 Stat. 1992, and amended Pub.L. 99–646, § 10(a), Nov. 10, 1986, 100 Stat. 3593; Pub.L. 100–182, § 7, Dec. 7, 1987, 101 Stat. 1267; Pub.L. 103–322, Title XXVIII, § 280004, Title XXXII, § 320921(a), Sept. 13, 1994, 108 Stat. 2096, 2130; Pub.L. 104–294, Title VI, § 604(c)(1), Oct. 11, 1996, 110 Stat. 3509.)</p>\"},{\"id\":\"18U.S.C.§3562\",\"content\":\"<p><strong>§ 3562. Imposition of a sentence of probation</strong></p><p><strong>(a) Factors to be considered in imposing a term of probation.</strong>—The court, in determining whether to impose a term of probation, and, if a term of probation is to be imposed, in determining the length of the term and the conditions of probation, shall consider the factors set forth in section 3553(a) to the extent that they are applicable.</p><p><strong>(b) Effect of finality of judgment.</strong>—Notwithstanding the fact that a sentence of probation can subsequently be—</p><blockquote><p><strong>(1)</strong> modified or revoked pursuant to the provisions of section 3564 or 3565;</p><p><strong>(2)</strong> corrected pursuant to the provisions of rule 35 of the Federal Rules of Criminal Procedure and section 3742; or</p><p><strong>(3)</strong> appealed and modified, if outside the guideline range, pursuant to the provisions of section 3742;</p></blockquote><p>a judgment of conviction that includes such a sentence constitutes a final judgment for all other purposes.</p><p>(Added Pub.L. 98–473, Title II, § 212(a)(2), Oct. 12, 1984, 98 Stat. 1992, and amended Pub.L. 101–647, Title XXXV, § 3583, Nov. 29, 1990, 104 Stat. 4930.)</p>\"},{\"id\":\"18U.S.C.§3563\",\"content\":\"<p><strong>§ 3563. Conditions of probation</strong></p><p><strong>(a) Mandatory conditions.</strong>—The court shall provide, as an explicit condition of a sentence of probation—</p><blockquote><p><strong>(1)</strong> for a felony, a misdemeanor, or an infraction, that the defendant not commit another Federal, State, or local crime during the term of probation;</p><p><strong>(2)</strong> for a felony, that the defendant also abide by at least one condition set forth in subsection (b)(2) or (b)(12), unless the court has imposed a fine under this chapter, or unless the court finds on the record that extraordinary circumstances exist that would make such a condition plainly unreasonable, in which event the court shall impose one or more of the other conditions set forth under subsection (b);</p><p><strong>(3)</strong> for a felony, a misdemeanor, or an infraction, that the defendant not unlawfully possess a controlled substance;</p><p><strong>(4)</strong> for a domestic violence crime as defined in section 3561(b) by a defendant convicted of such an offense for the first time that the defendant attend a public, private, or private non-profit offender rehabilitation program that has been approved by the court, in consultation with a State Coalition Against Domestic Violence or other appropriate experts, if an approved program is readily available within a 50-mile radius of the legal residence of the defendant; and</p><p><strong>(5)</strong> for a felony, a misdemeanor, or an infraction, that the defendant refrain from any unlawful use of a controlled substance and submit to one drug test within 15 days of release on probation and at least 2 periodic drug tests thereafter (as determined by the court) for use of a controlled substance, but the condition stated in this paragraph may be ameliorated or suspended by the court for any individual defendant if the defendant’s presentence report or other reliable sentencing information indicates a low risk of future substance abuse by the defendant;</p><p><strong>(6)</strong> that the defendant—</p><p><strong>(A)</strong> make restitution in accordance with sections 2248, 2259, 2264, 2327, 3663, 3663A, and 3664; and</p><p><strong>(B)</strong> pay the assessment imposed in accordance with section 3013; and</p><p><strong>(7)</strong> that the defendant will notify the court of any material change in the defendant’s economic circumstances that might affect the defendant’s ability to pay restitution, fines, or special assessments;</p><p><strong>(8)</strong> for a person required to register under the Sex Offender Registration and Notification Act, that the person comply with the requirements of that Act; and</p><p><strong>(9)</strong> that the defendant cooperate in the collection of a DNA sample from the defendant if the collection of such a sample is authorized pursuant to section 3 of the DNA Analysis Backlog Elimination Act of 2000.</p></blockquote><p>If the court has imposed and ordered execution of a fine and placed the defendant on probation, payment of the fine or adherence to the court‑established installment schedule shall be a condition of the probation.</p><p><strong>(b) Discretionary conditions.</strong>—The court may provide, as further conditions of a sentence of probation, to the extent that such conditions are reasonably related to the factors set forth in section 3553(a)(1) and (a)(2) and to the extent that such conditions involve only such deprivations of liberty or property as are reasonably necessary for the purposes indicated in section 3553(a)(2), that the defendant—</p><blockquote><p><strong>(1)</strong> support his dependents and meet other family responsibilities;</p><p><strong>(2)</strong> make restitution to a victim of the offense under section 3556 (but not subject to the limitation of section 3663(a) or 3663A(c)(1)(A));</p><p><strong>(3)</strong> give to the victims of the offense the notice ordered pursuant to the provisions of section 3555;</p><p><strong>(4)</strong> work conscientiously at suitable employment or pursue conscientiously a course of study or vocational training that will equip him for suitable employment;</p><p><strong>(5)</strong> refrain, in the case of an individual, from engaging in a specified occupation, business, or profession bearing a reasonably direct relationship to the conduct constituting the offense, or engage in such a specified occupation, business, or profession only to a stated degree or under stated circumstances;</p><p><strong>(6)</strong> refrain from frequenting specified kinds of places or from associating unnecessarily with specified persons;</p><p><strong>(7)</strong> refrain from excessive use of alcohol, or any use of a narcotic drug or other controlled substance, as defined in section 102 of the Controlled Substances Act (21 U.S.C. 802), without a prescription by a licensed medical practitioner;</p><p><strong>(8)</strong> refrain from possessing a firearm, destructive device, or other dangerous weapon;</p><p><strong>(9)</strong> undergo available medical, psychiatric, or psychological treatment, including treatment for drug or alcohol dependency, as specified by the court, and remain in a specified institution if required for that purpose;</p><p><strong>(10)</strong> remain in the custody of the Bureau of Prisons during nights, weekends, or other intervals of time, totaling no more than the lesser of one year or the term of imprisonment authorized for the offense, during the first year of the term of probation or supervised release;</p><p><strong>(11)</strong> reside at, or participate in the program of, a community corrections facility (including a facility maintained or under contract to the Bureau of Prisons) for all or part of the term of probation;</p><p><strong>(12)</strong> work in community service as directed by the court;</p><p><strong>(13)</strong> reside in a specified place or area, or refrain from residing in a specified place or area;</p><p><strong>(14)</strong> remain within the jurisdiction of the court, unless granted permission to leave by the court or a probation officer;</p><p><strong>(15)</strong> report to a probation officer as directed by the court or the probation officer;</p><p><strong>(16)</strong> permit a probation officer to visit him at his home or elsewhere as specified by the court;</p><p><strong>(17)</strong> answer inquiries by a probation officer and notify the probation officer promptly of any change in address or employment;</p><p><strong>(18)</strong> notify the probation officer promptly if arrested or questioned by a law enforcement officer;</p><p><strong>(19)</strong> remain at his place of residence during nonworking hours and, if the court finds it appropriate, that compliance with this condition be monitored by telephonic or electronic signaling devices, except that a condition under this paragraph may be imposed only as an alternative to incarceration;</p><p><strong>(20)</strong> comply with the terms of any court order or order of an administrative process pursuant to the law of a State, the District of Columbia, or any other possession or territory of the United States, requiring payments by the defendant for the support and maintenance of a child or of a child and the parent with whom the child is living;</p><p><strong>(21)</strong> be ordered deported by a United States district court, or United States magistrate judge, pursuant to a stipulation entered into by the defendant and the United States under section 238(d)(5) of the Immigration and Nationality Act, except that, in the absence of a stipulation, the United States district court or a United States magistrate judge, may order deportation as a condition of probation, if, after notice and hearing pursuant to such section, the Attorney General demonstrates by clear and convincing evidence that the alien is deportable;</p><p><strong>(22)</strong> satisfy such other conditions as the court may impose; or</p><p><strong>(23)</strong> if required to register under the Sex Offender Registration and Notification Act, submit his person, and any property, house, residence, vehicle, papers, computer, other electronic communication or data storage devices or media, and effects to search at any time, with or without a warrant, by any law enforcement or probation officer with reasonable suspicion concerning a violation of a condition of probation or unlawful conduct by the person, and by any probation officer in the lawful discharge of the officer’s supervision functions.</p></blockquote><p><strong>(c) Modifications of conditions.</strong>—The court may modify, reduce, or enlarge the conditions of a sentence of probation at any time prior to the expiration or termination of the term of probation, pursuant to the provisions of the Federal Rules of Criminal Procedure relating to the modification of probation and the provisions applicable to the initial setting of the conditions of probation.</p><p><strong>(d) Written statement of conditions.</strong>—The court shall direct that the probation officer provide the defendant with a written statement that sets forth all the conditions to which the sentence is subject, and that is sufficiently clear and specific to serve as a guide for the defendant’s conduct and for such supervision as is required.</p><p><strong>(e) Results of Drug Testing.—</strong>The results of a drug test administered in accordance with subsection (a)(5) shall be subject to confirmation only if the results are positive, the defendant is subject to possible imprisonment for such failure, and either the defendant denies the accuracy of such test or there is some other reason to question the results of the test. A defendant who tests positive may be detained pending verification of a positive drug test result. A drug test confirmation shall be a urine drug test confirmed using gas chromatography/mass spectrometry techniques or such test as the Director of the Administrative Office of the United States Courts after consultation with the Secretary of Health and Human Services may determine to be of equivalent accuracy. The court shall consider whether the availability of appropriate substance abuse treatment programs, or an individual’s current or past participation in such programs, warrants an exception in accordance with United States Sentencing Commission guidelines from the rule of section 3565(b), when considering any action against a defendant who fails a drug test administered in accordance with subsection (a)(5).</p><p>(Added Pub.L. 98–473, Title II, § 212(a)(2), Oct. 12, 1984, 98 Stat. 1993, and amended Pub.L. 99–646, §§ 11(a), 12(a), Nov. 10, 1986, 100 Stat. 3594; Pub.L. 100–182, §§ 10, 18, Dec. 7, 1987, 101 Stat. 1267, 1270; Pub.L. 100–690, Title VII, §§ 7086, 7110, 7303(a)(1), 7305(a), Nov. 18, 1988, 102 Stat. 4408, 4419, 4464, 4465; Pub.L. 101–647, Title XXXV, § 3584, Nov. 29, 1990, 104 Stat. 4430; Pub.L. 102–521, § 3, Oct. 25, 1992, 106 Stat. 3404; Pub.L. 103–322, Title II, § 20414(b), Title XXVIII, § 280002, Title XXXII, § 320921(b), Sept. 13, 1994, 108 Stat. 1830, 2096, 2130; Pub.L. 104–132, Title II, § 203, Apr. 24, 1996, 110 Stat. 1227; Pub.L. 104–208, Div. C, Title III, §§ 308(g)(10)(E), 374(b), Sept 30, 1996, 110 Stat. 3009–625, 3009–647; Pub.L. 104–294, Title VI, § 601(k), Oct. 11, 1996, 110 Stat. 3501; Pub.L. 105–119, Title I, § 115(a)(8)(B), Nov. 26, 1997, 111 Stat. 2465; Pub.L. 106–546, § 7 (a), Dec. 19, 2000, 114 Stat. 2734; Pub. L. 107–273, Div. B, Title IV, § 4002(c)(1), (e)(12), Nov. 2, 2002, 116 Stat. 1802, 1811; Pub.L. 109–248, Title I, § 141(d), Title II, § 210(a), July 27, 2006, 120 Stat. 603, 615; Pub.L. 110–406, § 14(a), (c), Oct. 13, 2008, 122 Stat. 4294.)</p>\"},{\"id\":\"18U.S.C.§3564\",\"content\":\"<p><strong>§ 3564. Running of a term of probation</strong></p><p><strong>(a) Commencement.</strong>—A term of probation commences on the day that the sentence of probation is imposed, unless otherwise ordered by the court.</p><p><strong>(b) Concurrence with other sentences.</strong>—Multiple terms of probation, whether imposed at the same time or at different times, run concurrently with each other. A term of probation runs concurrently with any Federal, State, or local term of probation, supervised release, or parole for another offense to which the defendant is subject or becomes subject during the term of probation. A term of probation does not run while the defendant is imprisoned in connection with a conviction for a Federal, State, or local crime unless the imprisonment is for a period of less than thirty consecutive days.</p><p><strong>(c) Early termination.</strong>—The court, after considering the factors set forth in section 3553(a) to the extent that they are applicable, may, pursuant to the provisions of the Federal Rules of Criminal Procedure relating to the modification of probation, terminate a term of probation previously ordered and discharge the defendant at any time in the case of a misdemeanor or an infraction or at any time after the expiration of one year of probation in the case of a felony, if it is satisfied that such action is warranted by the conduct of the defendant and the interest of justice.</p><p><strong>(d) Extension.</strong>—The court may, after a hearing, extend a term of probation, if less than the maximum authorized term was previously imposed, at any time prior to the expiration or termination of the term of probation, pursuant to the provisions applicable to the initial setting of the term of probation.</p><p><strong>(e) Subject to revocation.</strong>—A sentence of probation remains conditional and subject to revocation until its expiration or termination.</p><p>(Added Pub.L. 98–473, Title II, § 212(a)(2), Oct. 12, 1984, 98 Stat. 1994, and amended Pub.L. 99–646, § 13(a), Nov. 10, 1986, 100 Stat. 3594; Pub.L. 100–182, § 11, Dec. 7, 1987, 101 Stat. 1268.)</p>\"},{\"id\":\"18U.S.C.§3565\",\"content\":\"<p><strong>§ 3565. Revocation of probation</strong></p><p><strong>(a) Continuation or revocation.</strong>—If the defendant violates a condition of probation at any time prior to the expiration or termination of the term of probation, the court may, after a hearing pursuant to Rule 32.1 of the Federal Rules of Criminal Procedure, and after considering the factors set forth in section 3553(a) to the extent that they are applicable—</p><blockquote><p><strong>(1)</strong> continue him on probation, with or without extending the term or modifying or enlarging the conditions; or</p><p><strong>(2)</strong> revoke the sentence of probation and resentence the defendant under subchapter A.</p></blockquote><p><strong>(b) Mandatory revocation for possession of controlled substance or firearm or refusal to comply with drug testing.</strong>—If the defendant—</p><blockquote><p><strong>(1)</strong> possesses a controlled substance in violation of the condition set forth in section 3563(a)(3);</p><p><strong>(2)</strong> possesses a firearm, as such term is defined in section 921 of this title, in violation of Federal law, or otherwise violates a condition of probation prohibiting the defendant from possessing a firearm;</p><p><strong>(3)</strong> refuses to comply with drug testing, thereby violating the condition imposed by section 3563(a)(4); or</p><p><strong>(4)</strong> as a part of drug testing, tests positive for illegal controlled substances more than 3 times over the course of 1 year;</p></blockquote><p>the court shall revoke the sentence of probation and resentence the defendant under subchapter A to a sentence that includes a term of imprisonment.</p><p><strong>(c) Delayed revocation.</strong>—The power of the court to revoke a sentence of probation for violation of a condition of probation, and to impose another sentence, extends beyond the expiration of the term of probation for any period reasonably necessary for the adjudication of matters arising before its expiration if, prior to its expiration, a warrant or summons has been issued on the basis of an allegation of such a violation.</p><p>(Added Pub.L. 98–473, Title II, § 212(a)(2), Oct. 12, 1984, 98 Stat. 1995, amended Pub.L. 100–690, Title VI, § 6214, Title VII, § 7303(a)(2), Nov. 18, 1988, 102 Stat. 4361, 4464; Pub.L. 101–647, Title XXXV, § 3585, Nov. 29, 1990, 104 Stat. 4930; Pub.L. 103–322, Title XI § 110506, Sept. 13, 1994, 108 Stat. 2017; Pub.L. 107–273, Div. B, Title II, § 2103(a), Nov. 2, 2002, 116 Stat. 1793.)</p>\"},{\"id\":\"18U.S.C.§3566\",\"content\":\"<p><strong>§ 3566. Implementation of a sentence of probation</strong></p><p>The implementation of a sentence of probation is governed by the provisions of subchapter A of chapter 229.</p><p>(Added Pub.L. 98–473, Title II, § 212(a)(2), Oct. 12, 1984, 98 Stat. 1995.)</p>\"},{\"id\":\"18U.S.C.§3571\",\"content\":\"<p><strong>§ 3571. Sentence of fine</strong></p><p><strong>(a) In general.</strong>—A defendant who has been found guilty of an offense may be sentenced to pay a fine.</p><p><strong>(b) Fines for individuals.</strong>—Except as provided in subsection (e) of this section, an individual who has been found guilty of an offense may be fined not more than the greatest of—</p><blockquote><p><strong>(1)</strong> the amount specified in the law setting forth the offense;</p><p><strong>(2)</strong> the applicable amount under subsection (d) of this section;</p><p><strong>(3)</strong> for a felony, not more than $250,000;</p><p><strong>(4)</strong> for a misdemeanor resulting in death, not more than $250,000;</p><p><strong>(5)</strong> for a Class A misdemeanor that does not result in death, not more than $100,000;</p><p><strong>(6)</strong> for a Class B or C misdemeanor that does not result in death, not more than $5,000; or</p><p><strong>(7)</strong> for an infraction, not more than $5,000.</p></blockquote><p><strong>(c) Fines for organizations.</strong>—Except as provided in subsection (e) of this section, an organization that has been found guilty of an offense may be fined not more than the greatest of—</p><blockquote><p><strong>(1)</strong> the amount specified in the law setting forth the offense;</p><p><strong>(2)</strong> the applicable amount under subsection (d) of this section;</p><p><strong>(3)</strong> for a felony, not more than $500,000;</p><p><strong>(4)</strong> for a misdemeanor resulting in death, not more than $500,000;</p><p><strong>(5)</strong> for a Class A misdemeanor that does not result in death, not more than $200,000;</p><p><strong>(6)</strong> for a Class B or C misdemeanor that does not result in death, not more than $10,000; and</p><p><strong>(7)</strong> for an infraction, not more than $10,000.</p></blockquote><p><strong>(d) Alternative fine based on gain or loss.</strong>—If any person derives pecuniary gain from the offense, or if the offense results in pecuniary loss to a person other than the defendant, the defendant may be fined not more than the greater of twice the gross gain or twice the gross loss, unless imposition of a fine under this subsection would unduly complicate or prolong the sentencing process.</p><p><strong>(e) Special rule for lower fine specified in substantive provision.</strong>—If a law setting forth an offense specifies no fine or a fine that is lower than the fine otherwise applicable under this section and such law, by specific reference, exempts the offense from the applicability of the fine otherwise applicable under this section, the defendant may not be fined more than the amount specified in the law setting forth the offense.</p><p>(Added Pub.L. 98–473, Title II, § 212(a)(2), Oct. 12, 1984, 98 Stat. 1995, and amended Pub.L. 100–185, § 6, Dec. 11, 1987, 101 Stat. 1280.)</p>\"},{\"id\":\"18U.S.C.§3572\",\"content\":\"<p><strong>§ 3572. Imposition of a sentence of fine and related matters</strong></p><p><strong>(a) Factors to be considered.</strong>—In determining whether to impose a fine, and the amount, time for payment, and method of payment of a fine, the court shall consider, in addition to the factors set forth in section 3553(a)—</p><blockquote><p><strong>(1)</strong> the defendant’s income, earning capacity, and financial resources;</p><p><strong>(2)</strong> the burden that the fine will impose upon the defendant, any person who is financially dependent on the defendant, or any other person (including a government) that would be responsible for the welfare of any person financially dependent on the defendant, relative to the burden that alternative punishments would impose;</p><p><strong>(3)</strong> any pecuniary loss inflicted upon others as a result of the offense;</p><p><strong>(4)</strong> whether restitution is ordered or made and the amount of such restitution;</p><p><strong>(5)</strong> the need to deprive the defendant of illegally obtained gains from the offense;</p><p><strong>(6)</strong> the expected costs to the government of any imprisonment, supervised release, or probation component of the sentence;</p><p><strong>(7)</strong> whether the defendant can pass on to consumers or other persons the expense of the fine; and</p><p><strong>(8)</strong> if the defendant is an organization, the size of the organization and any measure taken by the organization to discipline any officer, director, employee, or agent of the organization responsible for the offense and to prevent a recurrence of such an offense.</p></blockquote><p><strong>(b) Fine not to impair ability to make restitution.</strong>—If, as a result of a conviction, the defendant has the obligation to make restitution to a victim of the offense, other than the United States, the court shall impose a fine or other monetary penalty only to the extent that such fine or penalty will not impair the ability of the defendant to make restitution.</p><p><strong>(c) Effect of finality of judgment.</strong>—Notwithstanding the fact that a sentence to pay a fine can subsequently be—</p><blockquote><p><strong>(1)</strong> modified or remitted under section 3573;</p><p><strong>(2)</strong> corrected under rule 35 of the Federal Rules of Criminal Procedure and section 3742; or</p><p><strong>(3)</strong> appealed and modified under section 3742;</p></blockquote><p>a judgment that includes such a sentence is a final judgment for all other purposes.</p><p><strong>(d) Time, method of payment, and related items.</strong>—<strong>(1)</strong> A person sentenced to pay a fine or other monetary penalty, including restitution, shall make such payment immediately, unless, in the interest of justice, the court provides for payment on a date certain or in installments. If the court provides for payment in installments, the installments shall be in equal monthly payments over the period provided by the court, unless the court establishes another schedule.</p><p><strong>(2)</strong> If the judgment, or, in the case of a restitution order, the order, permits other than immediate payment, the length of time over which scheduled payments will be made shall be set by the court, but shall be the shortest time in which full payment can reasonably be made.</p><p><strong>(3)</strong> A judgment for a fine which permits payments in installments shall include a requirement that the defendant will notify the court of any material change in the defendant’s economic circumstances that might affect the defendant’s ability to pay the fine. Upon receipt of such notice the court may, on its own motion or the motion of any party, adjust the payment schedule, or require immediate payment in full, as the interests of justice require.</p><p><strong>(e) Alternative sentence precluded.</strong>—At the time a defendant is sentenced to pay a fine, the court may not impose an alternative sentence to be carried out if the fine is not paid.</p><p><strong>(f) Responsibility for payment of monetary obligation relating to organization.</strong>—If a sentence includes a fine, special assessment, restitution or other monetary obligation (including interest) with respect to an organization, each individual authorized to make disbursements for the organization has a duty to pay the obligation from assets of the organization. If such an obligation is imposed on a director, officer, shareholder, employee, or agent of an organization, payments may not be made, directly or indirectly, from assets of the organization, unless the court finds that such payment is expressly permissible under applicable State law.</p><p><strong>(g) Security for stayed fine.</strong>—If a sentence imposing a fine is stayed, the court shall, absent exceptional circumstances (as determined by the court)—</p><blockquote><p><strong>(1)</strong> require the defendant to deposit, in the registry of the district court, any amount of the fine that is due;</p><p><strong>(2)</strong> require the defendant to provide a bond or other security to ensure payment of the fine; or</p><p><strong>(3)</strong> restrain the defendant from transferring or dissipating assets.</p></blockquote><p><strong>(h) Delinquency.</strong>—A fine or payment of restitution is delinquent if a payment is more than 30 days late.</p><p><strong>(i) Default.</strong>—A fine or payment of restitution is in default if a payment is delinquent for more than 90 days. Notwithstanding any installment schedule, when a fine or payment of restitution is in default, the entire amount of the fine or restitution is due within 30 days after notification of the default, subject to the provisions of section 3613A.</p><p>(Added Pub.L. 98–473, Title II, § 212(a)(2), Oct. 12, 1984, 98 Stat. 1995, and amended Pub.L. 100–185, § 7, Dec. 11, 1987, 101 Stat. 1280; Pub.L. 101–647, Title XXXV, § 3587, Nov. 29, 1990, 104 Stat. 4930; Pub.L. 103–322, Title II, § 20403(a), Sept. 13, 1994, 108 Stat. 1825; Pub.L. 104–132, Title II, § 207(b), Apr. 24, 1996, 110 Stat. 1236.)</p>\"},{\"id\":\"18U.S.C.§3573\",\"content\":\"<p><strong>§ 3573. Petition of the Government for modification or remission</strong></p><p>Upon petition of the Government showing that reasonable efforts to collect a fine or assessment are not likely to be effective, the court may, in the interest of justice—</p><blockquote><p><strong>(1)</strong> remit all or part of the unpaid portion of the fine or special assessment, including interest and penalties;</p><p><strong>(2)</strong> defer payment of the fine or special assessment to a date certain or pursuant to an installment schedule; or</p><p><strong>(3)</strong> extend a date certain or an installment schedule previously ordered.</p></blockquote><p>A petition under this subsection shall be filed in the court in which sentence was originally imposed, unless the court transfers jurisdiction to another court. This section shall apply to all fines and assessments irrespective of the date of imposition.</p><p>(Added Pub.L. 98–473, Title II, § 212(a)(2), Oct. 12, 1984, 98 Stat. 1997, and amended Pub.L. 100–185, § 8(a), Dec. 11, 1987, 101 Stat. 1282; Pub.L. 100–690, Title VII, § 7082(a), Nov. 18, 1988, 102 Stat. 4407.)</p>\"},{\"id\":\"18U.S.C.§3574\",\"content\":\"<p><strong>§ 3574. Implementation of a sentence of fine</strong></p><p>The implementation of a sentence to pay a fine is governed by the provisions of subchapter B of chapter 229.</p><p>(Added Pub.L. 98–473, Title II, § 212(a)(2), Oct. 12, 1984, 98 Stat. 1997.)</p>\"},{\"id\":\"18U.S.C.§3581\",\"content\":\"<p><strong>§ 3581. Sentence of imprisonment</strong></p><p><strong>(a) In general.</strong>—A defendant who has been found guilty of an offense may be sentenced to a term of imprisonment.</p><p><strong>(b) Authorized terms.</strong>—The authorized terms of imprisonment are—</p><blockquote><p><strong>(1)</strong> for a Class A felony, the duration of the defendant’s life or any period of time;</p><p><strong>(2)</strong> for a Class B felony, not more than twenty‑five years;</p><p><strong>(3)</strong> for a Class C felony, not more than twelve years;</p><p><strong>(4)</strong> for a Class D felony, not more than six years;</p><p><strong>(5)</strong> for a Class E felony, not more than three years;</p><p><strong>(6)</strong> for a Class A misdemeanor, not more than one year;</p><p><strong>(7)</strong> for a Class B misdemeanor, not more than six months;</p><p><strong>(8)</strong> for a Class C misdemeanor, not more than thirty days; and</p><p><strong>(9)</strong> for an infraction, not more than five days.</p></blockquote><p>(Added Pub.L. 98–473, Title II, § 212(a)(2), Oct. 12, 1984, 98 Stat. 1998.)</p>\"},{\"id\":\"18U.S.C.§3582\",\"content\":\"<p><strong>§ 3582. Imposition of a sentence of imprisonment</strong></p><p><strong>(a) Factors to be considered in imposing a term of imprisonment.</strong>—The court, in determining whether to impose a term of imprisonment, and, if a term of imprisonment is to be imposed, in determining the length of the term, shall consider the factors set forth in section 3553(a) to the extent that they are applicable, recognizing that imprisonment is not an appropriate means of promoting correction and rehabilitation. In determining whether to make a recommendation concerning the type of prison facility appropriate for the defendant, the court shall consider any pertinent policy statements issued by the Sentencing Commission pursuant to 28 U.S.C. 994(a)(2).</p><p><strong>(b) Effect of finality of judgment.</strong>—Notwithstanding the fact that a sentence to imprisonment can subsequently be—</p><blockquote><p><strong>(1)</strong> modified pursuant to the provisions of subsection (c);</p><p><strong>(2)</strong> corrected pursuant to the provisions of rule 35 of the Federal Rules of Criminal Procedure and section 3742; or</p><p><strong>(3)</strong> appealed and modified, if outside the guideline range, pursuant to the provisions of section 3742;</p></blockquote><p>a judgment of conviction that includes such a sentence constitutes a final judgment for all other purposes.</p><p><strong>(c) Modification of an imposed term of imprisonment.</strong>—The court may not modify a term of imprisonment once it has been imposed except that—</p><blockquote><p><strong>(1)</strong> in any case—</p><p><strong>(A)</strong> the court, upon motion of the Director of the Bureau of Prisons, may reduce the term of imprisonment (and may impose a term of probation or supervised release with or without conditions that does not exceed the unserved portion of the original term of imprisonment), after considering the factors set forth in section 3553(a) to the extent that they are applicable, if it finds that—</p><p><strong>(i)</strong> extraordinary and compelling reasons warrant such a reduction; or</p><p><strong>(ii)</strong> the defendant is at least 70 years of age, has served at least 30 year in prison, pursuant to a sentence imposed under section 3559(c), for the offense or offenses for which the defendant is currently imprisoned, and a determination has been made by the Director of the Bureau of Prisons that the defendant is not a danger to the safety of any other person or the community, as provided under section 3142(g);</p><p>and that such a reduction is consistent with applicable policy statements issued by the Sentencing Commission; and</p><p><strong>(B)</strong> the court may modify an imposed term of imprisonment to the extent otherwise expressly permitted by statute or by Rule 35 of the Federal Rules of Criminal Procedure; and</p><p><strong>(2)</strong> in the case of a defendant who has been sentenced to a term of imprisonment based on a sentencing range that has subsequently been lowered by the Sentencing Commission pursuant to 28 U.S.C. 994(o), upon motion of the defendant or the Director of the Bureau of Prisons, or on its own motion, the court may reduce the term of imprisonment, after considering the factors set forth in section 3553(a) to the extent that they are applicable, if such a reduction is consistent with applicable policy statements issued by the Sentencing Commission.</p></blockquote><p><strong>(d) Inclusion of an order to limit criminal association of organized crime and drug offenders.</strong>—The court, in imposing a sentence to a term of imprisonment upon a defendant convicted of a felony set forth in chapter 95 (racketeering) or 96 (racketeer influenced and corrupt organizations) of this title or in the Comprehensive Drug Abuse Prevention and Control Act of 1970 (21 U.S.C. 801 et seq.), or at any time thereafter upon motion by the Director of the Bureau of Prisons or a United States attorney, may include as a part of the sentence an order that requires that the defendant not associate or communicate with a specified person, other than his attorney, upon a showing of probable cause to believe that association or communication with such person is for the purpose of enabling the defendant to control, manage, direct, finance, or otherwise participate in an illegal enterprise.</p><p>(Added Pub.L. 98–473, Title II, § 212(a)(2), Oct. 12, 1984, 98 Stat. 1998, amended Pub.L. 100–690, Title VII, § 7107, Nov. 18, 1988, 102 Stat. 4418; Pub.L. 101–647, Title XXXV, § 3588, Nov. 29, 1990, 104 Stat. 4930; Pub.L. 103–322, Title VII, § 70002, Sept. 13, 1994, 108 Stat. 1984; Pub.L. 104–294, Title VI, § 604(b)(3), Oct. 11, 1996, 110 Stat. 3506; Pub.L. 107–273, Div. B, Title III, § 3006, Nov. 2, 2002, 116 Stat. 1806.)</p>\"},{\"id\":\"18U.S.C.§3583\",\"content\":\"<p><strong>§ 3583. Inclusion of a term of supervised release after imprisonment</strong></p><p><strong>(a) In general.</strong>—The court, in imposing a sentence to a term of imprisonment for a felony or a misdemeanor, may include as a part of the sentence a requirement that the defendant be placed on a term of supervised release after imprisonment, except that the court shall include as a part of the sentence a requirement that the defendant be placed on a term of supervised release if such a term is required by statute or if the defendant has been convicted for the first time of a domestic violence crime as defined in section 3561(b).</p><p><strong>(b) Authorized terms of supervised release.</strong>—Except as otherwise provided, the authorized terms of supervised release are—</p><blockquote><p><strong>(1)</strong> for a Class A or Class B felony, not more than five years;</p><p><strong>(2)</strong> for a Class C or Class D felony, not more than three years; and</p><p><strong>(3)</strong> for a Class E felony, or for a misdemeanor (other than a petty offense), not more than one year.</p></blockquote><p><strong>(c) Factors to be considered in including a term of supervised release.</strong>—The court, in determining whether to include a term of supervised release, and, if a term of supervised release is to be included, in determining the length of the term and the conditions of supervised release, shall consider the factors set forth in section 3553(a)(1), (a)(2)(B), (a)(2)(C), (a)(2)(D), (a)(4), (a)(5), (a)(6), and (a)(7).</p><p><strong>(d) Conditions of supervised release.</strong>—The court shall order, as an explicit condition of supervised release, that the defendant not commit another Federal, State, or local crime during the term of supervision and that the defendant not unlawfully possess a controlled substance. The court shall order as an explicit condition of supervised release for a defendant convicted for the first time of a domestic violence crime as defined in section 3561(b) that the defendant attend a public, private, or private nonprofit offender rehabilitation program that has been approved by the court, in consultation with a State Coalition Against Domestic Violence or other appropriate experts, if an approved program is readily available within a 50-mile radius of the legal residence of the defendant. The court shall order, as an explicit condition of supervised release for a person required to register under the Sex Offender Registration and Notification Act, that the person comply with the requirements of that Act. The court shall order, as an explicit condition of supervised release, that the defendant cooperate in the collection of a DNA sample from the defendant, if the collection of such a sample is authorized pursuant to section 3 of the DNA Analysis Backlog Elimination Act of 2000. The court shall also order, as an explicit condition of supervised release, that the defendant refrain from any unlawful use of a controlled substance and submit to a drug test within 15 days of release on supervised release and at least 2 periodic drug tests thereafter (as determined by the court) for use of a controlled substance. The condition stated in the preceding sentence may be ameliorated or suspended by the court as provided in section 3563(a)(4). The results of a drug test administered in accordance with the preceding subsection shall be subject to confirmation only if the results are positive, the defendant is subject to possible imprisonment for such failure, and either the defendant denies the accuracy of such test or there is some other reason to question the results of the test. A drug test confirmation shall be a urine drug test confirmed using gas chromatography/mass spectrometry techniques or such test as the Director of the Administrative Office of the United States Courts after consultation with the Secretary of Health and Human Services may determine to be of equivalent accuracy. The court shall consider whether the availability of appropriate substance abuse treatment programs, or an individual’s current or past participation in such programs, warrants an exception in accordance with United States Sentencing Commission guidelines from the rule of section 3583(g) when considering any action against a defendant who fails a drug test. The court may order, as a further condition of supervised release, to the extent that such condition—</p><blockquote><p><strong>(1)</strong> is reasonably related to the factors set forth in section 3553(a)(1), (a)(2)(B), (a)(2)(C), and (a)(2)(D);</p><p><strong>(2)</strong> involves no greater deprivation of liberty than is reasonably necessary for the purposes set forth in section 3553(a)(2)(B), (a)(2)(C), and (a)(2)(D); and</p><p><strong>(3)</strong> is consistent with any pertinent policy statements issued by the Sentencing Commission pursuant to 28 U.S.C. 994(a);</p></blockquote><p>any condition set forth as a discretionary condition of probation in section 3563(b) and any other condition it considers to be appropriate, provided, however that a condition set forth in subsection 3563(b)(10) shall be imposed only for a violation of a condition of supervised release in accordance with section 3583(e)(2) and only when facilities are available. If an alien defendant is subject to deportation, the court may provide, as a condition of supervised release, that he be deported and remain outside the United States, and may order that he be delivered to a duly authorized immigration official for such deportation. The court may order, as an explicit condition of supervised release for a person who is a felon and required to register under the Sex Offender Registration and Notification Act, that the person submit his person, and any property, house, residence, vehicle, papers, computer, other electronic communications or data storage devices or media, and effects to search at any time, with or without a warrant, by any law enforcement or probation officer with reasonable suspicion concerning a violation of a condition of supervised release or unlawful conduct by the person, and by any probation officer in the lawful discharge of the officer’s supervision functions.</p><p><strong>(e) Modification of conditions or revocation.</strong>—The court may, after considering the factors set forth in section 3553(a)(1), (a)(2)(B), (a)(2)(C), (a)(2)(D), (a)(4), (a)(5), (a)(6), and (a)(7)—</p><blockquote><p><strong>(1)</strong> terminate a term of supervised release and discharge the defendant released<a href='#fn3' class='footnoteRef' id='fnref3'><sup>3</sup></a> at any time after the expiration of one year of supervised release, pursuant to the provisions of the Federal Rules of Criminal Procedure relating to the modification of probation, if it is satisfied that such action is warranted by the conduct of the defendant released<sup>1</sup> and the interest of justice;</p><p><strong>(2)</strong> extend a term of supervised release if less than the maximum authorized term was previously imposed, and may modify, reduce, or enlarge the conditions of supervised release, at any time prior to the expiration or termination of the term of supervised release, pursuant to the provisions of the Federal Rules of Criminal Procedure relating to the modification of probation and the provisions applicable to the initial setting of the terms and conditions of post‑release supervision;</p><p><strong>(3)</strong> revoke a term of supervised release, and require the defendant to serve in prison all or part of the term of supervised release authorized by statute for the offense that resulted in such term of supervised release without credit for time previously served on postrelease supervision, if the court, pursuant to the Federal Rules of Criminal Procedure applicable to revocation of probation or supervised release, finds by a preponderance of the evidence that the defendant violated a condition of supervised release, except that a defendant whose term is revoked under this paragraph may not be required to serve on any such revocation more than 5 years in prison if the offense that resulted in the term of supervised release is a class A felony, more than 3 years in prison if such offense is a class B felony, more than 2 years in prison if such offense is a class C or D felony, or more than one year in any other case; or</p><p><strong>(4)</strong> order the defendant to remain at his place of residence during nonworking hours and, if the court so directs, to have compliance monitored by telephone or electronic signaling devices, except that an order under this paragraph may be imposed only as an alternative to incarceration.</p></blockquote><p><strong>(f) Written statement of conditions.</strong>—The court shall direct that the probation officer provide the defendant with a written statement that sets forth all the conditions to which the term of supervised release is subject, and that is sufficiently clear and specific to serve as a guide for the defendant’s conduct and for such supervision as is required.</p><p><strong>(g) Mandatory revocation for possession of controlled substance or firearm or for refusal to comply with drug testing.</strong>—If the defendant—</p><blockquote><p><strong>(1)</strong> possesses a controlled substance in violation of the condition set forth in subsection (d);</p><p><strong>(2)</strong> possesses a firearm, as such term is defined in section 921 of this title, in violation of Federal law, or otherwise violates a condition of supervised release prohibiting the defendant from possessing a firearm;</p><p><strong>(3)</strong> refuses to comply with drug testing imposed as a condition of supervised release; or</p><p><strong>(4)</strong> as a part of drug testing, tests positive for illegal controlled substances more than 3 times over the course of 1 year;</p></blockquote><p>the court shall revoke the term of supervised release and require the defendant to serve a term of imprisonment not to exceed the maximum term of imprisonment authorized under subsection (e)(3).</p><p><strong>(h) Supervised release following revocation.</strong>—When a term of supervise release is revoked and the defendant is required to serve a term of imprisonment, the court may include a requirement that the defendant be placed on a term of supervised release after imprisonment. The length of such a term of supervised release shall not exceed the term of supervised release authorized by statute for the offense that resulted in the original term of supervised release, less any term of imprisonment that was imposed upon revocation of supervised release.</p><p><strong>(i) Delayed revocation.</strong>—The power of the court to revoke a term of supervised release for violation for a condition of supervised release, and to order the defendant to serve a term of imprisonment and, subject to the limitations in subsection (h), a further term of supervised release, extends beyond the expiration of the term of supervised release for any period reasonably necessary for the adjudication of matters arising before its expiration if, before its expiration, a warrant or summons has been issued on the basis of an allegation of such a violation.</p><p><strong>(j)</strong> <strong>Supervised Release Terms for Terrorism Predicates.</strong>—Notwithstanding subsection (b), the authorized term of supervised release for any offense listed in section 2332b(g)(5)(B), is any term of years or life.</p><p><strong>(k)</strong> Notwithstanding subsection (b), the authorized term of supervised release for any offense under section 1201 involving a minor victim, and for any offense under section 1591, 1594(c), 2241, 2242, 2243, 2244, 2245, 2250, 2251, 2251A, 2252, 2252A, 2260, 2421, 2422, 2423, or 2425, is any term of years not less than 5, or life. If a defendant required to register under the Sex Offender Registration and Notification Act commits any criminal offense under chapter 109A, 110, or 117, or section 1201 or 1591, for which imprisonment for a term longer than 1 year can be imposed, the court shall revoke the term of supervised release and require the defendant to serve a term of imprisonment under subsection (e)(3) without regard to the exception contained therein. Such term shall be not less than 5 years.</p><p>(Added Pub.L. 98–473, Title II, § 212(a)(2), Oct. 12, 1984, 98 Stat. 1999, and amended Pub.L. 99–570, Title I, § 1006(a), Oct. 27, 1986, 100 Stat. 3207–6, 3207–7; Pub.L. 99–646, § 14(a), Nov. 10, 1986, 100 Stat. 3594; Pub.L. 100–182, §§ 8, 9, 12, 25, Dec. 7, 1987, 101 Stat. 1267, 1268, 1272; Pub.L. 100–690, Title VII, §§ 7108, 7303(b), 7305(b), Nov. 18, 1988, 102 Stat. 4418, 4419, 4464–4466; Pub.L. 101–647, Title XXXV, § 3589, Nov. 29, 1990, 104 Stat. 4930; Pub.L. 103–322, Title II, § 20414(c), Title XI, § 110505, Title XXXII, § 320921(c), Sept. 13, 1994, 108 Stat. 1831, 2016, 2130; Pub.L. 105–119, Title I, § 115(a)(8)(B), Nov. 26, 1997, 111 Stat. 2465; Pub.L. 106–546, § 7(b), Dec. 19, 2000, 114 Stat. 2734; Pub.L. 107–56, Title VIII, § 812, Oct. 26, 2001, 115 Stat. 382; Pub.L. 107–273, Div. B, Title II, § 2103(b), Title III, § 3007, Nov. 2, 2002, 116 Stat. 1793, 1806; Pub.L. 108–21, Title I, § 101, Apr. 30, 2003, 117 Stat. 651; Pub.L. 109–177, Title II, § 212, Mar. 9, 2006, 120 Stat. 230; Pub.L. 109–248, Title I, § 141(e), Title II, § 201(b), July 27, 2006, 120 Stat. 603, 615; Pub.L. 110–406, § 14(b), Oct. 13, 2008, 122 Stat. 4294; Pub.L. 114–22, title I, §114(d), May 29, 2015, 129 Stat. 242.)</p><p><strong>EDITORIAL NOTES</strong></p><p><strong>Codification.</strong> Amendment by section 7108(a)(2) of Pub.L. 100–690 to subsec. (d)(2), which directed that “(a)(2)(C),” be inserted after “(a)(2)(B),”, was executed by inserting “(a)(2)(C),” after “(a)(2)(B)” since no comma appeared after “(a)(2)(B)”.</p><p>Amendment by section 7305(b)(2) of Pub.L. 100–690 to subsec. (e) which struck out “or” at the end of par. (3), struck out the period at the end of par. (4) and inserted “; or”, and added par. (5) could not be completely executed in view of prior amendment to such provision by section 7108(b) of Pub.L. 100–690 which redesignated former par. (4) as (3) thereby resulting in no par. (4) amended.</p><p>Amendment by section 14(a)(1) of Pub.L. 99–646 to subsec. (e) catchline duplicates amendment to such subsection catchline made by Pub.L. 99–570, § 1006(a)(3)(A).</p>\"},{\"id\":\"18U.S.C.§3584\",\"content\":\"<p><strong>§ 3584. Multiple sentences of imprisonment</strong></p><p><strong>(a) Imposition of concurrent or consecutive terms.</strong>—If multiple terms of imprisonment are imposed on a defendant at the same time, or if a term of imprisonment is imposed on a defendant who is already subject to an undischarged term of imprisonment, the terms may run concurrently or consecutively, except that the terms may not run consecutively for an attempt and for another offense that was the sole objective of the attempt. Multiple terms of imprisonment imposed at the same time run concurrently unless the court orders or the statute mandates that the terms are to run consecutively. Multiple terms of imprisonment imposed at different times run consecutively unless the court orders that the terms are to run concurrently.</p><p><strong>(b) Factors to be considered in imposing concurrent or consecutive terms.</strong>—The court, in determining whether the terms imposed are to be ordered to run concurrently or consecutively, shall consider, as to each offense for which a term of imprisonment is being imposed, the factors set forth in section 3553(a).</p><p><strong>(c) Treatment of multiple sentence as an aggregate.</strong>—Multiple terms of imprisonment ordered to run consecutively or concurrently shall be treated for administrative purposes as a single, aggregate term of imprisonment.</p><p>(Added Pub.L. 98–473, Title II, § 212(a)(2), Oct. 12, 1984, 98 Stat. 2000.)</p>\"},{\"id\":\"18U.S.C.§3585\",\"content\":\"<p><strong>§ 3585. Calculation of a term of imprisonment</strong></p><p><strong>(a) Commencement of sentence.</strong>—A sentence to a term of imprisonment commences on the date the defendant is received in custody awaiting transportation to, or arrives voluntarily to commence service of sentence at, the official detention facility at which the sentence is to be served.</p><p><strong>(b) Credit for prior custody.</strong>—A defendant shall be given credit toward the service of a term of imprisonment for any time he has spent in official detention prior to the date the sentence commences—</p><blockquote><p><strong>(1)</strong> as a result of the offense for which the sentence was imposed; or</p><p><strong>(2)</strong> as a result of any other charge for which the defendant was arrested after the commission of the offense for which the sentence was imposed;</p></blockquote><p>that has not been credited against another sentence.</p><p>(Added Pub.L. 98–473, Title II, § 212(a)(2), Oct. 12, 1984, 98 Stat. 2001.)</p>\"},{\"id\":\"18U.S.C.§3586\",\"content\":\"<p><strong>§ 3586. Implementation of a sentence of imprisonment</strong></p><p>The implementation of a sentence of imprisonment is governed by the provisions of subchapter C of chapter 229 and, if the sentence includes a term of supervised release, by the provisions of subchapter A of chapter 229.</p><p>(Added Pub.L. 98–473, Title II, § 212(a)(2), Oct. 12, 1984, 98 Stat. 2001.)</p><p>* * *</p>\"},{\"id\":\"18U.S.C.§3621\",\"content\":\"<p><strong>§ 3621. Imprisonment of a convicted person</strong></p><p><strong>(a) Commitment to custody of Bureau of Prisons.</strong>—A person who has been sentenced to a term of imprisonment pursuant to the provisions of subchapter D of chapter 227 shall be committed to the custody of the Bureau of Prisons until the expiration of the term imposed, or until earlier released for satisfactory behavior pursuant to the provisions of section 3624.</p><p><strong>(b) Place of imprisonment.</strong>—The Bureau of Prisons shall designate the place of the prisoner’s imprisonment. The Bureau may designate any available penal or correctional facility that meets minimum standards of health and habitability established by the Bureau, whether maintained by the Federal Government or otherwise and whether within or without the judicial district in which the person was convicted, that the Bureau determines to be appropriate and suitable, considering—</p><blockquote><p><strong>(1)</strong> the resources of the facility contemplated;</p><p><strong>(2)</strong> the nature and circumstances of the offense;</p><p><strong>(3)</strong> the history and characteristics of the prisoner;</p><p><strong>(4)</strong> any statement by the court that imposed the sentence—</p><p><strong>(A)</strong> concerning the purposes for which the sentence to imprisonment was determined to be warranted; or</p><p><strong>(B)</strong> recommending a type of penal or correctional facility as appropriate; and</p><p><strong>(5)</strong> any pertinent policy statement issued by the Sentencing Commission pursuant to section 994(a)(2) of title 28.</p></blockquote><p>In designating the place of imprisonment or making transfers under this subsection, there shall be no favoritism given to prisoners of high social or economic status. The Bureau may at any time, having regard for the same matters, direct the transfer of a prisoner from one penal or correctional facility to another. The Bureau shall make available appropriate substance abuse treatment for each prisoner the Bureau determines has a treatable condition of substance addiction or abuse. Any order, recommendation, or request by a sentencing court that a convicted person serve a term of imprisonment in a community corrections facility shall have no binding effect on the authority of the Bureau under this section to determine or change the place of imprisonment of that person.</p><p><strong>(c) Delivery of order of commitment.</strong>—When a prisoner, pursuant to a court order, is placed in the custody of a person in charge of a penal or correctional facility, a copy of the order shall be delivered to such person as evidence of this authority to hold the prisoner, and the original order, with the return endorsed thereon, shall be returned to the court that issued it.</p><p><strong>(d) Delivery of prisoner for court appearances.</strong>—The United States marshal shall, without charge, bring a prisoner into court or return him to a prison facility on order of a court of the United States or on written request of an attorney for the Government.</p><p><strong>(e) Substance abuse treatment.</strong>—</p><blockquote><p><strong>(1) Phase-in.</strong>—In order to carry out the requirement of the last sentence of subsection (b) of this section, that every prisoner with a substance abuse problem have the opportunity to participate in appropriate substance abuse treatment, the Bureau of Prisons shall, subject to the availability of appropriations, provide residential substance abuse treatment (and make arrangements for appropriate aftercare)—</p><p><strong>(A)</strong> for not less than 50 percent of eligible prisoners by the end of fiscal year 1995, with priority for such treatment accorded based on an eligible prisoner’s proximity to release date;</p><p><strong>(B)</strong> for not less than 75 percent of eligible prisoners by the end of fiscal year 1996, with priority for such treatment accorded based on an eligible prisoner’s proximity to release date; and</p><p><strong>(C)</strong> for all eligible prisoners by the end of fiscal year 1997 and thereafter, with priority for such treatment accorded based on an eligible prisoner’s proximity to release date.</p><p><strong>(2) Incentive for prisoners’ successful completion of treatment program.</strong>—</p><p><strong>(A) Generally.</strong>—Any prisoner who, in the judgment of the Director of the Bureau of Prisons, has successfully completed a program of residential substance abuse treatment provided under paragraph (1) of this subsection, shall remain in the custody of the Bureau under such conditions as the Bureau deems appropriate. If the conditions of confinement are different from those the prisoner would have experienced absent the successful completion of the treatment, the Bureau shall periodically test the prisoner for substance abuse and discontinue such conditions on determining that substance abuse has recurred.</p><p><strong>(B) Period of custody.</strong>—The period a prisoner convicted of a nonviolent offense remains in custody after successfully completing a treatment program may be reduced by the Bureau of Prisons, but such reduction may not be more than one year from the term the prisoner must otherwise serve.</p><p><strong>(3) Report.</strong>—The Bureau of Prisons shall transmit to the Committees on the Judiciary of the Senate and the House of Representatives on January 1, 1995, and on January 1 of each year thereafter, a report. Such report shall contain—</p><p><strong>(A)</strong> a detailed quantitative and qualitative description of each substance abuse treatment program, residential or not, operated by the Bureau;</p><p><strong>(B)</strong> a full explanation of how eligibility for such programs is determined, with complete information on what proportion of prisoners with substance abuse problems are eligible; and</p><p><strong>(C)</strong> a complete statement of to what extent the Bureau has achieved compliance with the requirements of this title.</p><p><strong>(4) Authorization of Appropriations.</strong>—There are authorized to carry out this subsection such sums as may be necessary for each of fiscal years 2007 through 2011.</p><p><strong>(5) Definitions.</strong>—As used in this subsection—</p><p><strong>(A)</strong> the term “residential substance abuse treatment” means a course of individual and group activities and treatment, lasting at least 6 months, in residential treatment facilities set apart from the general prison population (which may include the use of pharmocotherapies, where appropriate, that may extend beyond the 6-month period);</p><p><strong>(B)</strong> the term “eligible prisoner” means a prisoner who is—</p><p><strong>(i)</strong> determined by the Bureau of Prisons to have a substance abuse problem; and</p><p><strong>(ii)</strong> willing to participate in a residential substance abuse treatment program; and</p><p><strong>(C)</strong> the term “aftercare” means placement, case management and monitoring of the participants in a community-based substance abuse treatment program when the participant leaves the custody of the Bureau of Prisons.</p><p><strong>(6) Coordination of Federal assistance.</strong>—The Bureau of Prisons shall consult with the Department of Health and Human Services concerning substance abuse treatment and related services and the incorporation of applicable components existing comprehensive approaches including relapse prevention and aftercare services.</p></blockquote><p><strong>(f) Sex Offender Management.—</strong></p><blockquote><p><strong>(1) In General.—</strong>The Bureau of Prisons shall make available appropriate treatment to sex offenders who are in need of and suitable for treatment, as follows:</p><p><strong>(A) Sex Offender Management Programs.—</strong>The Bureau of Prisons shall establish non-residential sex offender management programs to provide appropriate treatment, monitoring, and supervision of sex offenders and to provide aftercare during pre-release custody.</p><p><strong>(B)</strong> <strong>Residential Sex Offender Treatment Programs.—</strong>The Bureau of Prisons shall establish residential sex offender treatment programs to provide treatment to sex offenders who volunteer for such programs and are deemed by the Bureau of Prisons to be in need of and suitable for residential treatment.</p><p><strong>(2)</strong> <strong>Regions.—</strong>At least 1 sex offender management program under paragraph (1)(A), and at least one residential sex offender treatment program under paragraph (1)(B), shall be established in each region within the Bureau of Prisons.</p><p><strong>(3)</strong> <strong>Authorization of Appropriations.—</strong>There are authorized to be appropriated to the Bureau of Prisons for each fiscal year such sums as may be necessary to carry out this subsection.</p></blockquote><p><strong>(g) Continued access to medical care.—</strong></p><blockquote><p><strong>(1) In general.—</strong>In order to ensure a minimum standard of health and habitability, the Bureau of Prisons should ensure that each prisoner in a community confinement facility has access to necessary medical care, mental health care, and medicine through partnerships with local health service providers and transition planning.</p><p><strong>(2) Definition.—</strong>In this subsection, the term “community confinement” has the meaning given that term in the application notes under section 5F1.1 of the Federal Sentencing Guidelines Manual, as in effect on the date of the enactment of the Second Chance Act of 2007.</p></blockquote><p>(Added Pub.L. 98–473, Title II, § 212(a)(2), Oct. 12, 1984, 98 Stat. 2007, and amended Pub.L. 101–647, Title XXIX, § 2903, Nov. 29, 1990, 104 Stat. 4913; Pub.L. 103–322, Title II, § 20401, Title III § 32001, Sept. 13, 1994,108 Stat. 1824, 1896; Pub.L. 109–162, Title XI, § 1146, Jan. 5, 2006, 119 Stat. 3112; Pub.L. 109–248, Title VI, § 622, July 7, 2006, 120 Stat. 634; Pub.L. 110–199, Title II, §§ 231(f), 251(b), 252, Apr. 9, 2008, 122 Stat. 687, 693.)</p><p><strong>EDITORIAL NOTES</strong></p><p><strong>References in Text.</strong> The date of the enactment of the Second Chance Act of 2007, referred to in subsec. (g)(2), is April 9, 2008, the approval date of Pub.L. 110–199, 122 Stat. 657.</p>\"},{\"id\":\"18U.S.C.§3622\",\"content\":\"<p><strong>§ 3622. Temporary release of a prisoner</strong></p><p>The Bureau of Prisons may release a prisoner from the place of his imprisonment for a limited period if such release appears to be consistent with the purpose for which the sentence was imposed and any pertinent policy statement issued by the Sentencing Commission pursuant to 28 U.S.C. 994(a)(2), if such release otherwise appears to be consistent with the public interest and if there is reasonable cause to believe that a prisoner will honor the trust to be imposed in him, by authorizing him, under prescribed conditions, to—</p><blockquote><p><strong>(a)</strong> visit a designated place for a period not to exceed thirty days, and then return to the same or another facility, for the purpose of—</p><p><strong>(1)</strong> visiting a relative who is dying;</p><p><strong>(2)</strong> attending a funeral of a relative;</p><p><strong>(3)</strong> obtaining medical treatment not otherwise available;</p><p><strong>(4)</strong> contacting a prospective employer;</p><p><strong>(5)</strong> establishing or reestablishing family or community ties; or</p><p><strong>(6)</strong> engaging in any other significant activity consistent with the public interest;</p><p><strong>(b)</strong> participate in a training or educational program in the community while continuing in official detention at the prison facility; or</p><p><strong>(c)</strong> work at paid employment in the community while continuing in official detention at the penal or correctional facility if—</p><p><strong>(1)</strong> the rates of pay and other conditions of employment will not be less than those paid or provided for work of a similar nature in the community; and</p><p><strong>(2)</strong> the prisoner agrees to pay to the Bureau such costs incident to official detention as the Bureau finds appropriate and reasonable under all the circumstances, such costs to be collected by the Bureau and deposited in the Treasury to the credit of the appropriation available for such costs at the time such collections are made.</p></blockquote><p>(Added Pub.L. 98–473, Title II, § 212(a)(2), Oct. 12, 1984, 98 Stat. 2007.)</p>\"},{\"id\":\"18U.S.C.§3623\",\"content\":\"<p><strong>§ 3623. Transfer of a prisoner to State authority</strong></p><p>The Director of the Bureau of Prisons shall order that a prisoner who has been charged in an indictment or information with, or convicted of, a State felony, be transferred to an official detention facility within such State prior to his release from a Federal prison facility if—</p><blockquote><p><strong>(1)</strong> the transfer has been requested by the Governor or other executive authority of the State;</p><p><strong>(2)</strong> the State has presented to the Director a certified copy of the indictment, information, or judgment of conviction; and</p><p><strong>(3)</strong> the Director finds that the transfer would be in the public interest.</p></blockquote><p>If more than one request is presented with respect to a prisoner, the Director shall determine which request should receive preference. The expenses of such transfer shall be borne by the State requesting the transfer.</p><p>(Added Pub.L. 98–473, Title II, § 212(a)(2), Oct. 12, 1984, 98 Stat. 2008.)</p>\"},{\"id\":\"18U.S.C.§3624\",\"content\":\"<p><strong>§ 3624. Release of a prisoner</strong></p><p><strong>(a) Date of release.</strong>—A prisoner shall be released by the Bureau of Prisons on the date of the expiration of the prisoner’s term of imprisonment, less any time credited toward the service of the prisoner’s sentence as provided in subsection (b). If the date for a prisoner’s release falls on a Saturday, a Sunday, or a legal holiday at the place of confinement, the prisoner may be released by the Bureau on the last preceding weekday.</p><p><strong>(b) Credit toward service of sentence for satisfactory behavior.</strong>—<strong>(1)</strong> Subject to paragraph (2), a prisoner who is serving a term of imprisonment of more than 1 year, other than a term of imprisonment for the duration of the prisoner’s life, may receive credit toward the service of the prisoner’s sentence, beyond the time served, of up to 54 days at the end of each year of the prisoner’s term of imprisonment, beginning at the end of the first year of the term, subject to determination by the Bureau of Prisons that, during that year, the prisoner has displayed exemplary compliance with institutional disciplinary regulations. Subject to paragraph (2), if the Bureau determines that, during that year, the prisoner has not satisfactorily complied with such institutional regulations, the prisoner shall receive no such credit toward service of the prisoner’s sentence or shall receive such lesser credit as the Bureau determines to be appropriate. In awarding credit under this section, the Bureau shall consider whether the prisoner, during the relevant period, has earned, or is making satisfactory progress toward earning, a high school diploma or an equivalent degree. Credit that has not been earned may not later be granted. Subject to paragraph (2), credit for the last year or portion of a year of the term of imprisonment shall be prorated and credited within the last six weeks of the sentence.</p><p><strong>(2)</strong> Notwithstanding any other law, credit awarded under this subsection after the date of enactment of the Prison Litigation Reform Act shall vest on the date the prisoner is released from custody.</p><p><strong>(3)</strong> The Attorney General shall ensure that the Bureau of Prisons has in effect an optional General Educational Development program for inmates who have not earned a high school diploma or its equivalent.</p><p><strong>(4)</strong> Exemptions to the General Educational Development requirement may be made as deemed appropriate by the Director of the Federal Bureau of Prisons.</p><p><strong>(c) Pre‑release custody.</strong>—<strong>(1) In general.—</strong>The Director of the Bureau of Prisons shall, to the extent practicable, ensure that a prisoner serving a term of imprisonment spends a portion of the final months of that term (not to exceed 12 months), under conditions that will afford that prisoner a reasonable opportunity to adjust to and prepare for the reentry of that prisoner into the community. Such conditions may include a community correctional facility.</p><p><strong>(2) Home confinement authority.—</strong>The authority under this subsection may be used to place a prisoner in home confinement for the shorter of 10 percent of the term of imprisonment of that prisoner or 6 months.</p><p><strong>(3) Assistance.—</strong>The United States Probation System shall, to the extent practicable, offer assistance to a prisoner during prerelease custody under this subsection.</p><p><strong>(4) No limitations.—</strong>Nothing in this subsection shall be construed to limit or restrict the authority of the Director of the Bureau of Prisons under section 3621.</p><p><strong>(5) Reporting.—</strong>Not later than 1 year after the date of the enactment of the Second Chance Act of 2007 (and every year thereafter), the Director of the Bureau of Prisons shall transmit to the Committee on the Judiciary of the Senate and the Committee on the Judiciary of the House of Representatives a report describing the Bureau’s utilization of community corrections facilities. Each report under this paragraph shall set forth the number and percentage of Federal prisoners placed in community corrections facilities during the preceding year, the average length of such placements, trends in such utilization, the reasons some prisoners are not placed in community corrections facilities, and any other information that may be useful to the committees in determining if the Bureau is utilizing community corrections facilities in an effective manner.</p><p><strong>(6) Issuance of regulations.—</strong>The Director of the Bureau of Prisons shall issue regulations pursuant to this subsection not later than 90 days after the date of the enactment of the Second Chance Act of 2007, which shall ensure that placement in a community correctional facility by the Bureau of Prisons is—</p><blockquote><p><strong>(A)</strong> conducted in a manner consistent with section 3621(b) of this title;</p><p><strong>(B)</strong> determined on an individual basis; and</p><p><strong>(C)</strong> of sufficient duration to provide the greatest likelihood of successful reintegration into the community.</p></blockquote><p><strong>(d) Allotment of clothing, funds, and transportation.</strong>—Upon the release of a prisoner on the expiration of the prisoner’s term of imprisonment, the Bureau of Prisons shall furnish the prisoner with—</p><blockquote><p><strong>(1)</strong> suitable clothing;</p><p><strong>(2)</strong> an amount of money, not more than $500, determined by the Director to be consistent with the needs of the offender and the public interest, unless the Director determines that the financial position of the offender is such that no sum should be furnished; and</p><p><strong>(3)</strong> transportation to the place of the prisoner’s conviction, to the prisoner’s bona fide residence within the United States, or to such other place within the United States as may be authorized by the Director.</p></blockquote><p><strong>(e) Supervision after release.</strong>—A prisoner whose sentence includes a term of supervised release after imprisonment shall be released by the Bureau of Prisons to the supervision of a probation officer who shall, during the term imposed, supervise the person released to the degree warranted by the conditions specified by the sentencing court. The term of supervised release commences on the day the person is released from imprisonment and runs concurrently with any Federal, State, or local term of probation or supervised release or parole for another offense to which the person is subject or becomes subject during the term of supervised release. A term of supervised release does not run during any period in which the person is imprisoned in connection with a conviction for a Federal, State, or local crime unless the imprisonment is for a period of less than 30 consecutive days. Upon the release of a prisoner by the Bureau of Prisons to supervised release, the Bureau of Prisons shall notify such prisoner, verbally and in writing, of the requirement that the prisoner adhere to an installment schedule, not to exceed 2 years except in special circumstances, to pay for any fine imposed for the offense committed by such prisoner, and of the consequences of failure to pay such fines under sections 3611 through 3614 of this title.</p><blockquote><p><strong>(f) Mandatory functional literacy requirement.</strong>—</p><p><strong>(1)</strong> The Attorney General shall direct the Bureau of Prisons to have in effect a mandatory functional literacy program for all mentally capable inmates who are not functionally literate in each Federal correctional institution within 6 months from the date of the enactment of this Act.</p><p><strong>(2)</strong> Each mandatory functional literacy program shall include a requirement that each inmate participate in such program for a mandatory period sufficient to provide the inmate with an adequate opportunity to achieve functional literacy, and appropriate incentives which lead to successful completion of such programs shall be developed and implemented.</p><p><strong>(3)</strong> As used in this section, the term “functional literacy” means–</p><p><strong>(A)</strong> an eighth grade equivalence in reading and mathematics on a nationally recognized standardized test;</p><p><strong>(B)</strong> functional competency or literacy on a nationally recognized criterion–referenced test; or</p><p><strong>(C)</strong> a combination of subparagraphs (A) and (B).</p><p><strong>(4)</strong> Non-English speaking inmates shall be required to participate in an English-As-A-Second-Language program until they function at the equivalence of the eighth grade on a nationally recognized educational achievement test.</p><p><strong>(5)</strong> The Chief Executive Officer of each institution shall have authority to grant waivers for good cause as determined and documented on an individual basis.</p><p>[<strong>(6) Repealed.</strong> Pub.L. 104–66, Title I, § 1091(c), Dec. 21, 1995, 109 Stat. 722.]</p></blockquote><p>(Added Pub.L. 98–473, Title II, § 212(a)(2), Oct. 12, 1984, 98 Stat. 2008, and amended Pub.L. 99–646, §§ 16(a), 17(a), Nov. 10, 1986, 100 Stat. 3595; Pub.L. 101–647, Title XXIX, §§ 2902(a), 2904, Nov. 29, 1990, 104 Stat. 4913; Pub.L. 103–322, Title II, §§ 20405, 20412, Sept. 13, 1994, 108 Stat. 1825, 1828; Pub.L. 104–66, Title I, § 1091(c), Dec. 21, 1995, 109 Stat. 722; Pub.L. 104–134, Title I, § 101[(a)] [Title VIII § 809(c)], Apr. 26, 1996, 110 Stat. 1321–76, renumbered Title I, Pub.L. 104–140, § 1(a), May 2, 1996, 110 Stat. 1327; Pub.L. 110–177, Title V, § 505, Jan. 7, 2008, 121 Stat. 2542; Pub.L. 110–199, Title II, § 251(a), Apr. 9, 2008, 122 Stat. 692.)</p><p><strong>EDITORIAL NOTES</strong></p><p><strong>References in Text.</strong> The date of enactment of the Prison Litigation Reform Act, referred to in subsec. (b)(2), is the date of enactment of Title VIII of Pub.L. 104–134, which was approved Apr. 26, 1996.</p><p>The date of the enactment of the Second Chance Act of 2007, referred to in subsec. (c)(5), (6), is April 9, 2008, the approval date of Pub.L. 110–199, 122 Stat. 657.</p><p>The date of enactment of this Act, referred to in subsec. (f)(1), probably means the date of enactment of Pub.L. 101–647, Nov. 29, 1990, 104 Stat. 4789, which was approved Nov. 29, 1990.</p><p>* * *</p>\"},{\"id\":\"18U.S.C.§3661\",\"content\":\"<p><strong>§ 3661. Use of information for sentencing</strong></p><p>No limitation shall be placed on the information concerning the background, character, and conduct of a person convicted of an offense which a court of the United States may receive and consider for the purpose of imposing an appropriate sentence.</p><p>(Added Pub.L. 91–452, Title X, § 1001(a), Oct. 15, 1970, 84 Stat. 951, § 3577, and renumbered Pub.L.98–473, Title II, § 212(a)(1), Oct. 12, 1984, 98 Stat. 1987.)</p><p>* * *</p>\"},{\"id\":\"18U.S.C.§3663\",\"content\":\"<p><strong>§ 3663. Order of restitution</strong></p><p><strong>(a)(1)(A)</strong> The court, when sentencing a defendant convicted of an offense under this title, section 401, 408(a), 409, 416, 420, or 422(a) of the Controlled Substances Act (21 U.S.C. 841, 848(a), 849, 856, 861, 863) (but in no case shall a participant in an offense under such sections be considered a victim of such offense under this section), or section 5124, 46312, 46502, or 46504 of title 49, other than an offense described in section 3663A(c), may order, in addition to or, in the case of a misdemeanor, in lieu of any other penalty authorized by law, that the defendant make restitution to any victim of such offense, or if the victim is deceased, to the victim’s estate. The court may also order, if agreed to by the parties in a plea agreement, restitution to persons other than the victim of the offense.</p><p><strong>(B)(i)</strong> The court, in determining whether to order restitution under this section, shall consider—</p><p><strong>(I)</strong> the amount of the loss sustained by each victim as a result of the offense; and</p><blockquote><p><strong>(II)</strong> the financial resources of the defendant, the financial needs and earning ability of the defendant and the defendant’s dependents, and such other factors as the court deems appropriate.</p></blockquote><p><strong>(ii)</strong> To the extent that the court determines that the complication and prolongation of the sentencing process resulting from the fashioning of an order of restitution under this section outweighs the need to provide restitution to any victims, the court may decline to make such an order.</p><p><strong>(2)</strong> For the purposes of this section, the term “victim” means a person directly and proximately harmed as a result of the commission of an offense for which restitution may be ordered including, in the case of an offense that involves as an element a scheme, conspiracy, or pattern of criminal activity, any person directly harmed by the defendant’s criminal conduct in the course of the scheme, conspiracy, or pattern. In the case of a victim who is under 18 years of age, incompetent, incapacitated, or deceased, the legal guardian of the victim or representative of the victim’s estate, another family member, or any other person appointed as suitable by the court, may assume the victim’s rights under this section, but in no event shall the defendant be named as such representative or guardian.</p><p><strong>(3)</strong> The court may also order restitution in any criminal case to the extent agreed to by the parties in a plea agreement.</p><p><strong>(b)</strong> The order may require that such defendant—</p><blockquote><p><strong>(1)</strong> in the case of an offense resulting in damage to or loss or destruction of property of a victim of the offense—</p><p><strong>(A)</strong> return the property to the owner of the property or someone designated by the owner; or</p><p><strong>(B)</strong> if return of the property under subparagraph (A) is impossible, impractical, or inadequate, pay an amount equal to the greater of—</p><p><strong>(i)</strong> the value of the property on the date of the damage, loss, or destruction, or</p><p><strong>(ii)</strong> the value of the property on the date of sentencing,</p><p>less the value (as of the date the property is returned) of any part of the property that is returned;</p><p><strong>(2)</strong> in the case of an offense resulting in bodily injury to a victim including an offense under chapter 109A or chapter 110—</p><p><strong>(A)</strong> pay an amount equal to the cost of necessary medical and related professional services and devices relating to physical, psychiatric, and psychological care, including nonmedical care and treatment rendered in accordance with a method of healing recognized by the law of the place of treatment;</p><p><strong>(B)</strong> pay an amount equal to the cost of necessary physical and occupational therapy and rehabilitation; and</p><p><strong>(C)</strong> reimburse the victim for income lost by such victim as a result of such offense;</p><p><strong>(3)</strong> in the case of an offense resulting in bodily injury also results in the death of a victim, pay an amount equal to the cost of necessary funeral and related services;</p><p><strong>(4)</strong> in any case, reimburse the victim for lost income and necessary child care, transportation, and other expenses related to participation in the investigation or prosecution of the offense or attendance at proceedings related to the offense;</p><p><strong>(5)</strong> in any case, if the victim (or if the victim is deceased, the victim’s estate) consents, make restitution in services in lieu of money, or make restitution to a person or organization designated by the victim or the estate; and</p><p><strong>(6)</strong> in the case of an offense under sections 1028(a)(7) or 1028A(a) of this title, pay an amount equal to the value of the time reasonably spent by the victim in an attempt to remediate the intended or actual harm incurred by the victim from the offense.</p></blockquote><p><strong>(c)(1)</strong> Notwithstanding any other provision of law (but subject to the provisions of subsections (a)(1)(B) (i)(II) and (ii), when sentencing a defendant convicted of an offense described in section 401, 408(a), 409, 416, 420, or 422(a) of the Controlled Substances Act (21 U.S.C. 841, 848(a), 849, 856, 861, 863), in which there is no identifiable victim, the court may order that the defendant make restitution in accordance with this subsection.</p><p><strong>(2)(A)</strong> An order of restitution under this subsection shall be based on the amount of public harm caused by the offense, as determined by the court in accordance with guidelines promulgated by the United States Sentencing Commission.</p><p><strong>(B)</strong> In no case shall the amount of restitution ordered under this subsection exceed the amount of the fine which may be ordered for the offense charged in the case.</p><p><strong>(3)</strong> Restitution under this subsection shall be distributed as follows:</p><blockquote><p><strong>(A)</strong> 65 percent of the total amount of restitution shall be paid to the State entity designated to administer crime victim assistance in the State in which the crime occurred.</p><p><strong>(B)</strong> 35 percent of the total amount of restitution shall be paid to the State entity designated to receive Federal substance abuse block grant funds.</p></blockquote><p><strong>(4)</strong> The court shall not make an award under this subsection if it appears likely that such award would interfere with a forfeiture under chapter 46 or chapter 96 of this title or under the Controlled Substances Act (21 U.S.C. 801 et seq.).</p><p><strong>(5)</strong> Notwithstanding section 3612(c) or any other provision of law, a penalty assessment under section 3013 or a fine under subchapter C of chapter 227 shall take precedence over an order of restitution under this subsection.</p><p><strong>(6)</strong> Requests for community restitution under this subsection may be considered in all plea agreements negotiated by the United States.</p><p><strong>(7)(A)</strong> The United States Sentencing Commission shall promulgate guidelines to assist courts in determining the amount of restitution that may be ordered under this subsection.</p><p><strong>(B)</strong> No restitution shall be ordered under this subsection until such time as the Sentencing Commission promulgates guidelines pursuant to this paragraph.</p><p><strong>(d)</strong> An order of restitution made pursuant to this section shall be issued and enforced in accordance with section 3664.</p><p>(Added Pub.L. 97–291, § 5(a), Oct. 12, 1982, 96 Stat. 1253, § 3579 renumbered and amended Pub.L. 98–473, Title II, § 212(a)(1), (3), Oct. 12, 1984, 98 Stat. 1987, 2010; Pub.L. 98–596, § 9, Oct. 30, 1984, 98 Stat. 3138; Nov. 10, 1986, Pub.L. 99–646, §§ 8(b), 20(a), 77(a), 78(a), 79(a), 100 Stat. 3593, 3596, 3618, 3619; Pub.L. 100–182, § 13, Dec. 7, 1987, 101 Stat. 1268; Pub.L. 100–185, § 12, Dec. 11, 1987, 101 Stat. 1285; Pub.L. 100–690, Title VII, § 7042, Nov. 18, 1988, 102 Stat. 4399; Pub.L. 101–647, Title XXV, § 2509, Title XXXV, § 3595, Nov. 29, 1990, 104 Stat. 4863, 4931; Pub.L. 103–272, § 5(e)(12), July 5, 1994, 108 Stat. 1374; Pub.L. 103–322, Title IV, §§ 40504, 40505, Sept. 13, 1994, 108 Stat. 1947; Pub.L. 104–132, Title II, § 205(a), Apr. 24, 1996, 110 Stat. 1229; Pub.L. 104–294, Title VI, §§ 601(r)(1)(2), 605(l), Oct. 11, 1996, 110 Stat. 3502, 3510; Pub.L. 106–310, Div. B, Title XXXVI, § 3613(c), Oct. 17, 2000, 114 Stat. 1230; Pub.L. 109–59, Title VII, § 7128(b), Aug. 10, 2005, 109 Stat. 1910; Sept. 26, 2008, Pub.L. 110–326, Title II, § 202, 122 Stat. 3561.)</p><p><strong>§ 3663A. Mandatory restitution to victims of certain crimes</strong></p><p><strong>(a)(1)</strong> Notwithstanding any other provision of law, when sentencing a defendant convicted of an offense described in subsection (c), the court shall order, in addition to, or in the case of a misdemeanor, in addition to or in lieu of, any other penalty authorized by law, that the defendant make restitution to the victim of the offense or, if the victim is deceased, to the victim’s estate.</p><p><strong>(2)</strong> For the purposes of this section, the term “victim” means a person directly and proximately harmed as a result of the commission of an offense for which restitution may be ordered including, in the case of an offense that involves as an element a scheme, conspiracy, or pattern of criminal activity, any person directly harmed by the defendant’s criminal conduct in the course of the scheme, conspiracy, or pattern. In the case of a victim who is under 18 years of age, incompetent, incapacitated, or deceased, the legal guardian of the victim or representative of the victim’s estate, another family member, or any other person appointed as suitable by the court, may assume the victim’s rights under this section, but in no event shall the defendant be named as such representative or guardian.</p><p><strong>(3)</strong> The court shall also order, if agreed to by the parties in a plea agreement, restitution to persons other than the victim of the offense.</p><p><strong>(b)</strong> The order of restitution shall require that such defendant—</p><blockquote><p><strong>(1)</strong> in the case of an offense resulting in damage to or loss or destruction of property of a victim of the offense—</p><p><strong>(A)</strong> return the property to the owner of the property or someone designated by the owner; or</p><p><strong>(B)</strong> if return of the property under subparagraph (A) is impossible, impracticable, or inadequate, pay an amount equal to—</p><p><strong>(i)</strong> the greater of—</p><p><strong>(I)</strong> the value of the property on the date of the damage, loss, or destruction; or</p><p><strong>(II)</strong> the value of the property on the date of sentencing, less</p><p><strong>(ii)</strong> the value (as of the date the property is returned) of any part of the property that is returned;</p><p><strong>(2)</strong> in the case of an offense resulting in bodily injury to a victim—</p><p><strong>(A)</strong> pay an amount equal to the cost of necessary medical and related professional services and devices relating to physical, psychiatric, and psychological care, including nonmedical care and treatment rendered in accordance with a method of healing recognized by the law of the place of treatment;</p><p><strong>(B)</strong> pay an amount equal to the cost of necessary physical and occupational therapy and rehabilitation; and</p><p><strong>(C)</strong> reimburse the victim for income lost by such victim as a result of such offense;</p><p><strong>(3)</strong> in the case of an offense resulting in bodily injury that results in the death of the victim, pay an amount equal to the cost of necessary funeral and related services; and</p><p><strong>(4)</strong> in any case, reimburse the victim for lost income and necessary child care, transportation, and other expenses incurred during participation in the investigation or prosecution of the offense or attendance at proceedings related to the offense.</p></blockquote><p><strong>(c)(1)</strong> This section shall apply in all sentencing proceedings for convictions of, or plea agreements relating to charges for, any offense—</p><blockquote><p><strong>(A)</strong> that is—</p><p><strong>(i)</strong> a crime of violence, as defined in section 16;</p><p><strong>(ii)</strong> an offense against property under this title, or under section 416(a) of the Controlled Substance Act (21 U.S.C. 856(a)), including any offense committed by fraud or deceit;</p><p><strong>(iii)</strong> an offense described in section 1365 (relating to tampering with consumer products); or</p><p><strong>(iv)</strong> an offense under section 670 (relating to theft of medical products); and</p><p><strong>(B)</strong> in which an identifiable victim or victims has suffered a physical injury or pecuniary loss.</p></blockquote><p><strong>(2)</strong> In the case of a plea agreement that does not result in a conviction for an offense described in paragraph (1), this section shall apply only if the plea specifically states that an offense listed under such paragraph gave rise to the plea agreement.</p><p><strong>(3)</strong> This section shall not apply in the case of an offense described in paragraph (1)(A)(ii) if the court finds, from facts on the record, that—</p><blockquote><p><strong>(A)</strong> the number of identifiable victims is so large as to make restitution impracticable; or</p><p><strong>(B)</strong> determining complex issues of fact related to the cause or amount of the victim’s losses would complicate or prolong the sentencing process to a degree that the need to provide restitution to any victim is outweighed by the burden on the sentencing process.</p></blockquote><p><strong>(d)</strong> An order of restitution under this section shall be issued and enforced in accordance with section 3664.</p><p>(Added Pub.L. 104–132, Title II, § 204(a), Apr. 24, 1996, 110 Stat. 1227; amended Pub.L. 106–310, Div. B, Title XXXVI, § 3613(d), Oct. 17, 2000, 114 Stat. 1230; Pub.L. 112–186, § 6, Oct. 5, 2012, 126 Stat. 1430.)</p>\"},{\"id\":\"18U.S.C.§3664\",\"content\":\"<p><strong>§ 3664. Procedure for issuance and enforcement of order of restitution</strong></p><p><strong>(a)</strong> For orders of restitution under this title, the court shall order the probation officer to obtain and include in its presentence report, or in a separate report, as the court may direct, information sufficient for the court to exercise its discretion in fashioning a restitution order. The report shall include, to the extent practicable, a complete accounting of the losses to each victim, any restitution owed pursuant to a plea agreement, and information relating to the economic circumstances of each defendant. If the number or identity of victims cannot be reasonably ascertained, or other circumstances exist that make this requirement clearly impracticable, the probation officer shall so inform the court.</p><p><strong>(b)</strong> The court shall disclose to both the defendant and the attorney for the Government all portions of the presentence or other report pertaining to the matters described in subsection (a) of this section.</p><p><strong>(c)</strong> The provisions of this chapter, chapter 227, and Rule 32(c) of the Federal Rules of Criminal Procedure shall be the only rules applicable to proceedings under this section.</p><p><strong>(d)(1)</strong> Upon the request of the probation officer, but not later than 60 days prior to the date initially set for sentencing, the attorney for the Government, after consulting, to the extent practicable, with all identified victims, shall promptly provide the probation officer with a listing of the amounts subject to restitution.</p><p><strong>(2)</strong> The probation officer shall, prior to submitting the presentence report under subsection (a), to the extent practicable—</p><blockquote><p><strong>(A)</strong> provide notice to all identified victims of—</p><p><strong>(i)</strong> the offense or offenses of which the defendant was convicted;</p><p><strong>(ii)</strong> the amounts subject to restitution submitted to the probation officer;</p><p><strong>(iii)</strong> the opportunity of the victim to submit information to the probation officer concerning the amount of the victim’s losses;</p><p><strong>(iv)</strong> the scheduled date, time, and place of the sentencing hearing;</p><p><strong>(v)</strong> the availability of a lien in favor of the victim pursuant to subsection (m)(1)(B); and</p><p><strong>(vi)</strong> the opportunity of the victim to file with the probation officer a separate affidavit relating to the amount of the victim’s losses subject to restitution; and</p><p><strong>(B)</strong> provide the victim with an affidavit form to submit pursuant to subparagraph (A)(vi).</p></blockquote><p><strong>(3)</strong> Each defendant shall prepare and file with the probation officer an affidavit fully describing the financial resources of the defendant, including a complete listing of all assets owned or controlled by the defendant as of the date on which the defendant was arrested, the financial needs and earning ability of the defendant and the defendant’s dependents, and such other information that the court requires relating to such other factors as the court deems appropriate.</p><p><strong>(4)</strong> After reviewing the report of the probation officer, the court may require additional documentation or hear testimony. The privacy of any records filed, or testimony heard, pursuant to this section shall be maintained to the greatest extent possible, and such records may be filed or testimony heard in camera.</p><p><strong>(5)</strong> If the victim’s losses are not ascertainable by the date that is 10 days prior to sentencing, the attorney for the Government or the probation officer shall so inform the court, and the court shall set a date for the final determination of the victim’s losses, not to exceed 90 days after sentencing. If the victim subsequently discovers further losses, the victim shall have 60 days after discovery of those losses in which to petition the court for an amended restitution order. Such order may be granted only upon a showing of good cause for the failure to include such losses in the initial claim for restitutionary relief.</p><p><strong>(6)</strong> The court may refer any issue arising in connection with a proposed order of restitution to a magistrate judge or special master for proposed findings of fact and recommendations as to disposition, subject to a de novo determination of the issue by the court.</p><p><strong>(e)</strong> Any dispute as to the proper amount or type of restitution shall be resolved by the court by the preponderance of the evidence. The burden of demonstrating the amount of the loss sustained by a victim as a result of the offense shall be on the attorney for the Government. The burden of demonstrating the financial resources of the defendant and the financial needs of the defendant’s dependents, shall be on the defendant. The burden of demonstrating such other matters as the court deems appropriate shall be upon the party designated by the court as justice requires.</p><p><strong>(f)(1)(A)</strong> In each order of restitution, the court shall order restitution to each victim in the full amount of each victim’s losses as determined by the court and without consideration of the economic circumstances of the defendant.</p><p><strong>(B)</strong> In no case shall the fact that a victim has received or is entitled to receive compensation with respect to a loss from insurance or any other source be considered in determining the amount of restitution.</p><p><strong>(2)</strong> Upon determination of the amount of restitution owed to each victim, the court shall, pursuant to section 3572, specify in the restitution order the manner in which, and the schedule according to which, the restitution is to be paid, in consideration of—</p><blockquote><p><strong>(A)</strong> the financial resources and other assets of the defendant, including whether any of these assets are jointly controlled;</p><p><strong>(B)</strong> projected earnings and other income of the defendant; and</p><p><strong>(C)</strong> any financial obligations of the defendant; including obligations to dependents.</p></blockquote><p><strong>(3)(A)</strong> A restitution order may direct the defendant to make a single, lump‑sum payment, partial payments at specified intervals, in‑kind payments, or a combination of payments at specified intervals and in‑kind payments.</p><p><strong>(B)</strong> A restitution order may direct the defendant to make nominal periodic payments if the court finds from facts on the record that the economic circumstances of the defendant do not allow the payment of any amount of a restitution order, and do not allow for the payment of the full amount of a restitution order in the foreseeable future under any reasonable schedule of payments.</p><p><strong>(4)</strong> An in‑kind payment described in paragraph (3) may be in the form of—</p><blockquote><p><strong>(A)</strong> return of property;</p><p><strong>(B)</strong> replacement of property; or</p><p><strong>(C)</strong> if the victim agrees, services rendered to the victim or a person or organization other than the victim.</p></blockquote><p><strong>(g)(1)</strong> No victim shall be required to participate in any phase of a restitution order.</p><p><strong>(2)</strong> A victim may at any time assign the victim’s interest in restitution payments to the Crime Victims Fund in the Treasury without in any way impairing the obligation of the defendant to make such payments.</p><p><strong>(h)</strong> If the court finds that more than 1 defendant has contributed to the loss of a victim, the court may make each defendant liable for payment of the full amount of restitution or may apportion liability among the defendants to reflect the level of contribution to the victim’s loss and economic circumstances of each defendant.</p><p><strong>(i)</strong> If the court finds that more than 1 victim has sustained a loss requiring restitution by a defendant, the court may provide for a different payment schedule for each victim based on the type and amount of each victim’s loss and accounting for the economic circumstances of each victim. In any case in which the United States is a victim, the court shall ensure that all other victims receive full restitution before the United States receives any restitution.</p><p><strong>(j)(1)</strong> If a victim has received compensation from insurance or any other source with respect to a loss, the court shall order that restitution be paid to the person who provided or is obligated to provide the compensation, but the restitution order shall provide that all restitution of victims required by the order be paid to the victims before any restitution is paid to such a provider of compensation.</p><p><strong>(2)</strong> Any amount paid to a victim under an order of restitution shall be reduced by any amount later recovered as compensatory damages for the same loss by the victim in—</p><blockquote><p><strong>(A)</strong> any Federal civil proceeding; and</p><p><strong>(B)</strong> any State civil proceeding, to the extent provided by the law of the State.</p></blockquote><p><strong>(k)</strong> A restitution order shall provide that the defendant shall notify the court and the Attorney General of any material change in the defendant’s economic circumstances that might affect the defendant’s ability to pay restitution. The court may also accept notification of a material change in the defendant’s economic circumstances from the United States or from the victim. The Attorney General shall certify to the court that the victim or victims owed restitution by the defendant have been notified of the change in circumstances. Upon receipt of the notification, the court may, on its own motion, or the motion of any party, including the victim, adjust the payment schedule, or require immediate payment in full, as the interests of justice require.</p><p><strong>(l)</strong> A conviction of a defendant for an offense involving the act giving rise to an order of restitution shall estop the defendant from denying the essential allegations of that offense in any subsequent Federal civil proceeding or State civil proceeding, to the extent consistent with State law, brought by the victim.</p><p><strong>(m)(1)(A)(i)</strong> An order of restitution may be enforced by the United States in the manner provided for in subchapter C of chapter 227 and subchapter B of chapter 229 of this title; or</p><p><strong>(ii)</strong> by all other available and reasonable means.</p><p><strong>(B)</strong> At the request of a victim named in a restitution order, the clerk of the court shall issue an abstract of judgment certifying that a judgment has been entered in favor of such victim in the amount specified in the restitution order. Upon registering, recording, docketing, or indexing such abstract in accordance with the rules and requirements relating to judgments of the court of the State where the district court is located, the abstract of judgment shall be a lien on the property of the defendant located in such State in the same manner and to the same extent and under the same conditions as a judgment of a court of general jurisdiction in that State.</p><p><strong>(2)</strong> An order of in‑kind restitution in the form of services shall be enforced by the probation officer.</p><p><strong>(n)</strong> If a person obligated to provide restitution, or pay a fine, receives substantial resources from any source, including inheritance, settlement, or other judgment, during a period of incarceration, such person shall be required to apply the value of such resources to any restitution or fine still owed.</p><p><strong>(o)</strong> A sentence that imposes an order of restitution is a final judgment notwithstanding the fact that—</p><blockquote><p><strong>(1)</strong> such a sentence can subsequently be—</p><p><strong>(A)</strong> corrected under Rule 35 of the Federal Rules of Criminal Procedure and section 3742 of chapter 235 of this title;</p><p><strong>(B)</strong> appealed and modified under section 3742;</p><p><strong>(C)</strong> amended under subsection (d)(5); or</p><p><strong>(D)</strong> adjusted under section 3664(k), 3572, or 3613A; or</p><p><strong>(2)</strong> the defendant may be resentenced under section 3565 or 3614.</p></blockquote><p><strong>(p)</strong> Nothing in this section or sections 2248, 2259, 2264, 2327, 3663, and 3663A and arising out of the application of such sections, shall be construed to create a cause of action not otherwise authorized in favor of any person against the United States or any officer or employee of the United States.</p><p>(Added Pub.L. 97–291, § 5(a), Oct. 12, 1982, 96 Stat. 1255, § 3580, renumbered Pub.L. 98–473, Title II, § 212(a)(1), Oct. 12, 1984; 98 Stat. 1987; Pub.L. 101–647, Title XXXV, § 3596, Nov. 29, 1990, 104 Stat. 4931; Pub.L. 104–132, Title II, § 206(a), Apr. 24, 1996, 110 Stat. 1232; Pub.L. 107–273, Div. B, Title IV, § 4002(e)(1), Nov. 2, 2002, 116 Stat. 1810.)</p><p>* * *</p>\"},{\"id\":\"18U.S.C.§3742\",\"content\":\"<p><strong>§ 3742. Review of a sentence</strong></p><p><strong>(a) Appeal by a defendant.</strong>—A defendant may file a notice of appeal in the district court for review of an otherwise final sentence if the sentence—</p><blockquote><p><strong>(1)</strong> was imposed in violation of law;</p><p><strong>(2)</strong> was imposed as a result of an incorrect application of the sentencing guidelines; or</p><p><strong>(3)</strong> is greater than the sentence specified in the applicable guideline range to the extent that the sentence includes a greater fine or term of imprisonment, probation, or supervised release than the maximum established in the guideline range, or includes a more limiting condition of probation or supervised release under section 3563(b)(6) or (b)(11) than the maximum established in the guideline range; or</p><p><strong>(4)</strong> was imposed for an offense for which there is no sentencing guideline and is plainly unreasonable.</p></blockquote><p><strong>(b) Appeal by the Government.</strong>—The Government may file a notice of appeal in the district court for review of an otherwise final sentence if the sentence—</p><blockquote><p><strong>(1)</strong> was imposed in violation of law;</p><p><strong>(2)</strong> was imposed as a result of an incorrect application of the sentencing guidelines;</p><p><strong>(3)</strong> is less than the sentence specified in the applicable guideline range to the extent that the sentence includes a lesser fine or term of imprisonment, probation, or supervised release than the minimum established in the guideline range, or includes a less limiting condition of probation or supervised release under section 3563(b)(6) or (b)(11) than the minimum established in the guideline range; or</p><p><strong>(4)</strong> was imposed for an offense for which there is no sentencing guideline and is plainly unreasonable.</p></blockquote><p>The Government may not further prosecute such appeal without the personal approval of the Attorney General, the Solicitor General, or a deputy solicitor general designated by the Solicitor General.</p><p><strong>(c) Plea agreements.</strong>—In the case of a plea agreement that includes a specific sentence under rule 11(e)(1)(C) of the Federal Rules of Criminal Procedure—</p><blockquote><p><strong>(1)</strong> a defendant may not file a notice of appeal under paragraph (3) or (4) of subsection (a) unless the sentence imposed is greater than the sentence set forth in such agreement; and</p><p><strong>(2)</strong> the Government may not file a notice of appeal under paragraph (3) or (4) of subsection (b) unless the sentence imposed is less than the sentence set forth in such agreement.</p></blockquote><p><strong>(d) Record on review.</strong>—If a notice of appeal is filed in the district court pursuant to subsection (a) or (b), the clerk shall certify to the court of appeals—</p><blockquote><p><strong>(1)</strong> that portion of the record in the case that is designated as pertinent by either of the parties;</p><p><strong>(2)</strong> the presentence report; and</p><p><strong>(3)</strong> the information submitted during the sentencing proceeding.</p></blockquote><p><strong>(e) Consideration.</strong>—Upon review of the record, the court of appeals shall determine whether the sentence—</p><blockquote><p><strong>(1)</strong> was imposed in violation of law;</p><p><strong>(2)</strong> was imposed as a result of an incorrect application of the sentencing guidelines;</p><p><strong>(3)</strong> is outside the applicable guideline range, and</p><p><strong>(A)</strong> the district court failed to provide the written statement of reasons required by section 3553(c);</p><p><strong>(B)</strong> the sentence departs from the applicable guideline range based on a factor that—</p><p><strong>(i)</strong> does not advance the objectives set forth in section 3553(a)(2); or</p><p><strong>(ii)</strong> is not authorized under section 3553(b); or</p><p><strong>(iii)</strong> is not justified by the facts of the case; or</p><p><strong>(C)</strong> the sentence departs to an unreasonable degree from the applicable guidelines range, having regard for the factors to be considered in imposing a sentence, as set forth in section 3553(a) of this title and the reasons for the imposition of the particular sentence, as stated by the district court pursuant to the provisions of section 3553(c); or</p><p><strong>(4)</strong> was imposed for an offense for which there is no applicable sentencing guideline and is plainly unreasonable.</p></blockquote><p>The court of appeals shall give due regard to the opportunity of the district court to judge the credibility of the witnesses, and shall accept the findings of fact of the district court unless they are clearly erroneous and, except with respect to determinations under subsection (3)(A) or (3)(B), shall give due deference to the district court’s application of the guidelines to the facts. With respect to determinations under subsection (3)(A) or (3)(B), the court of appeals shall review de novo the district court’s application of the guidelines to the facts.</p><p><strong>(f) Decision and disposition.</strong>—If the court of appeals determines that—</p><blockquote><p><strong>(1)</strong> the sentence was imposed in violation of law or imposed as a result of an incorrect application of the sentencing guidelines, the court shall remand the case for further sentencing proceedings with such instructions as the court considers appropriate;</p><p><strong>(2)</strong> the sentence is outside the applicable guideline range and the district court failed to provide the required statement of reasons in the order of judgment and commitment, or the departure is based on an impermissible factor, or is to an unreasonable degree, or the sentence was imposed for an offense for which there is no applicable sentencing guideline and is plainly unreasonable, it shall state specific reasons for its conclusions and—</p><p><strong>(A)</strong> if it determines that the sentence is too high and the appeal has been filed under subsection (a), it shall set aside the sentence and remand the case for further sentencing proceedings with such instructions as the court considers appropriate, subject to subsection (g);</p><p><strong>(B)</strong> if it determines that the sentence is too low and the appeal has been filed under subsection (b), it shall set aside the sentence and remand the case for further sentencing proceedings with such instructions as the court considers appropriate, subject to subsection (g);</p><p><strong>(3)</strong> the sentence is not described in paragraph (1) or (2), it shall affirm the sentence.</p></blockquote><p><strong>(g) Sentencing upon remand.—</strong>A district court to which a case is remanded pursuant to subsection (f)(1) or (f)(2) shall resentence a defendant in accordance with section 3553 and with such instructions as may have been given by the court of appeals, except that—</p><blockquote><p><strong>(1)</strong> In determining the range referred to in subsection 3553(a)(4), the court shall apply the guidelines issued by the Sentencing Commission pursuant to section 994(a)(1) of title 28, United States Code, and that were in effect on the date of the previous sentencing of the defendant prior to the appeal, together with any amendments thereto by any act of Congress that was in effect on such date; and</p><p><strong>(2)</strong> The court shall not impose a sentence outside the applicable guidelines range except upon a ground that—</p><p><strong>(A)</strong> was specifically and affirmatively included in the written statement of reasons required by section 3553(c) in connection with the previous sentencing of the defendant prior to the appeal; and</p><p><strong>(B)</strong> was held by the court of appeals, in remanding the case, to be a permissible ground of departure.</p></blockquote><p><strong>(h) Application to a sentence by a magistrate.</strong>—An appeal of an otherwise final sentence imposed by a United States magistrate may be taken to a judge of the district court, and this section shall apply (except for the requirement of approval by the Attorney General or the Solicitor General in the case of a Government appeal) as though the appeal were to a court of appeals from a sentence imposed by a district court.</p><p><strong>(i) Guideline not expressed as a range.</strong>—For the purpose of this section, the term “guideline range” includes a guideline range having the same upper and lower limits.</p><p><strong>(j) Definitions.—</strong>For purposes of this section—</p><blockquote><p><strong>(1)</strong> a factor is a “permissible” ground of departure if it—</p><p><strong>(A)</strong> advances the objectives set forth in section 3553(a)(2); and</p><p><strong>(B)</strong> is authorized under section 3553(b); and</p><p><strong>(C)</strong> is justified by the facts of the case; and</p><p><strong>(2)</strong> a factor is an “impermissible” ground of departure if it is not a permissible factor within the meaning of subsection (j)(1).</p></blockquote><p>(Added Pub.L. 98–473, Title II, § 213(a), Oct. 12, 1984, 98 Stat. 2011, and amended Pub.L. 99–646, § 73(a), Nov. 10, 1986, 100 Stat. 3617; Pub.L. 100–182, §§ 4–6, Dec. 7, 1987, 101 Stat. 1266, 1267; Pub.L. 100–690, Title VII, § 7103(a), Nov. 18, 1988, 102 Stat. 4416, 4417; Pub.L. 101–647, Title XXXV, §§ 3501, 3503, Nov. 29, 1990, 104 Stat. 4921; Pub.L. 103–322, Title XXXIII, § 330002(k), Sept. 13, 1994, 108 Stat. 2140; Pub.L. 108–21, Title IV, § 401(d)–(f), Apr. 30, 2003, 117 Stat. 670, 671.)</p><p><strong>EDITORIAL NOTES</strong></p><p><strong>Unconstitutionality of Subsection (e).</strong> Mandatory aspect of subsection (e) of this section held unconstitutional by <em>United States v. Booker</em>, 543 U.S. 220, 125 S. Ct. 738 (2005).</p><p><strong>Change of Name of United States Magistrates.</strong> United States magistrates appointed under section 631 of the Title 28, Judiciary and Judicial Procedure, to be known as United States magistrate judge after Dec. 1, 1990, with any reference to any United States magistrate or magistrate contained in Title 28, in any other Federal statute, etc., deemed to refer to a United States magistrate judge appointed under section 631 of Title 28, see section 321 of Pub.L. 101–650.</p><p>* * *</p>\"},{\"id\":\"28U.S.C.§991\",\"content\":\"<p><strong>§ 991. United States Sentencing Commission; establishment and purposes</strong></p><p><strong>(a)</strong> There is established as an independent commission in the judicial branch of the United States a United States Sentencing Commission which shall consist of seven voting members and one nonvoting member. The President, after consultation with representatives of judges, prosecuting attorneys, defense attorneys, law enforcement officials, senior citizens, victims of crime, and others interested in the criminal justice process, shall appoint the voting members of the Commission, by and with the advice and consent of the Senate, one of whom shall be appointed, by and with the advice and consent of the Senate, as the Chair and three of whom shall be designated by the President as Vice Chairs. At least 3 of the members shall be Federal judges selected after considering a list of six judges recommended to the President by the Judicial Conference of the United States. Not more than four of the members of the Commission shall be members of the same political party, and of the three Vice Chairs, no more than two shall be members of the same political party. The Attorney General, or the Attorney General’s designee, shall be an ex officio, nonvoting member of the Commission. The Chair, Vice Chairs, and members of the Commission shall be subject to removal from the Commission by the President only for neglect of duty or malfeasance in office or for other good cause shown.</p><p><strong>(b)</strong> The purposes of the United States Sentencing Commission are to—</p><blockquote><p><strong>(1)</strong> establish sentencing policies and practices for the Federal criminal justice system that—</p><p><strong>(A)</strong> assure the meeting of the purposes of sentencing as set forth in section 3553(a)(2) of title 18, United States Code;</p><p><strong>(B)</strong> provide certainty and fairness in meeting the purposes of sentencing, avoiding unwarranted sentencing disparities among defendants with similar records who have been found guilty of similar criminal conduct while maintaining sufficient flexibility to permit individualized sentences when warranted by mitigating or aggravating factors not taken into account in the establishment of general sentencing practices; and</p><p><strong>(C)</strong> reflect, to the extent practicable, advancement in knowledge of human behavior as it relates to the criminal justice process; and</p><p><strong>(2)</strong> develop means of measuring the degree to which the sentencing, penal, and correctional practices are effective in meeting the purposes of sentencing as set forth in section 3553(a)(2) of title 18, United States Code.</p></blockquote><p>(Added Pub.L. 98–473, Title II, § 217(a), Oct. 12, 1984, 98 Stat. 2017, and amended Pub.L. 99–22, § 1(1), Apr. 15, 1985, 99 Stat. 46; Pub.L. 103–322, Title XXVIII, § 280005(a), (c)(1), (2), Sept. 13, 1994, 108 Stat. 2096, 2097; Pub.L. 104–294, Title VI, § 604(b)(11), Oct. 11, 1996, 110 Stat. 3507; Pub.L. 108–21, Title IV, § 401(n)(1), Apr. 30, 2003, 117 Stat. 676; Pub.L. 110–406, § 16, Oct. 13, 2008, 122 Stat. 4295.)</p>\"},{\"id\":\"28U.S.C.§992\",\"content\":\"<p><strong>§ 992. Terms of office; compensation</strong></p><p><strong>(a)</strong> The voting members of the United States Sentencing Commission shall be appointed for six‑year terms, except that the initial terms of the first members of the Commission shall be staggered so that—</p><blockquote><p><strong>(1)</strong> two members, including the Chair, serve terms of six years;</p><p><strong>(2)</strong> three members serve terms of four years; and</p><p><strong>(3)</strong> two members serve terms of two years.</p></blockquote><p><strong>(b)(1)</strong> Subject to paragraph (2)—</p><p><strong>(A)</strong> no voting member of the Commission may serve more than two full terms; and</p><blockquote><p><strong>(B)</strong> a voting member appointed to fill a vacancy that occurs before the expiration of the term for which a predecessor was appointed shall be appointed only for the remainder of such term.</p></blockquote><p><strong>(2)</strong> A voting member of the Commission whose term has expired may continue to serve until the earlier of—</p><blockquote><p><strong>(A)</strong> the date on which a successor has taken office; or</p><p><strong>(B)</strong> the date on which the Congress adjourns sine die to end the session of Congress that commences after the date on which the member’s term expired.</p></blockquote><p><strong>(c)</strong> The Chair and Vice Chairs of the Commission shall hold full-time positions and shall be compensated during their terms of office at the annual rate at which judges of the United States courts of appeals are compensated. The voting members of the Commission, other than the Chair and Vice Chair, shall hold full‑time positions until the end of the first six years after the sentencing guidelines go into effect pursuant to section 235(a)(1)(B)(ii) of the Sentencing Reform Act of 1984, and shall be compensated at the annual rate at which judges of the United States courts of appeals are compensated. Thereafter, the voting members of the commission, other than the Chair and Vice Chairs, shall hold part‑time positions and shall be paid at the daily rate at which judges of the United States courts of appeals are compensated. A Federal judge may serve as a member of the Commission without resigning the judge’s appointment as a Federal judge.</p><p><strong>(d)</strong> Sections 44(c) and 134(b) of this title (relating to the residence of judges) do not apply to any judge holding a full‑time position on the Commission under subsection (c) of this section.</p><p>(Added Pub.L. 98–473, Title II, § 217(a), Oct. 12, 1984, 98 Stat. 2018, and amended Pub.L. 99–646, §§ 4, 6(a), Nov. 10, 1986; 100 Stat. 3592; Pub.L. 102–349, § 1, Aug. 26, 1992, 106 Stat. 933; Pub.L. 103–322, Tittle XXVIII, § 280005(b), (c)(1), (3), Sept. 13, 1994, 108 Stat. 2096, 2097.)</p><p><strong>EDITORIAL NOTES</strong></p><p><strong>References in Text.</strong> Section 235(a)(1)(B)(ii) of the Sentencing Reform Act of 1984, referred to in subsec. (c), is section 235(a)(1)(B)(ii) of Pub.L. 98–473, which is set out as a note under section 3551 of Title 18, Crimes and Criminal Procedure.</p><p><strong>Commencement of Terms of First Members of Commission.</strong> For provisions directing that, for purposes of subsec. (a) of this section, the terms of the first members of the United States Sentencing Commission shall not begin to run until the sentencing guidelines go into effect pursuant to section 235(a)(1)(B)(ii) of Pub.L. 98–473, set out as a note under section 994 of this title, see section 235(a)(2) of Pub.L. 98–473, set out as a note under section 3551 of Title 18, Crimes and Criminal Procedure.</p>\"},{\"id\":\"28U.S.C.§993\",\"content\":\"<p><strong>§ 993. Powers and duties of Chair</strong></p><p>The Chair shall—</p><blockquote><p><strong>(a)</strong> call and preside at meetings of the Commission, which shall be held for at least two weeks in each quarter after the members of the Commission hold part‑time positions; and</p><p><strong>(b)</strong> direct—</p><p><strong>(1)</strong> the preparation of requests for appropriations for the Commission; and</p><p><strong>(2)</strong> the use of funds made available to the Commission.</p></blockquote><p>(Added Pub.L. 98–473, Title II, § 217(a), Oct. 12, 1984, 98 Stat. 2019, and amended Pub.L. 99–22, § 1(2), Apr. 15, 1985, 99 Stat. 46; Pub.L. 99–646, § 5, Nov. 10, 1986, 100 Stat. 3592; Pub.L. 103–322, Title XXVIII, § 280005(c)(1), Sept. 13, 1994, 108 Stat. 2097.)</p>\"},{\"id\":\"28U.S.C.§994\",\"content\":\"<p><strong>§ 994. Duties of the Commission</strong></p><p><strong>(a)</strong> The Commission, by affirmative vote of at least four members of the Commission, and pursuant to its rules and regulations and consistent with all pertinent provisions of any Federal statute shall promulgate and distribute to all courts of the United States and to the United States Probation System—</p><blockquote><p><strong>(1)</strong> guidelines, as described in this section, for use of a sentencing court in determining the sentence to be imposed in a criminal case, including—</p><p><strong>(A)</strong> a determination whether to impose a sentence to probation, a fine, or a term of imprisonment;</p><p><strong>(B)</strong> a determination as to the appropriate amount of a fine or the appropriate length of a term of probation or a term of imprisonment;</p><p><strong>(C)</strong> a determination whether a sentence to a term of imprisonment should include a requirement that the defendant be placed on a term of supervised release after imprisonment, and, if so, the appropriate length of such a term;</p><p><strong>(D)</strong> a determination whether multiple sentences to terms of imprisonment should be ordered to run concurrently or consecutively; and</p><p><strong>(E)</strong> a determination under paragraphs (6) and (11) of section 3563(b) of title 18;</p><p><strong>(2)</strong> general policy statements regarding application of the guidelines or any other aspect of sentencing or sentence implementation that in the view of the Commission would further the purposes set forth in section 3553(a)(2) of title 18, United States Code, including the appropriate use of—</p><p><strong>(A)</strong> the sanctions set forth in sections 3554, 3555, and 3556 of title 18;</p><p><strong>(B)</strong> the conditions of probation and supervised release set forth in sections 3563(b) and 3583(d) of title 18;</p><p><strong>(C)</strong> the sentence modification provisions set forth in sections 3563(c), 3564, 3573, and 3582(c) of title 18;</p><p><strong>(D)</strong> the fine imposition provisions set forth in section 3572 of title 18;</p><p><strong>(E)</strong> the authority granted under rule 11(e)(2) of the Federal Rules of Criminal Procedure to accept or reject a plea agreement entered into pursuant to rule 11(e)(1); and</p><p><strong>(F)</strong> the temporary release provisions set forth in section 3622 of title 18, and the prerelease custody provisions set forth in section 3624(c) of title 18; and</p><p><strong>(3)</strong> guidelines or general policy statements regarding the appropriate use of the provisions for revocation of probation set forth in section 3565 of title 18, and the provisions for modification of the term or conditions of supervised release and revocation of supervised release set forth in section 3583(e) of title 18.</p></blockquote><p><strong>(b)(1)</strong> The Commission, in the guidelines promulgated pursuant to subsection (a)(1), shall, for each category of offense involving each category of defendant, establish a sentencing range that is consistent with all pertinent provisions of title 18, United States Code.</p><p><strong>(2)</strong> If a sentence specified by the guidelines includes a term of imprisonment, the maximum of the range established for such a term shall not exceed the minimum of that range by more than the greater of 25 percent or 6 months, except that, if the minimum term of the range is 30 years or more, the maximum may be life imprisonment.</p><p><strong>(c)</strong> The Commission, in establishing categories of offenses for use in the guidelines and policy statements governing the imposition of sentences of probation, a fine, or imprisonment, governing the imposition of other authorized sanctions, governing the size of a fine or the length of a term of probation, imprisonment, or supervised release, and governing the conditions of probation, supervised release, or imprisonment, shall consider whether the following matters, among others, have any relevance to the nature, extent, place of service, or other incidents of an appropriate sentence, and shall take them into account only to the extent that they do have relevance—</p><blockquote><p><strong>(1)</strong> the grade of the offense;</p><p><strong>(2)</strong> the circumstances under which the offense was committed which mitigate or aggravate the seriousness of the offense;</p><p><strong>(3)</strong> the nature and degree of the harm caused by the offense, including whether it involved property, irreplaceable property, a person, a number of persons, or a breach of public trust;</p><p><strong>(4)</strong> the community view of the gravity of the offense;</p><p><strong>(5)</strong> the public concern generated by the offense;</p><p><strong>(6)</strong> the deterrent effect a particular sentence may have on the commission of the offense by others; and</p><p><strong>(7)</strong> the current incidence of the offense in the community and in the Nation as a whole.</p></blockquote><p><strong>(d)</strong> The Commission in establishing categories of defendants for use in the guidelines and policy statements governing the imposition of sentences of probation, a fine, or imprisonment, governing the imposition of other authorized sanctions, governing the size of a fine or the length of a term of probation, imprisonment, or supervised release, and governing the conditions of probation, supervised release, or imprisonment, shall consider whether the following matters, among others with respect to a defendant, have any relevance to the nature, extent, place of service, or other incidents of an appropriate sentence, and shall take them into account only to the extent that they do have relevance—</p><blockquote><p><strong>(1)</strong> age;</p><p><strong>(2)</strong> education;</p><p><strong>(3)</strong> vocational skills;</p><p><strong>(4)</strong> mental and emotional condition to the extent that such condition mitigates the defendant’s culpability or to the extent that such condition is otherwise plainly relevant;</p><p><strong>(5)</strong> physical condition, including drug dependence;</p><p><strong>(6)</strong> previous employment record;</p><p><strong>(7)</strong> family ties and responsibilities;</p><p><strong>(8)</strong> community ties;</p><p><strong>(9)</strong> role in the offense;</p><p><strong>(10)</strong> criminal history; and</p><p><strong>(11)</strong> degree of dependence upon criminal activity for a livelihood.</p></blockquote><p>The Commission shall assure that the guidelines and policy statements are entirely neutral as to the race, sex, national origin, creed, and socioeconomic status of offenders.</p><p><strong>(e)</strong> The Commission shall assure that the guidelines and policy statements, in recommending a term of imprisonment or length of a term of imprisonment, reflect the general inappropriateness of considering the education, vocational skills, employment record, family ties and responsibilities, and community ties of the defendant.</p><p><strong>(f)</strong> The Commission, in promulgating guidelines pursuant to subsection (a)(1), shall promote the purposes set forth in section 991(b)(1), with particular attention to the requirements of subsection 991(b)(1)(B) for providing certainty and fairness in sentencing and reducing unwarranted sentence disparities.</p><p><strong>(g)</strong> The Commission, in promulgating guidelines pursuant to subsection (a)(1) to meet the purposes of sentencing as set forth in section 3553(a)(2) of title 18, United States Code, shall take into account the nature and capacity of the penal, correctional, and other facilities and services available, and shall make recommendations concerning any change or expansion in the nature or capacity of such facilities and services that might become necessary as a result of the guidelines promulgated pursuant to the provisions of this chapter. The sentencing guidelines prescribed under this chapter shall be formulated to minimize the likelihood that the Federal prison population will exceed the capacity of the Federal prisons, as determined by the Commission.</p><p><strong>(h)</strong> The Commission shall assure that the guidelines specify a sentence to a term of imprisonment at or near the maximum term authorized for categories of defendants in which the defendant is eighteen years old or older and—</p><blockquote><p><strong>(1)</strong> has been convicted of a felony that is—</p><p><strong>(A)</strong> a crime of violence; or</p><p><strong>(B)</strong> an offense described in section 401 of the Controlled Substances Act (21 U.S.C. 841), sections 1002(a), 1005, and 1009 of the Controlled Substances Import and Export Act (21 U.S.C. 952(a), 955, and 959), and chapter 705 of title 46; and</p><p><strong>(2)</strong> has previously been convicted of two or more prior felonies, each of which is—</p><p><strong>(A)</strong> a crime of violence; or</p><p><strong>(B)</strong> an offense described in section 401 of the Controlled Substances Act (21 U.S.C. 841), sections 1002(a), 1005, and 1009 of the Controlled Substances Import and Export Act (21 U.S.C. 952(a), 955, and 959), and chapter 705 of title 46.</p></blockquote><p><strong>(i)</strong> The Commission shall assure that the guidelines specify a sentence to a substantial term of imprisonment for categories of defendants in which the defendant—</p><blockquote><p><strong>(1)</strong> has a history of two or more prior Federal, State, or local felony convictions for offenses committed on different occasions;</p><p><strong>(2)</strong> committed the offense as part of a pattern of criminal conduct from which the defendant derived a substantial portion of the defendant’s income;</p><p><strong>(3)</strong> committed the offense in furtherance of a conspiracy with three or more persons engaging in a pattern of racketeering activity in which the defendant participated in a managerial or supervisory capacity;</p><p><strong>(4)</strong> committed a crime of violence that constitutes a felony while on release pending trial, sentence, or appeal from a Federal, State, or local felony for which he was ultimately convicted; or</p><p><strong>(5)</strong> committed a felony that is set forth in section 401 or 1010 of the Comprehensive Drug Abuse Prevention and Control Act of 1970 (21 U.S.C. 841 and 960), and that involved trafficking in a substantial quantity of a controlled substance.</p></blockquote><p><strong>(j)</strong> The Commission shall insure that the guidelines reflect the general appropriateness of imposing a sentence other than imprisonment in cases in which the defendant is a first offender who has not been convicted of a crime of violence or an otherwise serious offense, and the general appropriateness of imposing a term of imprisonment on a person convicted of a crime of violence that results in serious bodily injury.</p><p><strong>(k)</strong> The Commission shall insure that the guidelines reflect the inappropriateness of imposing a sentence to a term of imprisonment for the purpose of rehabilitating the defendant or providing the defendant with needed educational or vocational training, medical care, or other correctional treatment.</p><p><strong>(l)</strong> The Commission shall insure that the guidelines promulgated pursuant to subsection (a)(1) reflect—</p><blockquote><p><strong>(1)</strong> the appropriateness of imposing an incremental penalty for each offense in a case in which a defendant is convicted of—</p><p><strong>(A)</strong> multiple offenses committed in the same course of conduct that result in the exercise of ancillary jurisdiction over one or more of the offenses; and</p><p><strong>(B)</strong> multiple offenses committed at different times, including those cases in which the subsequent offense is a violation of section 3146 (penalty for failure to appear) or is committed while the person is released pursuant to the provisions of section 3147 (penalty for an offense committed while on release) of title 18; and</p><p><strong>(2)</strong> the general inappropriateness of imposing consecutive terms of imprisonment for an offense of conspiring to commit an offense or soliciting commission of an offense and for an offense that was the sole object of the conspiracy or solicitation.</p></blockquote><p><strong>(m)</strong> The Commission shall insure that the guidelines reflect the fact that, in many cases, current sentences do not accurately reflect the seriousness of the offense. This will require that, as a starting point in its development of the initial sets of guidelines for particular categories of cases, the Commission ascertain the average sentences imposed in such categories of cases prior to the creation of the Commission, and in cases involving sentences to terms of imprisonment, the length of such terms actually served. The Commission shall not be bound by such average sentences, and shall independently develop a sentencing range that is consistent with the purposes of sentencing described in section 3553(a)(2) of Title 18, United States Code.</p><p><strong>(n)</strong> The Commission shall assure that the guidelines reflect the general appropriateness of imposing a lower sentence than would otherwise be imposed, including a sentence that is lower than that established by statute as a minimum sentence, to take into account a defendant’s substantial assistance in the investigation or prosecution of another person who has committed an offense.</p><p><strong>(o)</strong> The Commission periodically shall review and revise, in consideration of comments and data coming to its attention, the guidelines promulgated pursuant to the provisions of this section. In fulfilling its duties and in exercising its powers, the Commission shall consult with authorities on, and individual and institutional representatives of, various aspects of the Federal criminal justice system. The United States Probation System, the Bureau of Prisons, the Judicial Conference of the United States, the Criminal Division of the United States Department of Justice, and a representative of the Federal Public Defenders shall submit to the Commission any observations, comments, or questions pertinent to the work of the Commission whenever they believe such communication would be useful, and shall, at least annually, submit to the Commission a written report commenting on the operation of the Commission’s guidelines, suggesting changes in the guidelines that appear to be warranted, and otherwise assessing the Commission’s work.</p><p><strong>(p)</strong> The Commission, at or after the beginning of a regular session of Congress, but not later than the first day of May, may promulgate under subsection (a) of this section and submit to Congress amendments to the guidelines and modifications to previously submitted amendments that have not taken effect, including modifications to the effective dates of such amendments. Such an amendment or modification shall be accompanied by a statement of the reasons therefor and shall take effect on a date specified by the Commission, which shall be no earlier than 180 days after being so submitted and no later than the first day of November of the calendar year in which the amendment or modification is submitted, except to the extent that the effective date is revised or the amendment is otherwise modified or disapproved by Act of Congress.</p><p><strong>(q)</strong> The Commission and the Bureau of Prisons shall submit to Congress an analysis and recommendations concerning maximum utilization of resources to deal effectively with the Federal prison population. Such report shall be based upon consideration of a variety of alternatives, including—</p><blockquote><p><strong>(1)</strong> modernization of existing facilities;</p><p><strong>(2)</strong> inmate classification and periodic review of such classification for use in placing inmates in the least restrictive facility necessary to ensure adequate security; and</p><p><strong>(3)</strong> use of existing Federal facilities, such as those currently within military jurisdiction.</p></blockquote><p><strong>(r)</strong> The Commission, not later than two years after the initial set of sentencing guidelines promulgated under subsection (a) goes into effect, and thereafter whenever it finds it advisable, shall recommend to the Congress that it raise or lower the grades, or otherwise modify the maximum penalties, of those offenses for which such an adjustment appears appropriate.</p><p><strong>(s)</strong> The Commission shall give due consideration to any petition filed by a defendant requesting modification of the guidelines utilized in the sentencing of such defendant, on the basis of changed circumstances unrelated to the defendant, including changes in—</p><blockquote><p><strong>(1)</strong> the community view of the gravity of the offense;</p><p><strong>(2)</strong> the public concern generated by the offense; and</p><p><strong>(3)</strong> the deterrent effect particular sentences may have on the commission of the offense by others.</p></blockquote><p><strong>(t)</strong> The Commission, in promulgating general policy statements regarding the sentencing modification provisions in section 3582(c)(1)(A) of title 18, shall describe what should be considered extraordinary and compelling reasons for sentence reduction, including the criteria to be applied and a list of specific examples. Rehabilitation of the defendant alone shall not be considered an extraordinary and compelling reason.</p><p><strong>(u)</strong> If the Commission reduces the term of imprisonment recommended in the guidelines applicable to a particular offense or category of offenses, it shall specify in what circumstances and by what amount the sentences of prisoners serving terms of imprisonment for the offense may be reduced.</p><p><strong>(v)</strong> The Commission shall ensure that the general policy statements promulgated pursuant to subsection (a)(2) include a policy limiting consecutive terms of imprisonment for an offense involving a violation of a general prohibition and for an offense involving a violation of a specific prohibition encompassed within the general prohibition.</p><p><strong>(w)(1)</strong> The Chief Judge of each district court shall ensure that, within 30 days following entry of judgment in every criminal case, the sentencing court submits to the Commission, in a format approved and required by the Commission, a written report of the sentence, the offense for which it is imposed, the age, race, sex of the offender, and information regarding factors made relevant by the guidelines. The report shall also include—</p><blockquote><p><strong>(A)</strong> the judgment and commitment order;</p><p><strong>(B)</strong> the written statement of reasons for the sentence imposed (which shall include the reason for any departure from the otherwise applicable guideline range and which shall be stated on the written statement of reasons form issued by the Judicial Conference and approved by the United States Sentencing Commission);</p><p><strong>(C)</strong> any plea agreement;</p><p><strong>(D)</strong> the indictment or other charging document;</p><p><strong>(E)</strong> the presentence report; and</p><p><strong>(F)</strong> any other information as the Commission finds appropriate.</p></blockquote><p>The information referred to in subparagraphs (A) through (F) shall be submitted by the sentencing court in a format approved and required by the Commission.</p><p><strong>(2)</strong> The Commission shall, upon request, make available to the House and Senate Committees on the Judiciary, the written reports and all underlying records accompanying those reports described in this section, as well as other records received from courts.</p><p><strong>(3)</strong> The Commission shall submit to Congress at least annually an analysis of these documents, any recommendations for legislation that the Commission concludes is warranted by that analysis, and an accounting of those districts that the Commission believes have not submitted the appropriate information and documents required by this section.</p><p><strong>(4)</strong> The Commission shall make available to the Attorney General, upon request, such data files as the Commission itself may assemble or maintain in electronic form as a result of the information submitted under paragraph (1). Such data files shall be made available in electronic form and shall include all data fields requested, including the identity of the sentencing judge.</p><p><strong>(x)</strong> The provisions of section 553 of title 5, relating to publication in the Federal Register and public hearing procedure, shall apply to the promulgation of guidelines pursuant to this section.</p><p><strong>(y)</strong> The Commission, in promulgating guidelines pursuant to subsection (a)(1), may include, as a component of a fine, the expected costs to the Government of any imprisonment, supervised release, or probation sentence that is ordered.</p><p>(Added Pub.L. 98–473, Title II, § 217(a), Oct. 12, 1984, 98 Stat. 2019, and amended Pub.L. 99–217, § 3, Dec. 26, 1985, 99 Stat. 1728; Pub.L. 99–363, § 2, July 11, 1986, 100 Stat. 770; Pub.L. 99–570, Title I, §§ 1006(b), 1008, Oct. 27, 1986, 100 Stat. 3214; Pub.L. 99–646, §§ 6(b), 56, Nov. 10, 1986, 100 Stat. 3592, 3611; Pub.L. 100–182, §§ 16(b), 23, Dec. 7, 1987, 101 Stat. 1269, 1271; Pub.L. 100–690, Title VII, §§ 7083, 7103(b), 7109, Nov. 18, 1988, 102 Stat. 4408, 4418, 4419; Pub.L. 103–322, Title II § 20403(b) Title XXVII, § 280005(c)(4), Title XXXIII, § 330003(f)(1), Sept. 13, 1994, 108 Stat. 1825, 2097, 2141; Pub.L. 108–21, Title IV, § 401(h), (k), Apr. 30, 2003, 117 Stat. 672, 674; Pub.L. 109–177, Title VII, § 735, March 9, 2006, 120 Stat. 192, 271; Pub.L. 109–304, § 17(f)(1), Oct. 6, 2006, 120 Stat. 1708.)</p><p><strong>EDITORIAL NOTES</strong></p><p><strong>Codification.</strong> Amendment by Pub.L. 99–646 to subsec. (t) of this section has been executed to subsec. (u) as the probable intent of Congress in view of redesignation of subsec. (t) as (u) by Pub.L. 99–570.</p><p><strong>Emergency Guidelines Promulgation Authority.</strong> Pub.L. 100–182, § 21, Dec. 7, 1987, 101 Stat. 1271, provided that:</p><p>“<strong>Sec. 21. Emergency Guidelines Promulgation Authority.</strong></p><blockquote><p><strong>(a) In General.</strong>—In the case of—</p><p><strong>(1)</strong> an invalidated sentencing guideline;</p><p><strong>(2)</strong> the creation of a new offense or amendment of an existing offense; or</p><p><strong>(3)</strong> any other reason relating to the application of a previously established sentencing guideline, and determined by the United States Sentencing Commission to be urgent and compelling;</p></blockquote><p>the Commission, by affirmative vote of at least four members of the Commission, and pursuant to its rules and regulations and consistent with all pertinent provisions of title 28 and title 18, United States Code, shall promulgate and distribute to all courts of the United States and to the United States Probation System a temporary guideline or amendment to an existing guideline, to remain in effect until and during the pendency of the next report to Congress under section 994(p) of title 28, United States Code.</p><p><strong>(b) Expiration of Authority.</strong>—The authority of the Commission under paragraphs (1) and (2) of subsection (a) shall expire on November 1, 1989. The authority of the Commission to promulgate and distribute guidelines under paragraph (3) of subsection (a) shall expire on May 1, 1988.”</p><p><strong>Initial Sentencing Guidelines.</strong> For provisions directing that the United States Sentencing Commission submit to Congress within 30 months of Oct. 12, 1984, the initial sentencing guidelines promulgated pursuant to subsec. (a)(1) of this section, see section 235(a)(1)(B)(i) of Pub.L. 98–473, as amended, set out as a note under section 3551 of Title 18, Crimes and Criminal Procedure.</p><p><strong>Effective Date of Sentencing Guidelines.</strong> For provisions directing that the sentencing guidelines promulgated pursuant to subsec. (a)(1) of this section not go into effect until—</p><blockquote><p><strong>(I)</strong> the United States Sentencing Commission has submitted the initial set of sentencing guidelines to the Congress, along with a report stating the reasons for the Commission’s recommendations;</p><p><strong>(II)</strong> the General Accounting Office has undertaken a study of the guidelines, and their potential impact in comparison with the operation of the existing sentencing and parole release system, and has, within one hundred and fifty days of submission of the guidelines, reported to the Congress the results of its study; and</p><p><strong>(III)</strong> the day after the Congress has had six months after the date described in subclause (I) in which to examine the guidelines and consider the reports, and</p><p><strong>(IV)</strong> certain other provisions take effect,</p></blockquote><p>see section 235(a)(1)(B)(ii) of Pub.L. 98–473, as amended, set out as a note under section 3551 of Title 18, Crimes and Criminal Procedure.</p><p><strong>General Accounting Office Study of Impact and Operation of Sentencing Guideline System.</strong> Pub.L. 98–473, Title II, § 236, Oct. 12, 1984, 98 Stat. 2033, provided that:</p><p>“<strong>(a)(1)</strong> Four years after the sentencing guidelines promulgated pursuant to section 994(a)(1), and the provisions of section 3581, 3583, and 3624 of title 18, United States Code, go into effect, the General Accounting Office shall undertake a study of the guidelines in order to determine their impact and compare the guideline system with the operation of the previous sentencing and parole release system, and within six months of the undertaking of such study, report to the Congress the results of its study.</p><p><strong>(2)</strong> Within one month of the start of the study required under subsection (a), the United States Sentencing Commission shall submit a report to the General Accounting Office, all appropriate courts, the Department of Justice, and the Congress detailing the operation of the sentencing guideline system and discussing any problems with the system or reforms needed. The report shall include an evaluation of the impact of the sentencing guidelines on prosecutorial discretion, plea bargaining, disparities in sentencing, and the use of incarceration, and shall be issued by affirmative vote of a majority of the voting members of the Commission.</p><p><strong>(b)</strong> The Congress shall review the study submitted pursuant to subsection (a) in order to determine—</p><blockquote><p><strong>(1)</strong> whether the sentencing guideline system has been effective;</p><p><strong>(2)</strong> whether any changes should be made in the sentencing guideline system; and</p><p><strong>(3)</strong> whether the parole system should be reinstated in some form and the life of the Parole Commission extended.”</p></blockquote>\"},{\"id\":\"28U.S.C.§995\",\"content\":\"<p><strong>§ 995. Powers of the Commission</strong></p><p><strong>(a)</strong> The Commission, by vote of a majority of the members present and voting, shall have the power to—</p><blockquote><p><strong>(1)</strong> establish general policies and promulgate such rules and regulations for the Commission as are necessary to carry out the purposes of this chapter;</p><p><strong>(2)</strong> appoint and fix the salary and duties of the Staff Director of the Sentencing Commission, who shall serve at the discretion of the Commission and who shall be compensated at a rate not to exceed the highest rate now or hereafter prescribed for Level 6 of the Senior Executive Service Schedule (5 U.S.C. 5382);</p><p><strong>(3)</strong> deny, revise, or ratify any request for regular, supplemental, or deficiency appropriations prior to any submission of such request to the Office of Management and Budget by the Chair;</p><p><strong>(4)</strong> procure for the Commission temporary and intermittent services to the same extent as is authorized by section 3109(b) of title 5, United States Code;</p><p><strong>(5)</strong> utilize, with their consent, the services, equipment, personnel, information, and facilities of other Federal, State, local, and private agencies and instrumentalities with or without reimbursement therefor;</p><p><strong>(6)</strong> without regard to 31 U.S.C. 3324, enter into and perform such contracts, leases, cooperative agreements, and other transactions as may be necessary in the conduct of the functions of the Commission, with any public agency, or with any person, firm, association, corporation, educational institution, or nonprofit organization;</p><p><strong>(7)</strong> accept and employ, in carrying out the provisions of this title, voluntary and uncompensated services, notwithstanding the provisions of 31 U.S.C. 1342, however, individuals providing such services shall not be considered Federal employees except for purposes of chapter 81 of title 5, United States Code, with respect to job‑incurred disability and title 28, United States Code, with respect to tort claims;</p><p><strong>(8)</strong> request such information, data, and reports from any Federal agency or judicial officer as the Commission may from time to time require and as may be produced consistent with other law;</p><p><strong>(9)</strong> monitor the performance of probation officers with regard to sentencing recommendations, including application of the Sentencing Commission guidelines and policy statements;</p><p><strong>(10)</strong> issue instructions to probation officers concerning the application of Commission guidelines and policy statements;</p><p><strong>(11)</strong> arrange with the head of any other Federal agency for the performance by such agency of any function of the Commission, with or without reimbursement;</p><p><strong>(12)</strong> establish a research and development program within the Commission for the purpose of—</p><p><strong>(A)</strong> serving as a clearinghouse and information center for the collection, preparation, and dissemination of information on Federal sentencing practices; and</p><p><strong>(B)</strong> assisting and serving in a consulting capacity to Federal courts, departments, and agencies in the development, maintenance, and coordination of sound sentencing practices;</p><p><strong>(13)</strong> collect systematically the data obtained from studies, research, and the empirical experience of public and private agencies concerning the sentencing process;</p><p><strong>(14)</strong> publish data concerning the sentencing process;</p><p><strong>(15)</strong> collect systematically and disseminate information concerning sentences actually imposed, and the relationship of such sentences to the factors set forth in section 3553(a) of title 18, United States Code;</p><p><strong>(16)</strong> collect systematically and disseminate information regarding effectiveness of sentences imposed;</p><p><strong>(17)</strong> devise and conduct, in various geographical locations, seminars and workshops providing continuing studies for persons engaged in the sentencing field;</p><p><strong>(18)</strong> devise and conduct periodic training programs of instruction in sentencing techniques for judicial and probation personnel and other persons connected with the sentencing process;</p><p><strong>(19)</strong> study the feasibility of developing guidelines for the disposition of juvenile delinquents;</p><p><strong>(20)</strong> make recommendations to Congress concerning modification or enactment of statutes relating to sentencing, penal, and correctional matters that the Commission finds to be necessary and advisable to carry out an effective, humane and rational sentencing policy;</p><p><strong>(21)</strong> hold hearings and call witnesses that might assist the Commission in the exercise of its powers or duties;</p><p><strong>(22)</strong> perform such other functions as are required to permit Federal courts to meet their responsibilities under section 3553(a) of title 18, United States Code, and to permit others involved in the Federal criminal justice system to meet their related responsibilities;</p><p><strong>(23)</strong> retain private attorneys to provide legal advice to the Commission in the conduct of its work, or to appear for or represent the Commission in any case in which the Commission is authorized by law to represent itself, or in which the Commission is representing itself with the consent of the Department of Justice; and the Commission may in its discretion pay reasonable attorney’s fees to private attorneys employed by it out of its appropriated funds. When serving as officers or employees of the United States, such private attorneys shall be considered special government employees as defined in section 202(a) of title 18; and</p><p><strong>(24)</strong> grant incentive awards to its employees pursuant to chapter 45 of title 5, United States Code.</p></blockquote><p><strong>(b)</strong> The Commission shall have such other powers and duties and shall perform such other functions as may be necessary to carry out the purposes of this chapter, and may delegate to any member or designated person such powers as may be appropriate other than the power to establish general policy statements and guidelines pursuant to section 994(a)(1) and (2), the issuance of general policies and promulgation of rules and regulations pursuant to subsection (a)(1) of this section, and the decisions as to the factors to be considered in establishment of categories of offenses and offenders pursuant to section 994(b). The Commission shall, with respect to its activities under subsections (a)(9), (a)(10), (a)(11), (a)(12), (a)(13), (a)(14), (a)(15), (a)(16), (a)(17), and (a)(18), to the extent practicable, utilize existing resources of the Administrative Office of the United States Courts and the Federal Judicial Center for the purpose of avoiding unnecessary duplication.</p><p><strong>(c)</strong> Upon the request of the Commission, each Federal agency is authorized and directed to make its services, equipment, personnel, facilities, and information available to the greatest practicable extent to the Commission in the execution of its functions.</p><p><strong>(d)</strong> A simple majority of the membership then serving shall constitute a quorum for the conduct of business. Other than for the promulgation of guidelines and policy statements pursuant to section 994, the Commission may exercise its powers and fulfill its duties by the vote of a simple majority of the members present.</p><p><strong>(e)</strong> Except as otherwise provided by law, the Commission shall maintain and make available for public inspection a record of the final vote of each member on any action taken by it.</p><p><strong>(f)</strong> The Commission may—</p><blockquote><p><strong>(1)</strong> use available funds to enter into contracts for the acquisition of severable services for a period that begins in 1 fiscal year and ends in the next fiscal year, to the same extent as executive agencies may enter into such contracts under the authority of section 303L of the Federal Property and Administrative Services Act of 1949 (41 U.S.C. 253l);</p><p><strong>(2)</strong> enter into multi-year contracts for the acquisition of property or services to the same extent as executive agencies may enter into such contracts under the authority of section 304B of the Federal Property and Administrative Services Act of 1949 (41 U.S.C. 254c); and</p><p><strong>(3)</strong> make advance, partial, progress, or other payments under contracts for property or services to the same extent as executive agencies may make such payments under the authority of section 305 of the Federal Property and Administrative Services Act of 1949 (41 U.S.C. 255).</p></blockquote><p>(Added Pub.L. 98–473, Title II, § 217(a), Oct. 12, 1984, 98 Stat. 2024; amended Pub.L. 100–690, Title VII, §§ 7104, 7105, 7106(b), Nov. 18, 1988, 102 Stat. 4418; Pub.L. 101–650, Title III, § 325(b)(5), Dec. 1, 1990, 104 Stat. 5121; Pub.L. 103–322, Title XXVIII, § 280005(c)(1), Sept. 13, 1994, 108 Stat. 2097; Pub.L. 110–177, Title V, § 501(a), Jan. 7, 2008, 121 Stat. 2541.)</p><p><strong>EDITORIAL NOTES</strong></p><p><strong>References in Text.</strong> The provisions of title 28, United States Code, with respect to tort claims, referred to in subsec. (a)(7), are classified generally to section 1346(b) and chapter 171 (section 2671 et seq.) of this title.</p><p><strong>Sunset Provision.</strong> Pub.L. 110–177, Title V, § 501(b), Jan. 7, 2008, 121 Stat. 2542, provided that: “The amendment made by subsection (a) [enacting subsec. (f) of this section] shall cease to have force and effect on September 30, 2010.”.</p>\"},{\"id\":\"28U.S.C.§996\",\"content\":\"<p><strong>§ 996. Director and staff</strong></p><p><strong>(a)</strong> The Staff Director shall supervise the activities of persons employed by the Commission and perform other duties assigned to the Staff Director by the Commission.</p><p><strong>(b)</strong> The Staff Director shall, subject to the approval of the Commission, appoint such officers and employees as are necessary in the execution of the functions of the Commission. The officers and employees of the Commission shall be exempt from the provisions of part III of title 5 except the following: chapters 45 (Incentive Awards), 63 (Leave), 81 (Compensation for Work Injuries), 83 (Retirement), 85 (Unemployment Compensation), 87 (Life Insurance), and 89 (Health Insurance), and subchapter VI of chapter 55 (Payment for accumulated and accrued leave).</p><p>(Added Pub.L. 98–473, Title II, § 217(a), Oct. 12, 1984, 98 Stat. 2026, and amended Pub.L. 100–690, Title VII, § 7106(c), Nov. 18, 1988, 102 Stat. 4418; Pub.L. 101–650, Title III, § 325(b)(6), Dec. 1, 1990, 104 Stat. 5121; Pub.L. 103–322, Title XXVIII, § 280005(c)(5), Sept. 13, 1994, 108 Stat. 2097; Pub.L. 106–518, Title III, § 302(a), Nov. 13, 2000, 114 Stat. 2416.)</p><p><strong>EDITORIAL NOTES</strong></p><p><strong>Accrued or Accumulated Leave.</strong> Pub. L. 106–518, § 302(b), Nov. 13, 2000, 114 Stat. 2417, provided that: “Any leave that an individual accrued or accumulated (or that otherwise became available to such individual) under the leave system of the United States Sentencing Commission and that remains unused as of the date of the enactment of this Act shall, on and after such date, be treated as leave accrued or accumulated (or that otherwise became available to such individual) under chapter 63 of title 5, United States Code.”</p>\"},{\"id\":\"28U.S.C.§997\",\"content\":\"<p><strong>§ 997. Annual report</strong></p><p>The Commission shall report annually to the Judicial Conference of the United States, the Congress, and the President of the United States on the activities of the Commission.</p><p>(Added Pub.L. 98–473, Title II, § 217(a), Oct. 12, 1984, 98 Stat. 2026.)</p>\"},{\"id\":\"28U.S.C.§998\",\"content\":\"<p><strong>§ 998. Definitions</strong></p><p>As used in this chapter—</p><blockquote><p><strong>(a)</strong> “Commission” means the United States Sentencing Commission;</p><p><strong>(b)</strong> “Commissioner” means a member of the United States Sentencing Commission;</p><p><strong>(c)</strong> “guidelines” means the guidelines promulgated by the Commission pursuant to section 994(a) of this title; and</p><p><strong>(d)</strong> “rules and regulations” means rules and regulations promulgated by the Commission pursuant to section 995 of this title.</p></blockquote><p>(Added Pub.L. 98–473, Title II, § 217(a), Oct. 12, 1984, 98 Stat. 2026.)</p>\"},{\"id\":\"PUB.L.100–690\",\"content\":\"<p><strong>ANTI DRUG ABUSE ACT OF 1988</strong></p><p><strong>(PUB. L. 100–690)</strong></p><p><strong>IMPORTATION OF CONTROLLED SUBSTANCES BY AIRCRAFT AND OTHER VESSELS.</strong> Pub.L. 100–690, Title VI, § 6453, Nov. 18, 1988, 102 Stat. 4371, provided:</p><p>“<strong>Sec. 6453. Penalties for Importation by Aircraft and Other Vessels.</strong></p><p><strong>(a) In General.</strong>—Pursuant to its authority under section 994(p) of title 28, United States Code, and section 21 of the Sentencing Act of 1987 [28 U.S.C. 994 note], the United States Sentencing Commission shall promulgate guidelines, or shall amend existing guidelines, to provide that a defendant convicted of violating section 1010(a) of the Controlled Substances Import and Export Act (21 U.S.C. 960(a)) under circumstances in which—</p><blockquote><p><strong>(1)</strong> an aircraft other than a regularly scheduled commercial air carrier was used to import the controlled substance; or</p><p><strong>(2)</strong> the defendant acted as a pilot, copilot, captain, navigator, flight officer, or any other operation officer aboard any craft of vessel carrying a controlled substance,</p></blockquote><p>shall be assigned an offense level under chapter 2 of the sentencing guidelines that is—</p><blockquote><p><strong>(A)</strong> two levels greater than the level that would have been assigned had the offense not been committed under circumstances set forth in (A) or (B) above; and</p><p><strong>(B)</strong> in no event less than level 26.</p></blockquote><p><strong>(b) Effect of Amendment.</strong>—If the sentencing guidelines are amended after the effective date of this section [probably means date of enactment of this section, Nov. 18, 1988], the Sentencing Commission shall implement the instruction set forth in subsection (a) so as to achieve a comparable result.”</p><p><strong>CONTROLLED SUBSTANCE OFFENSES INVOLVING CHILDREN.</strong> Pub.L. 100–690, Title VI, § 6454, Nov. 18, 1988, 102 Stat. 4372, provided:</p><p>“<strong>Sec. 6454. Enhanced Penalties for Offenses Involving Children.</strong></p><p><strong>(a) In General.</strong>—Pursuant to its authority under section 994(p) of title 28, United States Code, and section 21 of the Sentencing Act of 1987 [28 U.S.C. 994 note], the United States Sentencing Commission shall promulgate guidelines, or shall amend existing guidelines, to provide that a defendant convicted of violating sections 405, 405A, or 405B of the Controlled Substances Act (21 U.S.C. 845, 845a or 845b) [redesignated as sections 418, 419, and 420, respectively (21 U.S.C. §§ 859, 860, and 861) by section 1002 of Pub.L. 101–647] involving a person under 18 years of age shall be assigned an offense level under chapter 2 of the sentencing guidelines that is—</p><blockquote><p><strong>(1)</strong> two levels greater than the level that would have been assigned for the underlying controlled substance offense; and</p><p><strong>(2)</strong> in no event less than level 26.</p></blockquote><p><strong>(b) Effects of Amendment.</strong>—If the sentencing guidelines are amended after the effective date of this section [probably means date of enactment of this section, Nov. 18, 1988], the Sentencing Commission shall implement the instruction set forth in subsection (a) so as to achieve a comparable result.</p><p><strong>(c) Multiple Enhancements.</strong>—The guidelines referred to in subsection (a), as promulgated or amended under such subsection, shall provide that an offense that could be subject to multiple enhancements pursuant to such subsection is subject to not more than one such enhancement.”</p><p><strong>CONTRABAND IN PRISON.</strong> Pub.L. 100–690, Title VI, § 6468(c), (d), Nov. 18, 1988, 102 Stat. 4376, provided:</p><p>“<strong>(c)</strong> Pursuant to its authority under section 994(p) of title 28, United States Code, and section 21 of the Sentencing Act of 1987 [28 U.S.C. 994 note], the United States Sentencing Commission shall promulgate guidelines, or shall amend existing guidelines, to provide that a defendant convicted of violating section 1791(a)(1) of title 18, United States Code, and punishable under section 1791(b)(1) of that title as so redesignated, shall be assigned an offense level under chapter 2 of the sentencing guidelines that is—</p><blockquote><p><strong>(1)</strong> two levels greater than the level that would have been assigned had the offense not been committed in prison; and</p><p><strong>(2)</strong> in no event less than level 26.</p></blockquote><p><strong>(d)</strong> If the sentencing guidelines are amended after the effective date of this section [probably means the date of enactment of this section, Nov. 18, 1988], the Sentencing Commission shall implement the instruction set forth in subsection (c) so as to achieve a comparable result.”</p><p><strong>COMMON CARRIER OPERATION UNDER INFLUENCE OF ALCOHOL OR DRUGS.</strong> Pub.L. 100–690, Title VI, § 6482(c), Nov. 18, 1988, 102 Stat. 4382, provided:</p><p>“<strong>(c) Sentencing Guidelines.—(1)</strong> Pursuant to its authority under section 994(p) of title 28, United States Code, and section 21 of the Sentencing Act of 1987 [28 U.S.C. 994 note], the United States Sentencing Commission shall promulgate guidelines, or shall amend existing guidelines, to provide that—</p><blockquote><p><strong>(A)</strong> a defendant convicted of violating section 342 of title 18, United States Code, under circumstances in which death results, shall be assigned an offense level under chapter 2 of the sentencing guidelines that is not less than level 26; and</p><p><strong>(B)</strong> a defendant convicted of violating section 342 of title 18, United States Code, under circumstances in which serious bodily injury results, shall be assigned an offense level under chapter 2 of the sentencing guidelines that is not less than level 21.</p></blockquote><p><strong>(2)</strong> If the sentencing guidelines are amended after the effective date of this section [probably means date of enactment of this section, Nov. 18, 1988], the Sentencing Commission shall implement the instruction set forth in paragraph (1) so as to achieve a comparable result.”</p><p>* * *</p>\"},{\"id\":\"PUB. L. 100–700\",\"content\":\"<p><strong>MAJOR FRAUD ACT OF 1988</strong></p><p><strong>(PUB. L. 100–700)</strong></p><p><strong>PERSONAL INJURY RESULTING FROM FRAUD.</strong> Pub.L. 100–700, Chapter 47, § 2(b), Nov. 19, 1988, 102 Stat. 4632, provided:</p><p>“<strong>(b) Sentencing Guidelines.—</strong>Pursuant to its authority under section 994(p) of title 28, United States Code and section 21 of the Sentencing Act of 1987 [28 U.S.C. 994 note], the United States Sentencing Commission shall promulgate guidelines, or shall amend existing guidelines, to provide for appropriate penalty enhancements, where conscious or reckless risk of serious personal injury resulting from the fraud has occurred. The Commission shall consider the appropriateness of assigning to such a defendant an offense level under Chapter Two of the sentencing guidelines that is at least two levels greater than the level that would have been assigned had conscious or reckless risk of serious personal injury not resulted from the fraud.”</p><p>* * *</p>\"},{\"id\":\"PUB. L. 101–73\",\"content\":\"<p><strong>FINANCIAL INSTITUTIONS REFORM,</strong></p><p><strong>RECOVERY, AND ENFORCEMENT ACT OF 1989</strong></p><p><strong>(PUB. L. 101–73)</strong></p><p><strong>CRIMES THAT JEOPARDIZE FEDERALLY INSURED FINANCIAL INSTITUTIONS.</strong> Pub.L. 101–73, Title IX, § 961(m), Aug. 9, 1989, 103 Stat. 501, provided:</p><p>“<strong>(m) Sentencing Guidelines.—</strong>Pursuant to section 994 of title 28, United States Code, and section 21 of the Sentencing Act of 1987 [28 U.S.C. 994 note], the United States Sentencing Commission shall promulgate guidelines, or amend existing guidelines, to provide for a substantial period of incarceration for a violation of, or a conspiracy to violate, section 215, 656, 657, 1005, 1006, 1007, 1014, 1341, 1343, or 1344 of title 18, United States Code, that substantially jeopardizes the safety and soundness of a federally insured financial institution.”</p><p>* * *</p>\"},{\"id\":\"PUB.L.101–647\",\"content\":\"<p><strong>CRIME CONTROL ACT OF 1990</strong></p><p><strong>(PUB. L. 101–647)</strong></p><p><strong>SEXUAL CRIMES AGAINST CHILDREN.</strong> Pub.L. 101–647, Title III, § 321, Nov. 29, 1990, 104 Stat. 4817, provided:</p><p>“<strong>Sec. 321. Sentencing Commission Guidelines.</strong></p><p>The United States Sentencing Commission shall amend existing guidelines for sentences involving sexual crimes against children, including offenses contained in chapter 109A of title 18, so that more substantial penalties may be imposed if the Commission determines current penalties are inadequate.”</p><p><strong>KIDNAPPING, ABDUCTION, OR UNLAWFUL RESTRAINT.</strong> Pub.L. 101–647, Title IV, § 401, Nov. 29, 1990, 104 Stat. 4819, amended 18 U.S.C. § 1201by adding the following new subsection:</p><p><strong>“(g) Special Rule for Certain Offenses Involving Children.</strong>—</p><blockquote><p><strong>(1)</strong> <strong>To Whom Applicable.</strong>—If—</p><p><strong>(A)</strong> the victim of an offense under this section has not attained the age of eighteen years; and</p></blockquote><p><strong>(B)</strong> the offender—</p><blockquote><p><strong>(i)</strong> has attained such age; and</p><p><strong>(ii)</strong> is not—</p><p><strong>(I)</strong> a parent;</p><p><strong>(II)</strong> a grandparent;</p><p><strong>(III)</strong> a brother;</p><p><strong>(IV)</strong> a sister;</p><p><strong>(V)</strong> an aunt;</p><p><strong>(VI)</strong> an uncle; or</p><p><strong>(VII)</strong> an individual having legal custody of the victim;</p></blockquote><p>the sentence under this section for such offense shall be subject to paragraph (2) of this subsection.</p><p><strong>(2)</strong> <strong>Guidelines.</strong>—The United States Sentencing Commission is directed to amended the existing guidelines for the offense of ‘kidnapping, abduction, or unlawful restraint,’ by including the following additional specific offense characteristics: If the victim was intentionally maltreated (i.e., denied either food or medical care) to a life-threatening degree, increase by 4 levels; if the victim was sexually exploited (i.e., abused, used involuntarily for pornographic purposes) increase by 3 levels; if the victim was placed in the care or custody of another person who does not have a legal right to such care or custody of the child either in exchange for money or other consideration, increase by 3 levels; if the defendant allowed the child to be subjected to any of the conduct specified in this section by another person, then increase by 2 levels.”</p><p><strong>REPORT ON MANDATORY MINIMUM SENTENCING PROVISIONS.</strong> Pub.L. 101–647, Title XVII, § 1703, Nov. 29, 1990, 104 Stat. 4845, provided:</p><p>“<strong>Sec. 1703. Report on Mandatory Minimum Sentencing Provisions.</strong></p><p><strong>(a) Report.</strong>—Not less than six months after the date of enactment of this Act, the United States Sentencing Commission shall transmit to the respective Judiciary Committees of the Senate and House of Representatives a report on mandatory minimum sentencing provisions in Federal law.</p><p><strong>(b) Components of Report.</strong>—The report mandated by subsection (a) shall included:</p><blockquote><p><strong>(1)</strong> a compilation of all mandatory minimum sentencing provisions in Federal law;</p><p><strong>(2)</strong> an assessment of the effect of mandatory minimum sentencing provisions on the goal of eliminating unwarranted sentencing disparity;</p><p><strong>(3)</strong> a projection of the impact of mandatory minimum sentencing provisions on the Federal prison population;</p><p><strong>(4)</strong> an assessment of the compatibility of mandatory minimum sentencing provisions and the sentencing guidelines system established by the Sentencing Reform Act of 1984;</p><p><strong>(5)</strong> a description of the interaction between mandatory minimum sentencing provisions and plea agreements;</p><p><strong>(6)</strong> a detailed empirical research study of the effect of mandatory minimum penalties in the Federal system;</p><p><strong>(7)</strong> a discussion of mechanisms other than mandatory minimum sentencing laws by which Congress can express itself with respect to sentencing policy, such as:</p><p><strong>(A)</strong> specific statutory instructions to the Sentencing Commission;</p><p><strong>(B)</strong> general statutory instructions to the Sentencing Commission;</p><p><strong>(C)</strong> increasing or decreasing the maximum sentence authorized for particular crimes;</p><p><strong>(D)</strong> Sense of Congress resolutions; and</p><p><strong>(8)</strong> any other information that the Commission would contribute to a thorough assessment of mandatory minimum sentencing provisions.</p></blockquote><p><strong>(c) Amendment of Report.</strong>—The Commission may amend or update the report mandated by subsection (a) at any time after its transmittal.”</p><p><strong>OFFENSES AFFECTING FINANCIAL INSTITUTIONS.</strong> Pub.L. 101–647, Title XXV, § 2507, Nov. 29, 1990, 104 Stat. 4862, provided:</p><p>“<strong>Sec. 2507. Increased Penalties in Major Bank Crime Cases.</strong></p><p><strong>(a) Increased Penalties.</strong>—Pursuant to section 994 of title 28, United States Code, and section 21 of the Sentencing Act of 1987 [28 U.S.C. 994 note] the United States Sentencing Commission shall promulgate guidelines, or amend existing guidelines, to provide that a defendant convicted of violating, or conspiring to violate, section 215, 656, 657, 1005, 1006, 1007, 1014, 1032, or 1344 of title 18, United States Code, or section 1341 or 1343 affecting a financial institution (as defined in section 20 of title 18, United States Code) shall be assigned not less than offense level 24 under chapter 2 of the sentencing guidelines if the defendant derives more than $1,000,000 in gross receipts from the offense.</p><p><strong>(b) Amendments to Sentencing Guidelines.</strong>—If the sentencing guidelines are amended after the effective date of this section, the Sentencing Commission shall implement the instruction set forth in subsection (a) so as to achieve a comparable result.”</p><p><strong>SMOKABLE CRYSTAL METHAMPHETAMINE.</strong> Pub.L. 101–647, Title XXVII, § 2701, Nov. 29, 1990, 104 Stat. 4912, provided:</p><p>“<strong>Sec. 2701. Sentencing Commission Guidelines.</strong></p><p>“The United States Sentencing Commission is instructed to amend the existing guidelines for offenses involving smokable crystal methamphetamine under section 401(b) of the Controlled Substances Act (21 U.S.C. § 841(b)) so that convictions for offenses involving smokable crystal methamphetamine will be assigned an offense level under the guidelines which is two levels above that which would have been assigned to the same offense involving other forms of methamphetamine.”</p><p>* * *</p>\"},{\"id\":\"PUB.L.102–141\",\"content\":\"<p><strong>TREASURY, POSTAL SERVICE AND</strong></p><p><strong>GENERAL GOVERNMENT</strong></p><p><strong>APPROPRIATIONS ACT, 1992</strong></p><p><strong>(PUB. L. 102–141)</strong></p><p><strong>SEXUAL ABUSE AND EXPLOITATION OF MINORS; CHILD PORNOGRAPHY; OBSCENITY.</strong> Pub.L. 102–141, Title VI, § 632, Oct. 28, 1991, 105 Stat. 876, provided:</p><p>“<strong>Sec. 632. (1)</strong> Pursuant to its authority under section 994 of title 28, United States Code, the Sentencing Commission shall promulgate guidelines, or amend existing or proposed guidelines as follows:</p><blockquote><p><strong>(A)</strong> Guideline 2G2.2 to provide a base offense level of not less than 15 and to provide at least a 5 level increase for offenders who have engaged in a pattern of activity involving the sexual abuse or exploitation of a minor.</p><p><strong>(B)</strong> Guideline 2G2.4 to provide that such guideline shall apply only to offense conduct that involves the simple possession of materials proscribed by chapter 110 of title 18, United States Code and guideline 2G2.2 to provide that such guideline shall apply to offense conduct that involves receipt or trafficking (including, but not limited to transportation, distribution, or shipping).</p><p><strong>(C)</strong> Guideline 2G2.4 to provide a base offense level of not less than 13, and to provide at least a 2 level increase for possessing 10 or more books, magazines, periodicals, films, video tapes or other items containing a visual depiction involving the sexual exploitation of a minor.</p><p><strong>(D)</strong> Section 2G3.1 to provide a base offense level of not less than 10.</p></blockquote><p><strong>(2)(A)</strong> Notwithstanding any other provision of law, the Sentencing Commission shall promulgate the amendments mandated in subsection (1) by November 1, 1991, or within 30 days after enactment [probably means date of enactment of Pub.L. 102–141, which was approved Oct. 28, 1991], whichever is later. The amendments to the guidelines promulgated under subsection (1) shall take effect November 1, 1991, or 30 days after enactment, and shall supersede any amendment to the contrary contained in the amendments to the sentencing guidelines submitted to the Congress by the Sentencing Commission on or about May 1, 1991.</p><p><strong>(B)</strong> The provisions of section 944(x) of title 28, United States Code, shall not apply to the promulgation or amendment of guidelines under this section.”</p><p>* * *</p>\"},{\"id\":\"PUB.L.103–322\",\"content\":\"<p><strong>VIOLENT CRIME CONTROL AND</strong></p><p><strong>LAW ENFORCEMENT ACT OF 1994</strong></p><p><strong>(PUB. L. 103–322)</strong></p><p><strong>SEXUAL OFFENSES BY REPEAT OFFENDERS.</strong> Pub.L. 103–322, Title IV, § 40111(b), Sept. 13, 1994, 108 Stat. 1903, provided:</p><p>“<strong>(b) Amendment of Sentencing Guidelines.—</strong>The Sentencing Commission shall implement the amendment made by subsection (a)[of this section (pertaining to repeat sexual offenders)] by promulgating amendments, if appropriate, in the sentencing guidelines applicable to chapter 109A [of title 18] offenses.”</p><p><strong>SEXUAL ABUSE; AGGRAVATED SEXUAL ABUSE.</strong> Pub.L. 103–322, Title IV, § 40112, Sept. 13, 1994, 108 Stat. 1903, provided:</p><p>“<strong>Sec. 40112. Federal Penalties.</strong></p><p><strong>(a)</strong> <strong>Amendment of Sentencing Guidelines.—</strong>Pursuant to its authority under section 994(p) of title 28, United States Code, the United States Sentencing Commission shall review and amend, where necessary, its sentencing guidelines on aggravated sexual abuse under section 2241 of title 18, United States Code, or sexual abuse under section 2242 of title 18 United States Code, as follows:</p><blockquote><p><strong>(1)</strong> The Commission shall review and promulgate amendments to the guidelines, if appropriate, to enhance penalties if more than 1 offender is involved in the offense.</p><p><strong>(2)</strong> The Commission shall review and promulgate amendments to the guidelines, if appropriate, to reduce unwarranted disparities between the sentences for sex offenders who are known to the victim and sentences for sex offenders who are not known to the victim.</p><p><strong>(3)</strong> The Commission shall review and promulgate amendments to the guidelines to enhance penalties, if appropriate, to render Federal penalties on Federal territory commensurate with penalties for similar offenses in the States.</p><p><strong>(4)</strong> The Commission shall review and promulgate amendments to the guidelines, if appropriate, to account for the general problem of recidivism in cases of sex offenses, the severity of the offense, and its devastating effects on survivors.</p></blockquote><p><strong>(b)</strong> <strong>Report.—</strong>Not later than 180 days after the date of enactment of this Act, the United States Sentencing Commission shall review and submit to Congress a report containing an analysis of Federal rape sentencing, accompanied by comment from independent experts in the field, describing—</p><blockquote><p><strong>(1)</strong> comparative Federal sentences for cases in which the rape victim is known to the defendant and cases in which the rape victim is not known to the defendant;</p><p><strong>(2)</strong> comparative Federal sentences for cases on Federal territory and sentences in surrounding States; and</p><p><strong>(3)</strong> an analysis of the effect of rape sentences on populations residing primarily on Federal territory relative to the impact of other Federal offenses in which the existence of Federal jurisdiction depends upon the offense’s being committed on Federal territory.”</p></blockquote><p><strong>INTENTIONAL TRANSMISSION OF HIV.</strong> Pub.L. 103–322, Title IV, § 40503(c), Sept. 13, 1994, 108 Stat. 1947, provided:</p><p>“<strong>(c) Penalties for Intentional Transmission of HIV.—</strong>Not later than 6 months after the date of enactment of this Act, the United States Sentencing Commission shall conduct a study and prepare and submit to the committees on the Judiciary of the Senate and the House of Representatives a report concerning recommendations for the revision of sentencing guidelines that relate to offenses in which an HIV infected individual engages in sexual activity if the individual knows that he or she is infected with HIV and intends, through such sexual activity, to expose another to HIV.”</p><p><strong>LIMITATION ON APPLICABILITY OF MANDATORY MINIMUM PENALTIES IN CERTAIN CASES; SENTENCING COMMISSION AUTHORITY.</strong> Pub.L. 103–322, Title VIII, § 80001, Sept. 13, 1994, 108 Stat. 1986, provided:</p><p>“<strong>(a) [enacted 18 U.S.C. § 3553(f) (Limitation on applicability of statutory minimums in certain cases)]</strong></p><p><strong>(b) Sentencing Commission Authority.—</strong></p><blockquote><p><strong>(1) In general.—(A)</strong> The United States Sentencing Commission (referred to in this subsection as the ‘Commission’), under section 994(a)(1) and (p) of title 28—</p><p><strong>(i)</strong> shall promulgate guidelines, or amendments to guidelines, to carry out the purposes of this section and the amendment made by this section; and</p><p><strong>(ii)</strong> may promulgate policy statements, or amendments to policy statements, to assist in the application of this section and that amendment.</p><p><strong>(B)</strong> In the case of a defendant for whom the statutorily required minimum sentence of 5 years, such guidelines and amendments to guidelines issued under subparagraph (A) shall call for a guideline range in which the lowest term of imprisonment is at least 24 months.</p><p><strong>(2)</strong> <strong>Procedures.—</strong>If the Commission determines that it is necessary to do so in order that the amendments made under paragraph (1) may take effect on the effective date of the amendment made by subsection (a), the Commission may promulgate the amendments made under paragraph (1) in accordance with the procedures set forth in section 21(a) of the Sentencing Act of 1987, as though the authority under that section had not expired.”</p></blockquote><p><strong>DRUG DEALING IN “DRUG-FREE” ZONES.</strong> Pub.L. 103–322, Title IX, § 90102, Sept. 13, 1994, 108 Stat. 1987, provided:</p><p>“<strong>Sec. 90102. Increased Penalties for Drug-Dealing in ‘Drug-Free’ Zones.</strong></p><p>“Pursuant to its authority under section 994 of title 28, United States Code, the United States Sentencing Commission shall amend its sentencing guidelines to provide an appropriate enhancement for a defendant convicted of violating section 419 of the Controlled Substances Act (21 U.S.C. 860).”</p><p><strong>ILLEGAL DRUG USE IN FEDERAL PRISONS; SMUGGLING DRUGS INTO FEDERAL PRISONS.</strong> Pub.L. 103–322, Title IX, § 90103, Sept. 13, 1994, 108 Stat. 1987, provided:</p><p>“<strong>Sec. 90103. Enhanced Penalties for Illegal Drug Use in Federal Prisons and for Smuggling Drugs into Federal Prisons.</strong></p><p><strong>(a)</strong> <strong>Declaration of Policy.—</strong>It is the policy of the Federal Government that the use or distribution of illegal drugs in the Nation’s Federal prisons will not be tolerated and that such crimes shall be prosecuted to the fullest extent of the law.</p><p><strong>(b)</strong> <strong>Sentencing Guidelines.—</strong>Pursuant to its authority under section 994 of title 28, United States Code, the United States Sentencing Commission shall amend its sentencing guidelines to appropriately enhance the penalty for a person convicted of an offense—</p><blockquote><p><strong>(1)</strong> under section 404 of the Controlled Substances Act involving simple possession of a controlled substance within a Federal prison or other Federal detention facility; or</p><p><strong>(2)</strong> under section 401(b) of the Controlled Substances Act involving the smuggling of a controlled substance into a Federal prison or other Federal detention facility or the distribution or intended distribution of a controlled substance within a Federal prison or other Federal detention facility.</p></blockquote><p><strong>(c)</strong> <strong>No Probation.—</strong>Notwithstanding any other law, the court shall not sentence a person convicted of an offense described in subsection (b) to probation.”</p><p><strong>USE OF A SEMIAUTOMATIC FIREARM DURING A CRIME OF VIOLENCE OR A DRUG TRAFFICKING CRIME.</strong> Pub.L. 103–322, Title XI, § 110501, Sept. 13, 1994, 108 Stat. 2015, provided:</p><p>“<strong>Sec. 110501. Enhanced Penalty for Use of a Semiautomatic Firearm During a Crime of Violence or a Drug Trafficking Crime.</strong></p><p><strong>(a)</strong> <strong>Amendment to Sentencing Guidelines.</strong>—Pursuant to its authority under section 994 of title 28, United States Code, the United States Sentencing Commission shall amend its sentencing guidelines to provide an appropriate enhancement of the punishment for a crime of violence (as defined in section 924(c)(3) of title 18, United States Code) or a drug trafficking crime (as defined in section 924(c)(2) of title 18, United States Code) if a semiautomatic firearm is involved.</p><p><strong>(b) Semiautomatic Firearm.</strong>—In subsection (a), ‘semiautomatic firearm’ means any repeating firearm that utilizes a portion of the energy of a firing cartridge to extract the fired cartridge case and chamber the next round and that requires a separate pull of the trigger to fire each cartridge.”</p><p><strong>SECOND OFFENSE OF USING AN EXPLOSIVE TO COMMIT A FELONY.</strong> Pub.L. 103–322, Title XI, § 110502, Sept. 13, 1994, 108 Stat. 2015, provided:</p><p>“<strong>Sec. 110502. Enhanced Penalty for Second Offense of Using an Explosive to Commit a Felony.</strong></p><p>Pursuant to its authority under section 994 of title 28, United States Code, the United States Sentencing Commission shall promulgate amendments to the sentencing guidelines to appropriately enhance penalties in a case in which a defendant convicted under section 844(h) of title 18, United States Code, has previously been convicted under that section.”</p><p><strong>USING A FIREARM IN COUNTERFEITING OR FORGERY.</strong> Pub.L. 103–322, Title XI, § 110512, Sept. 13, 1994, 108 Stat. 2019, provided:</p><p>“<strong>Sec. 110512. Using a Firearm in the Commission of Counterfeiting or Forgery.</strong></p><p>Pursuant to its authority under section 994 of title 28, United States Code, the United States Sentencing Commission shall amend its sentencing guidelines to provide an appropriate enhancement of the punishment for a defendant convicted of a felony under chapter 25 of title 18, United States Code, if the defendant used or carried a firearm (as defined in section 921(a)(3) of title 18, United States Code) during and in relation to the felony.”</p><p><strong>FIREARMS POSSESSION BY VIOLENT FELONS AND SERIOUS DRUG OFFENDERS.</strong> Pub.L. 103–322, Title XI, § 110513, Sept. 13, 1994, 108 Stat. 2019, provided:</p><p>“<strong>Sec. 110513. Enhanced Penalties for Firearms Possession by Violent Felons and Serious Drug Offenders.</strong></p><p>Pursuant to its authority under section 994 of title 28, United States Code, the United States Sentencing Commission shall amend its sentencing guidelines to—</p><blockquote><p><strong>(1)</strong> appropriately enhance penalties in cases in which a defendant convicted under section 922(g) of title 18, United States Code, has 1 prior conviction by any court referred to in section 922(g)(1) of title 18 for a violent felony (as defined in section 924(e)(2)(B) of that title) or a serious drug offense (as defined in section 924(e)(2)(A) of that title); and</p><p><strong>(2)</strong> appropriately enhance penalties in cases in which such a defendant has 2 prior convictions for a violent felony (as so defined) or a serious drug offense (as so defined).”</p></blockquote><p><strong>PROMOTING INTERNATIONAL TERRORISM.</strong> Pub.L. 103–322, Title XII, § 120004, Sept. 13, 1994, 108 Stat. 2022, provided:</p><p>“<strong>Sec. 120004. Sentencing Guidelines Increase for Terrorist Crimes.</strong></p><p>The United States Sentencing Commission is directed to amend its sentencing guidelines to provide an appropriate enhancement for any felony, whether committed within or outside the United States, that involves or is intended to promote international terrorism, unless such involvement or intent is itself an element of the crime.”</p><p><strong>INVOLVING A MINOR IN THE COMMISSION OF THE OFFENSE.</strong> Pub.L. 103–322, Title XIV, § 140008, Sept. 13, 1994, 108 Stat. 2033, provided:</p><p>“<strong>Sec. 140008. Solicitation of Minor to Commit Crime.</strong></p><p><strong>(a) Directive to Sentencing Commission.—(1)</strong> The United States Sentencing Commission shall promulgate guidelines or amend existing guidelines to provide that a defendant 21 years of age or older who has been convicted of an offense shall receive an appropriate sentence enhancement if the defendant involved a minor in the commission of the offense.</p><p><strong>(2)</strong> The Commission shall provide that the guidelines enhancement promulgated pursuant to paragraph (1) shall apply for any offense in relation to which the defendant has solicited, procured, recruited, counseled, encouraged, trained, directed, commanded, intimidated, or otherwise used or attempted to use any person less than 18 years of age with the intent that the minor would commit a Federal offense.</p><p><strong>(b)</strong> <strong>Relevant Considerations.—</strong>In implementing the directive in subsection (a), the Sentencing Commission shall consider—</p><blockquote><p><strong>(1)</strong> the severity of the crime that the defendant intended the minor to commit;</p><p><strong>(2)</strong> the number of minors that the defendant used or attempted to use in relation to the offense;</p><p><strong>(3)</strong> the fact that involving a minor in a crime of violence is frequently of even greater seriousness than involving a minor in a drug trafficking offense, for which the guidelines already provide a two-level enhancement; and</p><p><strong>(4)</strong> the possible relevance of the proximity in age between the offender and the minor(s) involved in the offense.”</p></blockquote><p><strong>DRUG FREE TRUCK STOPS AND SAFETY REST AREAS.</strong> Pub.L. 103–322, Title XVIII, § 180201(c), Sept. 13, 1994, 108 Stat. 2047, provided:</p><p>“<strong>(c) Sentencing Guidelines.—</strong>Pursuant to its authority under section 994 of title 28, United States Code, and section 21 of the Sentencing Act of 1987 (28 U.S.C. 994 note), the United States Sentencing Commission shall promulgate guidelines, or shall amend existing guidelines, to provide an appropriate enhancement of punishment for a defendant convicted of violating section 409 of the Controlled Substances Act [21 U.S.C. § 849], as added by subsection (b) [of this section].”</p><p><strong>CRIMES OF VIOLENCE AGAINST ELDERLY VICTIMS.</strong> Pub.L. 103–322, Title XXIV, § 240002, Sept. 13, 1994, 108 Stat. 2081, provided:</p><p>“<strong>Sec. 240002. Crimes Against the Elderly.</strong></p><p><strong>(a)</strong> <strong>In General.—</strong>Pursuant to its authority under the Sentencing Reform Act of 1984 and section 21 of the Sentencing Act of 1987 (including its authority to amend the sentencing guidelines and policy statements) and its authority to make such amendments on an emergency basis, the United States Sentencing Commission shall ensure that the applicable guideline range for a defendant convicted of a crime of violence against an elderly victim is sufficiently stringent to deter such a crime, to protect the public from additional crimes of such a defendant, and to adequately reflect the heinous nature of such an offense.</p><p><strong>(b) Criteria.—</strong>In carrying out subsection (a), the United States Sentencing Commission shall ensure that—</p><blockquote><p><strong>(1)</strong> the guidelines provide for increasingly severe punishment for a defendant commensurate with the degree of physical harm caused to the elderly victim;</p><p><strong>(2)</strong> the guidelines take appropriate account of the vulnerability of the victim; and</p><p><strong>(3)</strong> the guidelines provide enhanced punishment for a defendant convicted of a crime of violence against an elderly victim who has previously been convicted of a crime of violence against an elderly victim, regardless of whether the conviction occurred in Federal or State court.</p></blockquote><p><strong>(c) Definitions.—</strong>In this section—</p><blockquote><p><strong>(1)</strong> ‘crime of violence’ means an offense under section 113, 114, 1111, 1112, 1113, 1117, 2241, 2242, or 2244 of title 18, United States Code.</p><p><strong>(2)</strong> ‘elderly victim’ means a victim who is 65 years of age or older at the time of an offense.”</p></blockquote><p><strong>FRAUD AGAINST OLDER VICTIMS.</strong> Pub.L. 103–322, Title XXV, § 250003, Sept. 13, 1994, 108 Stat. 2085, provided:</p><p>“<strong>Sec. 250003. Increased Penalties for Fraud Against Older Victims.</strong></p><p><strong>(a)</strong> <strong>Review.—</strong>The United States Sentencing Commission shall review and, if necessary, amend the sentencing guidelines to ensure that victim related adjustments for fraud offenses against older victims over the age of 55 are adequate.</p><p><strong>(b)</strong> <strong>Report.—</strong>Not later than 180 days after the date of enactment of this Act, the Sentencing Commission shall report to Congress the result of its review under subsection (a).”</p><p><strong>HATE CRIMES.</strong> Pub.L. 103–322, Title XXVIII, § 280003, Sept. 13, 1994, 108 Stat. 2096, as amended by Pub. L. 111–84, Div. E, § 4703(a), Oct. 28, 2009, 123 Stat. 2836, provided:</p><p>“<strong>Sec. 280003. Direction to United States Sentencing Commission Regarding Sentencing Enhancements for Hate Crimes.</strong></p><p><strong>(a) Definition.—</strong>In this section, ‘hate crime’ means a crime in which the defendant intentionally selects a victim, or in the case of a property crime, the property that is the object of the crime, because of the actual or perceived race, color, religion, national origin, ethnicity, gender, gender identity, disability, or sexual orientation of any person.</p><p><strong>(b) Sentencing Enhancement.—</strong>Pursuant to section 994 of title 28, United States Code, the United States Sentencing Commission shall promulgate guidelines or amend existing guidelines to provide sentencing enhancements of not less than 3 offense levels for offenses that the finder of fact at trial determines beyond a reasonable doubt are hate crimes. In carrying out this section, the United States Sentencing Commission shall ensure that there is reasonable consistency with other guidelines, avoid duplicative punishments for substantially the same offense, and take into account any mitigating circumstances that might justify exceptions.”</p><p><strong>REPORT ON COCAINE PENALTIES.</strong> Pub.L. 103–322, Title XXVIII, § 280006, Sept. 13, 1994, 108 Stat. 2097, provided:</p><p>“<strong>Sec. 280006. Cocaine Penalty Study.</strong></p><p>Not later than December 31, 1994, the United States Sentencing Commission shall submit a report to Congress on issues relating to sentences applicable to offenses involving the possession or distribution of all forms of cocaine. The report shall address the differences in penalty levels that apply to different forms of cocaine and include any recommendations that the Commission may have for retention or modification of such differences in penalty levels.”</p><p>* * *</p>\"},{\"id\":\"PUB.L.104–38\",\"content\":\"<p><strong>ACT TO DISAPPROVE OF AMENDMENTS TO THE FEDERAL SENTENCING GUIDELINES RELATING TO LOWERING OF CRACK</strong></p><p><strong>SENTENCES AND SENTENCES FOR MONEY LAUNDERING AND TRANSACTIONS IN PROPERTY DERIVED FROM UNLAWFUL ACTIVITY</strong></p><p><strong>(PUB. L. 104–38)</strong></p><p><strong>DISAPPROVAL OF AMENDMENTS; RECOMMENDATIONS ON COCAINE OFFENSES; STUDY AND COMMENTS ON MONEY LAUNDERING.</strong> Pub.L. 104–38, §§ 1–2, Oct. 30, 1995, 109 Stat. 334, provided:</p><p>“<strong>Section 1. Disapproval of Amendments Relating to Lowering of Crack Sentences and Sentences for Money Laundering and Transactions in Property Derived from Unlawful Activity.</strong></p><p>In accordance with section 994(p) of title 28, United States Code, amendments numbered 5 and 18 of the “Amendments to the Sentencing Guidelines, Policy Statements, and Official Commentary”, submitted by the United States Sentencing Commission to Congress on May 1, 1995, are hereby disapproved and shall not take effect.</p><p>“<strong>Sec. 2. Reduction of Sentencing Disparity.</strong></p><p><strong>(a)</strong> <strong>Recommendations.—</strong></p><blockquote><p><strong>(1) In general.—</strong>The United States Sentencing Commission shall submit to Congress recommendations (and an explanation therefor), regarding changes to the statutes and sentencing guidelines governing sentences for unlawful manufacturing, importing, exporting, and trafficking of cocaine, and like offenses, including unlawful possession, possession with intent to commit any of the forgoing offenses, and attempt and conspiracy to commit any of the forgoing offenses. The recommendations shall reflect the following considerations—</p><p><strong>(A)</strong> the sentence imposed for trafficking in a quantity of crack cocaine should generally exceed the sentence imposed for trafficking in a like quantity of powder cocaine;</p><p><strong>(B)</strong> high-level wholesale cocaine traffickers, organizers, and leaders of criminal activities should generally receive longer sentences than low-level retail cocaine traffickers and those who played a minor or minimal role in such criminal activity;</p><p><strong>(C)</strong> if the Government establishes that a defendant who traffics in powder cocaine has knowledge that such cocaine will be converted into crack cocaine prior to its distribution to individual users, the defendant should be treated at sentencing as though the defendant had trafficked in crack cocaine; and</p><p><strong>(D)</strong> an enhanced sentence should generally be imposed on a defendant who, in the course of an offense described in this subsection—</p><p><strong>(i)</strong> murders or causes serious bodily injury to an individual;</p><p><strong>(ii)</strong> uses a dangerous weapon;</p><p><strong>(iii)</strong> uses or possesses a firearm;</p><p><strong>(iv)</strong> involves a juvenile or a woman who the defendant knows or should know to be pregnant;</p><p><strong>(v)</strong> engages in a continuing criminal enterprise or commits other criminal offenses in order to facilitate his drug trafficking activities;</p><p><strong>(vi)</strong> knows, or should know, that he is involving an unusually vulnerable person;</p><p><strong>(vii)</strong> restrains a victim;</p><p><strong>(viii)</strong> traffics in cocaine within 500 feet of a school;</p><p><strong>(ix)</strong> obstructs justice;</p><p><strong>(x)</strong> has a significant prior criminal record; or</p><p><strong>(xi)</strong> is an organizer or leader of drug trafficking activities involving five or more persons.</p><p><strong>(2) Ratio.—</strong>The recommendations described in the preceding subsection shall propose revision of the drug quantity ratio of crack cocaine to powder cocaine under the relevant statutes and guidelines in a manner consistent with the ratios set for other drugs and consistent with the objectives set forth in section 3553(a) of title 28 United States Code.</p></blockquote><p><strong>(b) Study.—</strong>No later than May 1, 1996, the Department of Justice shall submit to the Judiciary Committees of the Senate and House of Representatives a report on the charging and plea practices of Federal prosecutors with respect to the offense of money laundering. Such study shall include an account of the steps taken or to be taken by the Justice Department to ensure consistency and appropriateness in the use of the money laundering statute. The Sentencing Commission shall submit to the Judiciary Committees comments on the study prepared by the Department of Justice.”</p><p>* * *</p>\"},{\"id\":\"PUB.L.104–71\",\"content\":\"<p><strong>SEX CRIMES AGAINST CHILDREN </strong></p><p><strong>PREVENTION ACT OF 1995</strong></p><p><strong>(PUB. L. 104–71)</strong></p><p><strong>SEXUAL EXPLOITATION OF CHILDREN; CHILD PORNOGRAPHY.</strong> Pub.L. 104–71, § 2, Dec. 23, 1995, 109 Stat. 774, provided:</p><p>“<strong>Sec. 2. Increased Penalties for Certain Conduct Involving the Sexual Exploitation of Children.</strong></p><p>The United States Sentencing Commission shall amend the sentencing guidelines to—</p><blockquote><p><strong>(1)</strong> increase the base offense level for an offense under section 2251 of title 18, United States Code, by at least 2 levels; and</p><p><strong>(2)</strong> increase the base offense level for an offense under section 2252 of title 18, United States Code, by at least 2 levels.”</p></blockquote><p><strong>USE OF COMPUTERS IN SEXUAL EXPLOITATION OF CHILDREN.</strong> Pub.L. 104–71, § 3, Dec. 23, 1995, 109 Stat. 774, provided:</p><p>“<strong>Sec. 3. Increased Penalties for Use of Computers in Sexual Exploitation of Children.</strong></p><p>The United States Sentencing Commission shall amend the sentencing guidelines to increase the base offense level by at least 2 levels for an offense committed under section 2251(c)(1)(A) or 2252(a) of title 18, United States Code, if a computer was used to transmit the notice or advertisement to the intended recipient or to transport or ship the visual depiction.”</p><p><strong>TRANSPORTATION OF MINORS WITH INTENT TO ENGAGE IN CRIMINAL SEXUAL ACTIVITY.</strong> Pub.L. 104–71, § 4, Dec. 23, 1995, 109 Stat. 774, provided:</p><p>“<strong>Sec. 4. Increased Penalties for Transportation of Children With Intent to Engage in Criminal Sexual Activity.</strong></p><p>The United States Sentencing Commission shall amend the sentencing guidelines to increase the base offense level for an offense under section 2423(a) of title 18, United States Code, by at least 3 levels.”</p><p><strong>REPORT ON CHILD PORNOGRAPHY AND OTHER SEX OFFENSES AGAINST CHILDREN.</strong> Pub.L. 104–71, § 6, Dec. 23, 1995, 109 Stat. 774, provided:</p><p>“<strong>Sec. 6. Report by the United States Sentencing Commission.</strong></p><p>Not later than 180 days after the date of the enactment of this Act, the United States Sentencing Commission shall submit a report to Congress concerning offenses involving child pornography and other sex offenses against children. The Commission shall include in the report—</p><blockquote><p><strong>(1)</strong> an analysis of the sentences imposed for offenses under sections 2251, 2252, and 2423 of title 18, United States Code, and recommendations regarding any modifications to the sentencing guidelines that may be appropriate with respect to those offenses;</p><p><strong>(2)</strong> an analysis of the sentences imposed for offenses under sections 2241, 2242, and 2243, and 2244 of title 18, United States Code, in cases in which the victim was under the age of 18 years, and recommendations regarding any modifications to the sentencing guidelines that may be appropriate with respect to those offenses;</p><p><strong>(3)</strong> an analysis of the type of substantial assistance that courts have recognized as warranting a downward departure from the sentencing guidelines relating to offenses under section 2251 or 2252 of title 18, United States Code;</p><p><strong>(4)</strong> a survey of the recidivism rate for offenders convicted of committing sex crimes against children, an analysis of the impact on recidivism of sexual abuse treatment provided during or after incarceration or both, and an analysis of whether increased penalties would reduce recidivism for those crimes; and</p><p><strong>(5)</strong> such other recommendations with respect to the offenses described in this section as the Commission deems appropriate.”</p></blockquote><p>* * *</p>\"},{\"id\":\"PUB.L.104–132\",\"content\":\"<p><strong>ANTITERRORISM AND EFFECTIVE DEATH PENALTY ACT OF 1996</strong></p><p><strong>or</strong></p><p><strong>MANDATORY VICTIMS RESTITUTION ACT OF 1996</strong></p><p><strong>(PUB. L. 104–132)</strong></p><p><strong>COMMUNITY RESTITUTION.</strong> Pub.L. 104–132, Title II, § 205(a)(3), Apr. 24, 1996, 110 Stat. 1230, amended 18 U.S.C. § 3663 by adding new subsection (c)(7), which provided:</p><p>“<strong>(7)(A)</strong> The United States Sentencing Commission shall promulgate guidelines to assist courts in determining the amount of restitution that may be ordered under this subsection [subsection (c) of 18 U.S.C. § 3663, pertaining to community restitution].</p><p><strong>(B)</strong> No restitution shall be ordered under this subsection until such time as the Sentencing Commission promulgates guidelines pursuant to this paragraph.”</p><p><strong>MANDATORY VICTIMS RESTITUTION.</strong> Pub.L. 104–132, § 208, April 24, 1996, 110 Stat. 1240, provided:</p><p>“<strong>Sec. 208. Instruction to Sentencing Commission.</strong></p><p>Pursuant to section 994 of title 28, United States Code, the United States Sentencing Commission shall promulgate guidelines or amend existing guidelines to reflect this subtitle [‘Mandatory Victims Restitution Act of 1996’] and the amendments made by this subtitle.”</p><p><strong>INTERNATIONAL TERRORISM.</strong> Pub.L. 104– 132, § 730, April 24, 1996, 110 Stat. 1303, provided:</p><p>“<strong>Sec. 730. Directions to Sentencing Commission.</strong></p><p>The United States Sentencing Commission shall forthwith, in accordance with the procedures set forth in section 21(a) of the Sentencing Act of 1987, as though the authority under that section had not expired, amend the sentencing guidelines so that the chapter 3 adjustment relating to international terrorism only applies to Federal crimes of terrorism, as defined in section 2332b(g) of title 18, United States Code.”</p><p><strong>FRAUD AND DAMAGE INVOLVING PROTECTED COMPUTERS (SECTION 1030 OFFENSES).</strong> Pub.L. 104–132, § 805, April 24, 1996, 110 Stat. 1305, provided:</p><p>“<strong>Sec. 805. Deterrent Against Terrorist Activity Damaging a Federal Interest Computer.</strong></p><p><strong>(a) Review.—</strong>Not later than 60 calendar days after the dates of enactment of this Act, the United States Sentencing Commission shall review the deterrent effect of existing guideline levels as they apply to paragraphs (4) and (5) of section 1030(a) of title 18, United States Code.</p><p><strong>(b)</strong> <strong>Report.—</strong>The United States Sentencing Commission shall prepare and transmit a report to the Congress on the findings under the study conducted under subsection (a).</p><p><strong>(c)</strong> <strong>Amendment of Sentencing Guidelines.—</strong> Pursuant to its authority under section 994(p) of title 28, United States Code, the United States Sentencing Commission shall amend the sentencing guidelines to ensure any individual convicted of a violation of paragraph (4) or (5) of section 1030(a) of title 18, United States Code, is imprisoned for not less than 6 months.”</p><p><strong>INTERNATIONAL COUNTERFEITING (SECTION 470 OFFENSES).</strong> Pub.L. 104–132, § 807(h), April 24, 1996, 110 Stat. 1310, provided:</p><p>“<strong>(h) Enhanced Penalties for International Counterfeiting of United States Currency.—</strong>Pursuant to the authority of the United States Sentencing Commission under section 994 of title 28, United States Code, the Commission shall amend the sentencing guidelines prescribed by the Commission to provide an appropriate enhancement of the punishment for a defendant convicted under section 470 of title 18 of such Code.”</p><p>* * *</p>\"},{\"id\":\"PUB.L.104–201\",\"content\":\"<p><strong>NATIONAL DEFENSE AUTHORIZATION ACT FOR FISCAL YEAR 1997</strong></p><p><strong>(PUB. L. 104–201)</strong></p><p><strong>NUCLEAR, BIOLOGICAL, AND CHEMICAL WEAPONS MATERIALS.</strong> Pub.L. 104–201, Title XIV, § 1423, Sept. 23, 1996, 110 Stat 2725 [which is classified both to 28 U.S.C. § 994 note and to 50 U.S.C. § 2332] provided:</p><p>“<strong>Sec. 1423. Sense of Congress Concerning Criminal Penalties.</strong></p><p><strong>(a) Sense of Congress Concerning Inadequacy of Sentencing Guidelines.—</strong>It is the sense of Congress that the sentencing guidelines prescribed by the United States Sentencing Commission for the offenses of importation, attempted importation, exportation, and attempted exportation of nuclear, biological, and chemical weapons materials constitute inadequate punishment for such offenses.</p><p><strong>(b) Urging of Revision to Guidelines.—</strong>Congress urges the United States Sentencing Commission to revise the relevant sentencing guidelines to provide for increased penalties for offenses relating to importation, attempted importation, exportation, and attempted exportation of nuclear, biological, or chemical weapons or related materials or technologies under the following provisions of law:</p><blockquote><p><strong>(1)</strong> Section 11 of the Export Administration Act of 1979 (50 U.S.C.App. 2410).</p><p><strong>(2)</strong> Sections 38 and 40 of the Arms Export Control Act (22 U.S.C. 2778 and 2780).</p><p><strong>(3)</strong> The International Emergency Economic Powers Act (50 U.S.C. 1701 et seq.).</p><p><strong>(4)</strong> Section 309(c) of the Nuclear Non‑Proliferation Act of 1978 (22 U.S.C. 2156a(c)).”</p></blockquote><p>* * *</p>\"},{\"id\":\"PUB.L.104–208\",\"content\":\"<p><strong>OMNIBUS CONSOLIDATED </strong></p><p><strong>APPROPRIATIONS ACT, 1997</strong></p><p><strong>or</strong></p><p><strong>ILLEGAL IMMIGRATION REFORM AND </strong></p><p><strong>IMMIGRANT RESPONSIBILITY ACT OF 1996</strong></p><p><strong>(PUB. L. 104–208)</strong></p><p><strong>ALIEN SMUGGLING.</strong> Pub.L. 104–208, Div. C, Title II, § 203(e), Sept. 30, 1996, 110 Stat. 3009–566, provided:</p><p>“<strong>(e) Sentencing Guidelines.—</strong></p><blockquote><p><strong>(1) In general.—</strong>Pursuant to its authority under section 994(p) of title 28, United States Code, the United States Sentencing Commission shall promulgate sentencing guidelines or amend existing sentencing guidelines for offenders convicted of offenses related to smuggling, transporting, harboring, or inducing aliens in violation of section 274(a)(1)(A) or (2) of the Immigration and Nationality Act (8 U.S.C. 1324(a)(1)(A), (2)(B)) in accordance with this subsection.</p><p><strong>(2) Requirements.—</strong>In carrying out this subsection, the Commission shall, with respect to the offenses described in paragraph (1)—</p><p><strong>(A)</strong> increase the base offense level for such offenses at least 3 offense levels above the applicable level in effect on the date of the enactment of this Act;</p><p><strong>(B)</strong> review the sentencing enhancement for the number of aliens involved (U.S.S.G. 2L1.1(b)(2)), and increase the sentencing enhancement by at least 50 percent above the applicable enhancement in effect on the date of the enactment of this Act;</p><p><strong>(C)</strong> impose an appropriate sentencing enhancement upon an offender with 1 prior felony conviction arising out of a separate and prior prosecution for an offense that involved the same or similar underlying conduct as the current offense, to be applied in addition to any sentencing enhancement that would otherwise apply pursuant to the calculation of the defendant’s criminal history category;</p><p><strong>(D)</strong> impose an additional appropriate sentencing enhancement upon an offender with 2 or more prior felony convictions arising out of separate and prior prosecutions for offenses that involved the same or similar underling conduct as the current offense, to be applied in addition to any sentencing enhancement that would otherwise apply pursuant to the calculation of the defendant’s criminal history category;</p><p><strong>(E)</strong> impose an appropriate sentencing enhancement on a defendant who, in the course of committing an offense described in this subsection—</p><p><strong>(i)</strong> murders or otherwise causes death, bodily injury, or serious bodily injury to an individual;</p><p><strong>(ii)</strong> uses or brandishes a firearm or other dangerous weapon; or</p><p><strong>(iii)</strong> engages in conduct that consciously or recklessly places another in serious danger of death or serious bodily injury;</p><p><strong>(F)</strong> consider whether a downward adjustment is appropriate if the offense is a first offense and involves the smuggling only of the alien’s spouse or child; and</p><p><strong>(G)</strong> consider whether any other aggravating or mitigating circumstances warrant upward or downward sentencing adjustments.</p><p><strong>(3) Emergency Authority to Sentencing Commission.—</strong>The Commission shall promulgate the guidelines or amendments provided for under this subsection as soon as practicable in accordance with the procedure set forth in section 21(a) of the Sentencing Act of 1987, as though the authority under that Act had not expired.”</p></blockquote><p><strong>FRAUD IN CONNECTION WITH IDENTIFICATION, NATURALIZATION, AND IMMIGRATION DOCUMENTS.</strong> Pub.L. 104–208, Div. C, Title II, § 211(b), Sept. 30, 1996, 110 Stat. 3009–569, provided:</p><p><strong>“(b) Changes to the Sentencing Levels.— </strong></p><blockquote><p><strong>(1) In general.—</strong>Pursuant to the Commission’s authority under section 994(p) of title 28, United States Code, the United States Sentencing Commission shall promulgate sentencing guidelines or amend existing sentencing guidelines for offenders convicted of violating, or conspiring to violate, sections 1028(b)(1), 1425 through 1427, 1541 through 1544, and 1546(a) of title 18, United States Code, in accordance with this subsection.</p><p><strong>(2) Requirements.—</strong>In carrying out this subsection, the Commission shall, with respect to the offenses referred to in paragraph (1)—</p><p><strong>(A)</strong> increase the base offense level for such offenses at least 2 offense levels above the level in effect on the date of the enactment of this Act;</p><p><strong>(B)</strong> review the sentencing enhancement for number of documents or passports involved (U.S.S.G. 2L2.1(b)(2)), and increase the upward adjustment by at least 50 percent above the applicable enhancement in effect on the date of the enactment of this Act;</p><p><strong>(C)</strong> impose an appropriate sentencing enhancement upon an offender with 1 prior felony conviction arising out of a separate and prior prosecution for an offense that involved the same or similar underlying conduct as the current offense, to be applied in addition to any sentencing enhancement that would otherwise apply pursuant to the calculation of the defendant’s criminal history category;</p><p><strong>(D)</strong> impose an additional appropriate sentencing enhancement upon an offender with 2 or more prior felony convictions arising out of separate and prior prosecutions for offenses that involved the same or similar underlying conduct as the current offense, to be applied in addition to any sentencing enhancement that would otherwise apply pursuant to the calculation of the defendant’s criminal history category; and</p><p><strong>(E)</strong> consider whether any other aggravating or mitigating circumstances warrant upward or downward sentencing adjustments.</p><p><strong>(3) Emergency Authority to Sentencing Commission.—</strong>The Commission shall promulgate the guidelines or amendments provided for under this subsection as soon as practicable in accordance with the procedure set forth in section 21(a) of the Sentencing Act of 1987, as though the authority under that Act had not expired.”</p></blockquote><p><strong>PEONAGE, INVOLUNTARY SERVITUDE, AND SLAVE TRADE OFFENSES.</strong> Pub.L. 104–208, Div. C, Title II, § 218(b), (c), Sept. 30, 1996, 110 Stat. 3009–573, provided:</p><p>“<strong>(b) Review of Sentencing Guidelines.—</strong>The United States Sentencing Commission shall ascertain whether there exists an unwarranted disparity—</p><blockquote><p><strong>(1)</strong> between the sentences for peonage, involuntary servitude, and slave trade offenses, and the sentences for kidnapping offenses in effect on the date of the enactment of this Act; and</p><p><strong>(2)</strong> between the sentences for peonage, involuntary servitude, and slave trade offenses, and the sentences for alien smuggling offenses in effect on the date of the enactment of this Act and after the amendment made by subsection (a).</p></blockquote><p><strong>(c) Amendment of Sentencing Guidelines.—</strong></p><blockquote><p><strong>(1) In general.—</strong>Pursuant to its authority under section 994(p) of title 28, United States Code, the United States Sentencing Commission shall review its guidelines on sentencing for peonage, involuntary servitude, and slave trade offenses under sections 1581 through 1588 of title 18, United States Code, and shall amend such guidelines as necessary to—</p><p><strong>(A)</strong> reduce or eliminate any unwarranted disparity found under subsection (b) that exists between the sentences for peonage, involuntary servitude, and slave trade offenses, and the sentences for kidnapping offenses and alien smuggling offenses;</p><p><strong>(B)</strong> ensure that the applicable guidelines for defendants convicted of peonage, involuntary servitude, and slave trade offenses are sufficiently stringent to deter such offenses and adequately reflect the heinous nature of such offenses; and</p><p><strong>(C)</strong> ensure that the guidelines reflect the general appropriateness of enhanced sentences for defendants whose peonage, involuntary servitude, or slave trade offenses involve—</p><p><strong>(i)</strong> a large number of victims;</p><p><strong>(ii)</strong> the use or threatened use of a dangerous weapon; or</p><p><strong>(iii)</strong> a prolonged period of peonage or involuntary servitude.</p><p><strong>(2) Emergency Authority to Sentencing Commission.—</strong>The Commission shall promulgate the guidelines or amendments provided for under this subsection as soon as practicable in accordance with the procedure set forth in section 21(a) of the Sentencing Act of 1987, as though the authority under that Act had not expired.”</p></blockquote><p><strong>CONSPIRING WITH OR ASSISTING AN ALIEN TO COMMIT AN OFFENSE UNDER THE CONTROLLED SUBSTANCES IMPORT AND EXPORT ACT.</strong> Pub.L. 104–208, Div. C, Title III, § 333, Sept. 30, 1996, 110 Stat. 3009–634, provided:</p><p>“<strong>Sec. 333. Penalties for Conspiring with or Assisting an Alien to Commit an Offense Under the Controlled Substances Import and Export Act.</strong></p><p><strong>(a) Review of Guidelines.—</strong>Not later than 6 months after the date of the enactment of this Act, the United States Sentencing Commission shall conduct a review of the guidelines applicable to an offender who conspires with, or aids or abets, a person who is not a citizen or national of the United States in committing any offense under section 1010 of the Controlled Substance Import and Export Act (21 U.S.C. 960).</p><p><strong>(b) Revision of Guidelines.—</strong>Following such review, pursuant to section 994(p) of title 28, United States Code, the Commission shall promulgate sentencing guidelines or amend existing sentencing guidelines to ensure an appropriately stringent sentence for such offenders.”</p><p><strong>FAILURE TO DEPART, ILLEGAL REENTRY, AND PASSPORT AND VISA FRAUD.</strong> Pub. L. 104–208, Div. C, Title III, § 334, Sept. 30, 1996, 110 Stat. 3009–635, provided:</p><p>“<strong>Sec. 334. Enhanced Penalties for Failure to Depart, Illegal Reentry, and Passport and Visa Fraud.</strong></p><p><strong>(a) Failing to Depart.—</strong>The United States Sentencing Commission shall promptly promulgate, pursuant to section 994 of title 28, United States Code, amendments to the sentencing guidelines to make appropriate increases in the base offense level for offenses under section 242(e) and 276(b) of the Immigration and Nationality Act (8 U.S.C. 1252(e) and 1326(b)) to reflect the amendments made by section 130001 of the Violent Crime Control and Law Enforcement Act of 1994.</p><p><strong>(b) Passport and Visa Offenses.—</strong>The United States Sentencing Commission shall promptly promulgate, pursuant to section 994 of title 28, United States Code, amendments to the sentencing guidelines to make appropriate increases in the base offense level for offenses under chapter 75 of title 18, United States Code, to reflect the amendments made by section 130009 of the Violent Crime Control and Law Enforcement Act of 1994.”</p><p>* * *</p>\"},{\"id\":\"PUB.L.104–237\",\"content\":\"<p><strong>COMPREHENSIVE METHAMPHETAMINE CONTROL ACT OF 1996</strong></p><p><strong>(PUB. L. 104–237)</strong></p><p><strong>METHAMPHETAMINE MANUFACTURING.</strong> Pub.L. 104–237, Title II, § 203(b), Oct. 3, 1996, 110 Stat. 3102, provided:</p><p>“<strong>(b) Sentencing Commission.—</strong>The United States Sentencing Commission shall amend the sentencing guidelines to ensure that the manufacture of methamphetamine in violation of section 403(d)(2) of the Controlled Substances Act [21 U.S.C. § 843(d)(2)], as added by subsection (a), is treated as a significant violation.”</p><p><strong>METHAMPHETAMINE OFFENSES.</strong> Pub.L. 104–237, Title II, § 301, Oct. 3, 1996, 110 Stat. 3105, provided:</p><p>“<strong>Sec. 301. Penalty Increases for Trafficking in Methamphetamine.</strong></p><p><strong>(a) Directive to the United States Sentencing Commission.—</strong>Pursuant to its authority under section 994 of title 28, United States Code, the United States Sentencing Commission shall review and amend its guidelines and its policy statements to provide for increased penalties for unlawful manufacturing, importing, exporting, and trafficking of methamphetamine, and other similar offenses, including unlawful possession with intent to commit any of those offenses, and attempt and conspiracy to commit any of those offenses. The Commission shall submit to Congress explanations therefor and any additional policy recommendations for combating methamphetamine offenses.</p><p><strong>(b) In General.—</strong>In carrying out this section, the Commission shall ensure that the sentencing guidelines and policy statements for offenders convicted of offenses described in subsection (a) and any recommendations submitted under such subsection reflect the heinous nature of such offenses, the need for aggressive law enforcement action to fight such offenses, and the extreme dangers associated with unlawful activity involving methamphetamine, including—</p><blockquote><p><strong>(1)</strong> the rapidly growing incidence of methamphetamine abuse and the threat to public safety such abuse poses;</p><p><strong>(2)</strong> the high risk of methamphetamine addiction;</p><p><strong>(3)</strong> the increased risk of violence associated with methamphetamine trafficking and abuse; and</p><p><strong>(4)</strong> the recent increase in the illegal importation of methamphetamine and precursor chemicals.”</p></blockquote><p><strong>LIST I CHEMICAL OFFENSES.</strong> Pub.L. 104–237, Title II, § 302(c), Oct. 3, 1996, 110 Stat. 3105, provided:</p><p>“<strong>(c) Sentencing Guidelines.—</strong></p><blockquote><p><strong>(1) In General.—</strong>The United States Sentencing Commission shall, in accordance with the procedures set forth in section 21(a) of the Sentencing Act of 1987, as though the authority of that section had not expired, amend the sentencing guidelines to increase by at least two levels the offense level for offenses involving list I chemicals under—</p><p><strong>(A)</strong> section 401(d)(1) and (2) of the Controlled Substances Act (21 U.S.C. 841(d)(1) and (2)); and</p><p><strong>(B)</strong> section 1010(d)(1) and (3) of the Controlled Substance Import and Export Act (21 U.S.C. 960(d)(1) and (3)).</p><p><strong>(2) Requirement.—</strong>In carrying out this subsection, the Commission shall ensure that the offense levels for offenses referred to in paragraph (1) are calculated proportionally on the basis of the quantity of controlled substance that reasonably could have been manufactured in a clandestine setting using the quantity of the list I chemical possessed, distributed, imported, or exported.”</p></blockquote><p><strong>DANGEROUS HANDLING OF CONTROLLED SUBSTANCES.</strong> Pub.L. 104–237, Title III, § 303, Oct. 3, 1996, 110 Stat. 3106, provided:</p><p>“<strong>Sec. 303. Enhanced Penalty for Dangerous Handling of Controlled Substances; Amendment of Sentencing Guidelines.</strong></p><p><strong>(a) In General.—</strong>Pursuant to its authority under section 994 of title 28, United States Code, the United States Sentencing Commission shall determine whether the Sentencing Guidelines adequately punish the offenses described in subsection (b) and, if not, promulgate guidelines or amend existing guidelines to provide an appropriate enhancement of the punishment for a defendant convicted of such an offense.</p><p><strong>(b) Offense.—</strong>The offense referred to in subsection (a) is a violation of section 401(d), 401(g)(1), 403(a)(6), or 403(a)(7) of the Controlled Substances Act (21 U.S.C. 841(d), 841(g)(1), 843(a)(6), and 843(a)(7)), in cases in which in the commission of the offense the defendant violated—</p><blockquote><p><strong>(1)</strong> subsection (d) or (e) of section 3008 of the Solid Waste Disposal Act (relating to handling hazardous waste in a manner inconsistent with Federal or applicable State law);</p><p><strong>(2)</strong> section 103(b) of the Comprehensive Environmental Response, Compensation and Liability Act (relating to failure to notify as to the release of a reportable quantity of a hazardous substance into the environment);</p><p><strong>(3)</strong> section 301(a), 307(d), 309(c)(2), 309(c)(3), 311(b)(3), or 311(b)(5) of the Federal Water Pollution Control Act (relating to the unlawful discharge of pollutants or hazardous substances, the operation of a source in violation of a pretreatment standard, and the failure to notify as to the release of a reportable quantity of a hazardous substance into the water); or</p><p><strong>(4)</strong> section 5124 of title 49, United States Code (relating to violations of laws and regulations enforced by the Department of Transportation with respect to the transportation of hazardous material).”</p></blockquote><p>* * *</p>\"},{\"id\":\"PUB.L.104–294\",\"content\":\"<p><strong>ECONOMIC ESPIONAGE ACT OF 1996</strong></p><p><strong>(PUB. L. 104–294)</strong></p><p><strong>ANNUAL REPORT ON USE OF CERTAIN TECHNOLOGY TO FACILITATE CRIMINAL CONDUCT.</strong> Pub.L. 104–294, Title V, § 501, Oct. 11, 1996, 110 Stat. 3497 [also classified to 18 U.S.C. § 3552 note], provided:</p><p>“<strong>Sec. 501. Use of Certain Technology to Facilitate Criminal Conduct.</strong></p><p><strong>(a) Information.—</strong>The Administrative Office of the United States courts shall establish policies and procedures for the inclusion in all presentence reports of information that specifically identifies and describes any use of encryption or scrambling technology that would be relevant to an enhancement under section 3C1.1 (dealing with Obstructing or Impeding the Administration of Justice) of the Sentencing Guidelines or to offense conduct under the Sentencing Guidelines.</p><p><strong>(b) Compiling and Report.—</strong>The United States Sentencing Commission shall—</p><blockquote><p><strong>(1)</strong> compile and analyze any information contained in documentation described in subsection (a) relating to the use of encryption or scrambling technology to facilitate or conceal criminal conduct; and</p><p><strong>(2)</strong> based on the information compiled and analyzed under paragraph (1), annually report to the Congress on the nature and extent of the use of encryption or scrambling technology to facilitate or conceal criminal conduct.”</p></blockquote><p>* * *</p>\"},{\"id\":\"PUB.L.104–305\",\"content\":\"<p><strong>DRUG-INDUCED RAPE PREVENTION AND PUNISHMENT ACT OF 1996</strong></p><p><strong>(PUB. L. 104–305)</strong></p><p><strong>FLUNITRAZEPAM OFFENSES.</strong> Pub. L. 104– 305, § 2(b)(3), Oct. 13, 1996, 110 Stat. 3808, provided:</p><p>“<strong>(3) Sentencing guidelines.—</strong></p><blockquote><p><strong>(A) Amendment of sentencing guidelines.—</strong>Pursuant to its authority under section 994 of title 28, United States Code, the United States Sentencing Commission shall review and amend, as appropriate, the sentencing guidelines for offenses involving flunitrazepam.</p><p><strong>(B) Summary.—</strong>The United States Sentencing Commission shall submit to the Congress—</p><p><strong>(i)</strong> a summary of its review under subparagraph (A); and</p><p><strong>(ii)</strong> an explanation for any amendment to the sentencing guidelines made under subparagraph (A).</p><p><strong>(C) Serious nature of offenses.—</strong>In carrying out this paragraph, the United States Sentencing Commission shall ensure that the sentencing guidelines for offenses involving flunitrazepam reflect the serious nature of such offenses.”</p></blockquote><p>* * *</p>\"},{\"id\":\"PUB.L.105–101\",\"content\":\"<p><strong>VETERANS’ CEMETERY PROTECTION ACT OF 1997</strong></p><p><strong>(PUB. L. 105–101)</strong></p><p><strong>NATIONAL CEMETERY PROPERTY OFFENSES.</strong> Pub.L. 105–101, § 2, November 19, 1997, 111 Stat. 2202, provided:</p><p>“<strong>Sec. 2. Sentencing for Offenses Against Property at National Cemeteries.</strong></p><p><strong>(a) In General.</strong>—Pursuant to its authority under section 994 of title 28, United States Code, the United States Sentencing Commission shall review and amend the Federal sentencing guidelines to provide a sentencing enhancement of not less than 2 levels for any offense against the property of a national cemetery.</p><p><strong>(b) Commission Duties.</strong>—In carrying out subsection (a), the Sentencing Commission shall ensure that the sentences, guidelines, and policy statements for offenders convicted of an offense described in that subsection are—</p><blockquote><p><strong>(1)</strong> appropriately severe; and</p><p><strong>(2)</strong> reasonably consistent with other relevant directives and with other Federal sentencing guidelines.”</p></blockquote><p>* * *</p>\"},{\"id\":\"PUB.L.105–147\",\"content\":\"<p><strong>NO ELECTRONIC THEFT (NET) ACT</strong></p><p><strong>(PUB. L. 105–147)</strong></p><p><strong>INTELLECTUAL PROPERTY OFFENSES.</strong> Pub. L. 105–147, § 2(g), Dec. 16, 1997, 111 Stat. 2678, provided:</p><p>“<strong>(g)</strong> <strong>Directive to Sentencing Commission.—(1)</strong> Under the authority of the Sentencing Reform Act of 1984 (Public Law 98–473; 98 Stat.1987) and section 21 of the Sentencing Act of 1987 (Public Law 100–182; 101 Stat. 1271; 18 U.S.C. 994 note) (including the authority to amend the sentencing guidelines and policy statements), the United States Sentencing Commission shall ensure that the applicable guideline range for a defendant convicted of a crime against intellectual property (including offenses set forth at section 506(a) of title 17, United States Code, and sections 2319, 2319A, and 2320 of title 18, United States Code) is sufficiently stringent to deter such a crime and to adequately reflect the additional considerations set forth in paragraph (2) of this subsection.</p><p><strong>(2)</strong> In implementing paragraph (1), the Sentencing Commission shall ensure that the guidelines provide for consideration of the retail value and quantity of the items with respect to which the crime against intellectual property was committed.”</p><p>* * *</p>\"},{\"id\":\"PUB.L.105–172\",\"content\":\"<p><strong>WIRELESS TELEPHONE PROTECTION ACT</strong></p><p><strong>(PUB. L. 105–172)</strong></p><p><strong>WIRELESS TELEPHONE CLONING.</strong> Pub.L. 105–172, § 2(e), Apr. 24, 1998, 112 Stat. 55, provided:</p><p>“<strong>(e) Amendment of Federal Sentencing Guidelines for Wireless Telephone Cloning.—</strong></p><blockquote><p><strong>(1) In general.</strong>—Pursuant to its authority under section 994 of title 28, United States Code, the United States Sentencing Commission shall review and amend the Federal sentencing guidelines and the policy statements of the Commission, if appropriate, to provide an appropriate penalty for offenses involving the cloning of wireless telephones (including offenses involving an attempt or conspiracy to clone a wireless telephone).</p><p><strong>(2)</strong> <strong>Factors for consideration.—</strong> In carrying out this subsection, the Commission shall consider, with respect to the offenses described in paragraph (1)—</p><p><strong>(A)</strong> the range of conduct covered by the offenses;</p><p><strong>(B)</strong> the existing sentences for the offenses;</p><p><strong>(C)</strong> the extent to which the value of the loss caused by the offenses (as defined in the Federal sentencing guidelines) is an adequate measure for establishing penalties under the Federal sentencing guidelines;</p><p><strong>(D)</strong> the extent to which sentencing enhancements within the Federal sentencing guidelines and the court’s authority to sentence above the applicable guideline range are adequate to ensure punishment at or near the maximum penalty for the most egregious conduct covered by the offenses;</p><p><strong>(E)</strong> the extent to which the Federal sentencing guideline sentences for the offenses have been constrained by statutory maximum penalties;</p><p><strong>(F)</strong> the extent to which Federal sentencing guidelines for the offenses adequately achieve the purposes of sentencing set forth in section 3553(a)(2) of title 18, United States Code;</p><p><strong>(G)</strong> the relationship of Federal sentencing guidelines for the offenses to the Federal sentencing guidelines for other offenses of comparable seriousness; and</p><p><strong>(H)</strong> any other factor that the Commission considers to be appropriate.”</p></blockquote><p>* * *</p>\"},{\"id\":\"PUB.L.105–184\",\"content\":\"<p><strong>TELEMARKETING FRAUD PROTECTION ACT OF 1998</strong></p><p><strong>(PUB. L. 105–184)</strong></p><p><strong>TELEMARKETING FRAUD (SECTION 2326 OFFENSES).</strong> Pub.L. 105–184, § 6, June 23, 1998, 112 Stat. 520, provided:</p><p>“<strong>Sec. 6. Amendment of Federal Sentencing Guidelines.</strong></p><p><strong>(a) Definition of Telemarketing</strong>.—In this section, the term “telemarketing” has the meaning given that term in section 2326 of title 18, United States Code.</p><p><strong>(b) Directive to Sentencing Commission</strong>.—Pursuant to its authority under section 994(p) of title 28, United States Code, and in accordance with this section, the United States Sentencing Commission shall–</p><blockquote><p><strong>(1)</strong> promulgate Federal sentencing guidelines or amend existing sentencing guidelines (and policy statements, if appropriate) to provide for substantially increased penalties for persons convicted of offenses described in section 2326 of title 18, United States Code, as amended by this Act, in connection with the conduct of telemarketing; and</p><p><strong>(2)</strong> submit to Congress an explanation of each action taken under paragraph (1) and any additional policy recommendations for combating the offenses described in that paragraph.</p></blockquote><p><strong>(c) Requirements.</strong>—In carrying out this section, the Commission shall—</p><blockquote><p><strong>(1)</strong> ensure that the guidelines and policy statements promulgated or amended pursuant to subsection (b)(1) and any recommendations submitted thereunder reflect the serious nature of the offenses;</p><p><strong>(2)</strong> provide an additional appropriate sentencing enhancement, if the offense involved sophisticated means, including but not limited to sophisticated concealment efforts, such as perpetrating the offense from outside the United States;</p><p><strong>(3)</strong> provide an additional appropriate sentencing enhancement for cases in which a large number of vulnerable victims, including but not limited to victims described in section 2326(2) of title 18, United States Code, are affected by a fraudulent scheme or schemes;</p><p><strong>(4)</strong> ensure that guidelines and policy statements promulgated or amended pursuant to subsection (b)(1) are reasonably consistent with other relevant statutory directives to the Commission and with other guidelines;</p><p><strong>(5)</strong> account for any aggravating or mitigating circumstances that might justify upward or downward departures;</p><p><strong>(6)</strong> ensure that the guidelines adequately meet the purposes of sentencing as set forth in section 3553(a)(2) of title 18, United States Code; and</p><p><strong>(7)</strong> take any other action the Commission considers necessary to carry out this section.</p></blockquote><p><strong>(d) Emergency Authority</strong>.—The Commission shall promulgate the guidelines or amendments provided for under this subsection as soon as practicable, and in any event not later than 120 days after the date of the enactment of the Telemarketing Fraud Prevention Act of 1998, in accordance with the procedures set forth in section 21(a) of the Sentencing Reform Act of 1987, as though the authority under that authority had not expired, except that the Commission shall submit to Congress the emergency guidelines or amendments promulgated under this section, and shall set an effective date for those guidelines or amendments not earlier than 30 days after their submission to Congress.”</p><p>* * *</p>\"},{\"id\":\"PUB.L.105–314\",\"content\":\"<p><strong>PROTECTION OF CHILDREN FROM SEXUAL PREDATORS ACT OF 1998</strong></p><p><strong>(PUB. L. 105–314)</strong></p><p><strong>SEXUAL OFFENSES AGAINST CHILDREN AND REPEAT SEXUAL OFFENDERS.</strong> Pub.L. 105–314, Title V, Oct. 30, 1998, 112 Stat. 2980 provided:</p><p>“<strong>TITLE V—INCREASED PENALTIES FOR OFFENSES AGAINST CHILDREN</strong></p><p><strong>AND FOR REPEAT OFFENDERS</strong></p><p>“<strong>Sec. 501. Death or Life in Prison for Certain Offenses Whose Victims Are Children.</strong></p><p>[omitted]</p><p>“<strong>Sec. 502. Sentencing Enhancement for Chapter 117 Offenses.</strong></p><p><strong>(a)</strong> <strong>In General</strong>.—Pursuant to its authority under section 994(p) of title 28, United States Code, the United States Sentencing Commission shall review and amend the Federal Sentencing Guidelines to provide a sentencing enhancement for offenses under chapter 117 [18 U.S.C.A. § 2421 et seq.] of title 18, United States Code.</p><p><strong>(b)</strong> <strong>Instruction to Commission</strong>.—In carrying out subsection (a), the United States Sentencing Commission shall ensure that the sentences, guidelines, and policy statements for offenders convicted of offenses described in subsection (a) are appropriately severe and reasonably consistent with other relevant directives and with other Federal Sentencing Guidelines.</p><p>“<strong>Sec. 503. Increased Penalties for Use of a Computer in the Sexual Abuse or Exploitation of a Child.</strong></p><p>Pursuant to its authority under section 994(p) of title 28, United States Code, the United States Sentencing Commission shall—</p><blockquote><p><strong>(1)</strong> review the Federal Sentencing Guidelines for—</p><p><strong>(A)</strong> aggravated sexual abuse under section 2241 of title 18, United States Code;</p><p><strong>(B)</strong> sexual abuse under section 2242 of title 18, United States Code;</p><p><strong>(C)</strong> sexual abuse of a minor or ward under section 2243 of title 18, United States Code; and</p><p><strong>(D)</strong> coercion and enticement of a minor under section 2422(b) of title 18, United States Code, contacting a minor under section 2422(c) of title 18, United States Code, and transportation of minors and travel under section 2423 of title 18, United States Code; and</p><p><strong>(2)</strong> upon completion of the review under paragraph (1), promulgate amendments to the Federal Sentencing Guidelines to provide appropriate enhancement if the defendant used a computer with the intent to persuade, induce, entice, coerce, or facilitate the transport of a child of an age specified in the applicable provision of law referred to in paragraph (1) to engage in any prohibited sexual activity.</p></blockquote><p>“<strong>Sec. 504. Increased Penalties for Knowing Misrepresentation in the Sexual Abuse or Exploitation of a Child.</strong></p><p>Pursuant to its authority under section 994(p) of title 28, United States Code, the United States Sentencing Commission shall—</p><blockquote><p><strong>(1)</strong> review the Federal Sentencing Guidelines on aggravated sexual abuse under section 2241 of title 18, United States Code, sexual abuse under section 2242 of title 18, United States Code, sexual abuse of a minor or ward under section 2243 of title 18, United States Code, coercion and enticement of a minor under section 2422(b) of title 18, United States Code, contacting a minor under section 2422(c) of title 18, United States Code, and transportation of minors and travel under section 2423 of title 18, United States Code; and</p><p><strong>(2)</strong> upon completion of the review under paragraph (1), promulgate amendments to the Federal Sentencing Guidelines to provide appropriate enhancement if the defendant knowingly misrepresented the actual identity of the defendant with the intent to persuade, induce, entice, coerce, or facilitate the transport of a child of an age specified in the applicable provision of law referred to in paragraph (1) to engage in a prohibited sexual activity.</p></blockquote><p>“<strong>Sec. 505. Increased Penalties for Pattern of Activity of Sexual Exploitation of Children.</strong></p><p>Pursuant to its authority under section 994(p) of title 28, United States Code, the United States Sentencing Commission shall—</p><blockquote><p><strong>(1)</strong> review the Federal Sentencing Guidelines on aggravated sexual abuse under section 2241 of title 18, United States Code, sexual abuse under section 2242 of title 18, United States Code, sexual abuse of a minor or ward under section 2243 of title 18, United States Code, coercion and enticement of a minor under section 2422(b) of title 18, United States Code, contacting a minor under section 2422(c) of title 18, United States Code, and transportation of minors and travel under section 2423 of title 18, United States Code; and</p><p><strong>(2)</strong> upon completion of the review under paragraph (1), promulgate amendments to the Federal Sentencing Guidelines to increase penalties applicable to the offenses referred to in paragraph (1) in any case in which the defendant engaged in a pattern of activity involving the sexual abuse or exploitation of a minor.</p></blockquote><p>“<strong>Sec. 506. Clarification of Definition of Distribution of Pornography.</strong></p><p>Pursuant to its authority under section 994(p) of title 28, United States Code, the United States Sentencing Commission shall—</p><blockquote><p><strong>(1)</strong> review the Federal Sentencing Guidelines relating to the distribution of pornography covered under chapter 110 of title 18, United States Code [18 U.S.C.A. § 2251 et seq.], relating to the sexual exploitation and other abuse of children; and</p><p><strong>(2)</strong> upon completion of the review under paragraph (1), promulgate such amendments to the Federal Sentencing Guidelines as are necessary to clarify that the term ‘distribution of pornography’ applies to the distribution of pornography—</p><p><strong>(A)</strong> for monetary remuneration; or</p><p><strong>(B)</strong> for a nonpecuniary interest.</p></blockquote><p>“<strong>Sec. 507. Directive to the United States Sentencing Commission.</strong></p><p>In carrying out this title, the United States Sentencing Commission shall—</p><blockquote><p><strong>(1)</strong> with respect to any action relating to the Federal Sentencing Guidelines subject to this title, ensure reasonable consistency with other guidelines of the Federal Sentencing Guidelines; and</p><p><strong>(2)</strong> with respect to an offense subject to the Federal Sentencing Guidelines, avoid duplicative punishment under the Federal Sentencing Guidelines for substantially the same offense.”</p></blockquote><p>* * *</p>\"},{\"id\":\"PUB.L.105–318\",\"content\":\"<p><strong>IDENTITY THEFT AND ASSUMPTION </strong></p><p><strong>DETERRENCE ACT OF 1998</strong></p><p><strong>(PUB. L. 105–318)</strong></p><p><strong>IDENTITY THEFT AND DOCUMENT FRAUD (SECTION 1028 OFFENSES).</strong> Pub.L. 105–318, § 4, Oct. 30, 1998, 112 Stat. 3009, provided:</p><p>“<strong>Sec. 4. Amendment of Federal Sentencing Guidelines for Offenses Under Section 1028.</strong></p><p><strong>(a) In general.—</strong>Pursuant to its authority under section 994(p) of title 28, United States Code, the United States Sentencing Commission shall review and amend the Federal sentencing guidelines and the policy statements of the Commission, as appropriate, to provide an appropriate penalty for each offense under section 1028 of title 18, United States Code, as amended by this Act.</p><p><strong>(b)</strong> <strong>Factors for consideration.—</strong>In carrying out subsection (a), the United States Sentencing Commission shall consider, with respect to each offense described in subsection (a)—</p><blockquote><p><strong>(1)</strong> the extent to which the number of victims (as defined in section 3663A(a) of title 18, United States Code) involved in the offense, including harm to reputation, inconvenience, and other difficulties resulting from the offense, is an adequate measure for establishing penalties under the Federal sentencing guidelines;</p><p><strong>(2)</strong> the number of means of identification, identification documents, or false identification documents (as those terms are defined in section 1028(d) of title 18, United States Code, as amended by this Act) involved in the offense, is an adequate measure for establishing penalties under the Federal sentencing guidelines;</p><p><strong>(3)</strong> the extent to which the value of the loss to any individual caused by the offense is an adequate measure for establishing penalties under the Federal sentencing guidelines;</p><p><strong>(4)</strong> the range of conduct covered by the offense;</p><p><strong>(5)</strong> the extent to which sentencing enhancements within the Federal sentencing guidelines and the court’s authority to sentence above the applicable guideline range are adequate to ensure punishment at or near the maximum penalty for the most egregious conduct covered by the offense;</p><p><strong>(6)</strong> the extent to which Federal sentencing guidelines sentences for the offense have been constrained by statutory maximum penalties;</p><p><strong>(7)</strong> the extent to which Federal sentencing guidelines for the offense adequately achieve the purposes of sentencing set forth in section 3553(a)(2) of title 18, United States Code; and</p><p><strong>(8)</strong> any other factor that the United States Sentencing Commission considers to be appropriate.”</p></blockquote><p>* * *</p>\"},{\"id\":\"PUB.L.106–160\",\"content\":\"<p><strong>DIGITAL THEFT DETERRENCE AND </strong></p><p><strong>COPYRIGHT DAMAGES IMPROVEMENT ACT OF 1999</strong></p><p><strong>(PUB. L. 106–160)</strong></p><p><strong>INTELLECTUAL PROPERTY OFFENSES.</strong> Pub. L. 106–160, § 3, Dec. 9, 1999, 113 Stat. 1774, provided:</p><p>“<strong>Sec. 3. Sentencing Commission Guidelines.</strong></p><p>Within 120 days after the date of the enactment of this Act [Dec. 9, 1999], or within 120 days after the first date on which there is a sufficient number of voting members of the Sentencing Commission to constitute a quorum, whichever is later, the Commission shall promulgate emergency guideline amendments to implement section 2(g) of the No Electronic Theft (NET) Act (29 U.S.C. 994 note<a href='#fn4' class='footnoteRef' id='fnref4'><sup>4</sup></a>) in accordance with the procedures set forth in section 21(a) of the Sentencing Act of 1987 [28 U.S.C. 994 note], as though the authority under that Act had not expired.”</p><p>* * *</p>\"},{\"id\":\"PUB.L.106–310\",\"content\":\"<p><strong>CHILDREN’S HEALTH ACT OF 2000</strong></p><p><strong>or</strong></p><p><strong>METHAMPHETAMINE ANTI-PROLIFERATION ACT OF 2000</strong></p><p><strong>(PUB. L. 106–310)</strong></p><p><strong>AMPHETAMINE OFFENSES.</strong> Pub. L. 106–310, Div. B, Title XXXVI, § 3611, Oct. 17, 2000, 114 Stat. 1228, provided:</p><p>“<strong>Sec. 3611. Enhanced Punishment of Amphetamine Laboratory Operators.</strong></p><p><strong>(a)</strong> <strong>Amendment to Federal Sentencing Guidelines.</strong>—Pursuant to its authority under section 994(p) of title 28, United States Code, the United States Sentencing Commission shall amend the Federal sentencing guidelines in accordance with this section with respect to any offense relating to the manufacture, importation, exportation, or trafficking in amphetamine (including an attempt or conspiracy to do any of the foregoing) in violation of—</p><blockquote><p><strong>(1)</strong> the Controlled Substances Act (21 U.S.C. 801 et seq.);</p><p><strong>(2)</strong> the Controlled Substances Import and Export Act (21 U.S.C. 951 et seq.); or</p><p><strong>(3)</strong> the Maritime Drug Law Enforcement Act (46 U.S.C. App. 1901 et seq.).</p></blockquote><p><strong>(b)</strong> <strong>General Requirement.</strong>—In carrying out this section, the United States Sentencing Commission shall, with respect to each offense described in subsection (a) relating to amphetamine—</p><blockquote><p><strong>(1)</strong> review and amend its guidelines to provide for increased penalties such that those penalties are comparable to the base offense level for methamphetamine; and</p><p><strong>(2)</strong> take any other action the Commission considers necessary to carry out this subsection.</p></blockquote><p><strong>(c)</strong> <strong>Additional requirements</strong>.—In carrying out this section, the United States Sentencing Commission shall ensure that the sentencing guidelines for offenders convicted of offenses described in subsection (a) reflect the heinous nature of such offenses, the need for aggressive law enforcement action to fight such offenses, and the extreme dangers associated with unlawful activity involving amphetamines, including—</p><blockquote><p><strong>(1)</strong> the rapidly growing incidence of amphetamine abuse and the threat to public safety that such abuse poses;</p><p>(<strong>2)</strong> the high risk of amphetamine addiction;</p><p><strong>(3)</strong> the increased risk of violence associated with amphetamine trafficking and abuse; and</p><p><strong>(4)</strong> the recent increase in the illegal importation of amphetamine and precursor chemicals.</p></blockquote><p><strong>(d)</strong> <strong>Emergency</strong> <strong>Authority</strong> <strong>to Sentencing Commission.</strong>—The United States Sentencing Commission shall promulgate amendments pursuant to this section as soon as practicable after the date of the enactment of this Act in accordance with the procedure set forth in section 21(a) of the Sentencing Act of 1987 (Public Law 100–182), as though the authority under that Act had not expired.”</p><p><strong>MANUFACTURE OF AMPHETAMINE OR METHAMPHETAMINE.</strong> Pub. L. 106–310, Div. B, Title XXXVI, § 3612, Oct. 12, 2000, 114 Stat. 1228, provided:</p><p>“<strong>Sec. 3612. Enhanced Punishment of Amphetamine or Methamphetamine Laboratory Operators.</strong></p><p><strong>(a) Federal Sentencing Guidelines.</strong>—</p><blockquote><p><strong>(1) In General.</strong>—Pursuant to its authority under section 994(p) of title 28, United States Code, the United States Sentencing Commission shall amend the Federal sentencing guidelines in accordance with paragraph (2) with respect to any offense relating to the manufacture, attempt to manufacture, or conspiracy to manufacture amphetamine or methamphetamine in violation of—</p><p><strong>(A)</strong> the Controlled Substances Act (21 U.S.C. 801 et seq.);</p><p><strong>(B)</strong> the Controlled Substances Import and Export Act (21 U.S.C. 951 et seq.); or</p><p>(<strong>C)</strong> the Maritime Drug Law Enforcement Act (46 U.S.C. App. 1901 et seq.).</p><p><strong>(2) Requirements.</strong>—In carrying out this paragraph, the United States Sentencing Commission shall—</p><p><strong>(A)</strong> if the offense created a substantial risk of harm to human life (other than a life described in subparagraph (B)) or the environment, increase the base offense level for the offense—</p><p><strong>(i)</strong> by not less than 3 offense levels above the applicable level in effect on the date of the enactment of this Act; or</p><p><strong>(ii)</strong> if the resulting base offense level after an increase under clause (i) would be less than level 27, to not less than level 27; or</p><p><strong>(B)</strong> if the offense created a substantial risk of harm to the life of a minor or incompetent, increase the base offense level for the offense—</p><p><strong>(i)</strong> by not less than 6 offense levels above the applicable level in effect on the date of the enactment of this Act; or</p><p><strong>(ii)</strong> if the resulting base offense level after an increase under clause (i) would be less than level 30, to not less than level 30.</p><p><strong>(3)</strong> <strong>Emergency</strong> <strong>authority</strong> <strong>to</strong> <strong>Sentencing</strong> <strong>Commission.</strong>—The United States Sentencing Commission shall promulgate amendments pursuant to this subsection as soon as practicable after the date of the enactment of this Act in accordance with the procedure set forth in section 21(a) of the Sentencing Act of 1987 (Public Law 100–182), as though the authority under that Act had not expired.</p></blockquote><p><strong>(b)</strong> <strong>Effective</strong> <strong>date</strong>.—The amendments made pursuant to this section shall apply with respect to any offense occurring on or after the date that is 60 days after the date of the enactment of this Act.”</p><p><strong>TRAFFICKING IN LIST I CHEMICALS.</strong> Pub. L. 106–310, Div. B, Title XXXVI, § 3651, Oct. 17, 2000, 1143 Stat. 1238, provided:</p><p>“<strong>Sec. 3651. Enhanced Punishment for Trafficking in List I Chemicals.</strong></p><p><strong>(a) Amendments to Federal Sentencing Guidelines.</strong>—Pursuant to its authority under section 994(p) of title 28, United States Code, the United States Sentencing Commission shall amend the Federal sentencing guidelines in accordance with this section with respect to any violation of paragraph (1) or (2) of section 401(d) of the Controlled Substances Act (21 U.S.C. 841(d)) involving a list I chemical and any violation of paragraph (1) or (3) of section 1010(d) of the Controlled Substance Import and Export Act (21 U.S.C. 960(d)) involving a list I chemical.</p><p><strong>(b)</strong> <strong>Ephedrine, Phenylpropanolamine, and Pseudoephedrine.</strong>—</p><blockquote><p><strong>(1)</strong> <strong>In general.</strong>—In carrying this section, the United States Sentencing Commission shall, with respect to each offense described in subsection (a) involving ephedrine, phenylpropanolamine, or pseudoephedrine (including their salts, optical isomers, and salts of optical isomers), review and amend its guidelines to provide for increased penalties such that those penalties corresponded to the quantity of controlled substance that could reasonably have been manufactured using the quantity of ephedrine, phenylpropanolamine, or pseudoephedrine possessed or distributed.</p><p><strong>(2) Conversion ratios.</strong>—For the purposes of the amendments made by this subsection, the quantity of controlled substance that could reasonably have been manufactured shall be determined by using a table of manufacturing conversion ratios for ephedrine, phenylpropanolamine, and pseudoephedrine, which table shall be established by the Sentencing Commission based on scientific, law enforcement, and other data the Sentencing Commission considers appropriate.</p></blockquote><p><strong>(c)</strong> <strong>Other List I Chemicals.</strong>—In carrying this section, the United States Sentencing Commission shall, with respect to each offense described in subsection (a) involving any list I chemical other than ephedrine, phenylpropanolamine, or pseudoephedrine, review and amend its guidelines to provide for increased penalties such that those penalties reflect the dangerous nature of such offenses, the need for aggressive law enforcement action to fight such offenses, and the extreme dangers associated with unlawful activity involving methamphetamine and amphetamine, including—</p><blockquote><p><strong>(1)</strong> the rapidly growing incidence of controlled substance manufacturing;</p><p><strong>(2)</strong> the extreme danger inherent in manufacturing controlled substances;</p><p><strong>(3)</strong> the threat to public safety posed by manufacturing controlled substances; and</p><p><strong>(4)</strong> the recent increase in the importation, possession, and distribution of list I chemicals for the purpose of manufacturing controlled substances.</p></blockquote><p><strong>(d) Emergency Authority to Sentencing Commission.</strong>—The United States Sentencing Commission shall promulgate amendments pursuant to this section as soon as practicable after the date of the enactment of this Act in accordance with the procedure set forth in section 21(a) of the Sentencing Act of 1987 (Public Law 100–182), as though the authority under that Act had not expired.”</p><p><strong>ECSTASY OFFENSES.</strong> Pub. L. 106–310, Div. B, Title XXXVI, § 3661, 3663, 3664, Oct. 17, 2000, 114 Stat. 1242, provided:</p><p>“<strong>Subtitle C—Ecstasy Anti-Proliferation Act of 2000</strong></p><p>“<strong>Sec. 3661. Short title.</strong></p><p>This subtitle may be cited as the ‘Ecstasy Anti-Proliferation Act of 2000’.</p><p>“<strong>Sec. 3662. Findings.</strong></p><p>[omitted]</p><p>“<strong>Sec. 3663. Enhanced Punishment of Ecstasy Traffickers.</strong></p><p><strong>(a) Amendment to Federal Sentencing Guidelines.</strong>—Pursuant to its authority under section 994(p) of title 28, United States Code, the United States Sentencing Commission (referred to in this section as the ‘Commission’) shall amend the Federal sentencing guidelines regarding any offense relating to the manufacture, importation, or exportation of, or trafficking in—</p><blockquote><p><strong>(1)</strong> 3,4-methylenedioxy methamphetamine;</p><p><strong>(2)</strong> 3,4-methylenedioxy amphetamine;</p><p><strong>(3)</strong> 3,4-methylenedioxy-N-ethylamphetamine;</p><p><strong>(4)</strong> paramethoxymethamphetamine (PMA); or</p><p><strong>(5)</strong> any other controlled substance, as determined by the Commission in consultation with the Attorney General, that is marketed as Ecstasy and that has either a chemical structure substantially similar to that of 3,4- methylenedioxy methamphetamine or an effect on the central nervous system substantially similar to or greater than that of 3,4-methylenedioxy methamphetamine, including an attempt or conspiracy to commit an offense described in paragraph (1), (2), (3), (4), or (5) in violation of the Controlled Substances Act (21 U.S.C. 801 et seq.), the Controlled Substances Import and Export Act (21 U.S.C. 951 et seq.), or the Maritime Drug Law Enforcement Act (46 U.S.C. 1901 et seq.).</p></blockquote><p><strong>(b) General</strong> <strong>Requirements</strong>.—In carrying out this section, the Commission shall, with respect to each offense described in subsection (a)—</p><blockquote><p><strong>(1)</strong> review and amend the Federal sentencing guidelines to provide for increased penalties such that those penalties reflect the seriousness of these offenses and the need to deter them; and</p><p><strong>(2)</strong> take any other action the Commission considers to be necessary to carry out this section.</p></blockquote><p><strong>(c)</strong> <strong>Additional</strong> <strong>Requirements</strong>.—In carrying out this section, the Commission shall ensure that the Federal sentencing guidelines for offenders convicted of offenses described in subsection (a) reflect—</p><blockquote><p><strong>(1)</strong> the need for aggressive law enforcement action with respect to offenses involving the controlled substances described in subsection (a); and</p><p><strong>(2)</strong> the dangers associated with unlawful activity involving such substances, including—</p><p><strong>(A)</strong> the rapidly growing incidence of abuse of the controlled substances described in subsection (a) and the threat to public safety that such abuse poses;</p><p><strong>(B)</strong> the recent increase in the illegal importation of the controlled substances described in subsection (a);</p><p><strong>(C)</strong> the young age at which children are beginning to use the controlled substances described in subsection (a);</p><p><strong>(D)</strong> the fact that the controlled substances described in subsection (a) are frequently marketed to youth;</p><p><strong>(E)</strong> the large number of doses per gram of the controlled substances described in subsection (a); and</p><p><strong>(F)</strong> any other factor that the Commission determines to be appropriate.</p></blockquote><p><strong>(d)</strong> <strong>Sense of the Congress.</strong>—It is the sense of the Congress that—</p><blockquote><p><strong>(1)</strong> the base offense levels for Ecstasy are too low, particularly for high-level traffickers, and should be increased, such that they are comparable to penalties for other drugs of abuse; and</p><p><strong>(2)</strong> based on the fact that importation of Ecstasy has surged in the past few years, the traffickers are targeting the Nation’s youth, and the use of Ecstasy among youth in the United States is increasing even as other drug use among this population appears to be leveling off, the base offense levels for importing and trafficking the controlled substances described in subsection (a) should be increased.</p></blockquote><p><strong>(e)</strong> <strong>Report</strong>.—Not later than 60 days after the amendments pursuant to this section have been promulgated, the Commission shall—</p><blockquote><p><strong>(1)</strong> prepare a report describing the factors and information considered by the Commission in promulgating amendments pursuant to this section; and</p><p><strong>(2)</strong> submit the report to—</p><p><strong>(A)</strong> the Committee on the Judiciary, the Committee on Health, Education, Labor, and Pensions, and the Committee on Appropriations of the Senate; and</p><p><strong>(B)</strong> the Committee on the Judiciary, the Committee on Commerce, and the Committee on Appropriations of the House of Representatives.</p></blockquote><p>“<strong>Sec. 3664. Emergency Authority to United States Sentencing Commission.</strong></p><p>The United States Sentencing Commission shall promulgate amendments under this subtitle as soon as practicable after the date of the enactment of this Act [Oct. 17, 2000] in accordance with the procedure set forth in section 21(a) of the Sentencing Act of 1987 (Public Law 100–182) [28 U.S.C. 994 note], as though the authority under that Act had not expired.”</p><p>* * *</p>\"},{\"id\":\"PUB.L.106–386\",\"content\":\"<p><strong>VICTIMS OF TRAFFICKING AND VIOLENCE PROTECTION ACT OF 2000</strong></p><p><strong>(PUB. L. 106–386)</strong></p><p><strong>PEONAGE, INVOLUNTARY SERVITUDE, SLAVE TRADE OFFENSES, AND OTHER HUMAN TRAFFICKING OFFENSES.</strong> Pub. L. 106–386, Div. A, § 112(b), Oct. 28, 2000, 114 Stat. 1489, provided:</p><p>“<strong>(b)</strong> <strong>Amendment to the Sentencing Guidelines.</strong>—</p><blockquote><p><strong>(1)</strong> Pursuant to its authority under section 994 of title 28, United States Code, and in accordance with this section, the United States Sentencing Commission shall review and, if appropriate, amend the sentencing guidelines and policy statements applicable to persons convicted of offenses involving the trafficking of persons including component or related crimes of peonage, involuntary servitude, slave trade offenses, and possession, transfer or sale of false immigration documents in furtherance of trafficking, and the Fair Labor Standards Act and the Migrant and Seasonal Agricultural Worker Protection Act.</p><p><strong>(2)</strong> In carrying out this subsection, the Sentencing Commission shall—</p><p><strong>(A)</strong> take all appropriate measures to ensure that these sentencing guidelines and policy statements applicable to the offenses described in paragraph (1) of this subsection are sufficiently stringent to deter and adequately reflect the heinous nature of such offenses;</p><p><strong>(B)</strong> consider conforming the sentencing guidelines applicable to offenses involving trafficking in persons to the guidelines applicable to peonage, involuntary servitude, and slave trade offenses; and</p><p><strong>(C)</strong> consider providing sentencing enhancements for those convicted of the offenses described in paragraph (1) of this subsection that—</p><p><strong>(i)</strong> involve a large number of victims;</p><p><strong>(ii)</strong> involve a pattern of continued and flagrant violations;</p><p><strong>(iii</strong>) involve the use or threatened use of a dangerous weapon; or</p><p><strong>(iv)</strong> result in the death or bodily injury of any person.</p><p><strong>(3)</strong> The Commission may promulgate the guidelines or amendments under this subsection in accordance with the procedures set forth in section 21(a) of the Sentencing Act of 1987, as though the authority under that Act had not expired.”.</p></blockquote><p><strong>INTERSTATE STALKING (SECTION 2261A OFFENSES).</strong> Pub. L. 106–386, Div. B, Title I, § 1107(b), Oct. 28, 2000, 114 Stat. 1498, provided:</p><p>“<strong>(b) Interstate Stalking.—</strong></p><blockquote><p><strong>(1) In general.—</strong>[amended 18 U.S.C. § 2261A (Stalking); omitted]</p><p><strong>(2) Amendment of federal sentencing guidelines.—</strong></p><p><strong>(A)</strong> <strong>In general.</strong>—Pursuant to its authority under section 994 of title 28, United States Code, the United States Sentencing Commission shall amend the Federal Sentencing Guidelines to reflect the amendment made by this subsection.</p><p><strong>(B)</strong> <strong>Factors for consideration.</strong>—In carrying out subparagraph (A), the Commission shall consider—</p><p><strong>(i)</strong> whether the Federal Sentencing Guidelines relating to stalking offenses should be modified in light of the amendment made by this subsection; and</p><p><strong>(ii)</strong> whether any changes the Commission may make to the Federal Sentencing Guidelines pursuant to clause (i) should also be made with respect to offenses under chapter 110A of title 18, United States Code.”</p></blockquote><p>* * *</p>\"},{\"id\":\"PUB.L.106–420\",\"content\":\"<p><strong>COLLEGE SCHOLARSHIP FRAUD </strong></p><p><strong>PREVENTION ACT OF 2000</strong></p><p><strong>(PUB. L. 106–420)</strong></p><p><strong>HIGHER EDUCATION FINANCIAL ASSISTANCE FRAUD.</strong> Pub. L. 106–420, § 3, Nov. 1, 2000, 114 Stat. 1868, provided:</p><p>“<strong>Sec. 3. Sentencing Enhancement for Higher Education Financial Assistance Fraud.</strong></p><p>Pursuant to its authority under section 994(p) of title 28, United States Code, the United States Sentencing Commission shall amend the Federal sentencing guidelines in order to provide for enhanced penalties for any offense involving fraud or misrepresentation in connection with the obtaining or providing of, or the furnishing of information to a consumer on, any scholarship, grant, loan, tuition, discount, award, or other financial assistance for purposes of financing an education at an institution of higher education, such that those penalties are comparable to the base offense level for misrepresentation that the defendant was acting on behalf of a charitable, educational, religious, or political organization, or a government agency.”</p><p>* * *</p>\"},{\"id\":\"PUB.L.107–56\",\"content\":\"<p><strong>UNITING AND STRENGTHENING AMERICA BY PROVIDING APPROPRIATE TOOLS </strong></p><p><strong>REQUIRED TO INTERCEPT AND OBSTRUCT TERRORISM ACT OF 2001</strong></p><p><strong>or</strong></p><p><strong>USA PATRIOT ACT</strong></p><p><strong>(PUB. L. 107–56)</strong></p><p><strong>COMPUTER FRAUD AND ABUSE (SECTION 1030 OFFENSES).</strong> Pub. L. 107–56, Title VIII, § 814(f), Oct. 26, 2001, 115 Stat. 384, provided:</p><p>“<strong>(f) Amendment of Sentencing Guidelines Relating to Certain Computer Fraud and Abuse.—</strong>Pursuant to its authority under section 994(p) of title 28, United States Code, the United States Sentencing Commission shall amend the Federal sentencing guidelines to ensure that any individual convicted of a violation of section 1030 of title 18, United States Code, can be subjected to appropriate penalties, without regard to any mandatory minimum term of imprisonment.”</p><p>* * *</p>\"},{\"id\":\"PUB.L.107–155\",\"content\":\"<p><strong>BIPARTISAN CAMPAIGN REFORM ACT OF 2002</strong></p><p><strong>(PUB. L. 107–155)</strong></p><p><strong>ELECTION LAW VIOLATIONS.</strong> Pub. L. 107–155, § 314, Mar. 27, 2002, 116 Stat. 107, provided:</p><p>“<strong>Sec. 314. Sentencing Guidelines.</strong></p><p><strong>(a) In General.—</strong>The United States Sentencing Commission shall—</p><blockquote><p><strong>(1)</strong> promulgate a guideline, or amend an existing guideline under section 994 of title 28, United States Code, in accordance with paragraph (2), for penalties for violations of the Federal Election Campaign Act of 1971 and related election laws; and</p><p><strong>(2)</strong> submit to Congress an explanation of any guidelines promulgated under paragraph (1) and any legislative or administrative recommendations regarding enforcement of the Federal Election Campaign Act of 1971 and related election laws.</p></blockquote><p><strong>(b) Considerations.—</strong>The Commission shall provide guidelines under subsection (a) taking into account the following considerations:</p><blockquote><p><strong>(1)</strong> Ensure that the sentencing guidelines and policy statements reflect the serious nature of such violations and the need for aggressive and appropriate law enforcement action to prevent such violations.</p><p><strong>(2)</strong> Provide a sentencing enhancement for any person convicted of such violation if such violation involves—</p><p><strong>(A)</strong> a contribution, donation, or expenditure from a foreign source;</p><p><strong>(B)</strong> a large number of illegal transactions;</p><p><strong>(C)</strong> a large aggregate amount of illegal contributions, donations, or expenditures;</p><p><strong>(D)</strong> the receipt or disbursement of governmental funds; and</p><p><strong>(E)</strong> an intent to achieve a benefit from the Federal Government.</p><p><strong>(3)</strong> Assure reasonable consistency with other relevant directives and guidelines of the Commission.</p><p><strong>(4)</strong> Account for aggravating or mitigating circumstances that might justify exceptions, including circumstances for which the sentencing guidelines currently provide sentencing enhancements.</p><p><strong>(5)</strong> Assure the guidelines adequately meet the purposes of sentencing under section 3553(a)(2) of title 18, United States Code.</p></blockquote><p><strong>(c) Effective Date; Emergency Authority to Promulgate Guidelines.—</strong></p><blockquote><p><strong>(1) Effective date.—</strong>Notwithstanding section 402, the United States Sentencing Commission shall promulgate guidelines under this section not later than the later of—</p><p><strong>(A)</strong> 90 days after the effective date of this Act; or</p><p><strong>(B)</strong> 90 days after the date on which at least a majority of the members of the Commission are appointed and holding office.</p><p><strong>(2) Emergency authority to promulgate guidelines.—</strong>The Commission shall promulgate guidelines under this section in accordance with the procedures set forth in section 21(a) of the Sentencing Reform Act of 1987, as though the authority under such Act has not expired.”</p></blockquote><p>* * *</p><p><strong>SARBANES–OXLEY ACT OF 2002</strong></p><p><strong>(PUB. L. 107–204)</strong></p><p><strong>OBSTRUCTION OF JUSTICE; FRAUD; ORGANIZATIONAL GUIDELINES.</strong> Pub. L. 107–204, Title VIII, § 805, July 30, 2002, 116 Stat. 802, provided:</p><p>“<strong>Sec. 805. Review of Federal Sentencing Guidelines for Obstruction of Justice and Extensive Criminal Fraud.</strong></p><p><strong>(a) Enhancement of Fraud and Obstruction of Justice Sentences.—</strong>Pursuant to section 994 of title 28, United States Code, and in accordance with this section, the United States Sentencing Commission shall review and amend, as appropriate, the Federal Sentencing Guidelines and related policy statements to ensure that—</p><blockquote><p><strong>(1)</strong> the base offense level and existing enhancements contained in United States Sentencing Guideline 2J1.2 relating to obstruction of justice are sufficient to deter and punish that activity;</p><p><strong>(2)</strong> the enhancements and specific offense characteristics relating to obstruction of justice are adequate in cases where—</p><p><strong>(A)</strong> the destruction, alteration, or fabrication of evidence involves—</p><p><strong>(i)</strong> a large amount of evidence, a large number of participants, or is otherwise extensive;</p><p>(<strong>ii)</strong> the selection of evidence that is particularly probative or essential to the investigation; or</p><p><strong>(iii</strong>) more than minimal planning; or</p><p><strong>(B)</strong> the offense involved abuse of a special skill or a position of trust;</p><p><strong>(3)</strong> the guideline offense levels and enhancements for violations of section 1519 or 1520 of title 18, United States Code, as added by this title, are sufficient to deter and punish that activity;</p><p><strong>(4)</strong> a specific offense characteristic enhancing sentencing is provided under United States Sentencing Guideline 2B1.1 (as in effect on the date of enactment of this Act) for a fraud offense that endangers the solvency or financial security of a substantial number of victims; and</p><p><strong>(5)</strong> the guidelines that apply to organizations in United States Sentencing Guidelines, chapter 8, are sufficient to deter and punish organizational criminal misconduct.</p></blockquote><p><strong>(b) Emergency Authority and Deadline for Commission Action.—</strong>The United States Sentencing Commission is requested to promulgate the guidelines or amendments provided for under this section as soon as practicable, and in any event not later than 180 days after the date of enactment of this Act, in accordance with the procedures set forth in section 219(a) of the Sentencing Reform Act of 1987, as though the authority under that Act had not expired.”.</p><p><strong>FRAUD AND CERTAIN OTHER WHITE-COLLAR OFFENSES.</strong> Pub. L. 107–204, Title IX, § 905, July 30, 2002, 116 Stat. 805, provided:</p><p>“<strong>Sec. 905. Amendment to Sentencing Guidelines Relating to Certain White-Collar Offenses.</strong></p><p><strong>(a) Directive to the United States Sentencing Commission.—</strong>Pursuant to its authority under section 994(p) of title 18, United States Code, and in accordance with this section, the United States Sentencing Commission shall review and, as appropriate, amend the Federal Sentencing Guidelines and related policy statements to implement the provisions of this Act.</p><p><strong>(b) Requirements.—</strong>In carrying out this section, the Sentencing Commission shall—</p><blockquote><p><strong>(1)</strong> ensure that the sentencing guidelines and policy statements reflect the serious nature of the offenses and the penalties set forth in this Act, the growing incidence of serious fraud offenses which are identified above, and the need to modify the sentencing guidelines and policy statements to deter, prevent, and punish such offenses;</p><p><strong>(2)</strong> consider the extent to which the guidelines and policy statements adequately address whether the guideline offense levels and enhancements for violations of the sections amended by this Act are sufficient to deter and punish such offenses, and specifically, are adequate in view of the statutory increases in penalties contained in this Act;</p><p><strong>(3)</strong> assure reasonable consistency with other relevant directives and sentencing guidelines;</p><p><strong>(4)</strong> account for any additional aggravating or mitigating circumstances that might justify exceptions to the generally applicable sentencing ranges;</p><p><strong>(5)</strong> make any necessary conforming changes to the sentencing guidelines; and</p><p><strong>(6)</strong> assure that the guidelines adequately meet the purposes of sentencing, as set forth in section 3553(a)(2) of title 18, United States Code.</p></blockquote><p><strong>(c) Emergency Authority and Deadline for Commission Action.—</strong>The United States Sentencing Commission is requested to promulgate the guidelines or amendments provided for under this section as soon as practicable, and in any event not later than 180 days after the date of enactment of this Act, in accordance with the procedures set forth in section 219(a) of the Sentencing Reform Act of 1987, as though the authority under that Act had not expired.”.</p><p><strong>SECURITIES, PENSION, AND ACCOUNTING FRAUD; ENHANCEMENT FOR OFFICERS AND DIRECTORS OF PUBLICLY TRADED CORPORATIONS.</strong> Pub. L. 107–204, Title XI, § 1104, July 30, 2002, 116 Stat. 808, provided:</p><p>“<strong>Sec. 1104. Amendment to the Federal Sentencing Guidelines.</strong></p><p><strong>(a) Request for Immediate Consideration by the United States Sentencing Commission.—</strong>Pursuant to its authority under section 994(p) of title 28, United States Code, and in accordance with this section, the United States Sentencing Commission is requested to—</p><blockquote><p><strong>(1)</strong> promptly review the sentencing guidelines applicable to securities and accounting fraud and related offenses;</p><p><strong>(2)</strong> expeditiously consider the promulgation of new sentencing guidelines or amendments to existing sentencing guidelines to provide an enhancement for officers or directors of publicly traded corporations who commit fraud and related offenses; and</p><p><strong>(3)</strong> submit to Congress an explanation of actions taken by the Sentencing Commission pursuant to paragraph (2) and any additional policy recommendations the Sentencing Commission may have for combating offenses described in paragraph (1).</p></blockquote><p><strong>(b) Considerations in Review.—</strong>In carrying out this section, the Sentencing Commission is requested to—</p><blockquote><p><strong>(1)</strong> ensure that the sentencing guidelines and policy statements reflect the serious nature of securities, pension, and accounting fraud and the need for aggressive and appropriate law enforcement action to prevent such offenses;</p><p><strong>(2)</strong> assure reasonable consistency with other relevant directives and with other guidelines;</p><p><strong>(3)</strong> account for any aggravating or mitigating circumstances that might justify exceptions, including circumstances for which the sentencing guidelines currently provide sentencing enhancements;</p><p><strong>(4)</strong> ensure that guideline offense levels and enhancements for an obstruction of justice offense are adequate in cases where documents or other physical evidence are actually destroyed or fabricated;</p><p><strong>(5)</strong> ensure that the guideline offense levels and enhancements under United States Sentencing Guideline 2B1.1 (as in effect on the date of enactment of this Act) are sufficient for a fraud offense when the number of victims adversely involved is significantly greater than 50;</p><p><strong>(6)</strong> make any necessary conforming changes to the sentencing guidelines; and</p><p><strong>(7)</strong> assure that the guidelines adequately meet the purposes of sentencing as set forth in section 3553 (a)(2) of title 18, United States Code.</p></blockquote><p><strong>(c) Emergency Authority and Deadline for Commission Action.—</strong>The United States Sentencing Commission is requested to promulgate the guidelines or amendments provided for under this section as soon as practicable, and in any event not later than the 180 days after the date of enactment of this Act, in accordance with the procedures sent forth in section 21(a) of the Sentencing Reform Act of 1987, as though the authority under that Act had not expired.”</p><p>* * *</p><p><strong>21<sup>ST</sup> CENTURY DEPARTMENT OF JUSTICE APPROPRIATIONS AUTHORIZATION ACT</strong></p><p><strong>(PUB. L. 107–273)</strong></p><p><strong>ASSAULTS, THREATS, AND OTHER OFFENSES AGAINST FEDERAL JUDGES AND OTHER CERTAIN FEDERAL OFFICERS AND EMPLOYEES.</strong> Pub. L. 107–273, Div. C, Title I, § 11008(a), (e), Nov. 2, 2002, 116 Stat. 1819, provided:</p><p>“<strong>(a) Short Title.—This section may be cited as the ‘Federal Judiciary Protection Act of 2002’.</strong></p><p><strong>(b)–(d)</strong> [omitted]</p><p><strong>(e) Amendment of the Sentencing Guidelines for Assaults and Threats Against Federal Judges and Certain Other Federal Officials and Employees.—</strong></p><blockquote><p><strong>(1) In General.—</strong> Pursuant to its authority under section 994 of title 28, United States Code, the United States Sentencing Commission shall review and amend the Federal sentencing guidelines and the policy statements of the commission, if appropriate, to provide an appropriate sentencing enhancement for offenses involving influencing, assaulting, resisting, impeding, retaliating against, or threatening a Federal judge, magistrate judge, or any other official described in section 111 or 115 of title 18, United States Code.</p><p><strong>(2) Factors for Consideration.—</strong>In carrying out this section, the United States Sentencing Commission shall consider, with respect to each offense described in paragraph (1)—</p><p><strong>(A)</strong> any expression of congressional intent regarding the appropriate penalties for the offense;</p><p><strong>(B)</strong> the range of conduct covered by the offense;</p><p><strong>(C)</strong> the existing sentences for the offense;</p><p><strong>(D)</strong> the extent to which sentencing enhancements within the Federal sentencing guidelines and the authority of the court to impose a sentence in excess of the applicable guideline range are adequate to ensure punishment at or near the maximum penalty for the most egregious conduct covered by the offense;</p><p><strong>(E)</strong> the extent to which the Federal sentencing guideline sentences for the offense have been constrained by statutory maximum penalties;</p><p><strong>(F)</strong> the extent to which the Federal sentencing guidelines for the offense adequately achieve the purposes of sentencing as set forth in section 3553(a)(2) of title 18, United States Code;</p><p><strong>(G)</strong> the relationship of the Federal sentencing guidelines for the offense to the Federal sentencing guidelines for other offenses of comparable seriousness; and</p><p><strong>(H)</strong> any other factors that the Commission considers to be appropriate.”.</p></blockquote><p><strong>CRIMES OF VIOLENCE AND DRUG TRAFFICKING CRIMES IN WHICH THE DEFENDANT USED BODY ARMOR.</strong> Pub. L. 107–273, Div. C, Title I, § 11009(a), (d), Nov. 2, 2002, 116 Stat. 1819, provided:</p><p>“<strong>(a) Short Title</strong>.—This section may be cited as the ‘James Guelff and Chris McCurley Body Armor Act of 2002’.</p><p><strong>(b)–(c)</strong> [omitted]</p><p><strong>(d) Amendment of Sentencing Guidelines with Respect to Body Armor.—</strong></p><blockquote><p><strong>(1) In General.—</strong>Pursuant to its authority under section 994(p) of title 28, United States Code, the United States Sentencing Commission shall review and amend the Federal sentencing guidelines and the policy statements of the Commission, as appropriate, to provide an appropriate sentencing enhancement for any crime of violence (as defined in section 16 of title 18, United States Code) or drug trafficking crime (as defined in section 924(c) of title 18, United States Code) (including a crime of violence or drug trafficking crime that provides for an enhanced punishment if committed by the use of a deadly or dangerous weapon or device) in which the defendant used body armor.</p><p><strong>(2) Sense of Congress.—</strong>It is the sense of Congress that any sentencing enhancement under this subsection should be at least 2 levels.”.</p></blockquote><p>* * *</p>\"},{\"id\":\"PUB.L.107–296\",\"content\":\"<p><strong>HOMELAND SECURITY ACT OF 2002</strong></p><p><strong>or</strong></p><p><strong>CYBER SECURITY ENHANCEMENT ACT OF 2002</strong></p><p><strong>(PUB. L. 107–296)</strong></p><p><strong>COMPUTER CRIMES (SECTION 1030 OFFENSES).</strong> Pub. L. 107–296, Title II, § 225(b), (c), Nov. 25, 2002, 116 Stat. 2156, provided:</p><p>“<strong>(b) Amendment of Sentencing Guidelines Relating to Certain Computer Crimes.—</strong></p><blockquote><p><strong>(1) Directive to the United States Sentencing Commission.—</strong>Pursuant to its authority under section 994(p) of title 28, United States Code, and in accordance with this subsection, the United States Sentencing Commission shall review and, if appropriate, amend its guidelines and its policy statements applicable to persons convicted of an offense under section 1030 of title 18, United States Code.</p><p><strong>(2) Requirements.—</strong>In carrying out this subsection, the Sentencing Commission shall—</p><p><strong>(A)</strong> ensure that the sentencing guidelines and policy statements reflect the serious nature of the offenses described in paragraph (1), the growing incidence of such offenses, and the need for an effective deterrent and appropriate punishment to prevent such offenses;</p><p><strong>(B)</strong> consider the following factors and the extent to which the guidelines may or may not account for them—</p><p><strong>(i)</strong> the potential and actual loss resulting from the offense;</p><p><strong>(ii)</strong> the level of sophistication and planning involved in the offense;</p><p><strong>(iii)</strong> whether the offense was committed for purposes of commercial advantage or private financial benefit;</p><p><strong>(iv)</strong> whether the defendant acted with malicious intent to cause harm in committing the offense;</p><p><strong>(v)</strong> the extent to which the offense violated the privacy rights of individuals harmed;</p><p><strong>(vi)</strong> whether the offense involved a computer used by the government in furtherance of national defense, national security, or the administration of justice;</p><p><strong>(vii)</strong> whether the violation was intended to or had the effect of significantly interfering with or disrupting a critical infrastructure; and</p><p><strong>(viii)</strong> whether the violation was intended to or had the effect of creating a threat to public health or safety, or injury to any person;</p><p><strong>(C)</strong> assure reasonable consistency with other relevant directives and with other sentencing guidelines;</p><p><strong>(D)</strong> account for any additional aggravating or mitigating circumstances that might justify exceptions to the generally applicable sentencing ranges;</p><p><strong>(E)</strong> make any necessary conforming changes to the sentencing guidelines; and</p><p><strong>(F)</strong> assure that the guidelines adequately meet the purposes of sentencing as set forth in section 3553(a)(2) of title 18, United States Code.</p></blockquote><p><strong>(c) Study and Report on Computer Crimes.—</strong>Not later than May 1, 2003, the United States Sentencing Commission shall submit a brief report to Congress that explains any actions taken by the Sentencing Commission in response to this section and includes any recommendations the Commission may have regarding statutory penalties for offenses under section 1030 of title 18, United States Code.”</p><p>* * *</p>\"},{\"id\":\"PUB.L.108–21\",\"content\":\"<p><strong>PROSECUTORIAL REMEDIES AND OTHER TOOLS TO END THE EXPLOITATION OF CHILDREN TODAY ACT OF 2003</strong></p><p><strong>or</strong></p><p><strong>THE PROTECT ACT</strong></p><p><strong>(PUB. L. 108–21)</strong></p><p><strong>KIDNAPPING OFFENSES.</strong> Pub. L. 108–21, Title I, § 104(a), Apr. 30, 2003, 117 Stat. 653, provided:</p><p>“<strong>Sec. 104. Stronger Penalties Against Kidnapping.</strong></p><p><strong>(a) Sentencing Guidelines.—</strong>Notwithstanding any other provision of law regarding the amendment of Sentencing Guidelines, the United States Sentencing Commission is directed to amend the Sentencing Guidelines, to take effect on the date that is 30 days after the date of the enactment of this Act—</p><blockquote><p><strong>(1)</strong> so that the base offense level for kidnapping in section 2A4.1(a) is increased from level 24 to level 32;</p><p><strong>(2)</strong> so as to delete section 2A4.1(b)(4)(C); and</p><p><strong>(3)</strong> so that the increase provided by section 2A4.1(b)(5) is 6 levels instead of 3.</p></blockquote><p><strong>(b)</strong> [omitted]”.</p><p><strong>CHILD CRIMES AND SEX OFFENSES; DOWNWARD DEPARTURES; ACCEPTANCE OF RESPONSIBILITY.</strong> Pub. L. 108–21, Title IV, § 401, Apr. 30, 2003, 117 Stat. 668, provided:</p><p>“<strong>Sec. 401. Sentencing Reform.</strong></p><p><strong>(a)</strong> [omitted]</p><p><strong>(b) Conforming Amendments to Guidelines Manual.—</strong>The Federal Sentencing Guidelines are amended—</p><blockquote><p><strong>(1)</strong> in section 5K2.0—</p><p><strong>(A)</strong> by striking ‘Under’ and inserting the following:</p><p>‘(a) DOWNWARD DEPARTURES IN CRIMINAL CASES OTHER THAN CHILD CRIMES AND SEXUAL OFFENSES—Under’; and</p><p><strong>(B)</strong> by adding at the end the following:</p><p>‘(b) DOWNWARD DEPARTURES IN CHILD CRIMES AND SEXUAL OFFENSES—Under 18 U.S.C. Sec. 3553(b)(2), the sentencing court may impose a sentence below the range established by the applicable guidelines only if the court finds that there exists a mitigating circumstance of a kind, or to a degree, that—</p><p>(1) has been affirmatively and specifically identified as a permissible ground of downward departure in the sentencing guidelines or policy statements issued under section 994(a) of title 28, United States Code, taking account of any amendments to such sentencing guidelines or policy statements by act of Congress;</p><p>(2) has not adequately been taken into consideration by the Sentencing Commission in formulating the guidelines; and</p><p>(3) should result in a sentence different from that described.</p><p>‘The grounds enumerated in this Part K of chapter 5 are the sole grounds that have been affirmatively and specifically identified as a permissible ground of downward departure in these sentencing guidelines and policy statements. Thus, notwithstanding any other reference to authority to depart downward elsewhere in this Sentencing Manual, a ground of downward departure has not been affirmatively and specifically identified as a permissible ground of downward departure within the meaning of section 3553(b)(2) unless it is expressly enumerated in this Part K as a ground upon which a downward departure may be granted.’.</p><p><strong>(2)</strong> At the end of part K of chapter 5, add the following:</p><p>‘Sec. 5K2.22 Specific Offender Characteristics as Grounds for Downward Departure in child crimes and sexual offenses (Policy Statement)</p><p>‘In sentencing a defendant convicted of an offense under section 1201 involving a minor victim, an offense under section 1591, or an offense under chapter 71, 109A, 110, or 117 of title 18, United States Code, age may be a reason to impose a sentence below the applicable guideline range only if and to the extent permitted by Sec. 5H1.1.</p><p>‘An extraordinary physical impairment may be a reason to impose a sentence below the applicable guideline range only if and to the extent permitted by Sec. 5H1.4. Drug, alcohol, or gambling dependence or abuse is not a reason for imposing a sentence below the guidelines.’</p><p><strong>(3)</strong> Section 5K2.20 is amended by striking ‘A’ and inserting ‘Except where a defendant is convicted of an offense under section 1201 involving a minor victim, an offense under section 1591, or an offense under chapter 71, 109A, 110, or 117 of title 18, United States Code, a’.</p><p><strong>(4)</strong> Section 5H1.6 is amended by inserting after the first sentence the following: ‘In sentencing a defendant convicted of an offense under section 1201 involving a minor victim, an offense under section 1591, or an offense under chapter 71, 109A, 110, or 117 of title 18, United States Code, family ties and responsibilities and community ties are not relevant in determining whether a sentence should be below the applicable guideline range.’.</p><p><strong>(5)</strong> Section 5K2.13 is amended by—</p><p><strong>(A)</strong> striking ‘or’ before ‘(3)’; and</p><p><strong>(B)</strong> replacing ‘public’ with ‘public; or (4) the defendant has been convicted of an offense under chapter 71, 109A, 110, or 117 of title 18, United States Code.’</p></blockquote><p><strong>(c)–(f)</strong> [omitted]</p><p><strong>(g) Reform of Guidelines Governing Acceptance of Responsibility.—</strong>Subject to subsection (j), the Guidelines Manual promulgated by the Sentencing Commission pursuant to section 994(a) of title 28, United States Code, is amended—</p><blockquote><p><strong>(1)</strong> in section 3E1.1(b)—</p><p><strong>(A)</strong> by inserting ‘upon motion of the government stating that’ immediately before ‘the defendant has assisted authorities’; and</p><p><strong>(B)</strong> by striking ‘taking one or more’ and all that follows through and including ‘additional level’ and insert ‘timely notifying authorities of his intention to enter a plea of guilty, thereby permitting the government to avoid preparing for trial and permitting the government and the court to allocate their resources efficiently, decrease the offense level by 1 additional level’;</p><p><strong>(2)</strong> in the Application Notes to the Commentary to section 3E1.1, by amending Application Note 6—</p><p><strong>(A)</strong> by striking ‘one or both of’; and</p><p><strong>(B)</strong> by adding the following new sentence at the end: ‘Because the Government is in the best position to determine whether the defendant has assisted authorities in a manner that avoids preparing for trial, an adjustment under subsection (b) may only be granted upon a formal motion by the Government at the time of sentencing.’; and</p><p><strong>(3)</strong> in the Background to section 3E1.1, by striking ‘one or more of’.”.</p></blockquote><p><strong>(h)</strong> [omitted]</p><p><strong>(i) Sentencing Guidelines Amendments.—(1)</strong> Subject to subsection (j), the Guidelines Manual promulgated by the Sentencing Commission pursuant to section 994(a) of title 28, United States Code, is amended as follows:</p><blockquote><p><strong>(A)</strong> Application Note 4(b)(i) to section 4B1.5 is amended to read as follows:</p><p>‘(i) IN GENERAL—For purposes of subsection (b), the defendant engaged in a pattern of activity involving prohibited sexual conduct if on at least two separate occasions, the defendant engaged in prohibited sexual conduct with a minor.’.</p><p><strong>(B)</strong> Section 2G2.4(b) is amended by adding at the end the following:</p><p>‘(4) If the offense involved material that portrays sadistic or masochistic conduct or other depictions of violence, increase by 4 levels.</p><p>‘(5) If the offense involved—</p><p>‘(A) at least 10 images, but fewer than 150, increase by 2 levels;</p><p>‘(B) at least 150 images, but fewer than 300, increase by 3 levels;</p><p>‘(C) at least 300 images, but fewer than 600, increase by 4 levels; and</p><p>‘(D) 600 or more images, increase by 5 levels.’.</p><p><strong>(C)</strong> Section 2G2.2(b) is amended by adding at the end the following:</p><p>‘(6) If the offense involved—</p><p>‘(A) at least 10 images, but fewer than 150, increase by 2 levels;</p><p>‘(B) at least 150 images, but fewer than 300, increase by 3 levels;</p><p>‘(C) at least 300 images, but fewer than 600, increase by 4 levels; and</p><p>‘(D) 600 or more images, increase by 5 levels.’.</p></blockquote><p><strong>(2)</strong> The Sentencing Commission shall amend the Sentencing Guidelines to ensure that the Guidelines adequately reflect the seriousness of the offenses under sections 2243(b), 2244(a)(4), and 2244(b) of title 18, United States Code.</p><p><strong>(j) Conforming Amendments.—</strong></p><blockquote><p><strong>(1)</strong>Upon enactment of this Act, the Sentencing Commission shall forthwith distribute to all courts of the United States and to the United States Probation System the amendments made by subsections (b), (g), and (i) of this section to the sentencing guidelines, policy statements, and official commentary of the Sentencing Commission. These amendments shall take effect upon the date of enactment of this Act, in accordance with paragraph (5).</p><p><strong>(2)</strong> On or before May 1, 2005, the Sentencing Commission shall not promulgate any amendment to the sentencing guidelines, policy statements, or official commentary of the Sentencing Commission that is inconsistent with any amendment made by subsection (b) or that adds any new grounds of downward departure to Part K of chapter 5.</p><p><strong>(3)</strong> With respect to cases covered by the amendments made by subsection (i) of this section, the Sentencing Commission may make further amendments to the sentencing guidelines, policy statements, or official commentary of the Sentencing Commission, except that the Commission shall not promulgate any amendments that, with respect to such cases, would result in sentencing ranges that are lower than those that would have applied under such subsection.</p><p><strong>(4)</strong> At no time may the Commission promulgate any amendment that would alter or repeal the amendments made by subsection (g) of this section.</p></blockquote><p><strong>(k)–(l)</strong> [omitted]</p><p><strong>(m) Reform of Existing Permissible Grounds of Downward Departures.—</strong>Not later than 180 days after the enactment of this Act, the United States Sentencing Commission shall—</p><blockquote><p><strong>(1)</strong> review the grounds of downward departure that are authorized by the sentencing guidelines, policy statements, and official commentary of the Sentencing Commission; and</p><p><strong>(2)</strong> promulgate, pursuant to section 994 of title 28, United States Code—</p><p><strong>(A)</strong> appropriate amendments to the sentencing guidelines, policy statements, and official commentary to ensure that the incidence of downward departures are substantially reduced;</p><p><strong>(B)</strong> a policy statement authorizing a downward departure of not more than 4 levels if the Government files a motion for such departure pursuant to an early disposition program authorized by the Attorney General and the United States Attorney; and</p><p><strong>(C)</strong> any other conforming amendments to the sentencing guidelines, policy statements, and official commentary of the Sentencing Commission necessitated by this Act, including a revision of paragraph 4(b) of part A of chapter 1 and a revision of section 5K2.0.”.</p></blockquote><p><strong>OBSCENE VISUAL REPRESENTATIONS OF SEXUAL ABUSE OF CHILDREN. (SECTION 1466A OFFENSES).</strong> Pub. L. 108–21, Title V, § 504(c), Apr. 30, 2003, 117 Stat. 682, provided:</p><p>“<strong>(c) Sentencing Guidelines.—</strong></p><blockquote><p><strong>(1) Category.—</strong>Except as provided in paragraph (2), the applicable category of offense to be used in determining the sentencing range referred to in section 3553(a)(4) of title 18, United States Code, with respect to any person convicted under section 1466A of such title, shall be the category of offenses described in section 2G2.2 of the Sentencing Guidelines.</p><p><strong>(2) Ranges.—</strong>The Sentencing Commission may promulgate guidelines specifically governing offenses under section 1466A of title 18, United States Code, if such guidelines do not result in sentencing ranges that are lower than those that would have applied under paragraph (1).”.</p></blockquote><p><strong>TRANSPORTATION TO ENGAGE IN SEXUAL ACT WITH A MINOR (SECTION 2423 OFFENSES).</strong> Pub. L. 108–21, Title V, § 512, Apr. 30, 2003, 117 Stat. 685, provided:</p><p>“<strong>Sec. 512. Sentencing Enhancements for Interstate Travel to Engage in Sexual Act with a Juvenile.</strong></p><p>Pursuant to its authority under section 994(p) of title 28, United States Code, and in accordance with this section, the United States Sentencing Commission shall review and, as appropriate, amend the Federal Sentencing Guidelines and policy statements to ensure that guideline penalties are adequate in cases that involve interstate travel with the intent to engage in a sexual act with a juvenile in violation of section 2423 of title 18, United States Code, to deter and punish such conduct.”</p><p><strong>DISTRIBUTING MATERIAL CONSTITUTING OR CONTAINING CHILD PORNOGRAPHY (SECTION 2252A OFFENSES).</strong> Pub L. 108–21, Title V, § 513(c), Apr. 30, 2003, 117 Stat. 685, provided:</p><p>“<strong>(c) Sentencing Guidelines.—</strong>Pursuant to its authority under section 994(p) of title 28, United States Code, and in accordance with this section, the United States Sentencing Commission shall review and, as appropriate, amend the Federal Sentencing Guidelines and policy statements to ensure that the guidelines are adequate to deter and punish conduct that involves a violation of paragraph (3)(B) or (6) of section 2252A(a) of title 18, United States Code, as created by this Act. With respect to the guidelines for section 2252A(a)(3)(B), the Commission shall consider the relative culpability of promoting, presenting, describing, or distributing material in violation of that section as compared with solicitation of such material.”.</p><p><strong>GHB (GAMMA HYDROXYBUTYRIC ACID) OFFENSES.</strong> Pub. L. 108–21, Title VI, § 608(e), Apr. 30, 2003, 117 Stat. 691, provided:</p><p>“<strong>(e) Sentencing Commission Guidelines.—</strong>The United States Sentencing Commission shall—</p><blockquote><p><strong>(1)</strong> review the Federal sentencing guidelines with respect to offenses involving gamma hydroxybutyric acid (GHB);</p><p><strong>(2)</strong> consider amending the Federal sentencing guidelines to provide for increased penalties such that those penalties reflect the seriousness of offenses involving GHB and the need to deter them; and</p><p><strong>(3)</strong> take any other action the Commission considers necessary to carry out this section.”</p></blockquote><p>* * *</p>\"},{\"id\":\"PUB.L.108–187\",\"content\":\"<p><strong>CONTROLLING THE ASSAULT OF </strong></p><p><strong>NON-SOLICITED PORNOGRAPHY</strong></p><p><strong>AND MARKETING ACT OF 2003</strong></p><p><strong>or</strong></p><p><strong>CAN-SPAM ACT OF 2003</strong></p><p><strong>(PUB. L. 108–187)</strong></p><p><strong>ELECTRONIC MAIL FRAUD (SECTION 1037 OFFENSES).</strong> Pub. L. 108–187, § 4(b), Dec. 16, 2003, 117 Stat. 2705, provided:</p><p>“<strong>(b) United States Sentencing Commission</strong>.—</p><blockquote><p><strong>(1) Directive.—</strong>Pursuant to its authority under section 994(p) of title 28, United States Code, and in accordance with this section, the United States Sentencing Commission shall review and, as appropriate, amend the sentencing guidelines and policy statements to provide appropriate penalties for violations of section 1037 of title 18, United States Code, as added by this section, and other offenses that may be facilitated by the sending of large quantities of unsolicited electronic mail.</p><p><strong>(2) Requirements.—</strong>In carrying out this subsection, the Sentencing Commission shall consider providing sentencing enhancements for—</p><p><strong>(A)</strong> those convicted under section 1037 of title 18, United States Code, who—</p><p><strong>(i)</strong> obtained electronic mail addresses through improper means, including—</p><p><strong>(I)</strong> harvesting electronic mail addresses of the users of a website, proprietary service, or other online public forum operated by another person, without the authorization of such person; and</p><p><strong>(II)</strong> randomly generating electronic mail addresses by computer; or</p><p><strong>(ii)</strong> knew that the commercial electronic mail messages involved in the offense contained or advertised an Internet domain for which the registrant of the domain had provided false registration information; and</p><p><strong>(B)</strong> those convicted of other offenses, including offenses involving fraud, identity theft, obscenity, child pornography, and the sexual exploitation of children, if such offenses involved the sending of large quantities of electronic mail.”</p></blockquote><p>* * *</p>\"},{\"id\":\"PUB.L.108–275\",\"content\":\"<p><strong>IDENTITY THEFT PENALTY ENHANCEMENT ACT</strong></p><p><strong>(PUB. L. 108–275)</strong></p><p><strong>IDENTITY THEFT OFFENSES INVOLVING AN ABUSE OF POSITION.</strong> Pub. L. 108–275, § 5, July 15, 2004, 118 Stat. 833, provided:</p><p>“<strong>Sec. 5. Directive to the United States Sentencing Commission.</strong></p><p><strong>(a) In General.—</strong>Pursuant to its authority under section 994(p) of title 28, United States Code, and in accordance with this section, the United States Sentencing Commission shall review and amend its guidelines and its policy statements to ensure that the guideline offense levels and enhancements appropriately punish identity theft offenses involving an abuse of position.</p><p><strong>(b) Requirements.—</strong>In carrying out this section, the United States Sentencing Commission shall do the following:</p><blockquote><p><strong>(1)</strong> Amend U.S.S.G. section 3B1.3 (Abuse of Position of Trust of Use of Special Skill) to apply to and punish offenses in which the defendant exceeds or abuses the authority of his or her position in order to obtain unlawfully or use without authority any means of identification, as defined section 1028(d)(4) of title 18, United States Code.</p><p><strong>(2)</strong> Ensure reasonable consistency with other relevant directives, other sentencing guidelines, and statutory provisions.</p><p><strong>(3)</strong> Make any necessary and conforming changes to the sentencing guidelines.</p><p><strong>(4)</strong> Ensure that the guidelines adequately meet the purposes of sentencing set forth in section 3553(a)(2) of title 18, United States Code.”</p></blockquote><p>* * *</p>\"},{\"id\":\"PUB.L.108–358\",\"content\":\"<p><strong>ANABOLIC STEROID CONTROL ACT OF 2004</strong></p><p><strong>(PUB. L. 108–358)</strong></p><p><strong>ANABOLIC STEROID OFFENSES.</strong> Pub. L. 108–358, § 3, Oct. 22, 2004, 118 Stat. 1664, provided:</p><p>“<strong>Sec. 3. Sentencing Commission Guidelines.</strong></p><p>The United States Sentencing Commission shall—</p><blockquote><p><strong>(1)</strong> review the Federal sentencing guidelines with respect to offenses involving anabolic steroids;</p><p><strong>(2)</strong> consider amending the Federal sentencing guidelines to provide for increased penalties with respect to offenses involving anabolic steroids in a manner that reflects the seriousness of such offenses and the need to deter anabolic steroid trafficking and use; and</p><p><strong>(3)</strong> take such other action that the Commission considers necessary to carry out this section.”</p></blockquote><p>* * *</p>\"},{\"id\":\"PUB.L.108–458\",\"content\":\"<p><strong>INTELLIGENCE REFORM AND TERRORISM PREVENTION ACT OF 2004</strong></p><p><strong>or</strong></p><p><strong>STOP TERRORIST AND MILITARY HOAXES ACT OF 2004</strong></p><p><strong>(PUB. L. 108–458)</strong></p><p><strong>OFFENSES INVOLVING INTERNATIONAL OR DOMESTIC TERRORISM.</strong> Pub. L. 108–458, Title VI, § 6703(b), Dec. 17, 2004, 118 Stat. 3766, provided:</p><p>“<strong>(b) Sentencing Guidelines.—</strong>Not later than 30 days of the enactment of this section, the United States Sentencing Commission shall amend the Sentencing Guidelines to provide for an increased offense level for an offense under sections 1001(a) and 1505 of title 18, United States Code, if the offense involves international or domestic terrorism, as defined in section 2331 of such title.”</p><p>* * *</p>\"},{\"id\":\"PUB.L.108–482\",\"content\":\"<p><strong>INTELLECTUAL PROPERTY PROTECTION AND COURTS AMENDMENTS ACT OF 2004</strong></p><p><strong>or</strong></p><p><strong>FRAUDULENT ONLINE IDENTITY </strong></p><p><strong>SANCTIONS ACT</strong></p><p><strong>(PUB. L. 108–482)</strong></p><p><strong>FELONY OFFENSES COMMITTED ONLINE INVOLVING FALSE DOMAIN NAMES.</strong> Pub. L. 108–482, Title II, § 204(b), Dec. 23, 2004, 118 Stat. 3917, provided:</p><p>“<strong>(b) United States Sentencing Commission</strong>.—</p><blockquote><p><strong>(1) Directive.—</strong>Pursuant to its authority under section 994(p) of title 28, United States Code, and in accordance with this section, the United States Sentencing Commission shall review and amend the sentencing guidelines and policy statements to ensure that the applicable guideline range for a defendant convicted of any felony offense carried out online that may be facilitated through the use of a domain name registered with materially false contact information is sufficiently stringent to deter commission of such acts.</p><p><strong>(2) Requirements.—</strong>In carrying out this subsection, the Sentencing Commission shall provide sentencing enhancements for anyone convicted of any felony offense furthered through knowingly providing or knowingly causing to be provided materially false contact information to a domain name registrar, domain name registry, or other domain name registration authority in registering, maintaining, or renewing a domain name used in connection with the violation.</p><p><strong>(3) Definition.—</strong>For purposes of this subsection, the term ‘domain name’ has the meaning given that term in section 45 of the Act entitled ‘An Act to provide for the registration and protection of trademarks used in commerce, to carry out the provisions of certain international conventions, and for other purposes’, approved July 5, 1946 (commonly referred to as the ‘Trademark Act of 1946’; 15 U.S.C. 1127).”</p></blockquote><p>* * *</p>\"},{\"id\":\"PUB.L.109–9\",\"content\":\"<p><strong>FAMILY ENTERTAINMENT AND </strong></p><p><strong>COPYRIGHT ACT OF 2005</strong></p><p><strong>or</strong></p><p><strong>ARTISTS’ RIGHTS AND THEFT PREVENTION ACT OF 2005 (ART ACT)</strong></p><p><strong>(PUB. L. 109–9)</strong></p><p><strong>INTELLECTUAL PROPERTY OFFENSES.</strong> Pub. L. 109–9, Title I, § 105, Apr. 27, 2005, 119 Stat. 218, provided:</p><p>“<strong>Sec. 105. Federal Sentencing Guidelines.</strong></p><p><strong>(a) Review and Amendment.—</strong>Not later than 180 days after the date of enactment of this Act, the United States Sentencing Commission, pursuant to its authority under section 994 of title 28, United States Code, and in accordance with this section, shall review and, if appropriate, amend the Federal sentencing guidelines and policy statements applicable to persons convicted of intellectual property rights crimes, including any offense under—</p><blockquote><p><strong>(1)</strong> section 506, 1201, or 1202 of title 17, United States Code; or</p><p><strong>(2)</strong> section 2318, 2319, 2319A, 2319B, or 2320 of title 18, United States Code.</p></blockquote><p><strong>(b) Authorization.—</strong>The United States Sentencing Commission may amend the Federal sentencing guidelines in accordance with the procedures set forth in section 21(a) of the Sentencing Act of 1987 (28 U.S.C. 994 note) as though the authority under that section had not expired.</p><blockquote><p><strong>(c) Responsibilities of United States Sentencing Commission.—</strong>In carrying out this section, the United States Sentencing Commission shall—</p><p><strong>(1)</strong> take all appropriate measures to ensure that the Federal sentencing guidelines and policy statements described in subsection (a) are sufficiently stringent to deter, and adequately reflect the nature of, intellectual property rights crimes;</p><p><strong>(2)</strong> determine whether to provide a sentencing enhancement for those convicted of the offenses described in subsection (a), if the conduct involves the display, performance, publication, reproduction, or distribution of a copyrighted work before it has been authorized by the copyright owner, whether in the media format used by the infringing party or in any other media format;</p><p><strong>(3)</strong> determine whether the scope of “uploading” set forth in application note 3 of section 2B5.3 of the Federal sentencing guidelines is adequate to address the loss attributable to people who, without authorization, broadly distribute copyrighted works over the Internet; and</p><p><strong>(4)</strong> determine whether the sentencing guidelines and policy statements applicable to the offenses described in subsection (a) adequately reflect any harm to victims from copyright infringement if law enforcement authorities cannot determine how many times copyrighted material has been reproduced or distributed.”</p></blockquote><p>* * *</p>\"},{\"id\":\"PUB.L.109–76\",\"content\":\"<p><strong>UNITED STATES PAROLE COMMISSION </strong></p><p><strong>EXTENSION AND SENTENCING </strong></p><p><strong>COMMISSION AUTHORITY ACT OF 2005</strong></p><p><strong>(PUB. L. 109–76)</strong></p><p><strong>EMERGENCY AMENDMENT AUTHORITY PERTAINING TO THE INTELLIGENCE REFORM AND TERRORISM PREVENTION ACT OF 2004 AND THE ANABOLIC STEROID CONTROL ACT OF 2004.</strong> Pub. L. 109–76, § 3, Sept. 29, 2005, 119 Stat. 2035, provided:</p><p>“<strong>Sec. 3. Provision of Emergency Amendment Authority for Sentencing Commission.</strong></p><p>In accordance with the procedure set forth in section 21(a) of the Sentencing Act of 1987 (Public Law 100–182), as though the authority under that Act had not expired, the United States Sentencing Commission shall—</p><blockquote><p><strong>(1)</strong> not later than 60 days after the date of the enactment of this Act, amend the Federal sentencing guidelines, commentary, and policy statements to implement section 6703 of the Intelligence Reform and Terrorism Prevention Act of 2004 (Public Law 108–458); and</p><p><strong>(2)</strong> not later than 180 days after the date of the enactment of this Act, amend the Federal sentencing guidelines, commentary, and policy statements to implement section 3 of the Anabolic Steroid Control Act of 2004 (Public Law 108–358).”</p></blockquote><p>* * *</p>\"},{\"id\":\"PUB.L.109–162\",\"content\":\"<p><strong>VIOLENCE AGAINST WOMEN AND </strong></p><p><strong>DEPARTMENT OF JUSTICE </strong></p><p><strong>REAUTHORIZATION ACT OF 2005 </strong></p><p><strong>(PUB. L. 109–162)</strong></p><p><strong>PUBLIC EMPLOYEE UNIFORMS (SECTION 716 OFFENSES).</strong> Pub. L. 109–162, § 1191(c), Jan. 5, 2006, 119 Stat. 2960, provided:</p><p>“<strong>(c) Direction to Sentencing Commission.—</strong>The United States Sentencing Commission is directed to make appropriate amendments to sentencing guidelines, policy statements, and official commentary to assure that the sentence imposed on a defendant who is convicted of a Federal offense while wearing or displaying insignia and uniform received in violation of section 716 of title 18, United States Code, reflects the gravity of this aggravating factor.”</p><p>* * *</p>\"},{\"id\":\"PUB.L.109–177\",\"content\":\"<p><strong>USA PATRIOT IMPROVEMENT AND REAUTHORIZATION ACT OF 2005</strong></p><p><strong>(PUB. L. 109–177)</strong></p><p><strong>THEFT OF INTERSTATE OR FOREIGN SHIPMENTS OR VESSELS (SECTION 659 OR 2311 OFFENSES).</strong> Pub. L. 109–177, § 307(c), March 9, 2006, 120 Stat. 192, provided:</p><p>“<strong>(c) Review of Sentencing Guidelines.—</strong>Pursuant to section 994 of title 28, United States Code, the United States Sentencing Commission shall review the Federal Sentencing Guidelines to determine whether sentencing enhancement is appropriate for any offense under section 659 or 2311 of title 18, United States Code, as amended by this title.”</p><p>* * *</p>\"},{\"id\":\"PUB.L.109–181\",\"content\":\"<p><strong>STOP COUNTERFEITING IN </strong></p><p><strong>MANUFACTURED GOODS ACT</strong></p><p><strong>(PUB. L. 109–181)</strong></p><p><strong>TRAFFICKING IN COUNTERFEIT LABELS, GOODS, OR SERVICES (SECTION 2318 OR 2320 OFFENSES).</strong> Pub. L. 109–181, § 1(c), March 16, 2006, 120 Stat. 285, provided:</p><p>“<strong>(c) Sentencing Guidelines.—</strong></p><blockquote><p><strong>(1) Review and Amendment.—</strong>Not later than 180 days after the date of enactment of this Act, the United States Sentencing Commission, pursuant to its authority under section 994 of title 28, United States Code, and in accordance with this subsection, shall review and, if appropriate, amend the Federal sentencing guidelines and policy statements applicable to persons convicted of any offense under section 2318 or 2320 of title 18, United States Code.</p><p><strong>(2) Authorization.—</strong>The United States Sentencing Commission may amend the Federal sentencing guidelines in accordance with the procedures set forth in section 21(a) of the Sentencing Act of 1987 (28 U.S.C. 994 note) as though the authority under that section had not expired.</p><p><strong>(3) Responsibilities of United States Sentencing Commission.—</strong>In carrying out this subsection, the United States Sentencing Commission shall determine whether the definition of ‘infringement amount’ set forth in application note 2 of section 2B5.3 of the Federal sentencing guidelines is adequate to address situations in which the defendant has been convicted of one of the offenses listed in paragraph (1) and the item in which the defendant trafficked was not an infringing item but rather was intended to facilitate infringement, such as an anti-circumvention device, or the item in which the defendant trafficked was infringing and also was intended to facilitate infringement in another good or service, such as a counterfeit label, documentation, or packaging, taking into account cases such as U.S. v. Sung, 87 F.3d 194 (7th Cir. 1996).”</p></blockquote><p>* * *</p>\"},{\"id\":\"PUB.L.109–248\",\"content\":\"<p><strong>ADAM WALSH CHILD PROTECTION AND SAFETY ACT OF 2006</strong></p><p><strong>or</strong></p><p><strong>SEX OFFENDER REGISTRATION AND </strong></p><p><strong>NOTIFICATION ACT</strong></p><p><strong>(PUB. L. 109–248)</strong></p><p><strong>SEX OFFENDER REGISTRATION (SECTION 2250 OFFENSES).</strong> Pub. L. 109–248, § 141(b), July 27, 2006, 120 Stat. 587, provided:</p><p>“<strong>Sec. 141. Amendments to Title 18, United States Code, Relating to Sex Offender Registration.</strong></p><p><strong>(a)</strong> [omitted; enacted 18 U.S.C. § 2250 (Failure to register)]</p><p><strong>(b) Directive to the United States Sentencing Commission.—</strong>In promulgating guidelines for use of a sentencing court in determining the sentence to be imposed for the offense specified in subsection (a), the United States Sentencing Commission shall consider the following matters, in addition to the matters specified in section 994 of title 28, United States Code:</p><blockquote><p><strong>(1)</strong> Whether the person committed another sex offense in connection with, or during, the period for which the person failed to register.</p><p><strong>(2)</strong> Whether the person committed an offense against a minor in connection with, or during, the period for which the person failed to register.</p><p><strong>(3)</strong> Whether the person voluntarily attempted to correct the failure to register.</p><p><strong>(4)</strong> The seriousness of the offense which gave rise to the requirement to register, including whether such offense is a tier I, tier II, or tier III offense, as those terms are defined in section 111.</p><p><strong>(5)</strong> Whether the person has been convicted or adjudicated delinquent for any offense other than the offense which gave rise to the requirement to register.”</p></blockquote><p>* * *</p>\"},{\"id\":\"PUB.L.109–295\",\"content\":\"<p><strong>DEPARTMENT OF HOMELAND SECURITY APPROPRIATIONS ACT, 2007</strong></p><p><strong>(PUB. L. 109–295)</strong></p><p><strong>OFFENSES INVOLVING BORDER TUNNELS AND SUBTERRANEAN PASSAGES (SECTION 554 OFFENSES).</strong> Pub. L. 109–295, § 551(d), Oct. 4, 2006, 120 Stat. 1390, provided:</p><p>“<strong>(d) Directive to the United States Sentencing Commission.—</strong></p><blockquote><p><strong>(1) In general.—</strong>Pursuant to its authority under section 994 of title 28, United States Code, and in accordance with this subsection, the United States Sentencing Commission shall promulgate or amend sentencing guidelines to provide for increased penalties for persons convicted of offenses described in section 554 of title 18, United States Code, as added by subsection (a).</p><p><strong>(2) Requirements.—</strong>In carrying out this subsection, the United States Sentencing Commission shall—</p><p><strong>(A)</strong> ensure that the sentencing guidelines, policy statements, and official commentary reflect the serious nature of the offenses described in section 554 of title 18, United States Code, and the need for aggressive and appropriate law enforcement action to prevent such offenses;</p><p><strong>(B)</strong> provide adequate base offense levels for offenses under such section;</p><p><strong>(C</strong>) account for any aggravating or mitigating circumstances that might justify exceptions, including—</p><p><strong>(i)</strong> the use of a tunnel or passage described in subsection (a) of such section to facilitate other felonies; and</p><p><strong>(ii)</strong> the circumstances for which the sentencing guidelines currently provide applicable sentencing enhancements;</p><p><strong>(D)</strong> ensure reasonable consistency with other relevant directives, other sentencing guidelines, and statutes;</p><p><strong>(E)</strong> make any necessary and conforming changes to the sentencing guidelines and policy statements; and</p><p><strong>(F)</strong> ensure that the sentencing guidelines adequately meet the purposes of sentencing set forth in section 3553(a)(2) of title 18, United States Code.”</p></blockquote><p>* * *</p>\"},{\"id\":\"PUB.L.109–476\",\"content\":\"<p><strong>TELEPHONE RECORDS AND PRIVACY </strong></p><p><strong>PROTECTION ACT OF 2006</strong></p><p><strong>(PUB. L. 109–476)</strong></p><p><strong>FRAUD IN OBTAINING CONFIDENTIAL PHONE RECORDS INFORMATION (SECTION 1039 OFFENSES).</strong> Pub. L. 109–476, § 4, Jan. 12, 2007, 120 Stat. 3571, provided:</p><p>“<strong>Sec. 4. Sentencing Guidelines.</strong></p><p><strong>(a) Review and Amendment.—</strong>Not later than 180 days after the date of enactment of this Act, the United States Sentencing Commission, pursuant to its authority under section 994 of title 28, United States Code, and in accordance with this section, shall review and, if appropriate, amend the Federal sentencing guidelines and policy statements applicable to persons convicted of any offense under section 1039 of title 18, United States Code.</p><p><strong>(b) Authorization.—</strong>The United States Sentencing Commission may amend the Federal sentencing guidelines in accordance with the procedures set forth in section 21(a) of the Sentencing Act of 1987 (28 U.S.C. 994 note) as though the authority under that section had not expired.”</p><p>* * *</p>\"},{\"id\":\"PUB.L.110–177\",\"content\":\"<p><strong>COURT SECURITY IMPROVEMENT ACT OF 2007</strong></p><p><strong>(PUB. L. 110–177)</strong></p><p><strong>THREATS OVER THE INTERNET AGAINST FEDERAL OFFICIALS (SECTION 115 OFFENSES).</strong> Pub. L. 110–177, § 209, Jan. 7, 2008, 121 Stat. 2538, provided:</p><p>“<strong>Sec. 209. Direction to the Sentencing Commission.</strong></p><p>The United States Sentencing Commission is directed to review the Sentencing Guidelines as they apply to threats punishable under section 115 of title 18, United States Code, that occur over the Internet, and determine whether and by how much that circumstance should aggravate the punishment pursuant to section 994 of title 28, United States Code. In conducting the study, the Commission shall take into consideration the number of such threats made, the intended number of recipients of such threats, and whether the initial senders of such threats were acting in an individual capacity or as part of a larger group.”</p><p>* * *</p>\"},{\"id\":\"PUB.L.110–179\",\"content\":\"<p><strong>EMERGENCY AND DISASTER ASSISTANCE FRAUD PENALTY ENHANCEMENT ACT</strong></p><p><strong>OF 2007</strong></p><p><strong>(PUB. L. 110–179)</strong></p><p><strong>DISASTER ASSISTANCE FRAUD.</strong> Pub. L. 110–179, § 5, Jan. 7, 2008, 121 Stat. 2557, provided:</p><p>“<strong>Sec. 5. Directive to Sentencing Commission.</strong></p><p><strong>(a) In General.—</strong>Pursuant to its authority under section 994(p) of title 28, United States Code, and in accordance with this section, the United States Sentencing Commission forthwith shall—</p><blockquote><p><strong>(1)</strong> promulgate sentencing guidelines or amend existing sentencing guidelines to provide for increased penalties for persons convicted of fraud or theft offenses in connection with a major disaster declaration under section 401 of the Robert T. Stafford Disaster Relief and Emergency Assistance Act (42 U.S.C. 5170) or an emergency declaration under section 501 of the Robert T. Stafford Disaster Relief and Emergency Assistance Act (42 U.S.C. 5191); and</p><p><strong>(2)</strong> submit to the Committee on the Judiciary of the Senate and the Committee on the Judiciary of the House of Representatives an explanation of actions taken by the Commission pursuant to paragraph (1) and any additional policy recommendations the Commission may have for combating offenses described in that paragraph.</p></blockquote><p><strong>(b) Requirements.</strong>—In carrying out this section, the Sentencing Commission shall—</p><blockquote><p><strong>(1)</strong> ensure that the sentencing guidelines and policy statements reflect the serious nature of the offenses described in subsection (a) and the need for aggressive and appropriate law enforcement action to prevent such offenses;</p><p><strong>(2)</strong> assure reasonable consistency with other relevant directives and with other guidelines;</p><p><strong>(3)</strong> account for any aggravating or mitigating circumstances that might justify exceptions, including circumstances for which the sentencing guidelines currently provide sentencing enhancements;</p><p><strong>(4)</strong> make any necessary conforming changes to the sentencing guidelines; and</p><p><strong>(5)</strong> assure that the guidelines adequately meet the purposes of sentencing as set forth in section 3553(a)(2) of title 18, United States Code.</p></blockquote><p><strong>(c) Emergency Authority and Deadline for Commission Action.</strong>—The Commission shall promulgate the guidelines or amendments provided for under this section as soon as practicable, and in any event not later than the 30 days after the date of enactment of this Act, in accordance with the procedures set forth in section 21(a) of the Sentencing Reform Act of 1987, as though the authority under that Act had not expired.”</p><p>* * *</p>\"},{\"id\":\"PUB.L.110–326\",\"content\":\"<p><strong>FORMER VICE PRESIDENT PROTECTION ACT OF 2008</strong></p><p><strong>or</strong></p><p><strong>IDENTITY THEFT ENFORCEMENT AND </strong></p><p><strong>RESTITUTION ACT OF 2008</strong></p><p><strong>(PUB. L. 110–326)</strong></p><p><strong>COMPUTER CRIME; THEFT OR MISUSE OF PERSONALLY IDENTIFIABLE DATA (SECTION 1028, 1028A, 1030, 2511, AND 2701 OFFENSES).</strong> Pub.L. 110–326, Title II, § 209, Sept. 26, 2008, 122 Stat. 3564, provided:</p><p>“<strong>Sec. 209. Directive to United States Sentencing Commission.</strong></p><p><strong>(a) Directive.—</strong>Pursuant to its authority under section 994(p) of title 28, United States Code, and in accordance with this section, the United States Sentencing Commission shall review its guidelines and policy statements applicable to persons convicted of offenses under sections 1028, 1028A, 1030, 2511, and 2701 of title 18, United States Code, and any other relevant provisions of law, in order to reflect the intent of Congress that such penalties be increased in comparison to those currently provided by such guidelines and policy statements.</p><p><strong>(b) Requirements.—</strong>In determining its guidelines and policy statements on the appropriate sentence for the crimes enumerated in subsection (a), the United States Sentencing Commission shall consider the extent to which the guidelines and policy statements may or may not account for the following factors in order to create an effective deterrent to computer crime and the theft or misuse of personally identifiable data:</p><blockquote><p><strong>(1)</strong> The level of sophistication and planning involved in such offense.</p><p><strong>(2)</strong> Whether such offense was committed for purpose of commercial advantage or private financial benefit.</p><p><strong>(3)</strong> The potential and actual loss resulting from the offense including—</p><p><strong>(A)</strong> the value of information obtained from a protected computer, regardless of whether the owner was deprived of use of the information; and</p><p><strong>(B)</strong> where the information obtained constitutes a trade secret or other proprietary information, the cost the victim incurred developing or compiling the information.</p><p><strong>(4)</strong> Whether the defendant acted with intent to cause either physical or property harm in committing the offense.</p><p><strong>(5)</strong> The extent to which the offense violated the privacy rights of individuals.</p><p><strong>(6)</strong> The effect of the offense upon the operations of an agency of the United States Government, or of a State or local government.</p><p><strong>(7)</strong> Whether the offense involved a computer used by the United States Government, a State, or a local government in furtherance of national defense, national security, or the administration of justice.</p><p><strong>(8)</strong> Whether the offense was intended to, or had the effect of, significantly interfering with or disrupting a critical infrastructure.</p><p><strong>(9)</strong> Whether the offense was intended to, or had the effect of, creating a threat to public health or safety, causing injury to any person, or causing death.</p><p><strong>(10)</strong> Whether the defendant purposefully involved a juvenile in the commission of the offense.</p><p><strong>(11)</strong> Whether the defendant’s intent to cause damage or intent to obtain personal information should be disaggregated and considered separately from the other factors set forth in USSG 2B1.1(b)(14).</p><p><strong>(12)</strong> Whether the term “victim’‘ as used in USSG 2B1.1, should include individuals whose privacy was violated as a result of the offense in addition to individuals who suffered monetary harm as a result of the offense.</p><p><strong>(13)</strong> Whether the defendant disclosed personal information obtained during the commission of the offense.</p></blockquote><p><strong>(c) Additional Requirements.—</strong>In carrying out this section, the United States Sentencing Commission shall—</p><blockquote><p><strong>(1)</strong> assure reasonable consistency with other relevant directives and with other sentencing guidelines;</p><p><strong>(2)</strong> account for any additional aggravating or mitigating circumstances that might justify exceptions to the generally applicable sentencing ranges;</p><p><strong>(3)</strong> make any conforming changes to the sentencing guidelines; and</p><p><strong>(4)</strong> assure that the guidelines adequately meet the purposes of sentencing as set forth in section 3553(a)(2) of title 18, United States Code.”</p></blockquote><p>* * *</p>\"},{\"id\":\"PUB.L.110–384\",\"content\":\"<p><strong>LET OUR VETERANS REST IN PEACE ACT OF 2008</strong></p><p><strong>(PUB. L. 110–384)</strong></p><p><strong>VETERANS’ GRAVE MARKERS.</strong> Pub.L. 110–384, § 3, Oct. 10, 2008, 122 Stat. 4094, provided:</p><p>“<strong>Sec. 3. Direction to the Sentencing Commission.</strong></p><p><strong>(a) In General.—</strong>Pursuant to its authority under section 994 of title 28, United States Code, the United States Sentencing Commission shall review and, if appropriate, amend the Federal sentencing guidelines and policy statements to ensure the guidelines and policy statements provide adequate sentencing enhancements for any offense involving the desecration, theft, or trafficking in, a grave marker, headstone, monument, or other object, intended to permanently mark a veteran’s grave.</p><p><strong>(b) Commission Duties.—</strong>In carrying out this section, the Sentencing Commission shall—</p><blockquote><p><strong>(1)</strong> ensure that the sentences, guidelines, and policy statements relating to offenders convicted of these offenses are appropriately severe and reasonably consistent with other relevant directives and other Federal sentencing guidelines and policy statements;</p><p><strong>(2)</strong> make any necessary conforming changes to the Federal sentencing guidelines; and</p><p><strong>(3)</strong> assure that the guidelines adequately meet the purposes of sentencing as set forth in section 3553(a)(2) of title 18, United States Code.”</p></blockquote><p>* * *</p>\"},{\"id\":\"PUB.L.110–407\",\"content\":\"<p><strong>DRUG TRAFFICKING VESSEL </strong></p><p><strong>INTERDICTION ACT OF 2008</strong></p><p><strong>(PUB. L. 110–407)</strong></p><p><strong>SUBMERSIBLE VESSELS (SECTION 2285 OFFENSES).</strong> Pub.L. 110–407, Title I, § 103, Oct. 13, 2008, 122 Stat. 4298, provided:</p><p>“<strong>Sec. 103. Sentencing Guidelines.</strong></p><p><strong>(a) In General.—</strong>Pursuant to its authority under section 994(p) of title 28, United States Code, and in accordance with this section, the United States Sentencing Commission shall promulgate sentencing guidelines (including policy statements) or amend existing sentencing guidelines (including policy statements) to provide adequate penalties for persons convicted of knowingly operating by any means or embarking in any submersible vessel or semi‑submersible vessel in violation of section 2285 of title 18, United States Code.</p><p><strong>(b) Requirements.—</strong>In carrying out this section, the United States Sentencing Commission shall—</p><blockquote><p><strong>(1)</strong> ensure that the sentencing guidelines and policy statements reflect the serious nature of the offense described in section 2285 of title 18, United States Code, and the need for deterrence to prevent such offenses;</p><p><strong>(2)</strong> account for any aggravating or mitigating circumstances that might justify exceptions, including—</p><p><strong>(A)</strong> the use of a submersible vessel or semi‑submersible vessel described in section 2285 of title 18, United States Code, to facilitate other felonies;</p><p><strong>(B)</strong> the repeated use of a submersible vessel or semi‑submersible vessel described in section 2285 of title 18, United States Code, to facilitate other felonies, including whether such use is part of an ongoing criminal organization or enterprise;</p><p><strong>(C)</strong> whether the use of such a vessel involves a pattern of continued and flagrant violations of section 2285 of title 18, United States Code;</p><p><strong>(D)</strong> whether the persons operating or embarking in a submersible vessel or semi‑submersible vessel willfully caused, attempted to cause, or permitted the destruction or damage of such vessel or failed to heave to when directed by law enforcement officers; and</p><p><strong>(E)</strong> circumstances for which the sentencing guidelines (and policy statements) provide sentencing enhancements;</p><p><strong>(3)</strong> ensure reasonable consistency with other relevant directives, other sentencing guidelines and policy statements, and statutory provisions;</p><p><strong>(4)</strong> make any necessary and conforming changes to the sentencing guidelines and policy statements; and</p><p><strong>(5)</strong> ensure that the sentencing guidelines and policy statements adequately meet the purposes of sentencing set forth in section 3553(a)(2) of title 18, United States Code.”</p></blockquote><p>* * *</p>\"},{\"id\":\"PUB.L.110–425\",\"content\":\"<p><strong>RYAN HAIGHT ONLINE PHARMACY </strong></p><p><strong>CONSUMER PROTECTION ACT OF 2008</strong></p><p><strong>(PUB. L. 110–425)</strong></p><p><strong>DELIVERY OF CONTROLLED SUBSTANCES BY MEANS OF THE INTERNET.</strong> Pub.L. 110–425, § 3(k)(2), Oct. 15, 2008, 122 Stat. 4833, provided:</p><p>“<strong>(2) Sentencing guidelines.—</strong>The United States Sentencing Commission, in determining whether to amend, or establish new, guidelines or policy statements, to conform the Federal sentencing guidelines and policy statements to this Act and the amendments made by this Act, should not construe any change in the maximum penalty for a violation involving a controlled substance in a particular schedule as being the sole reason to amend, or establish a new, guideline or policy statement.”</p><p>* * *</p>\"},{\"id\":\"PUB.L.110–457\",\"content\":\"<p><strong>WILLIAM WILBERFORCE TRAFFICKING VICTIMS PROTECTION</strong></p><p><strong>REAUTHORIZATION ACT OF 2008</strong></p><p><strong>(PUB. L. 110–457)</strong></p><p><strong>ALIEN HARBORING.</strong> Pub.L. 110–457, Title II, § 222(g), Dec. 23, 2008, 122 Stat. 5071, provided:</p><p>“<strong>(g) Amendment to Sentencing Guidelines.—</strong>Pursuant to its authority under section 994 of title 28, United States Code, the United States Sentencing Commission shall review and, if appropriate, amend the sentencing guidelines and policy statements applicable to persons convicted of alien harboring to ensure conformity with the sentencing guidelines applicable to persons convicted of promoting a commercial sex act if—</p><blockquote><p><strong>(1)</strong> the harboring was committed in furtherance of prostitution; and</p><p><strong>(2)</strong> the defendant to be sentenced is an organizer, leader, manager, or supervisor of the criminal activity.”</p></blockquote><p>* * *</p>\"},{\"id\":\"PUB.L.111–84\",\"content\":\"<p><strong>NATIONAL DEFENSE AUTHORIZATION ACT FOR FISCAL YEAR 2010</strong></p><p><strong>or</strong></p><p><strong>MATTHEW SHEPARD AND JAMES BYRD, JR. HATE CRIMES PREVENTION ACT</strong></p><p><strong>(PUB. L. 111–84)</strong></p><p><strong>REPORT ON MANDATORY MINIMUM SENTENCING PROVISIONS.</strong> Pub.L. 111–84, Div. E, § 4713, Oct. 28, 2009, 123 Stat. 2843, provided:</p><p>“<strong>Sec. 4713. Report on Mandatory Minimum Sentencing Provisions.</strong></p><p><strong>(a) Report.</strong>—Not later than 1 year after the date of enactment of this Act, the United States Sentencing Commission shall submit to the Committee on the Judiciary of the Senate and the Committee on the Judiciary of the House of Representatives a report on mandatory minimum sentencing provisions under Federal law.</p><p><strong>(b) Contents of Report.</strong>—The report submitted under subsection (a) shall include—</p><blockquote><p><strong>(1)</strong> a compilation of all mandatory minimum sentencing provisions under Federal law;</p><p><strong>(2)</strong> an assessment of the effect of mandatory minimum sentencing provisions under Federal law on the goal of eliminating unwarranted sentencing disparity and other goals of sentencing;</p><p><strong>(3)</strong> an assessment of the impact of mandatory minimum sentencing provisions on the Federal prison population;</p><p><strong>(4)</strong> an assessment of the compatibility of mandatory minimum sentencing provisions under Federal law and the sentencing guidelines system established under the Sentencing Reform Act of 1984 (Public Law 98–473; 98 Stat. 1987) and the sentencing guidelines system in place after Booker v. United States, 543 U.S. 220 (2005);</p><p><strong>(5)</strong> a description of the interaction between mandatory minimum sentencing provisions under Federal law and plea agreements;</p><p><strong>(6)</strong> a detailed empirical research study of the effect of mandatory minimum penalties under Federal law;</p><p><strong>(7)</strong> a discussion of mechanisms other than mandatory minimum sentencing laws by which Congress can take action with respect to sentencing policy; and</p><p><strong>(8)</strong> any other information that the Commission determines would contribute to a thorough assessment of mandatory minimum sentencing provisions under Federal law.”</p></blockquote><p>* * *</p>\"},{\"id\":\"PUB.L.111–148\",\"content\":\"<p><strong>PATIENT PROTECTION AND AFFORDABLE CARE ACT</strong></p><p><strong>(PUB. L. 111–148)</strong></p><p><strong>FEDERAL HEALTH CARE OFFENSES.</strong> Pub.L. 111–148, § 10606(a), Mar. 23, 2010, 124 Stat. 1006, provided:</p><p><strong>“(a) Fraud Sentencing Guidelines.—</strong></p><blockquote><p><strong>(1) Definition.—</strong>In this subsection, the term ‘Federal health care offense’ has the meaning given that term in section 24 of title 18, United States Code, as amended by this Act.</p><p><strong>(2) Review and amendments.—</strong>Pursuant to the authority under section 994 of title 28, United States Code, and in accordance with this subsection, the United States Sentencing Commission shall—</p><p><strong>(A)</strong> review the Federal Sentencing Guidelines and policy statements applicable to persons convicted of Federal health care offenses;</p><p><strong>(B)</strong> amend the Federal Sentencing Guidelines and policy statements applicable to persons convicted of Federal health care offenses involving Government health care programs to provide that the aggregate dollar amount of fraudulent bills submitted to the Government health care program shall constitute prima facie evidence of the amount of the intended loss by the defendant; and</p><p><strong>(C)</strong> amend the Federal Sentencing Guidelines to provide—</p><p><strong>(i)</strong> a 2-level increase in the offense level for any defendant convicted of a Federal health care offense relating to a Government health care program which involves a loss of not less than $1,000,000 and less than $7,000,000;</p><p><strong>(ii)</strong> a 3-level increase in the offense level for any defendant convicted of a Federal health care offense relating to a Government health care program which involves a loss of not less than $7,000,000 and less than $20,000,000;</p><p><strong>(iii)</strong> a 4-level increase in the offense level for any defendant convicted of a Federal health care offense relating to a Government health care program which involves a loss of not less than $20,000,000; and</p><p><strong>(iv)</strong> if appropriate, otherwise amend the Federal Sentencing Guidelines and policy statements applicable to persons convicted of Federal health care offenses involving Government health care programs.</p><p><strong>(3) Requirements.—</strong>In carrying this subsection, the United States Sentencing Commission shall—</p><p><strong>(A)</strong> ensure that the Federal Sentencing Guidelines and policy statements—</p><p><strong>(i)</strong> reflect the serious harms associated with health care fraud and the need for aggressive and appropriate law enforcement action to prevent such fraud; and</p><p><strong>(ii)</strong> provide increased penalties for persons convicted of health care fraud offenses in appropriate circumstances;</p><p><strong>(B)</strong> consult with individuals or groups representing health care fraud victims, law enforcement officials, the health care industry, and the Federal judiciary as part of the review described in paragraph (2);</p><p><strong>(C)</strong> ensure reasonable consistency with other relevant directives and with other guidelines under the Federal Sentencing Guidelines;</p><p><strong>(D)</strong> account for any aggravating or mitigating circumstances that might justify exceptions, including circumstances for which the Federal Sentencing Guidelines, as in effect on the date of enactment of this Act, provide sentencing enhancements;</p><p><strong>(E)</strong> make any necessary conforming changes to the Federal Sentencing Guidelines; and</p><p><strong>(F)</strong> ensure that the Federal Sentencing Guidelines adequately meet the purposes of sentencing.”</p></blockquote><p>* * *</p>\"},{\"id\":\"PUB.L.111–203\",\"content\":\"<p><strong>DODD–FRANK WALL STREET REFORM AND CONSUMER PROTECTION ACT</strong></p><p><strong>(PUB. L. 111–203)</strong></p><p><strong>OFFENSES RELATING TO SECURITIES FRAUD, FINANCIAL INSTITUTION FRAUD, OR FEDERALLY RELATED MORTGAGE LOAN FRAUD.</strong> Pub.L. 111–203, § 1079A(a), July 21, 2010, 124 Stat. 2077–78, provided:</p><p><strong>“(a) Sentencing Guidelines.—</strong></p><blockquote><p><strong>(1) Securities fraud.—</strong></p><p><strong>(A) Directive.—</strong>Pursuant to its authority under section 994 of title 28, United States Code, and in accordance with this paragraph, the United States Sentencing Commission shall review and, if appropriate, amend the Federal Sentencing Guidelines and policy statements applicable to persons convicted of offenses relating to securities fraud or any other similar provision of law, in order to reflect the intent of Congress that penalties for the offenses under the guidelines and policy statements appropriately account for the potential and actual harm to the public and the financial markets from the offenses.</p><p><strong>(B) Requirements.—</strong>In making any amendments to the Federal Sentencing Guidelines and policy statements under subparagraph (A), the United States Sentencing Commission shall—</p><p><strong>(i)</strong> ensure that the guidelines and policy statements, particularly section 2B1.1(b)(14) and section 2B1.1(b)(17) (and any successors thereto), reflect—</p><p><strong>(I)</strong> the serious nature of the offenses described in subparagraph (A);</p><p><strong>(II)</strong> the need for an effective deterrent and appropriate punishment to prevent the offenses; and</p><p><strong>(III)</strong> the effectiveness of incarceration in furthering the objectives described in subclauses (I) and (II);</p><p><strong>(ii)</strong> consider the extent to which the guidelines appropriately account for the potential and actual harm to the public and the financial markets resulting from the offenses;</p><p><strong>(iii)</strong> ensure reasonable consistency with other relevant directives and guidelines and Federal statutes;</p><p><strong>(iv)</strong> make any necessary conforming changes to guidelines; and</p><p><strong>(v)</strong> ensure that the guidelines adequately meet the purposes of sentencing, as set forth in section 3553(a)(2) of title 18, United States Code.</p><p><strong>(2) Financial institution fraud.—</strong></p><p><strong>(A) Directive.—</strong>Pursuant to its authority under section 994 of title 28, United States Code, and in accordance with this paragraph, the United States Sentencing Commission shall review and, if appropriate, amend the Federal Sentencing Guidelines and policy statements applicable to persons convicted of fraud offenses relating to financial institutions or federally related mortgage loans and any other similar provisions of law, to reflect the intent of Congress that the penalties for the offenses under the guidelines and policy statements ensure appropriate terms of imprisonment for offenders involved in substantial bank frauds or other frauds relating to financial institutions.</p><p><strong>(B) Requirements.—</strong>In making any amendments to the Federal Sentencing Guidelines and policy statements under subparagraph (A), the United States Sentencing Commission shall—</p><p><strong>(i)</strong> ensure that the guidelines and policy statements reflect—</p><p><strong>(I)</strong> the serious nature of the offenses described in subparagraph (A);</p><p><strong>(II)</strong> the need for an effective deterrent and appropriate punishment to prevent the offenses; and</p><p><strong>(III)</strong> the effectiveness of incarceration in furthering the objectives described in subclauses (I) and (II);</p><p><strong>(ii)</strong> consider the extent to which the guidelines appropriately account for the potential and actual harm to the public and the financial markets resulting from the offenses;</p><p><strong>(iii)</strong> ensure reasonable consistency with other relevant directives and guidelines and Federal statutes;</p><p><strong>(iv)</strong> make any necessary conforming changes to guidelines; and</p><p><strong>(v)</strong> ensure that the guidelines adequately meet the purposes of sentencing, as set forth in section 3553(a)(2) of title 18, United States Code.”</p></blockquote><p>* * *</p>\"},{\"id\":\"PUB.L.111–220\",\"content\":\"<p><strong>FAIR SENTENCING ACT OF 2010</strong></p><p><strong>(PUB. L. 111–220)</strong></p><p><strong>ENHANCEMENTS FOR ACTS OF VIOLENCE DURING DRUG TRAFFICKING OFFENSE; INCREASED EMPHASIS ON DEFENDANT’S ROLE AND CERTAIN AGGRAVATING AND MITIGATING FACTORS; EMERGENCY AUTHORITY; REPORT TO CONGRESS.</strong> Pub.L. 111–220, §§ 5 to 8, 10, Aug. 3, 2010, 124 Stat. 2373, provided:</p><p><strong>“Sec. 5. Enhancements for Acts of Violence During the Course of a Drug Trafficking Offense.</strong></p><p>Pursuant to its authority under section 994 of title 28, United States Code, the United States Sentencing Commission shall review and amend the Federal sentencing guidelines to ensure that the guidelines provide an additional penalty increase of at least 2 offense levels if the defendant used violence, made a credible threat to use violence, or directed the use of violence during a drug trafficking offense.</p><p><strong>“Sec. 6. Increased Emphasis on Defendant’s Role and Certain Aggravating Factors.</strong></p><p>Pursuant to its authority under section 994 of title 28, United States Code, the United States Sentencing Commission shall review and amend the Federal sentencing guidelines to ensure an additional increase of at least 2 offense levels if—</p><blockquote><p><strong>(1)</strong> the defendant bribed, or attempted to bribe, a Federal, State, or local law enforcement official in connection with a drug trafficking offense;</p><p><strong>(2)</strong> the defendant maintained an establishment for the manufacture or distribution of a controlled substance, as generally described in section 416 of the Controlled Substances Act (21 U.S.C. 856); or</p><p><strong>(3)(A)</strong> the defendant is an organizer, leader, manager, or supervisor of drug trafficking activity subject to an aggravating role enhancement under the guidelines; and</p><p><strong>(B)</strong> the offense involved 1 or more of the following super-aggravating factors:</p><p><strong>(i)</strong> The defendant—</p><p><strong>(I)</strong> used another person to purchase, sell, transport, or store controlled substances;</p><p><strong>(II)</strong> used impulse, fear, friendship, affection, or some combination thereof to involve such person in the offense; and</p><p><strong>(III)</strong> such person had a minimum knowledge of the illegal enterprise and was to receive little or no compensation from the illegal transaction.</p><p><strong>(ii)</strong> The defendant—</p><p><strong>(I)</strong> knowingly distributed a controlled substance to a person under the age of 18 years, a person over the age of 64 years, or a pregnant individual;</p><p><strong>(II)</strong> knowingly involved a person under the age of 18 years, a person over the age of 64 years, or a pregnant individual in drug trafficking;</p><p><strong>(III)</strong> knowingly distributed a controlled substance to an individual who was unusually vulnerable due to physical or mental condition, or who was particularly susceptible to criminal conduct; or</p><p><strong>(IV)</strong> knowingly involved an individual who was unusually vulnerable due to physical or mental condition, or who was particularly susceptible to criminal conduct, in the offense.</p><p><strong>(iii)</strong> The defendant was involved in the importation into the United States of a controlled substance.</p><p><strong>(iv)</strong> The defendant engaged in witness intimidation, tampered with or destroyed evidence, or otherwise obstructed justice in connection with the investigation or prosecution of the offense.</p><p><strong>(v)</strong> The defendant committed the drug trafficking offense as part of a pattern of criminal conduct engaged in as a livelihood.</p></blockquote><p>“<strong>Sec. 7. Increased Emphasis on Defendant’s Role and Certain Mitigating Factors.</strong></p><p>Pursuant to its authority under section 994 of title 28, United States Code, the United States Sentencing Commission shall review and amend the Federal sentencing guidelines and policy statements to ensure that—</p><blockquote><p><strong>(1)</strong> if the defendant is subject to a minimal role adjustment under the guidelines, the base offense level for the defendant based solely on drug quantity shall not exceed level 32; and</p><p><strong>(2)</strong> there is an additional reduction of 2 offense levels if the defendant—</p><p><strong>(A)</strong> otherwise qualifies for a minimal role adjustment under the guidelines and had a minimum knowledge of the illegal enterprise;</p><p><strong>(B)</strong> was to receive no monetary compensation from the illegal transaction; and</p><p><strong>(C)</strong> was motivated by an intimate or familial relationship or by threats or fear when the defendant was otherwise unlikely to commit such an offense.</p></blockquote><p>“<strong>Sec. 8. Emergency Authority for United States Sentencing Commission.</strong></p><p>The United States Sentencing Commission shall—</p><blockquote><p><strong>(1)</strong> promulgate the guidelines, policy statements, or amendments provided for in this Act as soon as practicable, and in any event not later than 90 days after the date of enactment of this Act, in accordance with the procedure set forth in section 21(a) of the Sentencing Act of 1987 (28 U.S.C. 994 note), as though the authority under that Act had not expired; and</p><p><strong>(2)</strong> pursuant to the emergency authority provided under paragraph (1), make such conforming amendments to the Federal sentencing guidelines as the Commission determines necessary to achieve consistency with other guideline provisions and applicable law.</p></blockquote><p>“<strong>Sec. 9. Report [by Comptroller General] on Effectiveness of Drug Courts.</strong></p><p><strong>[omitted]</strong></p><p><strong>“Sec. 10. United States Sentencing Commission Report on Impact of Changes to Federal Cocaine Sentencing Law.</strong></p><p>Not later than 5 years after the date of enactment of this Act, the United States Sentencing Commission, pursuant to the authority under sections 994 and 995 of title 28, United States Code, and the responsibility of the United States Sentencing Commission to advise Congress on sentencing policy under section 995(a)(20) of title 28, United States Code, shall study and submit to Congress a report regarding the impact of the changes in Federal sentencing law under this Act and the amendments made by this Act.”</p><p>* * *</p>\"},{\"id\":\"PUB.L.111–273\",\"content\":\"<p><strong>SECURE AND RESPONSIBLE DRUG </strong></p><p><strong>DISPOSAL ACT</strong></p><p><strong>(PUB. L. 111–273)</strong></p><p><strong>DRUG OFFENSES RESULTING FROM AUTHORIZATION TO RECEIVE SCHEDULED SUBSTANCES FROM ULTIMATE USERS OR LONG-TERM CARE FACILITIES.</strong> Pub.L. 111–273, § 4, Oct. 12, 2010, 124 Stat. 2860, provided:</p><p><strong>“Sec. 4. Directive to the United States Sentencing Commission.</strong></p><p>Pursuant to its authority under section 994 of title 28, United States Code, the United States Sentencing Commission shall review and, if appropriate, amend the Federal sentencing guidelines and policy statements to ensure that the guidelines and policy statements provide an appropriate penalty increase of up to 2 offense levels above the sentence otherwise applicable in Part D of the Guidelines Manual if a person is convicted of a drug offense resulting from the authorization of that person to receive scheduled substances from an ultimate user or long-term care facility as set forth in the amendments made by section 3 [adding subsection (g) to 21 U.S.C. § 822 and paragraph (3) to 21 U.S.C. § 828(b)].”</p><p>* * *</p>\"},{\"id\":\"PUB.L.112–144\",\"content\":\"<p><strong>FOOD AND DRUG ADMINISTRATION SAFETY AND INNOVATION ACT</strong></p><p><strong>(PUB. L. 112–144)</strong></p><p><strong>COUNTERFEIT DRUG TRAFFICKING.</strong> Pub. L. 112–144, title VII, § 717(b), July 9, 2012, 126 Stat. 1076, provided:</p><p><strong>“(b) Sentencing Commission Directive.— </strong></p><blockquote><p><strong>(1) Directive to Sentencing Commission.—</strong>Pursuant to its authority under section 994(p) of title 28, United States Code, and in accordance with this subsection, the United States Sentencing Commission shall review and amend, if appropriate, its guidelines and its policy statements applicable to persons convicted of an offense described in section 2320(a)(4) of title 18, United States Code, as amended by subsection (a), in order to reflect the intent of Congress that such penalties be increased in comparison to those currently provided by the guidelines and policy statements.</p><p><strong>(2) Requirements.—</strong>In carrying out this subsection, the Commission shall—</p><p><strong>(A)</strong> ensure that the sentencing guidelines and policy statements reflect the intent of Congress that the guidelines and policy statements reflect the serious nature of the offenses described in paragraph (1) and the need for an effective deterrent and appropriate punishment to prevent such offenses;</p><p><strong>(B)</strong> consider the extent to which the guidelines may or may not appropriately account for the potential and actual harm to the public resulting from the offense;</p><p><strong>(C)</strong> assure reasonable consistency with other relevant directives and with other sentencing guidelines;</p><p><strong>(D)</strong> account for any additional aggravating or mitigating circumstances that might justify exceptions to the generally applicable sentencing ranges;</p><p><strong>(E)</strong> make any necessary conforming changes to the sentencing guidelines; and</p><p><strong>(F)</strong> assure that the guidelines adequately meet the purposes of sentencing as set forth in section 3553(a)(2) of title 18, United States Code.”</p></blockquote><p>* * *</p>\"},{\"id\":\"PUB.L.112–186\",\"content\":\"<p><strong>STRENGTHENING AND FOCUSING</strong></p><p><strong>ENFORCEMENT TO DETER ORGANIZED STEALING AND ENHANCE SAFETY ACT OF 2012</strong></p><p><strong>or</strong></p><p><strong>SAFE DOSES ACT</strong></p><p><strong>(PUB. L. 112–186)</strong></p><p><strong>THEFT OF PRE-RETAIL MEDICAL PRODUCTS.</strong> Pub. L. 112–186, § 7, Oct. 5, 2012, 126 Stat. 1430, provided:</p><p><strong>“Sec. 7. Directive to United States Sentencing Commission.</strong></p><p><strong>(a) In General.—</strong>Pursuant to its authority under section 994 of title 28, United States Code, and in accordance with this section, the United States Sentencing Commission shall review and, if appropriate, amend the Federal sentencing guidelines and policy statements applicable to persons convicted of offenses under section 670 of title 18, United States Code, as added by this Act, section 2118 of title 18, United States Code, or any another section of title 18, United States Code, amended by this Act, to reflect the intent of Congress that penalties for such offenses be sufficient to deter and punish such offenses, and appropriately account for the actual harm to the public from these offenses.</p><p><strong>(b) Requirements.—</strong>In carrying out this section, the United States Sentencing Commission shall—</p><blockquote><p><strong>(1)</strong> consider the extent to which the Federal sentencing guidelines and policy statements appropriately reflect—</p><p><strong>(A)</strong> the serious nature of such offenses;</p><p><strong>(B)</strong> the incidence of such offenses; and</p><p><strong>(C)</strong> the need for an effective deterrent and appropriate punishment to prevent such offenses;</p><p><strong>(2)</strong> consider establishing a minimum offense level under the Federal sentencing guidelines and policy statements for offenses covered by this Act;</p><p><strong>(3)</strong> account for any additional aggravating or mitigating circumstances that might justify exceptions to the generally applicable sentencing ranges;</p><p><strong>(4)</strong> ensure reasonable consistency with other relevant directives, Federal sentencing guidelines and policy statements;</p><p><strong>(5)</strong> make any necessary conforming changes to the Federal sentencing guidelines and policy statements; and</p><p><strong>(6)</strong> ensure that the Federal sentencing guidelines and policy statements adequately meet the purposes of sentencing set forth in section 3553(a)(2) of title 18, United States Code.”</p></blockquote><p>* * *</p>\"},{\"id\":\"PUB.L.112–206\",\"content\":\"<p><strong>CHILD PROTECTION ACT OF 2012</strong></p><p><strong>(PUB. L. 112–206)</strong></p><p><strong>PROTECTION OF CHILD WITNESSES.</strong> Pub. L. 112–206, § 3(b), Dec. 7, 2012, 126 Stat. 1492, provided:</p><p><strong>“(b) Sentencing Guidelines.—</strong>Pursuant to its authority under section 994 of title 28, United States Code, and in accordance with this section, the United States Sentencing Commission shall review and, if appropriate, amend the Federal sentencing guidelines and policy statements to ensure—</p><blockquote><p><strong>(1)</strong> that the guidelines provide an additional penalty increase above the sentence otherwise applicable in Part J of Chapter 2 of the Guidelines Manual if the defendant was convicted of a violation of section 1591 of title 18, United States Code, or chapters 109A, 109B, 110, or 117 of title 18, United States Code; and</p><p><strong>(2)</strong> if the offense described in paragraph (1) involved causing or threatening to cause physical injury to a person under 18 years of age, in order to obstruct the administration of justice, an additional penalty increase above the sentence otherwise applicable in Part J of Chapter 2 of the Guidelines Manual.”</p></blockquote><p>* * *</p>\"},{\"id\":\"PUB.L.112–269\",\"content\":\"<p><strong>FOREIGN AND ECONOMIC ESPIONAGE </strong></p><p><strong>PENALTY ENHANCEMENT ACT OF 2012</strong></p><p><strong>(PUB. L. 112–269)</strong></p><p><strong>TRADE SECRETS AND ECONOMIC ESPIONAGE.</strong> Pub. L. 112–269, § 3, Jan. 14, 2013, 126 Stat. 2442, provided:</p><p><strong>“Sec. 3. Review by the United States Sentencing Commission. </strong></p><p><strong>(a) In General.—</strong>Pursuant to its authority under section 994(p) of title 28, United States Code, the United States Sentencing Commission shall review and, if appropriate, amend the Federal sentencing guidelines and policy statements applicable to persons convicted of offenses relating to the transmission or attempted transmission of a stolen trade secret outside of the United States or economic espionage, in order to reflect the intent of Congress that penalties for such offenses under the Federal sentencing guidelines and policy statements appropriately, reflect the seriousness of these offenses, account for the potential and actual harm caused by these offenses, and provide adequate deterrence against such offenses.</p><p><strong>(b) Requirements.—</strong>In carrying out this section, the United States Sentencing Commission shall—</p><blockquote><p><strong>(1)</strong> consider the extent to which the Federal sentencing guidelines and policy statements appropriately account for the simple misappropriation of a trade secret, including the sufficiency of the existing enhancement for these offenses to address the seriousness of this conduct;</p><p><strong>(2)</strong> consider whether additional enhancements in the Federal sentencing guidelines and policy statements are appropriate to account for—</p><p><strong>(A)</strong> the transmission or attempted transmission of a stolen trade secret outside of the United States; and</p><p><strong>(B)</strong> the transmission or attempted transmission of a stolen trade secret outside of the United States that is committed or attempted to be committed for the benefit of a foreign government, foreign instrumentality, or foreign agent;</p><p><strong>(3)</strong> ensure the Federal sentencing guidelines and policy statements reflect the seriousness of these offenses and the need to deter such conduct;</p><p><strong>(4)</strong> ensure reasonable consistency with other relevant directives, Federal sentencing guidelines and policy statements, and related Federal statutes;</p><p><strong>(5)</strong> make any necessary conforming changes to the Federal sentencing guidelines and policy statements; and</p><p><strong>(6)</strong> ensure that the Federal sentencing guidelines adequately meet the purposes of sentencing as set forth in section 3553(a)(2) of title 18, United States Code.</p></blockquote><p><strong>(c) Consultation.—</strong>In carrying out the review required under this section, the Commission shall consult with individuals or groups representing law enforcement, owners of trade secrets, victims of economic espionage offenses, the United States Department of Justice, the United States Department of Homeland Security, the United States Department of State and the Office of the United States Trade Representative.</p><p><strong>(d) Review.—</strong>Not later than 180 days after the date of enactment of this Act, the Commission shall complete its consideration and review under this section.”</p>\"}]\n\n\n//////////////////\n// WEBPACK FOOTER\n// ./src/data/appendix-b.json\n// module id = 337\n// module chunks = 9"],"sourceRoot":""}